{
    "apiVersion": "1.0",
    "swaggerVersion": "1.2",
    "basePath": "https://canvas.instructure.com/api",
    "resourcePath": "/discussion_topics",
    "produces": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/v1/courses/{course_id}/discussion_topics",
            "description": "Returns the paginated list of discussion topics for this course or group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List discussion topics",
                    "notes": "Returns the paginated list of discussion topics for this course or group.",
                    "nickname": "list_discussion_topics_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all_dates",
                                "sections",
                                "sections_user_count",
                                "overrides"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "order_by",
                            "description": "Determines the order of the discussion topic list. Defaults to \"position\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "position",
                                "recent_activity",
                                "title"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "locked",
                                "unlocked",
                                "pinned",
                                "unpinned"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "only_announcements",
                            "description": "Return announcements instead of discussion topics. Defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "filter_by",
                            "description": "The state of the discussion topic to return. Currently only supports unread state.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all",
                                "unread"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the discussion topics to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_context_module_locked_topics",
                            "description": "For students, exclude topics that are locked by module progression.\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "DiscussionTopic"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics",
            "description": "Returns the paginated list of discussion topics for this course or group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List discussion topics",
                    "notes": "Returns the paginated list of discussion topics for this course or group.",
                    "nickname": "list_discussion_topics_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all_dates",
                                "sections",
                                "sections_user_count",
                                "overrides"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "order_by",
                            "description": "Determines the order of the discussion topic list. Defaults to \"position\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "position",
                                "recent_activity",
                                "title"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "locked",
                                "unlocked",
                                "pinned",
                                "unpinned"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "only_announcements",
                            "description": "Return announcements instead of discussion topics. Defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "filter_by",
                            "description": "The state of the discussion topic to return. Currently only supports unread state.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all",
                                "unread"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the discussion topics to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_context_module_locked_topics",
                            "description": "For students, exclude topics that are locked by module progression.\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "DiscussionTopic"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics",
            "description": "Create an new discussion topic for the course or group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new discussion topic",
                    "notes": "Create an new discussion topic for the course or group.",
                    "nickname": "create_new_discussion_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "discussion_type",
                            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "side_comment",
                                "threaded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "published",
                            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "delayed_post_at",
                            "description": "If a timestamp is given, the topic will not be published until that time.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_rating",
                            "description": "Whether or not users can rate entries in this topic.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_enabled",
                            "description": "If true, the topic will have an associated podcast feed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_has_student_posts",
                            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "require_initial_post",
                            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment",
                            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object",
                            "type": "Assignment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_announcement",
                            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pinned",
                            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position_after",
                            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_category_id",
                            "description": "If present, the topic will become a group discussion assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "only_graders_can_rate",
                            "description": "If true, only graders will be allowed to rate entries.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sort_by_rating",
                            "description": "If true, entries will be sorted by rating.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "A multipart/form-data form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions.",
                            "type": "File",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "specific_sections",
                            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific to.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics",
            "description": "Create an new discussion topic for the course or group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new discussion topic",
                    "notes": "Create an new discussion topic for the course or group.",
                    "nickname": "create_new_discussion_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "discussion_type",
                            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "side_comment",
                                "threaded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "published",
                            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "delayed_post_at",
                            "description": "If a timestamp is given, the topic will not be published until that time.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_rating",
                            "description": "Whether or not users can rate entries in this topic.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_enabled",
                            "description": "If true, the topic will have an associated podcast feed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_has_student_posts",
                            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "require_initial_post",
                            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment",
                            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object",
                            "type": "Assignment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_announcement",
                            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pinned",
                            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position_after",
                            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_category_id",
                            "description": "If present, the topic will become a group discussion assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "only_graders_can_rate",
                            "description": "If true, only graders will be allowed to rate entries.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sort_by_rating",
                            "description": "If true, entries will be sorted by rating.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "A multipart/form-data form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions.",
                            "type": "File",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "specific_sections",
                            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific to.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}",
            "description": "Update an existing discussion topic for the course or group.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a topic",
                    "notes": "Update an existing discussion topic for the course or group.",
                    "nickname": "update_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "discussion_type",
                            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "side_comment",
                                "threaded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "published",
                            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "delayed_post_at",
                            "description": "If a timestamp is given, the topic will not be published until that time.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_enabled",
                            "description": "If true, the topic will have an associated podcast feed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_has_student_posts",
                            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "require_initial_post",
                            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment",
                            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object",
                            "type": "Assignment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_announcement",
                            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pinned",
                            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position_after",
                            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_category_id",
                            "description": "If present, the topic will become a group discussion assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_rating",
                            "description": "If true, users will be allowed to rate entries.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "only_graders_can_rate",
                            "description": "If true, only graders will be allowed to rate entries.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sort_by_rating",
                            "description": "If true, entries will be sorted by rating.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "specific_sections",
                            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}",
            "description": "Update an existing discussion topic for the course or group.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a topic",
                    "notes": "Update an existing discussion topic for the course or group.",
                    "nickname": "update_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "discussion_type",
                            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "side_comment",
                                "threaded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "published",
                            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "delayed_post_at",
                            "description": "If a timestamp is given, the topic will not be published until that time.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_enabled",
                            "description": "If true, the topic will have an associated podcast feed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "podcast_has_student_posts",
                            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "require_initial_post",
                            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment",
                            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object",
                            "type": "Assignment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_announcement",
                            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pinned",
                            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position_after",
                            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_category_id",
                            "description": "If present, the topic will become a group discussion assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_rating",
                            "description": "If true, users will be allowed to rate entries.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "only_graders_can_rate",
                            "description": "If true, only graders will be allowed to rate entries.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sort_by_rating",
                            "description": "If true, entries will be sorted by rating.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "specific_sections",
                            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}",
            "description": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a topic",
                    "notes": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
                    "nickname": "delete_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}",
            "description": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a topic",
                    "notes": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
                    "nickname": "delete_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/reorder",
            "description": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reorder pinned topics",
                    "notes": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
                    "nickname": "reorder_pinned_topics_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "order",
                            "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/reorder",
            "description": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reorder pinned topics",
                    "notes": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
                    "nickname": "reorder_pinned_topics_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "order",
                            "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}",
            "description": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an entry",
                    "notes": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
                    "nickname": "update_entry_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "The updated body of the entry.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}",
            "description": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an entry",
                    "notes": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
                    "nickname": "update_entry_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "The updated body of the entry.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}",
            "description": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an entry",
                    "notes": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
                    "nickname": "delete_entry_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}",
            "description": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an entry",
                    "notes": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
                    "nickname": "delete_entry_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}",
            "description": "Returns data on an individual discussion topic. See the List action for the response formatting.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single topic",
                    "notes": "Returns data on an individual discussion topic. See the List action for the response formatting.",
                    "nickname": "get_single_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all_dates",
                                "sections",
                                "sections_user_count",
                                "overrides"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}",
            "description": "Returns data on an individual discussion topic. See the List action for the response formatting.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single topic",
                    "notes": "Returns data on an individual discussion topic. See the List action for the response formatting.",
                    "nickname": "get_single_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all_dates",
                                "sections",
                                "sections_user_count",
                                "overrides"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/view",
            "description": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the full topic",
                    "notes": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
                    "nickname": "get_full_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/view",
            "description": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the full topic",
                    "notes": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
                    "nickname": "get_full_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries",
            "description": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Post an entry",
                    "notes": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
                    "nickname": "post_entry_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "The body of the entry.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries",
            "description": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Post an entry",
                    "notes": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
                    "nickname": "post_entry_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "The body of the entry.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/duplicate",
            "description": "Duplicate a discussion topic according to context (Course/Group)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Duplicate discussion topic",
                    "notes": "Duplicate a discussion topic according to context (Course/Group)",
                    "nickname": "duplicate_discussion_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "DiscussionTopic"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/duplicate",
            "description": "Duplicate a discussion topic according to context (Course/Group)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Duplicate discussion topic",
                    "notes": "Duplicate a discussion topic according to context (Course/Group)",
                    "nickname": "duplicate_discussion_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "DiscussionTopic"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries",
            "description": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List topic entries",
                    "notes": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
                    "nickname": "list_topic_entries_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique identifier for the author of the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "editor_id",
                            "description": "The unique user id of the person to last edit the entry, if different than user_id.",
                            "deprecated": false
                        },
                        {
                            "name": "user_name",
                            "description": "The name of the author of the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "message",
                            "description": "The content of the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "read_state",
                            "description": "The read state of the entry, \"read\" or \"unread\".",
                            "deprecated": false
                        },
                        {
                            "name": "forced_read_state",
                            "description": "Whether the read_state was forced (was set manually)",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The creation time of the entry, in ISO8601\nformat.",
                            "deprecated": false
                        },
                        {
                            "name": "updated_at",
                            "description": "The updated time of the entry, in ISO8601 format.",
                            "deprecated": false
                        },
                        {
                            "name": "attachment",
                            "description": "JSON representation of the attachment for the\nentry, if any. Present only if there is an attachment.",
                            "deprecated": false
                        },
                        {
                            "name": "attachments",
                            "description": "*Deprecated*. Same as attachment, but returned\nas a one-element array. Present only if there is an attachment.",
                            "deprecated": false
                        },
                        {
                            "name": "recent_replies",
                            "description": "The 10 most recent replies for the entry,\nnewest first. Present only if there is at least one reply.",
                            "deprecated": false
                        },
                        {
                            "name": "has_more_replies",
                            "description": "True if there are more than 10 replies for\nthe entry (i.e., not all were included in this response). Present only if\nthere is at least one reply.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries",
            "description": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List topic entries",
                    "notes": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
                    "nickname": "list_topic_entries_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique identifier for the author of the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "editor_id",
                            "description": "The unique user id of the person to last edit the entry, if different than user_id.",
                            "deprecated": false
                        },
                        {
                            "name": "user_name",
                            "description": "The name of the author of the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "message",
                            "description": "The content of the entry.",
                            "deprecated": false
                        },
                        {
                            "name": "read_state",
                            "description": "The read state of the entry, \"read\" or \"unread\".",
                            "deprecated": false
                        },
                        {
                            "name": "forced_read_state",
                            "description": "Whether the read_state was forced (was set manually)",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The creation time of the entry, in ISO8601\nformat.",
                            "deprecated": false
                        },
                        {
                            "name": "updated_at",
                            "description": "The updated time of the entry, in ISO8601 format.",
                            "deprecated": false
                        },
                        {
                            "name": "attachment",
                            "description": "JSON representation of the attachment for the\nentry, if any. Present only if there is an attachment.",
                            "deprecated": false
                        },
                        {
                            "name": "attachments",
                            "description": "*Deprecated*. Same as attachment, but returned\nas a one-element array. Present only if there is an attachment.",
                            "deprecated": false
                        },
                        {
                            "name": "recent_replies",
                            "description": "The 10 most recent replies for the entry,\nnewest first. Present only if there is at least one reply.",
                            "deprecated": false
                        },
                        {
                            "name": "has_more_replies",
                            "description": "True if there are more than 10 replies for\nthe entry (i.e., not all were included in this response). Present only if\nthere is at least one reply.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
            "description": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Post a reply",
                    "notes": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                    "nickname": "post_reply_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "The body of the entry.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
            "description": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Post a reply",
                    "notes": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                    "nickname": "post_reply_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "message",
                            "description": "The body of the entry.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
            "description": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List entry replies",
                    "notes": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
                    "nickname": "list_entry_replies_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique identifier for the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "editor_id",
                            "description": "The unique user id of the person to last edit the entry, if different than user_id.",
                            "deprecated": false
                        },
                        {
                            "name": "user_name",
                            "description": "The name of the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "message",
                            "description": "The content of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "read_state",
                            "description": "The read state of the entry, \"read\" or \"unread\".",
                            "deprecated": false
                        },
                        {
                            "name": "forced_read_state",
                            "description": "Whether the read_state was forced (was set manually)",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The creation time of the reply, in ISO8601\nformat.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
            "description": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List entry replies",
                    "notes": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
                    "nickname": "list_entry_replies_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique identifier for the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "editor_id",
                            "description": "The unique user id of the person to last edit the entry, if different than user_id.",
                            "deprecated": false
                        },
                        {
                            "name": "user_name",
                            "description": "The name of the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "message",
                            "description": "The content of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "read_state",
                            "description": "The read state of the entry, \"read\" or \"unread\".",
                            "deprecated": false
                        },
                        {
                            "name": "forced_read_state",
                            "description": "Whether the read_state was forced (was set manually)",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The creation time of the reply, in ISO8601\nformat.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list",
            "description": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List entries",
                    "notes": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                    "nickname": "list_entries_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ids",
                            "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique identifier for the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "user_name",
                            "description": "The name of the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "message",
                            "description": "The content of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "read_state",
                            "description": "The read state of the entry, \"read\" or \"unread\".",
                            "deprecated": false
                        },
                        {
                            "name": "forced_read_state",
                            "description": "Whether the read_state was forced (was set manually)",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The creation time of the reply, in ISO8601\nformat.",
                            "deprecated": false
                        },
                        {
                            "name": "deleted",
                            "description": "If the entry has been deleted, returns true. The\nuser_id, user_name, and message will not be returned for deleted entries.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list",
            "description": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List entries",
                    "notes": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                    "nickname": "list_entries_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ids",
                            "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique identifier for the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "user_name",
                            "description": "The name of the author of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "message",
                            "description": "The content of the reply.",
                            "deprecated": false
                        },
                        {
                            "name": "read_state",
                            "description": "The read state of the entry, \"read\" or \"unread\".",
                            "deprecated": false
                        },
                        {
                            "name": "forced_read_state",
                            "description": "Whether the read_state was forced (was set manually)",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The creation time of the reply, in ISO8601\nformat.",
                            "deprecated": false
                        },
                        {
                            "name": "deleted",
                            "description": "If the entry has been deleted, returns true. The\nuser_id, user_name, and message will not be returned for deleted entries.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/read",
            "description": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark topic as read",
                    "notes": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_topic_as_read_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/read",
            "description": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark topic as read",
                    "notes": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_topic_as_read_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/read",
            "description": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark topic as unread",
                    "notes": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_topic_as_unread_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/read",
            "description": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark topic as unread",
                    "notes": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_topic_as_unread_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all",
            "description": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark all entries as read",
                    "notes": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_all_entries_as_read_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "forced_read_state",
                            "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all",
            "description": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark all entries as read",
                    "notes": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_all_entries_as_read_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "forced_read_state",
                            "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all",
            "description": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark all entries as unread",
                    "notes": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_all_entries_as_unread_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "forced_read_state",
                            "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all",
            "description": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark all entries as unread",
                    "notes": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_all_entries_as_unread_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "forced_read_state",
                            "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
            "description": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark entry as read",
                    "notes": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_entry_as_read_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "forced_read_state",
                            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
            "description": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark entry as read",
                    "notes": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_entry_as_read_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "forced_read_state",
                            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
            "description": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark entry as unread",
                    "notes": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_entry_as_unread_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "forced_read_state",
                            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
            "description": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark entry as unread",
                    "notes": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_entry_as_unread_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "forced_read_state",
                            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating",
            "description": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Rate entry",
                    "notes": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "rate_entry_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rating",
                            "description": "A rating to set on this entry. Only 0 and 1 are accepted.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating",
            "description": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Rate entry",
                    "notes": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "rate_entry_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "entry_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rating",
                            "description": "A rating to set on this entry. Only 0 and 1 are accepted.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed",
            "description": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Subscribe to a topic",
                    "notes": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                    "nickname": "subscribe_to_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed",
            "description": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Subscribe to a topic",
                    "notes": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                    "nickname": "subscribe_to_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed",
            "description": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Unsubscribe from a topic",
                    "notes": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                    "nickname": "unsubscribe_from_topic_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed",
            "description": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Unsubscribe from a topic",
                    "notes": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                    "nickname": "unsubscribe_from_topic_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "topic_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/terms",
            "description": "Create a new enrollment term for the specified account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create enrollment term",
                    "notes": "Create a new enrollment term for the specified account.",
                    "nickname": "create_enrollment_term",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[name]",
                            "description": "The name of the term.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[start_at]",
                            "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[end_at]",
                            "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[sis_term_id]",
                            "description": "The unique SIS identifier for the term.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[overrides][enrollment_type][start_at]",
                            "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[overrides][enrollment_type][end_at]",
                            "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "EnrollmentTerm"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/terms/{id}",
            "description": "Update an existing enrollment term for the specified account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update enrollment term",
                    "notes": "Update an existing enrollment term for the specified account.",
                    "nickname": "update_enrollment_term",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[name]",
                            "description": "The name of the term.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[start_at]",
                            "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[end_at]",
                            "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[sis_term_id]",
                            "description": "The unique SIS identifier for the term.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[overrides][enrollment_type][start_at]",
                            "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term[overrides][enrollment_type][end_at]",
                            "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "EnrollmentTerm"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/terms/{id}",
            "description": "Delete the specified enrollment term.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete enrollment term",
                    "notes": "Delete the specified enrollment term.",
                    "nickname": "delete_enrollment_term",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "EnrollmentTerm"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/terms",
            "description": "An object with a paginated list of all of the terms in the account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List enrollment terms",
                    "notes": "An object with a paginated list of all of the terms in the account.",
                    "nickname": "list_enrollment_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "workflow_state",
                            "description": "If set, only returns terms that are in the given state.\nDefaults to 'active'.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "deleted",
                                "all"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"overrides\":: term start/end dates overridden for different enrollment types\n\"course_count\":: the number of courses in each term",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "overrides"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "EnrollmentTermsList"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/terms/{id}",
            "description": "Retrieves the details for an enrollment term in the account. Includes overrides by default.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve enrollment term",
                    "notes": "Retrieves the details for an enrollment term in the account. Includes overrides by default.",
                    "nickname": "retrieve_enrollment_term",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "EnrollmentTerm"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/enrollments",
            "description": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List enrollments",
                    "notes": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
                    "nickname": "list_enrollments_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. The following synthetic states are supported only when\nquerying a user's enrollments (either via user_id argument or via user\nenrollments endpoint): +current_and_invited+, +current_and_future+, +current_and_concluded+",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "creation_pending",
                                "deleted",
                                "rejected",
                                "completed",
                                "inactive",
                                "current_and_invited",
                                "current_and_future",
                                "current_and_concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\"\nis specified, the fields \"current_points\" and (if the caller has\npermissions to manage grades) \"unposted_current_points\" will be included\nin the \"grades\" hash for student enrollments.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "avatar_url",
                                "group_ids",
                                "locked",
                                "observed_users",
                                "can_be_removed",
                                "uuid",
                                "current_points"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_term_id",
                            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sis_account_id",
                            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_course_id",
                            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_section_id",
                            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_user_id",
                            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "created_for_sis_id",
                            "description": "If sis_user_id is present and created_for_sis_id is true, Returns only\nenrollments for the specified SIS ID(s).\nIf a user has two sis_id's, one enrollment may be created using one of the\ntwo ids. This would limit the enrollments returned from the endpoint to\nenrollments that were created from a sis_import with that sis_user_id",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Enrollment"
                    }
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/enrollments",
            "description": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List enrollments",
                    "notes": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
                    "nickname": "list_enrollments_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. The following synthetic states are supported only when\nquerying a user's enrollments (either via user_id argument or via user\nenrollments endpoint): +current_and_invited+, +current_and_future+, +current_and_concluded+",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "creation_pending",
                                "deleted",
                                "rejected",
                                "completed",
                                "inactive",
                                "current_and_invited",
                                "current_and_future",
                                "current_and_concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\"\nis specified, the fields \"current_points\" and (if the caller has\npermissions to manage grades) \"unposted_current_points\" will be included\nin the \"grades\" hash for student enrollments.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "avatar_url",
                                "group_ids",
                                "locked",
                                "observed_users",
                                "can_be_removed",
                                "uuid",
                                "current_points"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_term_id",
                            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sis_account_id",
                            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_course_id",
                            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_section_id",
                            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_user_id",
                            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "created_for_sis_id",
                            "description": "If sis_user_id is present and created_for_sis_id is true, Returns only\nenrollments for the specified SIS ID(s).\nIf a user has two sis_id's, one enrollment may be created using one of the\ntwo ids. This would limit the enrollments returned from the endpoint to\nenrollments that were created from a sis_import with that sis_user_id",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Enrollment"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/enrollments",
            "description": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List enrollments",
                    "notes": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
                    "nickname": "list_enrollments_users",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. The following synthetic states are supported only when\nquerying a user's enrollments (either via user_id argument or via user\nenrollments endpoint): +current_and_invited+, +current_and_future+, +current_and_concluded+",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "creation_pending",
                                "deleted",
                                "rejected",
                                "completed",
                                "inactive",
                                "current_and_invited",
                                "current_and_future",
                                "current_and_concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\"\nis specified, the fields \"current_points\" and (if the caller has\npermissions to manage grades) \"unposted_current_points\" will be included\nin the \"grades\" hash for student enrollments.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "avatar_url",
                                "group_ids",
                                "locked",
                                "observed_users",
                                "can_be_removed",
                                "uuid",
                                "current_points"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_term_id",
                            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sis_account_id",
                            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_course_id",
                            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_section_id",
                            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sis_user_id",
                            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "created_for_sis_id",
                            "description": "If sis_user_id is present and created_for_sis_id is true, Returns only\nenrollments for the specified SIS ID(s).\nIf a user has two sis_id's, one enrollment may be created using one of the\ntwo ids. This would limit the enrollments returned from the endpoint to\nenrollments that were created from a sis_import with that sis_user_id",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Enrollment"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/enrollments/{id}",
            "description": "Get an Enrollment object by Enrollment ID",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Enrollment by ID",
                    "notes": "Get an Enrollment object by Enrollment ID",
                    "nickname": "enrollment_by_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The ID of the enrollment object",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Enrollment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/enrollments",
            "description": "Create a new user enrollment for a course or section.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Enroll a user",
                    "notes": "Create a new user enrollment for a course or section.",
                    "nickname": "enroll_user_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[start_at]",
                            "description": "The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[end_at]",
                            "description": "The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[user_id]",
                            "description": "The ID of the user to be enrolled in the course.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[type]",
                            "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "StudentEnrollment",
                                "TeacherEnrollment",
                                "TaEnrollment",
                                "ObserverEnrollment",
                                "DesignerEnrollment"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[role]",
                            "description": "Assigns a custom course-level role to the user.",
                            "type": "Deprecated",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[role_id]",
                            "description": "Assigns a custom course-level role to the user.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[enrollment_state]",
                            "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "inactive"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[course_section_id]",
                            "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[limit_privileges_to_course_section]",
                            "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[notify]",
                            "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[self_enrollment_code]",
                            "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[self_enrolled]",
                            "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[associated_user_id]",
                            "description": "For an observer enrollment, the ID of a student to observe.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Enrollment"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/enrollments",
            "description": "Create a new user enrollment for a course or section.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Enroll a user",
                    "notes": "Create a new user enrollment for a course or section.",
                    "nickname": "enroll_user_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[start_at]",
                            "description": "The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[end_at]",
                            "description": "The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[user_id]",
                            "description": "The ID of the user to be enrolled in the course.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[type]",
                            "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "StudentEnrollment",
                                "TeacherEnrollment",
                                "TaEnrollment",
                                "ObserverEnrollment",
                                "DesignerEnrollment"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[role]",
                            "description": "Assigns a custom course-level role to the user.",
                            "type": "Deprecated",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[role_id]",
                            "description": "Assigns a custom course-level role to the user.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[enrollment_state]",
                            "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "inactive"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[course_section_id]",
                            "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[limit_privileges_to_course_section]",
                            "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[notify]",
                            "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[self_enrollment_code]",
                            "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[self_enrolled]",
                            "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment[associated_user_id]",
                            "description": "For an observer enrollment, the ID of a student to observe.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Enrollment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/enrollments/{id}",
            "description": "Conclude, deactivate, or delete an enrollment. If the +task+ argument isn't given, the enrollment\nwill be concluded.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Conclude, deactivate, or delete an enrollment",
                    "notes": "Conclude, deactivate, or delete an enrollment. If the +task+ argument isn't given, the enrollment\nwill be concluded.",
                    "nickname": "conclude_deactivate_or_delete_enrollment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "task",
                            "description": "The action to take on the enrollment.\nWhen inactive, a user will still appear in the course roster to admins, but be unable to participate.\n(\"inactivate\" and \"deactivate\" are equivalent tasks)",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "conclude",
                                "delete",
                                "inactivate",
                                "deactivate"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Enrollment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/enrollments/{id}/accept",
            "description": "accepts a pending course invitation for the current user",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Accept Course Invitation",
                    "notes": "accepts a pending course invitation for the current user",
                    "nickname": "accept_course_invitation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/enrollments/{id}/reject",
            "description": "rejects a pending course invitation for the current user",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reject Course Invitation",
                    "notes": "rejects a pending course invitation for the current user",
                    "nickname": "reject_course_invitation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/enrollments/{id}/reactivate",
            "description": "Activates an inactive enrollment",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Re-activate an enrollment",
                    "notes": "Activates an inactive enrollment",
                    "nickname": "re_activate_enrollment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Enrollment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/users/{user_id}/last_attended",
            "description": "",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Adds last attended date to student enrollment in course",
                    "notes": "",
                    "nickname": "adds_last_attended_date_to_student_enrollment_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Enrollment"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/eportfolios",
            "description": "Get a list of all ePortfolios for the specified user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all ePortfolios for a User",
                    "notes": "Get a list of all ePortfolios for the specified user.",
                    "nickname": "get_all_eportfolios_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "deleted:: Include deleted ePortfolios. Only available to admins who can\nmoderate_user_content.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "deleted"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ePortfolio"
                    }
                }
            ]
        },
        {
            "path": "/v1/eportfolios/{id}",
            "description": "Get details for a single ePortfolio.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get an ePortfolio",
                    "notes": "Get details for a single ePortfolio.",
                    "nickname": "get_eportfolio",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ePortfolio"
                }
            ]
        },
        {
            "path": "/v1/eportfolios/{id}",
            "description": "Mark an ePortfolio as deleted.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an ePortfolio",
                    "notes": "Mark an ePortfolio as deleted.",
                    "nickname": "delete_eportfolio",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ePortfolio"
                }
            ]
        },
        {
            "path": "/v1/eportfolios/{eportfolio_id}/pages",
            "description": "Get details for the pages of an ePortfolio",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get ePortfolio Pages",
                    "notes": "Get details for the pages of an ePortfolio",
                    "nickname": "get_eportfolio_pages",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "eportfolio_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ePortfolioPage"
                    }
                }
            ]
        },
        {
            "path": "/v1/eportfolios/{eportfolio_id}/moderate",
            "description": "Update the spam_status of an eportfolio. Only available to admins who can\nmoderate_user_content.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Moderate an ePortfolio",
                    "notes": "Update the spam_status of an eportfolio. Only available to admins who can\nmoderate_user_content.",
                    "nickname": "moderate_eportfolio",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "eportfolio_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "spam_status",
                            "description": "The spam status for the ePortfolio",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "marked_as_spam",
                                "marked_as_safe"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ePortfolio"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/eportfolios",
            "description": "Update the spam_status for all active eportfolios of a user. Only available to\nadmins who can moderate_user_content.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Moderate all ePortfolios for a User",
                    "notes": "Update the spam_status for all active eportfolios of a user. Only available to\nadmins who can moderate_user_content.",
                    "nickname": "moderate_all_eportfolios_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "spam_status",
                            "description": "The spam status for all the ePortfolios",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "marked_as_spam",
                                "marked_as_safe"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/eportfolios/{eportfolio_id}/restore",
            "description": "Restore an ePortfolio back to active that was previously deleted. Only\navailable to admins who can moderate_user_content.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Restore a deleted ePortfolio",
                    "notes": "Restore an ePortfolio back to active that was previously deleted. Only\navailable to admins who can moderate_user_content.",
                    "nickname": "restore_deleted_eportfolio",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "eportfolio_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ePortfolio"
                }
            ]
        },
        {
            "path": "/v1/epub_exports",
            "description": "A paginated list of all courses a user is actively participating in, and\nthe latest ePub export associated with the user & course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List courses with their latest ePub export",
                    "notes": "A paginated list of all courses a user is actively participating in, and\nthe latest ePub export associated with the user & course.",
                    "nickname": "list_courses_with_their_latest_epub_export",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CourseEpubExport"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/epub_exports",
            "description": "Begin an ePub export for a course.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The export's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:EpubExportsController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create ePub Export",
                    "notes": "Begin an ePub export for a course.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The export's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:EpubExportsController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                    "nickname": "create_epub_export",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "EpubExport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/epub_exports/{id}",
            "description": "Get information about a single ePub export.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show ePub export",
                    "notes": "Get information about a single ePub export.",
                    "nickname": "show_epub_export",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "EpubExport"
                }
            ]
        },
        {
            "path": "/v1/error_reports",
            "description": "Create a new error report documenting an experienced problem\n\nPerforms the same action as when a user uses the \"help -> report a problem\"\ndialog.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create Error Report",
                    "notes": "Create a new error report documenting an experienced problem\n\nPerforms the same action as when a user uses the \"help -> report a problem\"\ndialog.",
                    "nickname": "create_error_report",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "error[subject]",
                            "description": "The summary of the problem",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "error[url]",
                            "description": "URL from which the report was issued",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "error[email]",
                            "description": "Email address for the reporting user",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "error[comments]",
                            "description": "The long version of the story from the user one what they experienced",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "error[http_env]",
                            "description": "A collection of metadata about the users' environment.  If not provided,\ncanvas will collect it based on information found in the request.\n(Doesn't have to be HTTPENV info, could be anything JSON object that can be\nserialized as a hash, a mobile app might include relevant metadata for\nitself)",
                            "type": "SerializedHash",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_tools",
            "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List external tools",
                    "notes": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
                    "nickname": "list_external_tools_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the tools to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "selectable",
                            "description": "If true, then only tools that are meant to be selectable are returned",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_parents",
                            "description": "If true, then include tools installed in all accounts above the current context",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools",
            "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List external tools",
                    "notes": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
                    "nickname": "list_external_tools_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the tools to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "selectable",
                            "description": "If true, then only tools that are meant to be selectable are returned",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_parents",
                            "description": "If true, then include tools installed in all accounts above the current context",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/external_tools",
            "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List external tools",
                    "notes": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
                    "nickname": "list_external_tools_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the tools to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "selectable",
                            "description": "If true, then only tools that are meant to be selectable are returned",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_parents",
                            "description": "If true, then include tools installed in all accounts above the current context",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_tools/sessionless_launch",
            "description": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a sessionless launch url for an external tool.",
                    "notes": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
                    "nickname": "get_sessionless_launch_url_for_external_tool_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "id",
                            "description": "The external id of the tool to launch.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "url",
                            "description": "The LTI launch url for the external tool.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_id",
                            "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "module_item_id",
                            "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "launch_type",
                            "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assessment",
                                "module_item"
                            ]
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The id for the external tool to be launched.",
                            "deprecated": false
                        },
                        {
                            "name": "name",
                            "description": "The name of the external tool to be launched.",
                            "deprecated": false
                        },
                        {
                            "name": "url",
                            "description": "The url to load to launch the external tool for the user.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools/sessionless_launch",
            "description": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a sessionless launch url for an external tool.",
                    "notes": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
                    "nickname": "get_sessionless_launch_url_for_external_tool_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "id",
                            "description": "The external id of the tool to launch.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "url",
                            "description": "The LTI launch url for the external tool.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_id",
                            "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "module_item_id",
                            "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "launch_type",
                            "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assessment",
                                "module_item"
                            ]
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The id for the external tool to be launched.",
                            "deprecated": false
                        },
                        {
                            "name": "name",
                            "description": "The name of the external tool to be launched.",
                            "deprecated": false
                        },
                        {
                            "name": "url",
                            "description": "The url to load to launch the external tool for the user.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_tools/{external_tool_id}",
            "description": "Returns the specified external tool.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single external tool",
                    "notes": "Returns the specified external tool.",
                    "nickname": "get_single_external_tool_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_tool_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the tool",
                            "deprecated": false
                        },
                        {
                            "name": "domain",
                            "description": "The domain to match links against",
                            "deprecated": false
                        },
                        {
                            "name": "url",
                            "description": "The url to match links against",
                            "deprecated": false
                        },
                        {
                            "name": "consumer_key",
                            "description": "The consumer key used by the tool (The associated shared secret is not returned)",
                            "deprecated": false
                        },
                        {
                            "name": "name",
                            "description": "The name of the tool",
                            "deprecated": false
                        },
                        {
                            "name": "description",
                            "description": "A description of the tool",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "Timestamp of creation",
                            "deprecated": false
                        },
                        {
                            "name": "updated_at",
                            "description": "Timestamp of last update",
                            "deprecated": false
                        },
                        {
                            "name": "privacy_level",
                            "description": "What information to send to the external tool, \"anonymous\", \"name_only\", \"public\"",
                            "deprecated": false
                        },
                        {
                            "name": "custom_fields",
                            "description": "Custom fields that will be sent to the tool consumer",
                            "deprecated": false
                        },
                        {
                            "name": "is_rce_favorite",
                            "description": "Boolean determining whether this tool should be in a preferred location in the RCE.",
                            "deprecated": false
                        },
                        {
                            "name": "account_navigation",
                            "description": "The configuration for account navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "assignment_selection",
                            "description": "The configuration for assignment selection links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "course_home_sub_navigation",
                            "description": "The configuration for course home navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "course_navigation",
                            "description": "The configuration for course navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "editor_button",
                            "description": "The configuration for a WYSIWYG editor button (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "homework_submission",
                            "description": "The configuration for homework submission selection (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "link_selection",
                            "description": "The configuration for link selection (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "migration_selection",
                            "description": "The configuration for migration selection (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "resource_selection",
                            "description": "The configuration for a resource selector in modules (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "tool_configuration",
                            "description": "The configuration for a tool configuration link (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "user_navigation",
                            "description": "The configuration for user navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "selection_width",
                            "description": "The pixel width of the iFrame that the tool will be rendered in",
                            "deprecated": false
                        },
                        {
                            "name": "selection_height",
                            "description": "The pixel height of the iFrame that the tool will be rendered in",
                            "deprecated": false
                        },
                        {
                            "name": "icon_url",
                            "description": "The url for the tool icon",
                            "deprecated": false
                        },
                        {
                            "name": "not_selectable",
                            "description": "whether the tool is not selectable from assignment and modules",
                            "deprecated": false
                        },
                        {
                            "name": "deployment_id",
                            "description": "The unique identifier for the deployment of the tool",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools/{external_tool_id}",
            "description": "Returns the specified external tool.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single external tool",
                    "notes": "Returns the specified external tool.",
                    "nickname": "get_single_external_tool_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_tool_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the tool",
                            "deprecated": false
                        },
                        {
                            "name": "domain",
                            "description": "The domain to match links against",
                            "deprecated": false
                        },
                        {
                            "name": "url",
                            "description": "The url to match links against",
                            "deprecated": false
                        },
                        {
                            "name": "consumer_key",
                            "description": "The consumer key used by the tool (The associated shared secret is not returned)",
                            "deprecated": false
                        },
                        {
                            "name": "name",
                            "description": "The name of the tool",
                            "deprecated": false
                        },
                        {
                            "name": "description",
                            "description": "A description of the tool",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "Timestamp of creation",
                            "deprecated": false
                        },
                        {
                            "name": "updated_at",
                            "description": "Timestamp of last update",
                            "deprecated": false
                        },
                        {
                            "name": "privacy_level",
                            "description": "What information to send to the external tool, \"anonymous\", \"name_only\", \"public\"",
                            "deprecated": false
                        },
                        {
                            "name": "custom_fields",
                            "description": "Custom fields that will be sent to the tool consumer",
                            "deprecated": false
                        },
                        {
                            "name": "is_rce_favorite",
                            "description": "Boolean determining whether this tool should be in a preferred location in the RCE.",
                            "deprecated": false
                        },
                        {
                            "name": "account_navigation",
                            "description": "The configuration for account navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "assignment_selection",
                            "description": "The configuration for assignment selection links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "course_home_sub_navigation",
                            "description": "The configuration for course home navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "course_navigation",
                            "description": "The configuration for course navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "editor_button",
                            "description": "The configuration for a WYSIWYG editor button (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "homework_submission",
                            "description": "The configuration for homework submission selection (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "link_selection",
                            "description": "The configuration for link selection (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "migration_selection",
                            "description": "The configuration for migration selection (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "resource_selection",
                            "description": "The configuration for a resource selector in modules (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "tool_configuration",
                            "description": "The configuration for a tool configuration link (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "user_navigation",
                            "description": "The configuration for user navigation links (see create API for values)",
                            "deprecated": false
                        },
                        {
                            "name": "selection_width",
                            "description": "The pixel width of the iFrame that the tool will be rendered in",
                            "deprecated": false
                        },
                        {
                            "name": "selection_height",
                            "description": "The pixel height of the iFrame that the tool will be rendered in",
                            "deprecated": false
                        },
                        {
                            "name": "icon_url",
                            "description": "The url for the tool icon",
                            "deprecated": false
                        },
                        {
                            "name": "not_selectable",
                            "description": "whether the tool is not selectable from assignment and modules",
                            "deprecated": false
                        },
                        {
                            "name": "deployment_id",
                            "description": "The unique identifier for the deployment of the tool",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_tools",
            "description": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.\nIf a client ID is supplied canvas will attempt to create a context external\ntool using the LTI 1.3 standard.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an external tool",
                    "notes": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.\nIf a client ID is supplied canvas will attempt to create a context external\ntool using the LTI 1.3 standard.",
                    "nickname": "create_external_tool_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "client_id",
                            "description": "The client id is attached to the developer key.\nIf supplied all other parameters are unnecessary and will be ignored",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the tool",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "privacy_level",
                            "description": "What information to send to the external tool.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "anonymous",
                                "name_only",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "consumer_key",
                            "description": "The consumer key for the external tool",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "shared_secret",
                            "description": "The shared secret with the external tool",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "A description of the tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "domain",
                            "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "icon_url",
                            "description": "The url of the icon to show for this tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "text",
                            "description": "The default text to show for this tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "custom_fields[field_name]",
                            "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_rce_favorite",
                            "description": "(Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and\n{api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites})\nWhether this tool should appear in a preferred location in the RCE.\nThis only applies to tools in root account contexts that have an editor\nbutton placement.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[url]",
                            "description": "The url of the external tool for account navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[text]",
                            "description": "The text that will show on the left-tab in the account navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[selection_width]",
                            "description": "The width of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[selection_height]",
                            "description": "The height of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[display_type]",
                            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[url]",
                            "description": "The url of the external tool for user navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[text]",
                            "description": "The text that will show on the left-tab in the user navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[visibility]",
                            "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "admins",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[url]",
                            "description": "The url of the external tool for right-side course home navigation menu",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[text]",
                            "description": "The text that will show on the right-side course home navigation menu",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[icon_url]",
                            "description": "The url of the icon to show in the right-side course home navigation menu",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[text]",
                            "description": "The text that will show on the left-tab in the course navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[visibility]",
                            "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, \"public\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "admins",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[windowTarget]",
                            "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "_blank",
                                "_self"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[default]",
                            "description": "If set to \"disabled\" the tool will not appear in the course navigation\nuntil a teacher explicitly enables it.\n\nIf set to \"enabled\" the tool will appear in the course navigation\nwithout requiring a teacher to explicitly enable it.\n\ndefaults to \"enabled\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "disabled",
                                "enabled"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[display_type]",
                            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[icon_url]",
                            "description": "The url of the icon to show in the WYSIWYG editor",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[selection_width]",
                            "description": "The width of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[selection_height]",
                            "description": "The height of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[text]",
                            "description": "The text that will show on the homework submission tab",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[text]",
                            "description": "The text that will show for the link selection text",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "migration_selection[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "migration_selection[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "migration_selection[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[prefer_sis_email]",
                            "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[enabled]",
                            "description": "Set this to enable this feature. If set to false,\nnot_selectable must also be set to true in order to hide this tool\nfrom the selection UI in modules and assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[icon_url]",
                            "description": "The url of the icon to show in the module external tool list",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[selection_width]",
                            "description": "The width of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[selection_height]",
                            "description": "The height of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "config_type",
                            "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "config_xml",
                            "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "config_url",
                            "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "not_selectable",
                            "description": "Default: false. If set to true, and if resource_selection is set to false,\nthe tool won't show up in the external tool\nselection UI in modules and assignments",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "oauth_compliant",
                            "description": "Default: false, if set to true LTI query params will not be copied to the\npost body.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools",
            "description": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.\nIf a client ID is supplied canvas will attempt to create a context external\ntool using the LTI 1.3 standard.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an external tool",
                    "notes": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.\nIf a client ID is supplied canvas will attempt to create a context external\ntool using the LTI 1.3 standard.",
                    "nickname": "create_external_tool_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "client_id",
                            "description": "The client id is attached to the developer key.\nIf supplied all other parameters are unnecessary and will be ignored",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the tool",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "privacy_level",
                            "description": "What information to send to the external tool.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "anonymous",
                                "name_only",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "consumer_key",
                            "description": "The consumer key for the external tool",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "shared_secret",
                            "description": "The shared secret with the external tool",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "A description of the tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "domain",
                            "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "icon_url",
                            "description": "The url of the icon to show for this tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "text",
                            "description": "The default text to show for this tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "custom_fields[field_name]",
                            "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_rce_favorite",
                            "description": "(Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and\n{api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites})\nWhether this tool should appear in a preferred location in the RCE.\nThis only applies to tools in root account contexts that have an editor\nbutton placement.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[url]",
                            "description": "The url of the external tool for account navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[text]",
                            "description": "The text that will show on the left-tab in the account navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[selection_width]",
                            "description": "The width of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[selection_height]",
                            "description": "The height of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_navigation[display_type]",
                            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[url]",
                            "description": "The url of the external tool for user navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[text]",
                            "description": "The text that will show on the left-tab in the user navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_navigation[visibility]",
                            "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "admins",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[url]",
                            "description": "The url of the external tool for right-side course home navigation menu",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[text]",
                            "description": "The text that will show on the right-side course home navigation menu",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_home_sub_navigation[icon_url]",
                            "description": "The url of the icon to show in the right-side course home navigation menu",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[text]",
                            "description": "The text that will show on the left-tab in the course navigation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[visibility]",
                            "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, \"public\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "admins",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[windowTarget]",
                            "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "_blank",
                                "_self"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[default]",
                            "description": "If set to \"disabled\" the tool will not appear in the course navigation\nuntil a teacher explicitly enables it.\n\nIf set to \"enabled\" the tool will appear in the course navigation\nwithout requiring a teacher to explicitly enable it.\n\ndefaults to \"enabled\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "disabled",
                                "enabled"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course_navigation[display_type]",
                            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[icon_url]",
                            "description": "The url of the icon to show in the WYSIWYG editor",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[selection_width]",
                            "description": "The width of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[selection_height]",
                            "description": "The height of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "editor_button[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[text]",
                            "description": "The text that will show on the homework submission tab",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "homework_submission[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[text]",
                            "description": "The text that will show for the link selection text",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "link_selection[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "migration_selection[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "migration_selection[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "migration_selection[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[enabled]",
                            "description": "Set this to enable this feature",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[message_type]",
                            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tool_configuration[prefer_sis_email]",
                            "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[url]",
                            "description": "The url of the external tool",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[enabled]",
                            "description": "Set this to enable this feature. If set to false,\nnot_selectable must also be set to true in order to hide this tool\nfrom the selection UI in modules and assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[icon_url]",
                            "description": "The url of the icon to show in the module external tool list",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[selection_width]",
                            "description": "The width of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resource_selection[selection_height]",
                            "description": "The height of the dialog the tool is launched in",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "config_type",
                            "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "config_xml",
                            "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "config_url",
                            "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "not_selectable",
                            "description": "Default: false. If set to true, and if resource_selection is set to false,\nthe tool won't show up in the external tool\nselection UI in modules and assignments",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "oauth_compliant",
                            "description": "Default: false, if set to true LTI query params will not be copied to the\npost body.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_tools/{external_tool_id}",
            "description": "Update the specified external tool. Uses same parameters as create",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an external tool",
                    "notes": "Update the specified external tool. Uses same parameters as create",
                    "nickname": "edit_external_tool_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_tool_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools/{external_tool_id}",
            "description": "Update the specified external tool. Uses same parameters as create",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an external tool",
                    "notes": "Update the specified external tool. Uses same parameters as create",
                    "nickname": "edit_external_tool_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_tool_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_tools/{external_tool_id}",
            "description": "Remove the specified external tool",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an external tool",
                    "notes": "Remove the specified external tool",
                    "nickname": "delete_external_tool_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_tool_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools/{external_tool_id}",
            "description": "Remove the specified external tool",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an external tool",
                    "notes": "Remove the specified external tool",
                    "nickname": "delete_external_tool_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_tool_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools/rce_favorites/{id}",
            "description": "Add the specified editor_button external tool to a preferred location in the RCE\nfor courses in the given account and its subaccounts (if the subaccounts\nhaven't set their own RCE Favorites). Cannot set more than 2 RCE Favorites.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add tool to RCE Favorites",
                    "notes": "Add the specified editor_button external tool to a preferred location in the RCE\nfor courses in the given account and its subaccounts (if the subaccounts\nhaven't set their own RCE Favorites). Cannot set more than 2 RCE Favorites.",
                    "nickname": "add_tool_to_rce_favorites",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/external_tools/rce_favorites/{id}",
            "description": "Remove the specified external tool from a preferred location in the RCE\nfor the given account",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove tool from RCE Favorites",
                    "notes": "Remove the specified external tool from a preferred location in the RCE\nfor the given account",
                    "nickname": "remove_tool_from_rce_favorites",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/external_tools/visible_course_nav_tools",
            "description": "Get a list of external tools with the course_navigation placement that have not been hidden in\ncourse settings and whose visibility settings apply to the requesting user. These tools are the\nsame that appear in the course navigation.\n\nThe response format is the same as for List external tools, but with additional context_id and\ncontext_name fields on each element in the array.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get visible course navigation tools",
                    "notes": "Get a list of external tools with the course_navigation placement that have not been hidden in\ncourse settings and whose visibility settings apply to the requesting user. These tools are the\nsame that appear in the course navigation.\n\nThe response format is the same as for List external tools, but with additional context_id and\ncontext_name fields on each element in the array.",
                    "nickname": "get_visible_course_navigation_tools",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context_codes to retrieve visible course nav tools for (for example, +course_123+). Only\ncourses are presently supported.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "context_id",
                            "description": "The unique identifier of the associated context",
                            "deprecated": false
                        },
                        {
                            "name": "context_name",
                            "description": "The name of the associated context",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_tools/visible_course_nav_tools",
            "description": "Get a list of external tools with the course_navigation placement that have not been hidden in\ncourse settings and whose visibility settings apply to the requesting user. These tools are the\nsame that appear in the course navigation.\n\nThe response format is the same as Get visible course navigation tools.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get visible course navigation tools for a single course",
                    "notes": "Get a list of external tools with the course_navigation placement that have not been hidden in\ncourse settings and whose visibility settings apply to the requesting user. These tools are the\nsame that appear in the course navigation.\n\nThe response format is the same as Get visible course navigation tools.",
                    "nickname": "get_visible_course_navigation_tools_for_single_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/courses",
            "description": "Retrieve the paginated list of favorite courses for the current user. If the user has not chosen\nany favorites, then a selection of currently enrolled courses will be returned.\n\nSee the {api:CoursesController#index List courses API} for details on accepted include[] parameters.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List favorite courses",
                    "notes": "Retrieve the paginated list of favorite courses for the current user. If the user has not chosen\nany favorites, then a selection of currently enrolled courses will be returned.\n\nSee the {api:CoursesController#index List courses API} for details on accepted include[] parameters.",
                    "nickname": "list_favorite_courses",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "exclude_blueprint_courses",
                            "description": "When set, only return courses that are not configured as blueprint courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/groups",
            "description": "Retrieve the paginated list of favorite groups for the current user. If the user has not chosen\nany favorites, then a selection of groups that the user is a member of will be returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List favorite groups",
                    "notes": "Retrieve the paginated list of favorite groups for the current user. If the user has not chosen\nany favorites, then a selection of groups that the user is a member of will be returned.",
                    "nickname": "list_favorite_groups",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Group"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/courses/{id}",
            "description": "Add a course to the current user's favorites.  If the course is already\nin the user's favorites, nothing happens. Canvas for Elementary subject\nand homeroom courses can be added to favorites, but this has no effect in\nthe UI.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add course to favorites",
                    "notes": "Add a course to the current user's favorites.  If the course is already\nin the user's favorites, nothing happens. Canvas for Elementary subject\nand homeroom courses can be added to favorites, but this has no effect in\nthe UI.",
                    "nickname": "add_course_to_favorites",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The ID or SIS ID of the course to add.  The current user must be\nregistered in the course.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Favorite"
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/groups/{id}",
            "description": "Add a group to the current user's favorites.  If the group is already\nin the user's favorites, nothing happens.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add group to favorites",
                    "notes": "Add a group to the current user's favorites.  If the group is already\nin the user's favorites, nothing happens.",
                    "nickname": "add_group_to_favorites",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The ID or SIS ID of the group to add.  The current user must be\na member of the group.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Favorite"
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/courses/{id}",
            "description": "Remove a course from the current user's favorites.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove course from favorites",
                    "notes": "Remove a course from the current user's favorites.",
                    "nickname": "remove_course_from_favorites",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "the ID or SIS ID of the course to remove",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Favorite"
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/groups/{id}",
            "description": "Remove a group from the current user's favorites.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove group from favorites",
                    "notes": "Remove a group from the current user's favorites.",
                    "nickname": "remove_group_from_favorites",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "the ID or SIS ID of the group to remove",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Favorite"
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/courses",
            "description": "Reset the current user's course favorites to the default\nautomatically generated list of enrolled courses",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Reset course favorites",
                    "notes": "Reset the current user's course favorites to the default\nautomatically generated list of enrolled courses",
                    "nickname": "reset_course_favorites",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/favorites/groups",
            "description": "Reset the current user's group favorites to the default\nautomatically generated list of enrolled group",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Reset group favorites",
                    "notes": "Reset the current user's group favorites to the default\nautomatically generated list of enrolled group",
                    "nickname": "reset_group_favorites",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/features",
            "description": "A paginated list of all features that apply to a given Account, Course, or User.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List features",
                    "notes": "A paginated list of all features that apply to a given Account, Course, or User.",
                    "nickname": "list_features_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Feature"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/features",
            "description": "A paginated list of all features that apply to a given Account, Course, or User.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List features",
                    "notes": "A paginated list of all features that apply to a given Account, Course, or User.",
                    "nickname": "list_features_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Feature"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/features",
            "description": "A paginated list of all features that apply to a given Account, Course, or User.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List features",
                    "notes": "A paginated list of all features that apply to a given Account, Course, or User.",
                    "nickname": "list_features_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Feature"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/features/enabled",
            "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List enabled features",
                    "notes": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
                    "nickname": "list_enabled_features_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/features/enabled",
            "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List enabled features",
                    "notes": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
                    "nickname": "list_enabled_features_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/features/enabled",
            "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List enabled features",
                    "notes": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
                    "nickname": "list_enabled_features_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/features/environment",
            "description": "Return a hash of global feature options that pertain to the\nCanvas user interface. This is the same information supplied to the\nweb interface as +ENV.FEATURES+.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List environment features",
                    "notes": "Return a hash of global feature options that pertain to the\nCanvas user interface. This is the same information supplied to the\nweb interface as +ENV.FEATURES+.",
                    "nickname": "list_environment_features",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/features/flags/{feature}",
            "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get feature flag",
                    "notes": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
                    "nickname": "get_feature_flag_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/features/flags/{feature}",
            "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get feature flag",
                    "notes": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
                    "nickname": "get_feature_flag_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/features/flags/{feature}",
            "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get feature flag",
                    "notes": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
                    "nickname": "get_feature_flag_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/features/flags/{feature}",
            "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set feature flag",
                    "notes": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
                    "nickname": "set_feature_flag_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "state",
                            "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "off",
                                "allowed",
                                "on"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/features/flags/{feature}",
            "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set feature flag",
                    "notes": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
                    "nickname": "set_feature_flag_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "state",
                            "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "off",
                                "allowed",
                                "on"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/features/flags/{feature}",
            "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set feature flag",
                    "notes": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
                    "nickname": "set_feature_flag_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "state",
                            "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "off",
                                "allowed",
                                "on"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/features/flags/{feature}",
            "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove feature flag",
                    "notes": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
                    "nickname": "remove_feature_flag_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/features/flags/{feature}",
            "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove feature flag",
                    "notes": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
                    "nickname": "remove_feature_flag_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/features/flags/{feature}",
            "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove feature flag",
                    "notes": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
                    "nickname": "remove_feature_flag_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "feature",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "FeatureFlag"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/files/quota",
            "description": "Returns the total and used storage quota for the course, group, or user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get quota information",
                    "notes": "Returns the total and used storage quota for the course, group, or user.",
                    "nickname": "get_quota_information_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/files/quota",
            "description": "Returns the total and used storage quota for the course, group, or user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get quota information",
                    "notes": "Returns the total and used storage quota for the course, group, or user.",
                    "nickname": "get_quota_information_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/files/quota",
            "description": "Returns the total and used storage quota for the course, group, or user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get quota information",
                    "notes": "Returns the total and used storage quota for the course, group, or user.",
                    "nickname": "get_quota_information_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/files",
            "description": "Returns the paginated list of files for the folder or course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List files",
                    "notes": "Returns the paginated list of files for the folder or course.",
                    "nickname": "list_files_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "content_types",
                            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_content_types",
                            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the files to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "only",
                            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "name",
                                "size",
                                "created_at",
                                "updated_at",
                                "content_type",
                                "user"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The sorting order. Defaults to 'asc'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "File"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/files",
            "description": "Returns the paginated list of files for the folder or course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List files",
                    "notes": "Returns the paginated list of files for the folder or course.",
                    "nickname": "list_files_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "content_types",
                            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_content_types",
                            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the files to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "only",
                            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "name",
                                "size",
                                "created_at",
                                "updated_at",
                                "content_type",
                                "user"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The sorting order. Defaults to 'asc'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "File"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/files",
            "description": "Returns the paginated list of files for the folder or course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List files",
                    "notes": "Returns the paginated list of files for the folder or course.",
                    "nickname": "list_files_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "content_types",
                            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_content_types",
                            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the files to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "only",
                            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "name",
                                "size",
                                "created_at",
                                "updated_at",
                                "content_type",
                                "user"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The sorting order. Defaults to 'asc'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "File"
                    }
                }
            ]
        },
        {
            "path": "/v1/folders/{id}/files",
            "description": "Returns the paginated list of files for the folder or course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List files",
                    "notes": "Returns the paginated list of files for the folder or course.",
                    "nickname": "list_files_folders",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "content_types",
                            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_content_types",
                            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the files to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "only",
                            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "name",
                                "size",
                                "created_at",
                                "updated_at",
                                "content_type",
                                "user"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The sorting order. Defaults to 'asc'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "File"
                    }
                }
            ]
        },
        {
            "path": "/v1/files/{id}/public_url",
            "description": "Determine the URL that should be used for inline preview of the file.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get public inline preview url",
                    "notes": "Determine the URL that should be used for inline preview of the file.",
                    "nickname": "get_public_inline_preview_url",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "submission_id",
                            "description": "The id of the submission the file is associated with.  Provide this argument to gain access to a file\nthat has been submitted to an assignment (Canvas will verify that the file belongs to the submission\nand the calling user has rights to view the submission).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/files/{id}",
            "description": "Returns the standard attachment json object",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get file",
                    "notes": "Returns the standard attachment json object",
                    "nickname": "get_file_files",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_type",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_id",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/files/{id}",
            "description": "Returns the standard attachment json object",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get file",
                    "notes": "Returns the standard attachment json object",
                    "nickname": "get_file_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_type",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_id",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/files/{id}",
            "description": "Returns the standard attachment json object",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get file",
                    "notes": "Returns the standard attachment json object",
                    "nickname": "get_file_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_type",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_id",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/files/{id}",
            "description": "Returns the standard attachment json object",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get file",
                    "notes": "Returns the standard attachment json object",
                    "nickname": "get_file_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_type",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "replacement_chain_context_id",
                            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/files/file_ref/{migration_id}",
            "description": "Get information about a file from a course copy file reference",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Translate file reference",
                    "notes": "Get information about a file from a course copy file reference",
                    "nickname": "translate_file_reference",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "migration_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/files/{id}",
            "description": "Update some settings on the specified file",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update file",
                    "notes": "Update some settings on the specified file",
                    "nickname": "update_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The new display name of the file, with a limit of 255 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_id",
                            "description": "The id of the folder to move this file into.\nThe new folder must be in the same context as the original parent folder.\nIf the file is in a context without folders this does not apply.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "on_duplicate",
                            "description": "If the file is moved to a folder containing a file with the same name,\nor renamed to a name matching an existing file, the API call will fail\nunless this parameter is supplied.\n\n\"overwrite\":: Replace the existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "overwrite",
                                "rename"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "The datetime to lock the file at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "unlock_at",
                            "description": "The datetime to unlock the file at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "locked",
                            "description": "Flag the file as locked",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hidden",
                            "description": "Flag the file as hidden",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/files/{id}",
            "description": "Remove the specified file. Unlike most other DELETE endpoints, using this\nendpoint will result in comprehensive, irretrievable destruction of the file.\nIt should be used with the `replace` parameter set to true in cases where the\nfile preview also needs to be destroyed (such as to remove files that violate\nprivacy laws).",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete file",
                    "notes": "Remove the specified file. Unlike most other DELETE endpoints, using this\nendpoint will result in comprehensive, irretrievable destruction of the file.\nIt should be used with the `replace` parameter set to true in cases where the\nfile preview also needs to be destroyed (such as to remove files that violate\nprivacy laws).",
                    "nickname": "delete_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "replace",
                            "description": "This action is irreversible.\nIf replace is set to true the file contents will be replaced with a\ngeneric \"file has been removed\" file. This also destroys any previews\nthat have been generated for the file.\nMust have manage files and become other users permissions",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/files/{id}/icon_metadata",
            "description": "Returns the icon maker file attachment metadata",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get icon metadata",
                    "notes": "Returns the icon maker file attachment metadata",
                    "nickname": "get_icon_metadata",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/files/{id}/reset_verifier",
            "description": "Resets the link verifier. Any existing links to the file using\nthe previous hard-coded \"verifier\" parameter will no longer\nautomatically grant access.\n\nMust have manage files and become other users permissions",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reset link verifier",
                    "notes": "Resets the link verifier. Any existing links to the file using\nthe previous hard-coded \"verifier\" parameter will no longer\nautomatically grant access.\n\nMust have manage files and become other users permissions",
                    "nickname": "reset_link_verifier",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/folders/{id}/folders",
            "description": "Returns the paginated list of folders in the folder.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List folders",
                    "notes": "Returns the paginated list of folders in the folder.",
                    "nickname": "list_folders",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/folders",
            "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all folders",
                    "notes": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
                    "nickname": "list_all_folders_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/folders",
            "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all folders",
                    "notes": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
                    "nickname": "list_all_folders_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/folders",
            "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all folders",
                    "notes": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
                    "nickname": "list_all_folders_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/folders/by_path/*full_path",
            "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Resolve path",
                    "notes": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                    "nickname": "resolve_path_courses_full_path",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/folders/by_path",
            "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Resolve path",
                    "notes": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                    "nickname": "resolve_path_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/folders/by_path/*full_path",
            "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Resolve path",
                    "notes": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                    "nickname": "resolve_path_users_full_path",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/folders/by_path",
            "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Resolve path",
                    "notes": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                    "nickname": "resolve_path_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/folders/by_path/*full_path",
            "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Resolve path",
                    "notes": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                    "nickname": "resolve_path_groups_full_path",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/folders/by_path",
            "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Resolve path",
                    "notes": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                    "nickname": "resolve_path_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Folder"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/folders/{id}",
            "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get folder",
                    "notes": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                    "nickname": "get_folder_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/folders/{id}",
            "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get folder",
                    "notes": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                    "nickname": "get_folder_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/folders/{id}",
            "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get folder",
                    "notes": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                    "nickname": "get_folder_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/folders/{id}",
            "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get folder",
                    "notes": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                    "nickname": "get_folder_folders",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/folders/{id}",
            "description": "Updates a folder",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update folder",
                    "notes": "Updates a folder",
                    "nickname": "update_folder",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The new name of the folder",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_id",
                            "description": "The id of the folder to move this folder into. The new folder must be in the same context as the original parent folder.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "The datetime to lock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "unlock_at",
                            "description": "The datetime to unlock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "locked",
                            "description": "Flag the folder as locked",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hidden",
                            "description": "Flag the folder as hidden",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "Set an explicit sort position for the folder",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/folders",
            "description": "Creates a folder in the specified context",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create folder",
                    "notes": "Creates a folder in the specified context",
                    "nickname": "create_folder_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the folder",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_id",
                            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_path",
                            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "The datetime to lock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "unlock_at",
                            "description": "The datetime to unlock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "locked",
                            "description": "Flag the folder as locked",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hidden",
                            "description": "Flag the folder as hidden",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "Set an explicit sort position for the folder",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/folders",
            "description": "Creates a folder in the specified context",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create folder",
                    "notes": "Creates a folder in the specified context",
                    "nickname": "create_folder_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the folder",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_id",
                            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_path",
                            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "The datetime to lock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "unlock_at",
                            "description": "The datetime to unlock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "locked",
                            "description": "Flag the folder as locked",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hidden",
                            "description": "Flag the folder as hidden",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "Set an explicit sort position for the folder",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/folders",
            "description": "Creates a folder in the specified context",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create folder",
                    "notes": "Creates a folder in the specified context",
                    "nickname": "create_folder_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the folder",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_id",
                            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_path",
                            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "The datetime to lock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "unlock_at",
                            "description": "The datetime to unlock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "locked",
                            "description": "Flag the folder as locked",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hidden",
                            "description": "Flag the folder as hidden",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "Set an explicit sort position for the folder",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/folders/{folder_id}/folders",
            "description": "Creates a folder in the specified context",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create folder",
                    "notes": "Creates a folder in the specified context",
                    "nickname": "create_folder_folders",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "folder_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the folder",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_id",
                            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_folder_path",
                            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_at",
                            "description": "The datetime to lock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "unlock_at",
                            "description": "The datetime to unlock the folder at",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "locked",
                            "description": "Flag the folder as locked",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hidden",
                            "description": "Flag the folder as hidden",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "Set an explicit sort position for the folder",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/folders/{id}",
            "description": "Remove the specified folder. You can only delete empty folders unless you\nset the 'force' flag",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete folder",
                    "notes": "Remove the specified folder. You can only delete empty folders unless you\nset the 'force' flag",
                    "nickname": "delete_folder",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "force",
                            "description": "Set to 'true' to allow deleting a non-empty folder",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/folders/{folder_id}/files",
            "description": "Upload a file to a folder.\n\nThis API endpoint is the first step in uploading a file.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course or group can\nupload files to a folder in that course or group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to a folder.\n\nThis API endpoint is the first step in uploading a file.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course or group can\nupload files to a folder in that course or group.",
                    "nickname": "upload_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "folder_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/folders/{dest_folder_id}/copy_file",
            "description": "Copy a file from elsewhere in Canvas into a folder.\n\nCopying a file across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Copy a file",
                    "notes": "Copy a file from elsewhere in Canvas into a folder.\n\nCopying a file across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.",
                    "nickname": "copy_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "dest_folder_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "source_file_id",
                            "description": "The id of the source file",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "on_duplicate",
                            "description": "What to do if a file with the same name already exists at the destination.\nIf such a file exists and this parameter is not given, the call will fail.\n\n\"overwrite\":: Replace an existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "overwrite",
                                "rename"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "File"
                }
            ]
        },
        {
            "path": "/v1/folders/{dest_folder_id}/copy_folder",
            "description": "Copy a folder (and its contents) from elsewhere in Canvas into a folder.\n\nCopying a folder across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.\nIf the source and destination folders are in the same context, the\nsource folder may not contain the destination folder. A folder will be\nrenamed at its destination if another folder with the same name already\nexists.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Copy a folder",
                    "notes": "Copy a folder (and its contents) from elsewhere in Canvas into a folder.\n\nCopying a folder across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.\nIf the source and destination folders are in the same context, the\nsource folder may not contain the destination folder. A folder will be\nrenamed at its destination if another folder with the same name already\nexists.",
                    "nickname": "copy_folder",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "dest_folder_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "source_folder_id",
                            "description": "The id of the source folder",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/folders/media",
            "description": "Returns the details for a designated upload folder that the user has rights to\nupload to, and creates it if it doesn't exist.\n\nIf the current user does not have the permissions to manage files\nin the course or group, the folder will belong to the current user directly.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get uploaded media folder for user",
                    "notes": "Returns the details for a designated upload folder that the user has rights to\nupload to, and creates it if it doesn't exist.\n\nIf the current user does not have the permissions to manage files\nin the course or group, the folder will belong to the current user directly.",
                    "nickname": "get_uploaded_media_folder_for_user_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/folders/media",
            "description": "Returns the details for a designated upload folder that the user has rights to\nupload to, and creates it if it doesn't exist.\n\nIf the current user does not have the permissions to manage files\nin the course or group, the folder will belong to the current user directly.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get uploaded media folder for user",
                    "notes": "Returns the details for a designated upload folder that the user has rights to\nupload to, and creates it if it doesn't exist.\n\nIf the current user does not have the permissions to manage files\nin the course or group, the folder will belong to the current user directly.",
                    "nickname": "get_uploaded_media_folder_for_user_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/usage_rights",
            "description": "Sets copyright and license information for one or more files",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set usage rights",
                    "notes": "Sets copyright and license information for one or more files",
                    "nickname": "set_usage_rights_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "file_ids",
                            "description": "List of ids of files to set usage rights for.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "folder_ids",
                            "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "publish",
                            "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[use_justification]",
                            "description": "The intellectual property justification for using the files in Canvas",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "own_copyright",
                                "used_by_permission",
                                "fair_use",
                                "public_domain",
                                "creative_commons"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[legal_copyright]",
                            "description": "The legal copyright line for the files",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[license]",
                            "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "UsageRights"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/usage_rights",
            "description": "Sets copyright and license information for one or more files",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set usage rights",
                    "notes": "Sets copyright and license information for one or more files",
                    "nickname": "set_usage_rights_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "file_ids",
                            "description": "List of ids of files to set usage rights for.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "folder_ids",
                            "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "publish",
                            "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[use_justification]",
                            "description": "The intellectual property justification for using the files in Canvas",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "own_copyright",
                                "used_by_permission",
                                "fair_use",
                                "public_domain",
                                "creative_commons"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[legal_copyright]",
                            "description": "The legal copyright line for the files",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[license]",
                            "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "UsageRights"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/usage_rights",
            "description": "Sets copyright and license information for one or more files",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set usage rights",
                    "notes": "Sets copyright and license information for one or more files",
                    "nickname": "set_usage_rights_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "file_ids",
                            "description": "List of ids of files to set usage rights for.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "folder_ids",
                            "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "publish",
                            "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[use_justification]",
                            "description": "The intellectual property justification for using the files in Canvas",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "own_copyright",
                                "used_by_permission",
                                "fair_use",
                                "public_domain",
                                "creative_commons"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[legal_copyright]",
                            "description": "The legal copyright line for the files",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights[license]",
                            "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "UsageRights"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/usage_rights",
            "description": "Removes copyright and license information associated with one or more files",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove usage rights",
                    "notes": "Removes copyright and license information associated with one or more files",
                    "nickname": "remove_usage_rights_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "file_ids",
                            "description": "List of ids of files to remove associated usage rights from.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "folder_ids",
                            "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/usage_rights",
            "description": "Removes copyright and license information associated with one or more files",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove usage rights",
                    "notes": "Removes copyright and license information associated with one or more files",
                    "nickname": "remove_usage_rights_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "file_ids",
                            "description": "List of ids of files to remove associated usage rights from.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "folder_ids",
                            "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/usage_rights",
            "description": "Removes copyright and license information associated with one or more files",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove usage rights",
                    "notes": "Removes copyright and license information associated with one or more files",
                    "nickname": "remove_usage_rights_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "file_ids",
                            "description": "List of ids of files to remove associated usage rights from.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "folder_ids",
                            "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_licenses",
            "description": "A paginated list of licenses that can be applied",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List licenses",
                    "notes": "A paginated list of licenses that can be applied",
                    "nickname": "list_licenses_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "License"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/content_licenses",
            "description": "A paginated list of licenses that can be applied",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List licenses",
                    "notes": "A paginated list of licenses that can be applied",
                    "nickname": "list_licenses_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "License"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_licenses",
            "description": "A paginated list of licenses that can be applied",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List licenses",
                    "notes": "A paginated list of licenses that can be applied",
                    "nickname": "list_licenses_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "License"
                    }
                }
            ]
        },
        {
            "path": "/v1/audit/grade_change/assignments/{assignment_id}",
            "description": "List grade change events for a given assignment.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by assignment",
                    "notes": "List grade change events for a given assignment.",
                    "nickname": "query_by_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GradeChangeEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/audit/grade_change/courses/{course_id}",
            "description": "List grade change events for a given course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by course",
                    "notes": "List grade change events for a given course.",
                    "nickname": "query_by_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GradeChangeEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/audit/grade_change/students/{student_id}",
            "description": "List grade change events for a given student.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by student",
                    "notes": "List grade change events for a given student.",
                    "nickname": "query_by_student",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "student_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GradeChangeEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/audit/grade_change/graders/{grader_id}",
            "description": "List grade change events for a given grader.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by grader",
                    "notes": "List grade change events for a given grader.",
                    "nickname": "query_by_grader",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "grader_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GradeChangeEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/audit/grade_change",
            "description": "List grade change events satisfying all given parameters. Teachers may query for events in courses they teach.\nQueries without +course_id+ require account administrator rights.\n\nAt least one of +course_id+, +assignment_id+, +student_id+, or +grader_id+ must be specified.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Advanced query",
                    "notes": "List grade change events satisfying all given parameters. Teachers may query for events in courses they teach.\nQueries without +course_id+ require account administrator rights.\n\nAt least one of +course_id+, +assignment_id+, +student_id+, or +grader_id+ must be specified.",
                    "nickname": "advanced_query",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "course_id",
                            "description": "Restrict query to events in the specified course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_id",
                            "description": "Restrict query to the given assignment. If \"override\" is given, query the course final grade override instead.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "User id of a student to search grading events for.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grader_id",
                            "description": "User id of a grader to search grading events for.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GradeChangeEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/gradebook_history/days",
            "description": "Returns a map of dates to grader/assignment groups",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Days in gradebook history for this course",
                    "notes": "Returns a map of dates to grader/assignment groups",
                    "nickname": "days_in_gradebook_history_for_this_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The id of the contextual course for this API call",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Day"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/gradebook_history/{date}",
            "description": "Returns the graders who worked on this day, along with the assignments they worked on.\nMore details can be obtained by selecting a grader and assignment and calling the\n'submissions' api endpoint for a given date.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Details for a given date in gradebook history for this course",
                    "notes": "Returns the graders who worked on this day, along with the assignments they worked on.\nMore details can be obtained by selecting a grader and assignment and calling the\n'submissions' api endpoint for a given date.",
                    "nickname": "details_for_given_date_in_gradebook_history_for_this_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The id of the contextual course for this API call",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "date",
                            "description": "The date for which you would like to see detailed information",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Grader"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions",
            "description": "Gives a nested list of submission versions",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Lists submissions",
                    "notes": "Gives a nested list of submission versions",
                    "nickname": "lists_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The id of the contextual course for this API call",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "date",
                            "description": "The date for which you would like to see submissions",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "grader_id",
                            "description": "The ID of the grader for which you want to see submissions",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "The ID of the assignment for which you want to see submissions",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "SubmissionHistory"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/gradebook_history/feed",
            "description": "Gives a paginated, uncollated list of submission versions for all matching\nsubmissions in the context. This SubmissionVersion objects will not include\nthe +new_grade+ or +previous_grade+ keys, only the +grade+; same for\n+graded_at+ and +grader+.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List uncollated submission versions",
                    "notes": "Gives a paginated, uncollated list of submission versions for all matching\nsubmissions in the context. This SubmissionVersion objects will not include\nthe +new_grade+ or +previous_grade+ keys, only the +grade+; same for\n+graded_at+ and +grader+.",
                    "nickname": "list_uncollated_submission_versions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The id of the contextual course for this API call",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_id",
                            "description": "The ID of the assignment for which you want to see submissions. If\nabsent, versions of submissions from any assignment in the course are\nincluded.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "The ID of the user for which you want to see submissions. If absent,\nversions of submissions from any user in the course are included.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ascending",
                            "description": "Returns submission versions in ascending date order (oldest first). If\nabsent, returns submission versions in descending date order (newest\nfirst).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "SubmissionVersion"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_period_sets",
            "description": "Returns the paginated list of grading period sets",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List grading period sets",
                    "notes": "Returns the paginated list of grading period sets",
                    "nickname": "list_grading_period_sets",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_period_sets",
            "description": "Create and return a new grading period set",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a grading period set",
                    "notes": "Create and return a new grading period set",
                    "nickname": "create_grading_period_set",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term_ids",
                            "description": "A list of associated term ids for the grading period set",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_period_set[title]",
                            "description": "The title of the grading period set",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_period_set[weighted]",
                            "description": "A boolean to determine whether the grading periods in the set are weighted",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_period_set[display_totals_for_all_grading_periods]",
                            "description": "A boolean to determine whether the totals for all grading periods in the set are displayed",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_period_sets/{id}",
            "description": "Update an existing grading period set\n\n<b>204 No Content</b> response code is returned if the update was\nsuccessful.",
            "operations": [
                {
                    "method": "PATCH",
                    "summary": "Update a grading period set",
                    "notes": "Update an existing grading period set\n\n<b>204 No Content</b> response code is returned if the update was\nsuccessful.",
                    "nickname": "update_grading_period_set",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enrollment_term_ids",
                            "description": "A list of associated term ids for the grading period set",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_period_set[title]",
                            "description": "The title of the grading period set",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_period_set[weighted]",
                            "description": "A boolean to determine whether the grading periods in the set are weighted",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_period_set[display_totals_for_all_grading_periods]",
                            "description": "A boolean to determine whether the totals for all grading periods in the set are displayed",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_period_sets/{id}",
            "description": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a grading period set",
                    "notes": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
                    "nickname": "delete_grading_period_set",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_periods",
            "description": "Returns the paginated list of grading periods for the current course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List grading periods",
                    "notes": "Returns the paginated list of grading periods for the current course.",
                    "nickname": "list_grading_periods_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_periods",
            "description": "Returns the paginated list of grading periods for the current course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List grading periods",
                    "notes": "Returns the paginated list of grading periods for the current course.",
                    "nickname": "list_grading_periods_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_periods/{id}",
            "description": "Returns the grading period with the given id",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single grading period",
                    "notes": "Returns the grading period with the given id",
                    "nickname": "get_single_grading_period",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_periods/{id}",
            "description": "Update an existing grading period.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a single grading period",
                    "notes": "Update an existing grading period.",
                    "nickname": "update_single_grading_period",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[start_date]",
                            "description": "The date the grading period starts.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[end_date]",
                            "description": "no description",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[weight]",
                            "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade",
                            "type": "array",
                            "format": "float",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "number"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_periods/{id}",
            "description": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a grading period",
                    "notes": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
                    "nickname": "delete_grading_period_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_periods/{id}",
            "description": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a grading period",
                    "notes": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
                    "nickname": "delete_grading_period_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_periods/batch_update",
            "description": "Update multiple grading periods",
            "operations": [
                {
                    "method": "PATCH",
                    "summary": "Batch update grading periods",
                    "notes": "Update multiple grading periods",
                    "nickname": "batch_update_grading_periods_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "set_id",
                            "description": "The id of the grading period set.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[id]",
                            "description": "The id of the grading period. If the id parameter does not exist, a new grading period will be created.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[title]",
                            "description": "The title of the grading period.\nThe title is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[start_date]",
                            "description": "The date the grading period starts.\nThe start_date is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[end_date]",
                            "description": "The date the grading period ends.\nThe end_date is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[close_date]",
                            "description": "The date after which grades can no longer be changed for a grading period.\nThe close_date is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[weight]",
                            "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade",
                            "type": "array",
                            "format": "float",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "number"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/grading_period_sets/{set_id}/grading_periods/batch_update",
            "description": "Update multiple grading periods",
            "operations": [
                {
                    "method": "PATCH",
                    "summary": "Batch update grading periods",
                    "notes": "Update multiple grading periods",
                    "nickname": "batch_update_grading_periods_grading_period_sets",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "set_id",
                            "description": "The id of the grading period set.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[id]",
                            "description": "The id of the grading period. If the id parameter does not exist, a new grading period will be created.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[title]",
                            "description": "The title of the grading period.\nThe title is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[start_date]",
                            "description": "The date the grading period starts.\nThe start_date is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[end_date]",
                            "description": "The date the grading period ends.\nThe end_date is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[close_date]",
                            "description": "The date after which grades can no longer be changed for a grading period.\nThe close_date is required for creating a new grading period, but not for updating an existing grading period.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Date"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_periods[weight]",
                            "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade",
                            "type": "array",
                            "format": "float",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "number"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_standards",
            "description": "Create a new grading standard\n\nIf grading_scheme_entry arguments are omitted, then a default grading scheme\nwill be set. The default scheme is as follows:\n     \"A\" : 94,\n     \"A-\" : 90,\n     \"B+\" : 87,\n     \"B\" : 84,\n     \"B-\" : 80,\n     \"C+\" : 77,\n     \"C\" : 74,\n     \"C-\" : 70,\n     \"D+\" : 67,\n     \"D\" : 64,\n     \"D-\" : 61,\n     \"F\" : 0,",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new grading standard",
                    "notes": "Create a new grading standard\n\nIf grading_scheme_entry arguments are omitted, then a default grading scheme\nwill be set. The default scheme is as follows:\n     \"A\" : 94,\n     \"A-\" : 90,\n     \"B+\" : 87,\n     \"B\" : 84,\n     \"B-\" : 80,\n     \"C+\" : 77,\n     \"C\" : 74,\n     \"C-\" : 70,\n     \"D+\" : 67,\n     \"D\" : 64,\n     \"D-\" : 61,\n     \"F\" : 0,",
                    "nickname": "create_new_grading_standard_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title for the Grading Standard.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grading_scheme_entry[name]",
                            "description": "The name for an entry value within a GradingStandard that describes the range of the value\ne.g. A-",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_scheme_entry[value]",
                            "description": "The value for the name of the entry within a GradingStandard.\nThe entry represents the lower bound of the range for the entry.\nThis range includes the value up to the next entry in the GradingStandard,\nor 100 if there is no upper bound. The lowest value will have a lower bound range of 0.\ne.g. 93",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GradingStandard"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_standards",
            "description": "Create a new grading standard\n\nIf grading_scheme_entry arguments are omitted, then a default grading scheme\nwill be set. The default scheme is as follows:\n     \"A\" : 94,\n     \"A-\" : 90,\n     \"B+\" : 87,\n     \"B\" : 84,\n     \"B-\" : 80,\n     \"C+\" : 77,\n     \"C\" : 74,\n     \"C-\" : 70,\n     \"D+\" : 67,\n     \"D\" : 64,\n     \"D-\" : 61,\n     \"F\" : 0,",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new grading standard",
                    "notes": "Create a new grading standard\n\nIf grading_scheme_entry arguments are omitted, then a default grading scheme\nwill be set. The default scheme is as follows:\n     \"A\" : 94,\n     \"A-\" : 90,\n     \"B+\" : 87,\n     \"B\" : 84,\n     \"B-\" : 80,\n     \"C+\" : 77,\n     \"C\" : 74,\n     \"C-\" : 70,\n     \"D+\" : 67,\n     \"D\" : 64,\n     \"D-\" : 61,\n     \"F\" : 0,",
                    "nickname": "create_new_grading_standard_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title for the Grading Standard.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grading_scheme_entry[name]",
                            "description": "The name for an entry value within a GradingStandard that describes the range of the value\ne.g. A-",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grading_scheme_entry[value]",
                            "description": "The value for the name of the entry within a GradingStandard.\nThe entry represents the lower bound of the range for the entry.\nThis range includes the value up to the next entry in the GradingStandard,\nor 100 if there is no upper bound. The lowest value will have a lower bound range of 0.\ne.g. 93",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GradingStandard"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_standards",
            "description": "Returns the paginated list of grading standards for the given context that are visible to the user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List the grading standards available in a context.",
                    "notes": "Returns the paginated list of grading standards for the given context that are visible to the user.",
                    "nickname": "list_grading_standards_available_in_context_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GradingStandard"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_standards",
            "description": "Returns the paginated list of grading standards for the given context that are visible to the user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List the grading standards available in a context.",
                    "notes": "Returns the paginated list of grading standards for the given context that are visible to the user.",
                    "nickname": "list_grading_standards_available_in_context_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GradingStandard"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/grading_standards/{grading_standard_id}",
            "description": "Returns a grading standard for the given context that is visible to the user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single grading standard in a context.",
                    "notes": "Returns a grading standard for the given context that is visible to the user.",
                    "nickname": "get_single_grading_standard_in_context_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "grading_standard_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GradingStandard"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/grading_standards/{grading_standard_id}",
            "description": "Returns a grading standard for the given context that is visible to the user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single grading standard in a context.",
                    "notes": "Returns a grading standard for the given context that is visible to the user.",
                    "nickname": "get_single_grading_standard_in_context_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "grading_standard_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GradingStandard"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/group_categories",
            "description": "Returns a paginated list of group categories in a context",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List group categories for a context",
                    "notes": "Returns a paginated list of group categories in a context",
                    "nickname": "list_group_categories_for_context_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GroupCategory"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/group_categories",
            "description": "Returns a paginated list of group categories in a context",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List group categories for a context",
                    "notes": "Returns a paginated list of group categories in a context",
                    "nickname": "list_group_categories_for_context_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GroupCategory"
                    }
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}",
            "description": "Returns the data for a single group category, or a 401 if the caller doesn't have\nthe rights to see it.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single group category",
                    "notes": "Returns the data for a single group category, or a 401 if the caller doesn't have\nthe rights to see it.",
                    "nickname": "get_single_group_category",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupCategory"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/group_categories",
            "description": "Create a new group category",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a Group Category",
                    "notes": "Create a new group category",
                    "nickname": "create_group_category_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "Name of the group category",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "self_signup",
                            "description": "Allow students to sign up for a group themselves (Course Only).\nvalid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "enabled",
                                "restricted"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "auto_leader",
                            "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "first",
                                "random"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "group_limit",
                            "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sis_group_category_id",
                            "description": "The unique SIS identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "create_group_count",
                            "description": "Create this number of groups (Course Only).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "split_group_count",
                            "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupCategory"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/group_categories",
            "description": "Create a new group category",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a Group Category",
                    "notes": "Create a new group category",
                    "nickname": "create_group_category_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "Name of the group category",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "self_signup",
                            "description": "Allow students to sign up for a group themselves (Course Only).\nvalid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "enabled",
                                "restricted"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "auto_leader",
                            "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "first",
                                "random"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "group_limit",
                            "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sis_group_category_id",
                            "description": "The unique SIS identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "create_group_count",
                            "description": "Create this number of groups (Course Only).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "split_group_count",
                            "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupCategory"
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}/import",
            "description": "Create Groups in a Group Category through a CSV import\n\nFor more information on the format that's expected here, please see the\n\"Group Category CSV\" section in the API docs.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Import category groups",
                    "notes": "Create Groups in a Group Category through a CSV import\n\nFor more information on the format that's expected here, please see the\n\"Group Category CSV\" section in the API docs.",
                    "nickname": "import_category_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "There are two ways to post group category import data - either via a\nmultipart/form-data form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for multipart/form-data style posts. Assumed to\nbe outcome data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/group_categories/<category_id>/import'\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/group_categories/<category_id>/import'",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}",
            "description": "Modifies an existing group category.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a Group Category",
                    "notes": "Modifies an existing group category.",
                    "nickname": "update_group_category",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "Name of the group category",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "self_signup",
                            "description": "Allow students to sign up for a group themselves (Course Only).\nValid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "enabled",
                                "restricted"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "auto_leader",
                            "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "first",
                                "random"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "group_limit",
                            "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sis_group_category_id",
                            "description": "The unique SIS identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "create_group_count",
                            "description": "Create this number of groups (Course Only).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "split_group_count",
                            "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupCategory"
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}",
            "description": "Deletes a group category and all groups under it. Protected group\ncategories can not be deleted, i.e. \"communities\" and \"student_organized\".",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a Group Category",
                    "notes": "Deletes a group category and all groups under it. Protected group\ncategories can not be deleted, i.e. \"communities\" and \"student_organized\".",
                    "nickname": "delete_group_category",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}/groups",
            "description": "Returns a paginated list of groups in a group category",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List groups in group category",
                    "notes": "Returns a paginated list of groups in a group category",
                    "nickname": "list_groups_in_group_category",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Group"
                    }
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}/export",
            "description": "Returns a csv file of users in format ready to import.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "export groups in and users in category",
                    "notes": "Returns a csv file of users in format ready to import.",
                    "nickname": "export_groups_in_and_users_in_category",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}/users",
            "description": "Returns a paginated list of users in the group category.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List users in group category",
                    "notes": "Returns a paginated list of users in the group category.",
                    "nickname": "list_users_in_group_category",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name or full ID of the users to match and return in the results\nlist. Must be at least 3 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "unassigned",
                            "description": "Set this value to true if you wish only to search unassigned users in the\ngroup category.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}/assign_unassigned_members",
            "description": "Assign all unassigned members as evenly as possible among the existing\nstudent groups.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Assign unassigned members",
                    "notes": "Assign all unassigned members as evenly as possible among the existing\nstudent groups.",
                    "nickname": "assign_unassigned_members",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sync",
                            "description": "The assigning is done asynchronously by default. If you would like to\noverride this and have the assigning done synchronously, set this value\nto true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupMembership | Progress"
                }
            ]
        },
        {
            "path": "/v1/users/self/groups",
            "description": "Returns a paginated list of active groups for the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List your groups",
                    "notes": "Returns a paginated list of active groups for the current user.",
                    "nickname": "list_your_groups",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "context_type",
                            "description": "Only include groups that are in this type of context.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Account",
                                "Course"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Group"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/groups",
            "description": "Returns the paginated list of active groups in the given context that are visible to user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List the groups available in a context.",
                    "notes": "Returns the paginated list of active groups in the given context that are visible to user.",
                    "nickname": "list_groups_available_in_context_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "only_own_groups",
                            "description": "Will only include groups that the user belongs to if this is set",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Group"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/groups",
            "description": "Returns the paginated list of active groups in the given context that are visible to user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List the groups available in a context.",
                    "notes": "Returns the paginated list of active groups in the given context that are visible to user.",
                    "nickname": "list_groups_available_in_context_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "only_own_groups",
                            "description": "Will only include groups that the user belongs to if this is set",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Group"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}",
            "description": "Returns the data for a single group, or a 401 if the caller doesn't have\nthe rights to see it.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single group",
                    "notes": "Returns the data for a single group, or a 401 if the caller doesn't have\nthe rights to see it.",
                    "nickname": "get_single_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"permissions\": Include permissions the current user has\n  for the group.\n- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "permissions",
                                "tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Group"
                }
            ]
        },
        {
            "path": "/v1/groups",
            "description": "Creates a new group. Groups created using the \"/api/v1/groups/\"\nendpoint will be community groups.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a group",
                    "notes": "Creates a new group. Groups created using the \"/api/v1/groups/\"\nendpoint will be community groups.",
                    "nickname": "create_group_groups",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "A description of the group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_public",
                            "description": "whether the group is public (applies only to community groups)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "join_level",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "parent_context_auto_join",
                                "parent_context_request",
                                "invitation_only"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "storage_quota_mb",
                            "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sis_group_id",
                            "description": "The sis ID of the group. Must have manage_sis permission to set.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Group"
                }
            ]
        },
        {
            "path": "/v1/group_categories/{group_category_id}/groups",
            "description": "Creates a new group. Groups created using the \"/api/v1/groups/\"\nendpoint will be community groups.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a group",
                    "notes": "Creates a new group. Groups created using the \"/api/v1/groups/\"\nendpoint will be community groups.",
                    "nickname": "create_group_group_categories",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_category_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "A description of the group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_public",
                            "description": "whether the group is public (applies only to community groups)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "join_level",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "parent_context_auto_join",
                                "parent_context_request",
                                "invitation_only"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "storage_quota_mb",
                            "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sis_group_id",
                            "description": "The sis ID of the group. Must have manage_sis permission to set.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Group"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}",
            "description": "Modifies an existing group.  Note that to set an avatar image for the\ngroup, you must first upload the image file to the group, and the use the\nid in the response as the argument to this function.  See the\n{file:file_uploads.html File Upload Documentation} for details on the file\nupload workflow.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a group",
                    "notes": "Modifies an existing group.  Note that to set an avatar image for the\ngroup, you must first upload the image file to the group, and the use the\nid in the response as the argument to this function.  See the\n{file:file_uploads.html File Upload Documentation} for details on the file\nupload workflow.",
                    "nickname": "edit_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "A description of the group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "is_public",
                            "description": "Whether the group is public (applies only to community groups). Currently\nyou cannot set a group back to private once it has been made public.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "join_level",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "parent_context_auto_join",
                                "parent_context_request",
                                "invitation_only"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "avatar_id",
                            "description": "The id of the attachment previously uploaded to the group that you would\nlike to use as the avatar image for this group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "storage_quota_mb",
                            "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "members",
                            "description": "An array of user ids for users you would like in the group.\nUsers not in the group will be sent invitations. Existing group\nmembers who aren't in the list will be removed from the group.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "sis_group_id",
                            "description": "The sis ID of the group. Must have manage_sis permission to set.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Group"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}",
            "description": "Deletes a group and removes all members.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a group",
                    "notes": "Deletes a group and removes all members.",
                    "nickname": "delete_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Group"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/invite",
            "description": "Sends an invitation to all supplied email addresses which will allow the\nreceivers to join the group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Invite others to a group",
                    "notes": "Sends an invitation to all supplied email addresses which will allow the\nreceivers to join the group.",
                    "nickname": "invite_others_to_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "invitees",
                            "description": "An array of email addresses to be sent invitations.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/users",
            "description": "Returns a paginated list of users in the group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List group's users",
                    "notes": "Returns a paginated list of users in the group.",
                    "nickname": "list_group_s_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name or full ID of the users to match and return in the\nresults list. Must be at least 3 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "\"avatar_url\": Include users' avatar_urls.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "avatar_url"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_inactive",
                            "description": "Whether to filter out inactive users from the results. Defaults to\nfalse unless explicitly provided.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/files",
            "description": "Upload a file to the group.\n\nThis API endpoint is the first step in uploading a file to a group.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a group can upload files\nto the group. By default, this is anybody participating in the\ngroup, or any admin over the group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to the group.\n\nThis API endpoint is the first step in uploading a file to a group.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a group can upload files\nto the group. By default, this is anybody participating in the\ngroup, or any admin over the group.",
                    "nickname": "upload_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/preview_html",
            "description": "Preview html content processed for this group",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Preview processed html",
                    "notes": "Preview html content processed for this group",
                    "nickname": "preview_processed_html",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "html",
                            "description": "The html content to process",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/activity_stream",
            "description": "Returns the current user's group-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Group activity stream",
                    "notes": "Returns the current user's group-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
                    "nickname": "group_activity_stream",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/activity_stream/summary",
            "description": "Returns a summary of the current user's group-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Group activity stream summary",
                    "notes": "Returns a summary of the current user's group-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
                    "nickname": "group_activity_stream_summary",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/permissions",
            "description": "Returns permission information for the calling user in the given group.\nSee also the {api:AccountsController#permissions Account} and\n{api:CoursesController#permissions Course} counterparts.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Permissions",
                    "notes": "Returns permission information for the calling user in the given group.\nSee also the {api:AccountsController#permissions Account} and\n{api:CoursesController#permissions Course} counterparts.",
                    "nickname": "permissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "permissions",
                            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/memberships",
            "description": "A paginated list of the members of a group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List group memberships",
                    "notes": "A paginated list of the members of a group.",
                    "nickname": "list_group_memberships",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "filter_states",
                            "description": "Only list memberships with the given workflow_states. By default it will\nreturn all memberships.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "accepted",
                                "invited",
                                "requested"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "GroupMembership"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/memberships/{membership_id}",
            "description": "Returns the group membership with the given membership id or user id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single group membership",
                    "notes": "Returns the group membership with the given membership id or user id.",
                    "nickname": "get_single_group_membership_memberships",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "membership_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupMembership"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/users/{user_id}",
            "description": "Returns the group membership with the given membership id or user id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single group membership",
                    "notes": "Returns the group membership with the given membership id or user id.",
                    "nickname": "get_single_group_membership_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupMembership"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/memberships",
            "description": "Join, or request to join, a group, depending on the join_level of the\ngroup.  If the membership or join request already exists, then it is simply\nreturned",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a membership",
                    "notes": "Join, or request to join, a group, depending on the join_level of the\ngroup.  If the membership or join request already exists, then it is simply\nreturned",
                    "nickname": "create_membership",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_id",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupMembership"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/memberships/{membership_id}",
            "description": "Accept a membership request, or add/remove moderator rights.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a membership",
                    "notes": "Accept a membership request, or add/remove moderator rights.",
                    "nickname": "update_membership_memberships",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "membership_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "workflow_state",
                            "description": "Currently, the only allowed value is \"accepted\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "accepted"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "moderator",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupMembership"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/users/{user_id}",
            "description": "Accept a membership request, or add/remove moderator rights.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a membership",
                    "notes": "Accept a membership request, or add/remove moderator rights.",
                    "nickname": "update_membership_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "workflow_state",
                            "description": "Currently, the only allowed value is \"accepted\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "accepted"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "moderator",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "GroupMembership"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/memberships/{membership_id}",
            "description": "Leave a group if you are allowed to leave (some groups, such as sets of\ncourse groups created by teachers, cannot be left). You may also use 'self'\nin place of a membership_id.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Leave a group",
                    "notes": "Leave a group if you are allowed to leave (some groups, such as sets of\ncourse groups created by teachers, cannot be left). You may also use 'self'\nin place of a membership_id.",
                    "nickname": "leave_group_memberships",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "membership_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/users/{user_id}",
            "description": "Leave a group if you are allowed to leave (some groups, such as sets of\ncourse groups created by teachers, cannot be left). You may also use 'self'\nin place of a membership_id.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Leave a group",
                    "notes": "Leave a group if you are allowed to leave (some groups, such as sets of\ncourse groups created by teachers, cannot be left). You may also use 'self'\nin place of a membership_id.",
                    "nickname": "leave_group_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/history",
            "description": "Return a paginated list of the user's recent history. History entries are returned in descending order,\nnewest to oldest. You may list history entries for yourself (use +self+ as the user_id), for a student you observe,\nor for a user you manage as an administrator. Note that the +per_page+ pagination argument is not supported\nand the number of history entries returned per page will vary.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List recent history for a user",
                    "notes": "Return a paginated list of the user's recent history. History entries are returned in descending order,\nnewest to oldest. You may list history entries for yourself (use +self+ as the user_id), for a student you observe,\nor for a user you manage as an administrator. Note that the +per_page+ pagination argument is not supported\nand the number of history entries returned per page will vary.",
                    "nickname": "list_recent_history_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "HistoryEntry"
                    }
                }
            ]
        },
        {
            "path": "/v1/image_search",
            "description": "Find public domain images for use in courses and user content.  If you select an image using this API, please use the {api:InternetImageController#image_selection Confirm image selection API} to indicate photo usage to the server.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Find images",
                    "notes": "Find public domain images for use in courses and user content.  If you select an image using this API, please use the {api:InternetImageController#image_selection Confirm image selection API} to indicate photo usage to the server.",
                    "nickname": "find_images",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "query",
                            "description": "Search terms used for matching images (e.g. \"cats\").",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the image.",
                            "deprecated": false
                        },
                        {
                            "name": "description",
                            "description": "Description of the image.",
                            "deprecated": false
                        },
                        {
                            "name": "alt",
                            "description": "Accessible alternative text for the image.",
                            "deprecated": false
                        },
                        {
                            "name": "user",
                            "description": "The name of the user who owns the image",
                            "deprecated": false
                        },
                        {
                            "name": "user_url",
                            "description": "The URL to view the user's profile on the image upload site",
                            "deprecated": false
                        },
                        {
                            "name": "large_url",
                            "description": "The URL of the image sized large",
                            "deprecated": false
                        },
                        {
                            "name": "regular_url",
                            "description": "The URL of the image",
                            "deprecated": false
                        },
                        {
                            "name": "small_url",
                            "description": "The URL of the image sized small",
                            "deprecated": false
                        },
                        {
                            "name": "raw_url",
                            "description": "The raw URL of the photo",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/image_selection/{id}",
            "description": "After you have used the search API, you should hit this API to indicate photo usage to the server.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Confirm image selection",
                    "notes": "After you have used the search API, you should hit this API to indicate photo usage to the server.",
                    "nickname": "confirm_image_selection",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The ID from the image_search result.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "message",
                            "description": "Confirmation success message or error",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/inst_access_tokens",
            "description": "Create a unique, encrypted InstAccess token.\n\nGenerates a different InstAccess token each time it's called, each one expires\nafter a short window (1 hour).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create InstAccess token",
                    "notes": "Create a unique, encrypted InstAccess token.\n\nGenerates a different InstAccess token each time it's called, each one expires\nafter a short window (1 hour).",
                    "nickname": "create_instaccess_token",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "InstAccessToken"
                }
            ]
        },
        {
            "path": "/v1/jwts",
            "description": "Create a unique jwt for using with other canvas services\n\nGenerates a different JWT each time it's called, each one expires\nafter a short window (1 hour)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create JWT",
                    "notes": "Create a unique jwt for using with other canvas services\n\nGenerates a different JWT each time it's called, each one expires\nafter a short window (1 hour)",
                    "nickname": "create_jwt",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "workflows",
                            "description": "Adds additional data to the JWT to be used by the consuming service workflow",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "context_type",
                            "description": "The type of the context in case a specified workflow uses it to consuming the service. Case insensitive.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Course",
                                "User",
                                "Account"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "context_id",
                            "description": "The id of the context in case a specified workflow uses it to consuming the service.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "context_uuid",
                            "description": "The uuid of the context in case a specified workflow uses it to consuming the service.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "JWT"
                }
            ]
        },
        {
            "path": "/v1/jwts/refresh",
            "description": "Refresh a JWT for use with other canvas services\n\nGenerates a different JWT each time it's called, each one expires\nafter a short window (1 hour).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Refresh JWT",
                    "notes": "Refresh a JWT for use with other canvas services\n\nGenerates a different JWT each time it's called, each one expires\nafter a short window (1 hour).",
                    "nickname": "refresh_jwt",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "jwt",
                            "description": "An existing JWT token to be refreshed. The new token will have\nthe same context and workflows as the existing token.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "JWT"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}/late_policy",
            "description": "Returns the late policy for a course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a late policy",
                    "notes": "Returns the late policy for a course.",
                    "nickname": "get_late_policy",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}/late_policy",
            "description": "Create a late policy. If the course already has a late policy, a\nbad_request is returned since there can only be one late policy\nper course.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a late policy",
                    "notes": "Create a late policy. If the course already has a late policy, a\nbad_request is returned since there can only be one late policy\nper course.",
                    "nickname": "create_late_policy",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[missing_submission_deduction_enabled]",
                            "description": "Whether to enable the missing submission deduction late policy.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[missing_submission_deduction]",
                            "description": "How many percentage points to deduct from a missing submission.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_deduction_enabled]",
                            "description": "Whether to enable the late submission deduction late policy.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_deduction]",
                            "description": "How many percentage points to deduct per the late submission interval.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_interval]",
                            "description": "The interval for late policies.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_minimum_percent_enabled]",
                            "description": "Whether to enable the late submission minimum percent for a late policy.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_minimum_percent]",
                            "description": "The minimum grade a submissions can have in percentage points.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}/late_policy",
            "description": "Patch a late policy. No body is returned upon success.",
            "operations": [
                {
                    "method": "PATCH",
                    "summary": "Patch a late policy",
                    "notes": "Patch a late policy. No body is returned upon success.",
                    "nickname": "patch_late_policy",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[missing_submission_deduction_enabled]",
                            "description": "Whether to enable the missing submission deduction late policy.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[missing_submission_deduction]",
                            "description": "How many percentage points to deduct from a missing submission.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_deduction_enabled]",
                            "description": "Whether to enable the late submission deduction late policy.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_deduction]",
                            "description": "How many percentage points to deduct per the late submission interval.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_interval]",
                            "description": "The interval for late policies.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_minimum_percent_enabled]",
                            "description": "Whether to enable the late submission minimum percent for a late policy.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "late_policy[late_submission_minimum_percent]",
                            "description": "The minimum grade a submissions can have in percentage points.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items",
            "description": "Create a new Line Item",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a Line Item",
                    "notes": "Create a new Line Item",
                    "nickname": "create_line_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "scoreMaximum",
                            "description": "The maximum score for the line item. Scores created for the Line Item may exceed this value.",
                            "type": "number",
                            "format": "float",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "label",
                            "description": "The label for the Line Item. If no resourceLinkId is specified this value will also be used\nas the name of the placeholder assignment.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resourceId",
                            "description": "A Tool Provider specified id for the Line Item. Multiple line items may\nshare the same resourceId within a given context.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tag",
                            "description": "A value used to qualify a line Item beyond its ids. Line Items may be queried\nby this value in the List endpoint. Multiple line items can share the same tag\nwithin a given context.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resourceLinkId",
                            "description": "The resource link id the Line Item should be attached to. This value should\nmatch the LTI id of the Canvas assignment associated with the tool.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "endDateTime",
                            "description": "The ISO8601 date and time when the line item stops receiving submissions. Corresponds\nto the assignment's due_at date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission_type",
                            "description": "(EXTENSION) - Optional block to set Assignment Submission Type when creating a new assignment is created.\ntype - 'none' or 'external_tool'::\nexternal_tool_url - Submission URL only used when type: 'external_tool'::",
                            "type": "object",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "LineItem"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items/{id}",
            "description": "Update new Line Item",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a Line Item",
                    "notes": "Update new Line Item",
                    "nickname": "update_line_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "scoreMaximum",
                            "description": "The maximum score for the line item. Scores created for the Line Item may exceed this value.",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "label",
                            "description": "The label for the Line Item. If no resourceLinkId is specified this value will also be used\nas the name of the placeholder assignment.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "resourceId",
                            "description": "A Tool Provider specified id for the Line Item. Multiple line items may\nshare the same resourceId within a given context.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "tag",
                            "description": "A value used to qualify a line Item beyond its ids. Line Items may be queried\nby this value in the List endpoint. Multiple line items can share the same tag\nwithin a given context.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "endDateTime",
                            "description": "The ISO8601 date and time when the line item stops receiving submissions. Corresponds\nto the assignment's due_at date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "LineItem"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items/{id}",
            "description": "Show existing Line Item",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a Line Item",
                    "notes": "Show existing Line Item",
                    "nickname": "show_line_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"launch_url\":: includes the launch URL for this line item using the \"https\\://canvas.instructure.com/lti/launch_url\" extension",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "launch_url"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "LineItem"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items",
            "description": "List all Line Items for a course",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List line Items",
                    "notes": "List all Line Items for a course",
                    "nickname": "list_line_items",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "tag",
                            "description": "If specified only Line Items with this tag will be included.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "resource_id",
                            "description": "If specified only Line Items with this resource_id will be included.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "resource_link_id",
                            "description": "If specified only Line Items attached to the specified resource_link_id will be included.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "limit",
                            "description": "May be used to limit the number of Line Items returned in a page",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"launch_url\":: includes the launch URL for each line item using the \"https\\://canvas.instructure.com/lti/launch_url\" extension",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "launch_url"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "LineItem"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items/{id}",
            "description": "Delete an existing Line Item",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a Line Item",
                    "notes": "Delete an existing Line Item",
                    "nickname": "delete_line_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "LineItem"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/live_assessments/{assessment_id}/results",
            "description": "Creates live assessment results and adds them to a live assessment",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create live assessment results",
                    "notes": "Creates live assessment results and adds them to a live assessment",
                    "nickname": "create_live_assessment_results",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assessment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/live_assessments/{assessment_id}/results",
            "description": "Returns a paginated list of live assessment results",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List live assessment results",
                    "notes": "Returns a paginated list of live assessment results",
                    "nickname": "list_live_assessment_results",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assessment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "If set, restrict results to those for this user",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/live_assessments",
            "description": "Creates or finds an existing live assessment with the given key and aligns it with\nthe linked outcome",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create or find a live assessment",
                    "notes": "Creates or finds an existing live assessment with the given key and aligns it with\nthe linked outcome",
                    "nickname": "create_or_find_live_assessment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/live_assessments",
            "description": "Returns a paginated list of live assessments.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List live assessments",
                    "notes": "Returns a paginated list of live assessments.",
                    "nickname": "list_live_assessments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/logins",
            "description": "Given a user ID, return a paginated list of that user's logins for the given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List user logins",
                    "notes": "Given a user ID, return a paginated list of that user's logins for the given account.",
                    "nickname": "list_user_logins_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "account_id",
                            "description": "The ID of the login's account.",
                            "deprecated": false
                        },
                        {
                            "name": "id",
                            "description": "The unique, numeric ID for the login.",
                            "deprecated": false
                        },
                        {
                            "name": "sis_user_id",
                            "description": "The login's unique SIS ID.",
                            "deprecated": false
                        },
                        {
                            "name": "integration_id",
                            "description": "The login's unique integration ID.",
                            "deprecated": false
                        },
                        {
                            "name": "unique_id",
                            "description": "The unique ID for the login.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique ID of the login's user.",
                            "deprecated": false
                        },
                        {
                            "name": "authentication_provider_id",
                            "description": "The ID of the authentication\nprovider that this login is associated with",
                            "deprecated": false
                        },
                        {
                            "name": "authentication_provider_type",
                            "description": "The type of the authentication\nprovider that this login is associated with",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current status of the login",
                            "deprecated": false
                        },
                        {
                            "name": "declared_user_type",
                            "description": "The declared intention for this user's role",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/logins",
            "description": "Given a user ID, return a paginated list of that user's logins for the given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List user logins",
                    "notes": "Given a user ID, return a paginated list of that user's logins for the given account.",
                    "nickname": "list_user_logins_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "account_id",
                            "description": "The ID of the login's account.",
                            "deprecated": false
                        },
                        {
                            "name": "id",
                            "description": "The unique, numeric ID for the login.",
                            "deprecated": false
                        },
                        {
                            "name": "sis_user_id",
                            "description": "The login's unique SIS ID.",
                            "deprecated": false
                        },
                        {
                            "name": "integration_id",
                            "description": "The login's unique integration ID.",
                            "deprecated": false
                        },
                        {
                            "name": "unique_id",
                            "description": "The unique ID for the login.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The unique ID of the login's user.",
                            "deprecated": false
                        },
                        {
                            "name": "authentication_provider_id",
                            "description": "The ID of the authentication\nprovider that this login is associated with",
                            "deprecated": false
                        },
                        {
                            "name": "authentication_provider_type",
                            "description": "The type of the authentication\nprovider that this login is associated with",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current status of the login",
                            "deprecated": false
                        },
                        {
                            "name": "declared_user_type",
                            "description": "The declared intention for this user's role",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/logins",
            "description": "Create a new login for an existing user in the given account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a user login",
                    "notes": "Create a new login for an existing user in the given account.",
                    "nickname": "create_user_login",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[id]",
                            "description": "The ID of the user to create the login for.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[unique_id]",
                            "description": "The unique ID for the new login.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[password]",
                            "description": "The new login's password.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[sis_user_id]",
                            "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[integration_id]",
                            "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[authentication_provider_id]",
                            "description": "The authentication provider this login is associated with. Logins\nassociated with a specific provider can only be used with that provider.\nLegacy providers (LDAP, CAS, SAML) will search for logins associated with\nthem, or unassociated logins. New providers will only search for logins\nexplicitly associated with them. This can be the integer ID of the\nprovider, or the type of the provider (in which case, it will find the\nfirst matching provider).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[declared_user_type]",
                            "description": "The declared intention of the user type. This can be set, but does\nnot change any Canvas functionality with respect to their access.\nA user can still be a teacher, admin, student, etc. in any particular\ncontext without regard to this setting. This can be used for\nadministrative purposes for integrations to be able to more easily\nidentify why the user was created.\nValid values are:\n  * administrative\n  * observer\n  * staff\n  * student\n  * student_other\n  * teacher",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/logins/{id}",
            "description": "Update an existing login for a user in the given account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a user login",
                    "notes": "Update an existing login for a user in the given account.",
                    "nickname": "edit_user_login",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[unique_id]",
                            "description": "The new unique ID for the login.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[password]",
                            "description": "The new password for the login. Can only be set by an admin user if admins\nare allowed to change passwords for the account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[sis_user_id]",
                            "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[integration_id]",
                            "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[authentication_provider_id]",
                            "description": "The authentication provider this login is associated with. Logins\nassociated with a specific provider can only be used with that provider.\nLegacy providers (LDAP, CAS, SAML) will search for logins associated with\nthem, or unassociated logins. New providers will only search for logins\nexplicitly associated with them. This can be the integer ID of the\nprovider, or the type of the provider (in which case, it will find the\nfirst matching provider).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "login[workflow_state]",
                            "description": "Used to suspend or re-activate a login.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "suspended"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "login[declared_user_type]",
                            "description": "The declared intention of the user type. This can be set, but does\nnot change any Canvas functionality with respect to their access.\nA user can still be a teacher, admin, student, etc. in any particular\ncontext without regard to this setting. This can be used for\nadministrative purposes for integrations to be able to more easily\nidentify why the user was created.\nValid values are:\n  * administrative\n  * observer\n  * staff\n  * student\n  * student_other\n  * teacher",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/logins/{id}",
            "description": "Delete an existing login.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a user login",
                    "notes": "Delete an existing login.",
                    "nickname": "delete_user_login",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/media_objects/{media_object_id}/media_tracks",
            "description": "List the media tracks associated with a media object",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List media tracks for a Media Object",
                    "notes": "List the media tracks associated with a media object",
                    "nickname": "list_media_tracks_for_media_object",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "media_object_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "By default, index returns id, locale, kind, media_object_id, and user_id for each of the\nresult MediaTracks. Use include[] to\nadd additional fields. For example include[]=content",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "content",
                                "webvtt_content",
                                "updated_at",
                                "created_at"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "MediaTrack"
                    }
                }
            ]
        },
        {
            "path": "/v1/media_objects/{media_object_id}/media_tracks",
            "description": "Replace the media tracks associated with a media object with\nthe array of tracks provided in the body.\nUpdate will\ndelete any existing tracks not listed,\nleave untouched any tracks with no content field,\nand update or create tracks with a content field.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update Media Tracks",
                    "notes": "Replace the media tracks associated with a media object with\nthe array of tracks provided in the body.\nUpdate will\ndelete any existing tracks not listed,\nleave untouched any tracks with no content field,\nand update or create tracks with a content field.",
                    "nickname": "update_media_tracks",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "media_object_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "include",
                            "description": "Retuns a listing of the resulting set of MediaTracks.\nLike List Media Objects, use the include[] parameter to\nadd additional fields.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "MediaTrackk"
                    }
                }
            ]
        },
        {
            "path": "/v1/media_objects",
            "description": "Returns media objects created by the user making the request. When\nusing the second version, returns media objects associated with\nthe given course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Media Objects",
                    "notes": "Returns media objects created by the user making the request. When\nusing the second version, returns media objects associated with\nthe given course.",
                    "nickname": "list_media_objects_media_objects",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Field to sort on. Default is \"title\"\n\ntitle:: sorts on user_entered_title if available, title if not.\n\ncreated_at:: sorts on the object's creation time.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "title",
                                "created_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "Sort direction. Default is \"asc\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "exclude",
                            "description": "Array of data to exclude. By excluding \"sources\" and \"tracks\",\nthe api will not need to query kaltura, which greatly\nspeeds up its response.\n\nsources:: Do not query kaltura for media_sources\ntracks:: Do not query kaltura for media_tracks",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "sources",
                                "tracks"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "MediaObject"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/media_objects",
            "description": "Returns media objects created by the user making the request. When\nusing the second version, returns media objects associated with\nthe given course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Media Objects",
                    "notes": "Returns media objects created by the user making the request. When\nusing the second version, returns media objects associated with\nthe given course.",
                    "nickname": "list_media_objects_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Field to sort on. Default is \"title\"\n\ntitle:: sorts on user_entered_title if available, title if not.\n\ncreated_at:: sorts on the object's creation time.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "title",
                                "created_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "Sort direction. Default is \"asc\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "exclude",
                            "description": "Array of data to exclude. By excluding \"sources\" and \"tracks\",\nthe api will not need to query kaltura, which greatly\nspeeds up its response.\n\nsources:: Do not query kaltura for media_sources\ntracks:: Do not query kaltura for media_tracks",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "sources",
                                "tracks"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "MediaObject"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/media_objects",
            "description": "Returns media objects created by the user making the request. When\nusing the second version, returns media objects associated with\nthe given course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Media Objects",
                    "notes": "Returns media objects created by the user making the request. When\nusing the second version, returns media objects associated with\nthe given course.",
                    "nickname": "list_media_objects_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Field to sort on. Default is \"title\"\n\ntitle:: sorts on user_entered_title if available, title if not.\n\ncreated_at:: sorts on the object's creation time.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "title",
                                "created_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "Sort direction. Default is \"asc\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "exclude",
                            "description": "Array of data to exclude. By excluding \"sources\" and \"tracks\",\nthe api will not need to query kaltura, which greatly\nspeeds up its response.\n\nsources:: Do not query kaltura for media_sources\ntracks:: Do not query kaltura for media_tracks",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "sources",
                                "tracks"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "MediaObject"
                    }
                }
            ]
        },
        {
            "path": "/v1/media_objects/{media_object_id}",
            "description": "",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update Media Object",
                    "notes": "",
                    "nickname": "update_media_object",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "media_object_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_entered_title",
                            "description": "The new title.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students",
            "description": "Returns a paginated list of students selected for moderation",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List students selected for moderation",
                    "notes": "Returns a paginated list of students selected for moderation",
                    "nickname": "list_students_selected_for_moderation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students",
            "description": "Returns an array of users that were selected for moderation",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Select students for moderation",
                    "notes": "Returns an array of users that were selected for moderation",
                    "nickname": "select_students_for_moderation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "student_ids",
                            "description": "user ids for students to select for moderation",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "number"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select",
            "description": "Choose which provisional grades will be received by associated students for an assignment.\nThe caller must be the final grader for the assignment or an admin with :select_final_grade rights.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Bulk select provisional grades",
                    "notes": "Choose which provisional grades will be received by associated students for an assignment.\nThe caller must be the final grader for the assignment or an admin with :select_final_grade rights.",
                    "nickname": "bulk_select_provisional_grades",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status",
            "description": "Tell whether the student's submission needs one or more provisional grades.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show provisional grade status for a student",
                    "notes": "Tell whether the student's submission needs one or more provisional grades.",
                    "nickname": "show_provisional_grade_status_for_student",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "The id of the student to show the status for",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select",
            "description": "Choose which provisional grade the student should receive for a submission.\nThe caller must be the final grader for the assignment or an admin with :select_final_grade rights.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Select provisional grade",
                    "notes": "Choose which provisional grade the student should receive for a submission.\nThe caller must be the final grader for the assignment or an admin with :select_final_grade rights.",
                    "nickname": "select_provisional_grade",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "provisional_grade_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish",
            "description": "Publish the selected provisional grade for all submissions to an assignment.\nUse the \"Select provisional grade\" endpoint to choose which provisional grade to publish\nfor a particular submission.\n\nStudents not in the moderation set will have their one and only provisional grade published.\n\nWARNING: This is irreversible. This will overwrite existing grades in the gradebook.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Publish provisional grades for an assignment",
                    "notes": "Publish the selected provisional grade for all submissions to an assignment.\nUse the \"Select provisional grade\" endpoint to choose which provisional grade to publish\nfor a particular submission.\n\nStudents not in the moderation set will have their one and only provisional grade published.\n\nWARNING: This is irreversible. This will overwrite existing grades in the gradebook.",
                    "nickname": "publish_provisional_grades_for_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status",
            "description": "Determine whether or not the student's submission needs one or more provisional grades.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show provisional grade status for a student",
                    "notes": "Determine whether or not the student's submission needs one or more provisional grades.",
                    "nickname": "show_provisional_grade_status_for_student",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "anonymous_id",
                            "description": "The id of the student to show the status for",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules",
            "description": "A paginated list of the modules in a course",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List modules",
                    "notes": "A paginated list of the modules in a course",
                    "nickname": "list_modules",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"items\": Return module items inline if possible.\n  This parameter suggests that Canvas return module items directly\n  in the Module object JSON, to avoid having to make separate API\n  requests for each module when enumerating modules and items. Canvas\n  is free to omit 'items' for any particular module if it deems them\n  too numerous to return inline. Callers must be prepared to use the\n  {api:ContextModuleItemsApiController#index List Module Items API}\n  if items are not returned.\n- \"content_details\": Requires 'items'. Returns additional\n  details with module items specific to their associated content items.\n  Includes standard lock information for each item.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "items",
                                "content_details"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name of the modules (and module items, if 'items' is\nspecified with include[]) to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "Returns module completion information for the student with this id.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Module"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{id}",
            "description": "Get information about a single module",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show module",
                    "notes": "Get information about a single module",
                    "nickname": "show_module",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"items\": Return module items inline if possible.\n  This parameter suggests that Canvas return module items directly\n  in the Module object JSON, to avoid having to make separate API\n  requests for each module when enumerating modules and items. Canvas\n  is free to omit 'items' for any particular module if it deems them\n  too numerous to return inline. Callers must be prepared to use the\n  {api:ContextModuleItemsApiController#index List Module Items API}\n  if items are not returned.\n- \"content_details\": Requires 'items'. Returns additional\n  details with module items specific to their associated content items.\n  Includes standard lock information for each item.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "items",
                                "content_details"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "Returns module completion information for the student with this id.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Module"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules",
            "description": "Create and return a new module",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a module",
                    "notes": "Create and return a new module",
                    "nickname": "create_module",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[name]",
                            "description": "The name of the module",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[unlock_at]",
                            "description": "The date the module will unlock",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[position]",
                            "description": "The position of this module in the course (1-based)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[require_sequential_progress]",
                            "description": "Whether module items must be unlocked in order",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[prerequisite_module_ids]",
                            "description": "IDs of Modules that must be completed before this one is unlocked.\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "module[publish_final_grade]",
                            "description": "Whether to publish the student's final grade for the course upon\ncompletion of this module.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Module"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{id}",
            "description": "Update and return an existing module",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a module",
                    "notes": "Update and return an existing module",
                    "nickname": "update_module",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[name]",
                            "description": "The name of the module",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[unlock_at]",
                            "description": "The date the module will unlock",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[position]",
                            "description": "The position of the module in the course (1-based)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[require_sequential_progress]",
                            "description": "Whether module items must be unlocked in order",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[prerequisite_module_ids]",
                            "description": "IDs of Modules that must be completed before this one is unlocked\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "module[publish_final_grade]",
                            "description": "Whether to publish the student's final grade for the course upon\ncompletion of this module.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module[published]",
                            "description": "Whether the module is published and visible to students",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Module"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{id}",
            "description": "Delete a module",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete module",
                    "notes": "Delete a module",
                    "nickname": "delete_module",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Module"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{id}/relock",
            "description": "Resets module progressions to their default locked state and\nrecalculates them based on the current requirements.\n\nAdding progression requirements to an active course will not lock students\nout of modules they have already unlocked unless this action is called.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Re-lock module progressions",
                    "notes": "Resets module progressions to their default locked state and\nrecalculates them based on the current requirements.\n\nAdding progression requirements to an active course will not lock students\nout of modules they have already unlocked unless this action is called.",
                    "nickname": "re_lock_module_progressions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Module"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items",
            "description": "A paginated list of the items in a module",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List module items",
                    "notes": "A paginated list of the items in a module",
                    "nickname": "list_module_items",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "If included, will return additional details specific to the content\nassociated with each item. Refer to the {api:Modules:Module%20Item Module\nItem specification} for more details.\nIncludes standard lock information for each item.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "content_details"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the items to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "Returns module completion information for the student with this id.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ModuleItem"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items/{id}",
            "description": "Get information about a single module item",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show module item",
                    "notes": "Get information about a single module item",
                    "nickname": "show_module_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "If included, will return additional details specific to the content\nassociated with this item. Refer to the {api:Modules:Module%20Item Module\nItem specification} for more details.\nIncludes standard lock information for each item.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "content_details"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "Returns module completion information for the student with this id.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ModuleItem"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items",
            "description": "Create and return a new module item",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a module item",
                    "notes": "Create and return a new module item",
                    "nickname": "create_module_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[title]",
                            "description": "The name of the module item and associated content",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[type]",
                            "description": "The type of content linked to the item",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "File",
                                "Page",
                                "Discussion",
                                "Assignment",
                                "Quiz",
                                "SubHeader",
                                "ExternalUrl",
                                "ExternalTool"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[content_id]",
                            "description": "The id of the content to link to the module item. Required, except for\n'ExternalUrl', 'Page', and 'SubHeader' types.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[position]",
                            "description": "The position of this item in the module (1-based).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[indent]",
                            "description": "0-based indent level; module items may be indented to show a hierarchy",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[page_url]",
                            "description": "Suffix for the linked wiki page (e.g. 'front-page'). Required for 'Page'\ntype.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[external_url]",
                            "description": "External url that the item points to. [Required for 'ExternalUrl' and\n'ExternalTool' types.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[new_tab]",
                            "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[completion_requirement][type]",
                            "description": "Completion requirement for this module item.\n\"must_view\": Applies to all item types\n\"must_contribute\": Only applies to \"Assignment\", \"Discussion\", and \"Page\" types\n\"must_submit\", \"min_score\": Only apply to \"Assignment\" and \"Quiz\" types\n\"must_mark_done\": Only applies to \"Assignment\" and \"Page\" types\nInapplicable types will be ignored",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "must_view",
                                "must_contribute",
                                "must_submit",
                                "must_mark_done"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[completion_requirement][min_score]",
                            "description": "Minimum score required to complete. Required for completion_requirement\ntype 'min_score'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[iframe][width]",
                            "description": "Width of the ExternalTool on launch",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[iframe][height]",
                            "description": "Height of the ExternalTool on launch",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ModuleItem"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items/{id}",
            "description": "Update and return an existing module item",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a module item",
                    "notes": "Update and return an existing module item",
                    "nickname": "update_module_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[title]",
                            "description": "The name of the module item",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[position]",
                            "description": "The position of this item in the module (1-based)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[indent]",
                            "description": "0-based indent level; module items may be indented to show a hierarchy",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[external_url]",
                            "description": "External url that the item points to. Only applies to 'ExternalUrl' type.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[new_tab]",
                            "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[completion_requirement][type]",
                            "description": "Completion requirement for this module item.\n\"must_view\": Applies to all item types\n\"must_contribute\": Only applies to \"Assignment\", \"Discussion\", and \"Page\" types\n\"must_submit\", \"min_score\": Only apply to \"Assignment\" and \"Quiz\" types\n\"must_mark_done\": Only applies to \"Assignment\" and \"Page\" types\nInapplicable types will be ignored",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "must_view",
                                "must_contribute",
                                "must_submit",
                                "must_mark_done"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[completion_requirement][min_score]",
                            "description": "Minimum score required to complete, Required for completion_requirement\ntype 'min_score'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[published]",
                            "description": "Whether the module item is published and visible to students.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "module_item[module_id]",
                            "description": "Move this item to another module by specifying the target module id here.\nThe target module must be in the same course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ModuleItem"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path",
            "description": "Select a mastery path when module item includes several possible paths.\nRequires Mastery Paths feature to be enabled.  Returns a compound document\nwith the assignments included in the given path and any module items\nrelated to those assignments",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Select a mastery path",
                    "notes": "Select a mastery path when module item includes several possible paths.\nRequires Mastery Paths feature to be enabled.  Returns a compound document\nwith the assignments included in the given path and any module items\nrelated to those assignments",
                    "nickname": "select_mastery_path",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_set_id",
                            "description": "Assignment set chosen, as specified in the mastery_paths portion of the\ncontext module item response",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "student_id",
                            "description": "Which student the selection applies to.  If not specified, current user is\nimplied.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items/{id}",
            "description": "Delete a module item",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete module item",
                    "notes": "Delete a module item",
                    "nickname": "delete_module_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ModuleItem"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items/{id}/done",
            "description": "Mark a module item as done/not done. Use HTTP method PUT to mark as done,\nand DELETE to mark as not done.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark module item as done/not done",
                    "notes": "Mark a module item as done/not done. Use HTTP method PUT to mark as done,\nand DELETE to mark as not done.",
                    "nickname": "mark_module_item_as_done_not_done",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/module_item_sequence",
            "description": "Given an asset in a course, find the ModuleItem it belongs to, the previous and next Module Items\nin the course sequence, and also any applicable mastery path rules",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get module item sequence",
                    "notes": "Given an asset in a course, find the ModuleItem it belongs to, the previous and next Module Items\nin the course sequence, and also any applicable mastery path rules",
                    "nickname": "get_module_item_sequence",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "asset_type",
                            "description": "The type of asset to find module sequence information for. Use the ModuleItem if it is known\n(e.g., the user navigated from a module item), since this will avoid ambiguity if the asset\nappears more than once in the module sequence.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "ModuleItem",
                                "File",
                                "Page",
                                "Discussion",
                                "Assignment",
                                "Quiz",
                                "ExternalTool"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "asset_id",
                            "description": "The id of the asset (or the url in the case of a Page)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ModuleItemSequence"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read",
            "description": "Fulfills \"must view\" requirement for a module item. It is generally not necessary to do this explicitly,\nbut it is provided for applications that need to access external content directly (bypassing the html_url\nredirect that normally allows Canvas to fulfill \"must view\" requirements).\n\nThis endpoint cannot be used to complete requirements on locked or unpublished module items.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Mark module item read",
                    "notes": "Fulfills \"must view\" requirement for a module item. It is generally not necessary to do this explicitly,\nbut it is provided for applications that need to access external content directly (bypassing the html_url\nredirect that normally allows Canvas to fulfill \"must view\" requirements).\n\nThis endpoint cannot be used to complete requirements on locked or unpublished module items.",
                    "nickname": "mark_module_item_read",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "module_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/names_and_roles",
            "description": "Return active NamesAndRoleMemberships in the given course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Course Memberships",
                    "notes": "Return active NamesAndRoleMemberships in the given course.",
                    "nickname": "list_course_memberships",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "rlid",
                            "description": "If specified only NamesAndRoleMemberships with access to the LTI link references by this `rlid` will be included.\nAlso causes the member array to be included for each returned NamesAndRoleMembership.\nIf the `role` parameter is also present, it will be 'and-ed' together with this parameter",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "If specified only NamesAndRoleMemberships having this role in the given Course will be included.\nValue must be a fully-qualified LTI/LIS role URN.\nIf the `rlid` parameter is also present, it will be 'and-ed' together with this parameter",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "limit",
                            "description": "May be used to limit the number of NamesAndRoleMemberships returned in a page. Defaults to 50.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "NamesAndRoleMemberships"
                }
            ]
        },
        {
            "path": "/lti/groups/{group_id}/names_and_roles",
            "description": "Return active NamesAndRoleMemberships in the given group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Group Memberships",
                    "notes": "Return active NamesAndRoleMemberships in the given group.",
                    "nickname": "list_group_memberships",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "`rlid`",
                            "description": "If specified only NamesAndRoleMemberships with access to the LTI link references by this `rlid` will be included.\nAlso causes the member array to be included for each returned NamesAndRoleMembership.\nIf the role parameter is also present, it will be 'and-ed' together with this parameter",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "If specified only NamesAndRoleMemberships having this role in the given Group will be included.\nValue must be a fully-qualified LTI/LIS role URN. Further, only\nhttp://purl.imsglobal.org/vocab/lis/v2/membership#Member and\nhttp://purl.imsglobal.org/vocab/lis/v2/membership#Manager are supported.\nIf the `rlid` parameter is also present, it will be 'and-ed' together with this parameter",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "limit",
                            "description": "May be used to limit the number of NamesAndRoleMemberships returned in a page. Defaults to 50.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "NamesAndRoleMemberships"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences",
            "description": "Fetch all preferences for the given communication channel",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List preferences",
                    "notes": "Fetch all preferences for the given communication channel",
                    "nickname": "list_preferences_communication_channel_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "communication_channel_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "NotificationPreference"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences",
            "description": "Fetch all preferences for the given communication channel",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List preferences",
                    "notes": "Fetch all preferences for the given communication channel",
                    "nickname": "list_preferences_type",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "type",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "address",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "NotificationPreference"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories",
            "description": "Fetch all notification preference categories for the given communication channel",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List of preference categories",
                    "notes": "Fetch all notification preference categories for the given communication channel",
                    "nickname": "list_of_preference_categories",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "communication_channel_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}",
            "description": "Fetch the preference for the given notification for the given communication channel",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a preference",
                    "notes": "Fetch the preference for the given notification for the given communication channel",
                    "nickname": "get_preference_communication_channel_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "communication_channel_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "notification",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "NotificationPreference"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}",
            "description": "Fetch the preference for the given notification for the given communication channel",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a preference",
                    "notes": "Fetch the preference for the given notification for the given communication channel",
                    "nickname": "get_preference_type",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "type",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "address",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "notification",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "NotificationPreference"
                }
            ]
        },
        {
            "path": "/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}",
            "description": "Change the preference for a single notification for a single communication channel",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a preference",
                    "notes": "Change the preference for a single notification for a single communication channel",
                    "nickname": "update_preference_communication_channel_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "communication_channel_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "notification",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "notification_preferences[frequency]",
                            "description": "The desired frequency for this notification",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}",
            "description": "Change the preference for a single notification for a single communication channel",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a preference",
                    "notes": "Change the preference for a single notification for a single communication channel",
                    "nickname": "update_preference_type",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "type",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "address",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "notification",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "notification_preferences[frequency]",
                            "description": "The desired frequency for this notification",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}",
            "description": "Change the preferences for multiple notifications based on the category for a single communication channel",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update preferences by category",
                    "notes": "Change the preferences for multiple notifications based on the category for a single communication channel",
                    "nickname": "update_preferences_by_category",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "communication_channel_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "category",
                            "description": "The name of the category. Must be parameterized (e.g. The category \"Course Content\" should be \"course_content\")",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "notification_preferences[frequency]",
                            "description": "The desired frequency for each notification in the category",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences",
            "description": "Change the preferences for multiple notifications for a single communication channel at once",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update multiple preferences",
                    "notes": "Change the preferences for multiple notifications for a single communication channel at once",
                    "nickname": "update_multiple_preferences_communication_channel_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "communication_channel_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "notification_preferences[<X>][frequency]",
                            "description": "The desired frequency for <X> notification",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/communication_channels/{type}/{address}/notification_preferences",
            "description": "Change the preferences for multiple notifications for a single communication channel at once",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update multiple preferences",
                    "notes": "Change the preferences for multiple notifications for a single communication channel at once",
                    "nickname": "update_multiple_preferences_type",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "type",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "address",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "notification_preferences[<X>][frequency]",
                            "description": "The desired frequency for <X> notification",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report",
            "description": "Create a new OriginalityReport for the specified file",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an Originality Report",
                    "notes": "Create a new OriginalityReport for the specified file",
                    "nickname": "create_originality_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[file_id]",
                            "description": "The id of the file being given an originality score. Required\nif creating a report associated with a file.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_score]",
                            "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality.",
                            "type": "number",
                            "format": "float",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_report_url]",
                            "description": "The URL where the originality report for the specified\nfile may be found.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_report_file_id]",
                            "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[tool_setting][resource_type_code]",
                            "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[tool_setting][resource_url]",
                            "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[workflow_state]",
                            "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[error_message]",
                            "description": "A message describing the error. If set, the \"workflow_state\"\nwill be set to \"error.\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[attempt]",
                            "description": "If no `file_id` is given, and no file is required for the assignment\n(that is, the assignment allows an online text entry), this parameter\nmay be given to clarify which attempt number the report is for (in the\ncase of resubmissions). If this field is omitted and no `file_id` is\ngiven, the report will be created (or updated, if it exists) for the\nfirst submission attempt with no associated file.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OriginalityReport"
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}",
            "description": "Modify an existing originality report. An alternative to this endpoint is\nto POST the same parameters listed below to the CREATE endpoint.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an Originality Report",
                    "notes": "Modify an existing originality report. An alternative to this endpoint is\nto POST the same parameters listed below to the CREATE endpoint.",
                    "nickname": "edit_originality_report_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_score]",
                            "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality.",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_report_url]",
                            "description": "The URL where the originality report for the specified\nfile may be found.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_report_file_id]",
                            "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[tool_setting][resource_type_code]",
                            "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[tool_setting][resource_url]",
                            "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[workflow_state]",
                            "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[error_message]",
                            "description": "A message describing the error. If set, the \"workflow_state\"\nwill be set to \"error.\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OriginalityReport"
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}/files/{file_id}/originality_report",
            "description": "Modify an existing originality report. An alternative to this endpoint is\nto POST the same parameters listed below to the CREATE endpoint.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an Originality Report",
                    "notes": "Modify an existing originality report. An alternative to this endpoint is\nto POST the same parameters listed below to the CREATE endpoint.",
                    "nickname": "edit_originality_report_files",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "file_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_score]",
                            "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality.",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_report_url]",
                            "description": "The URL where the originality report for the specified\nfile may be found.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[originality_report_file_id]",
                            "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[tool_setting][resource_type_code]",
                            "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[tool_setting][resource_url]",
                            "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[workflow_state]",
                            "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "originality_report[error_message]",
                            "description": "A message describing the error. If set, the \"workflow_state\"\nwill be set to \"error.\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OriginalityReport"
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}",
            "description": "Get a single originality report",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an Originality Report",
                    "notes": "Get a single originality report",
                    "nickname": "show_originality_report_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OriginalityReport"
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}/files/{file_id}/originality_report",
            "description": "Get a single originality report",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an Originality Report",
                    "notes": "Get a single originality report",
                    "nickname": "show_originality_report_files",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "file_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OriginalityReport"
                }
            ]
        },
        {
            "path": "/v1/global/root_outcome_group",
            "description": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Redirect to root outcome group for context",
                    "notes": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
                    "nickname": "redirect_to_root_outcome_group_for_context_global",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/root_outcome_group",
            "description": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Redirect to root outcome group for context",
                    "notes": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
                    "nickname": "redirect_to_root_outcome_group_for_context_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/root_outcome_group",
            "description": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Redirect to root outcome group for context",
                    "notes": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
                    "nickname": "redirect_to_root_outcome_group_for_context_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all outcome groups for context",
                    "notes": "",
                    "nickname": "get_all_outcome_groups_for_context_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeGroup"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all outcome groups for context",
                    "notes": "",
                    "nickname": "get_all_outcome_groups_for_context_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeGroup"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_group_links",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all outcome links for context",
                    "notes": "",
                    "nickname": "get_all_outcome_links_for_context_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_style",
                            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_group_style",
                            "description": "The detail level of the outcome groups. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeLink"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_group_links",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all outcome links for context",
                    "notes": "",
                    "nickname": "get_all_outcome_links_for_context_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_style",
                            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_group_style",
                            "description": "The detail level of the outcome groups. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeLink"
                    }
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an outcome group",
                    "notes": "",
                    "nickname": "show_outcome_group_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an outcome group",
                    "notes": "",
                    "nickname": "show_outcome_group_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an outcome group",
                    "notes": "",
                    "nickname": "show_outcome_group_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}",
            "description": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an outcome group",
                    "notes": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
                    "nickname": "update_outcome_group_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The new outcome group title.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The new outcome group description.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_outcome_group_id",
                            "description": "The id of the new parent outcome group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}",
            "description": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an outcome group",
                    "notes": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
                    "nickname": "update_outcome_group_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The new outcome group title.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The new outcome group description.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_outcome_group_id",
                            "description": "The id of the new parent outcome group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}",
            "description": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an outcome group",
                    "notes": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
                    "nickname": "update_outcome_group_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The new outcome group title.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The new outcome group description.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parent_outcome_group_id",
                            "description": "The id of the new parent outcome group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}",
            "description": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an outcome group",
                    "notes": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
                    "nickname": "delete_outcome_group_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}",
            "description": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an outcome group",
                    "notes": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
                    "nickname": "delete_outcome_group_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}",
            "description": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an outcome group",
                    "notes": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
                    "nickname": "delete_outcome_group_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}/outcomes",
            "description": "A paginated list of the immediate OutcomeLink children of the outcome group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List linked outcomes",
                    "notes": "A paginated list of the immediate OutcomeLink children of the outcome group.",
                    "nickname": "list_linked_outcomes_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_style",
                            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeLink"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes",
            "description": "A paginated list of the immediate OutcomeLink children of the outcome group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List linked outcomes",
                    "notes": "A paginated list of the immediate OutcomeLink children of the outcome group.",
                    "nickname": "list_linked_outcomes_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_style",
                            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeLink"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}/outcomes",
            "description": "A paginated list of the immediate OutcomeLink children of the outcome group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List linked outcomes",
                    "notes": "A paginated list of the immediate OutcomeLink children of the outcome group.",
                    "nickname": "list_linked_outcomes_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_style",
                            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeLink"
                    }
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}/outcomes",
            "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create/link an outcome",
                    "notes": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                    "nickname": "create_link_outcome_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "outcome_id",
                            "description": "The ID of the existing outcome to link.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "move_from",
                            "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome. Required if outcome_id is absent.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "display_name",
                            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mastery_points",
                            "description": "The mastery threshold for the embedded rubric criterion.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_method",
                            "description": "The new calculation method.  Defaults to \"decaying_average\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "decaying_average",
                                "n_mastery",
                                "latest",
                                "highest",
                                "average"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_int",
                            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}/outcomes/{outcome_id}",
            "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Create/link an outcome",
                    "notes": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                    "nickname": "create_link_outcome_global_outcome_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "outcome_id",
                            "description": "The ID of the existing outcome to link.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "move_from",
                            "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome. Required if outcome_id is absent.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "display_name",
                            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mastery_points",
                            "description": "The mastery threshold for the embedded rubric criterion.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_method",
                            "description": "The new calculation method.  Defaults to \"decaying_average\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "decaying_average",
                                "n_mastery",
                                "latest",
                                "highest",
                                "average"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_int",
                            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes",
            "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create/link an outcome",
                    "notes": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                    "nickname": "create_link_outcome_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "outcome_id",
                            "description": "The ID of the existing outcome to link.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "move_from",
                            "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome. Required if outcome_id is absent.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "display_name",
                            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mastery_points",
                            "description": "The mastery threshold for the embedded rubric criterion.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_method",
                            "description": "The new calculation method.  Defaults to \"decaying_average\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "decaying_average",
                                "n_mastery",
                                "latest",
                                "highest",
                                "average"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_int",
                            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}",
            "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Create/link an outcome",
                    "notes": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                    "nickname": "create_link_outcome_accounts_outcome_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "outcome_id",
                            "description": "The ID of the existing outcome to link.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "move_from",
                            "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome. Required if outcome_id is absent.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "display_name",
                            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mastery_points",
                            "description": "The mastery threshold for the embedded rubric criterion.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_method",
                            "description": "The new calculation method.  Defaults to \"decaying_average\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "decaying_average",
                                "n_mastery",
                                "latest",
                                "highest",
                                "average"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_int",
                            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}/outcomes",
            "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create/link an outcome",
                    "notes": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                    "nickname": "create_link_outcome_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "outcome_id",
                            "description": "The ID of the existing outcome to link.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "move_from",
                            "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome. Required if outcome_id is absent.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "display_name",
                            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mastery_points",
                            "description": "The mastery threshold for the embedded rubric criterion.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_method",
                            "description": "The new calculation method.  Defaults to \"decaying_average\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "decaying_average",
                                "n_mastery",
                                "latest",
                                "highest",
                                "average"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_int",
                            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}",
            "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Create/link an outcome",
                    "notes": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                    "nickname": "create_link_outcome_courses_outcome_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "outcome_id",
                            "description": "The ID of the existing outcome to link.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "move_from",
                            "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome. Required if outcome_id is absent.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "display_name",
                            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mastery_points",
                            "description": "The mastery threshold for the embedded rubric criterion.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_method",
                            "description": "The new calculation method.  Defaults to \"decaying_average\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "decaying_average",
                                "n_mastery",
                                "latest",
                                "highest",
                                "average"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_int",
                            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}/outcomes/{outcome_id}",
            "description": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Unlink an outcome",
                    "notes": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
                    "nickname": "unlink_outcome_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "outcome_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}",
            "description": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Unlink an outcome",
                    "notes": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
                    "nickname": "unlink_outcome_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "outcome_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}",
            "description": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Unlink an outcome",
                    "notes": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
                    "nickname": "unlink_outcome_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "outcome_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeLink"
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}/subgroups",
            "description": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List subgroups",
                    "notes": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
                    "nickname": "list_subgroups_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeGroup"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}/subgroups",
            "description": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List subgroups",
                    "notes": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
                    "nickname": "list_subgroups_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeGroup"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}/subgroups",
            "description": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List subgroups",
                    "notes": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
                    "nickname": "list_subgroups_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeGroup"
                    }
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}/subgroups",
            "description": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a subgroup",
                    "notes": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
                    "nickname": "create_subgroup_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome group.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}/subgroups",
            "description": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a subgroup",
                    "notes": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
                    "nickname": "create_subgroup_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome group.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}/subgroups",
            "description": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a subgroup",
                    "notes": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
                    "nickname": "create_subgroup_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the new outcome group.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The description of the new outcome group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/global/outcome_groups/{id}/import",
            "description": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Import an outcome group",
                    "notes": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
                    "nickname": "import_outcome_group_global",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "source_outcome_group_id",
                            "description": "The ID of the source outcome group.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "async",
                            "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\"",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_groups/{id}/import",
            "description": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Import an outcome group",
                    "notes": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
                    "nickname": "import_outcome_group_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "source_outcome_group_id",
                            "description": "The ID of the source outcome group.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "async",
                            "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\"",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_groups/{id}/import",
            "description": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Import an outcome group",
                    "notes": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
                    "nickname": "import_outcome_group_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "source_outcome_group_id",
                            "description": "The ID of the source outcome group.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "async",
                            "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\"",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeGroup"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_imports",
            "description": "Import outcomes into Canvas.\n\nFor more information on the format that's expected here, please see the\n\"Outcomes CSV\" section in the API docs.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Import Outcomes",
                    "notes": "Import outcomes into Canvas.\n\nFor more information on the format that's expected here, please see the\n\"Outcomes CSV\" section in the API docs.",
                    "nickname": "import_outcomes_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "import_type",
                            "description": "Choose the data format for reading outcome data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "There are two ways to post outcome import data - either via a\nmultipart/form-data form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for multipart/form-data style posts. Assumed to\nbe outcome data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extension",
                            "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between csv and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to csv-file format if all else fails.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeImport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_imports",
            "description": "Import outcomes into Canvas.\n\nFor more information on the format that's expected here, please see the\n\"Outcomes CSV\" section in the API docs.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Import Outcomes",
                    "notes": "Import outcomes into Canvas.\n\nFor more information on the format that's expected here, please see the\n\"Outcomes CSV\" section in the API docs.",
                    "nickname": "import_outcomes_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "import_type",
                            "description": "Choose the data format for reading outcome data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "There are two ways to post outcome import data - either via a\nmultipart/form-data form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for multipart/form-data style posts. Assumed to\nbe outcome data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extension",
                            "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between csv and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to csv-file format if all else fails.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeImport"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_imports/{id}",
            "description": "Get the status of an already created Outcome import. Pass 'latest' for the outcome import id\nfor the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get Outcome import status",
                    "notes": "Get the status of an already created Outcome import. Pass 'latest' for the outcome import id\nfor the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
                    "nickname": "get_outcome_import_status_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeImport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_imports/{id}",
            "description": "Get the status of an already created Outcome import. Pass 'latest' for the outcome import id\nfor the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get Outcome import status",
                    "notes": "Get the status of an already created Outcome import. Pass 'latest' for the outcome import id\nfor the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
                    "nickname": "get_outcome_import_status_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "OutcomeImport"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_imports/{id}/created_group_ids",
            "description": "Get the IDs of the outcome groups created after a successful import.\nPass 'latest' for the outcome import id for the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get IDs of outcome groups created after successful import",
                    "notes": "Get the IDs of the outcome groups created after a successful import.\nPass 'latest' for the outcome import id for the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
                    "nickname": "get_ids_of_outcome_groups_created_after_successful_import_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array of outcome ids"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_imports/{id}/created_group_ids",
            "description": "Get the IDs of the outcome groups created after a successful import.\nPass 'latest' for the outcome import id for the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get IDs of outcome groups created after successful import",
                    "notes": "Get the IDs of the outcome groups created after a successful import.\nPass 'latest' for the outcome import id for the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
                    "nickname": "get_ids_of_outcome_groups_created_after_successful_import_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array of outcome ids"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_results",
            "description": "Gets the outcome results for users and outcomes in the specified context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get outcome results",
                    "notes": "Gets the outcome results for users and outcomes in the specified context.",
                    "nickname": "get_outcome_results",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_ids",
                            "description": "If specified, only the users whose ids are given will be included in the\nresults. SIS ids can be used, prefixed by \"sis_user_id:\".\nIt is an error to specify an id for a user who is not a student in\nthe context.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_ids",
                            "description": "If specified, only the outcomes whose ids are given will be included in the\nresults. it is an error to specify an id for an outcome which is not linked\nto the context.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "[String, \"alignments\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"]\nSpecify additional collections to be side loaded with the result.\n\"alignments\" includes only the alignments referenced by the returned\nresults.\n\"outcomes.alignments\" includes all alignments referenced by outcomes in the\ncontext.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include_hidden",
                            "description": "If true, results that are hidden from the learning mastery gradebook and student rollup\nscores will be included",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_rollups",
            "description": "Gets the outcome rollups for the users and outcomes in the specified\ncontext.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get outcome result rollups",
                    "notes": "Gets the outcome rollups for the users and outcomes in the specified\ncontext.",
                    "nickname": "get_outcome_result_rollups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "aggregate",
                            "description": "If specified, instead of returning one rollup for each user, all the user\nrollups will be combined into one rollup for the course that will contain\nthe average (or median, see below) rollup score for each outcome.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "aggregate_stat",
                            "description": "If aggregate rollups requested, then this value determines what\nstatistic is used for the aggregate. Defaults to \"mean\" if this value\nis not specified.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "mean",
                                "median"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "user_ids",
                            "description": "If specified, only the users whose ids are given will be included in the\nresults or used in an aggregate result. it is an error to specify an id\nfor a user who is not a student in the context",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "outcome_ids",
                            "description": "If specified, only the outcomes whose ids are given will be included in the\nresults. it is an error to specify an id for an outcome which is not linked\nto the context.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "[String, \"courses\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"]\nSpecify additional collections to be side loaded with the result.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude",
                            "description": "Specify additional values to exclude. \"missing_user_rollups\" excludes\nrollups for users without results.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "missing_user_rollups"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sort_by",
                            "description": "If specified, sorts outcome result rollups. \"student\" sorting will sort\nby a user's sortable name. \"outcome\" sorting will sort by the given outcome's\nrollup score. The latter requires specifying the \"sort_outcome_id\" parameter.\nBy default, the sort order is ascending.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "student",
                                "outcome"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "sort_outcome_id",
                            "description": "If outcome sorting requested, then this determines which outcome to use\nfor rollup score sorting.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort_order",
                            "description": "If sorting requested, then this allows changing the default sort order of\nascending to descending.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "add_defaults",
                            "description": "If defaults are requested, then color and mastery level defaults will be\nadded to outcome ratings in the rollup. This will only take effect if\nthe Account Level Mastery Scales FF is DISABLED",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "contributing_scores",
                            "description": "If contributing scores are requested, then each individual outcome score will\nalso include all graded artifacts that contributed to the outcome score",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/outcomes/{id}",
            "description": "Returns the details of the outcome with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an outcome",
                    "notes": "Returns the details of the outcome with the given id.",
                    "nickname": "show_outcome",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "add_defaults",
                            "description": "If defaults are requested, then color and mastery level defaults will be\nadded to outcome ratings in the result. This will only take effect if\nthe Account Level Mastery Scales FF is DISABLED",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Outcome"
                }
            ]
        },
        {
            "path": "/v1/outcomes/{id}",
            "description": "Modify an existing outcome. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nIf any new ratings are provided, the combination of all new ratings\nprovided completely replace any existing embedded rubric criterion; it is\nnot possible to tweak the ratings of the embedded rubric criterion.\n\nA new embedded rubric criterion's mastery_points default to the maximum\npoints in the highest rating if not specified in the mastery_points\nparameter. Any new ratings lacking a description are given a default of \"No\ndescription\". Any new ratings lacking a point value are given a default of\n0.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an outcome",
                    "notes": "Modify an existing outcome. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nIf any new ratings are provided, the combination of all new ratings\nprovided completely replace any existing embedded rubric criterion; it is\nnot possible to tweak the ratings of the embedded rubric criterion.\n\nA new embedded rubric criterion's mastery_points default to the maximum\npoints in the highest rating if not specified in the mastery_points\nparameter. Any new ratings lacking a description are given a default of \"No\ndescription\". Any new ratings lacking a point value are given a default of\n0.",
                    "nickname": "update_outcome",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The new outcome title.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "display_name",
                            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "description",
                            "description": "The new outcome description.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "vendor_guid",
                            "description": "A custom GUID for the learning standard.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mastery_points",
                            "description": "The new mastery threshold for the embedded rubric criterion.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of a new rating level for the embedded rubric criterion.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The points corresponding to a new rating level for the embedded rubric\ncriterion.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_method",
                            "description": "The new calculation method.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "decaying_average",
                                "n_mastery",
                                "latest",
                                "highest",
                                "average"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calculation_int",
                            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "add_defaults",
                            "description": "If defaults are requested, then color and mastery level defaults will be\nadded to outcome ratings in the result. This will only take effect if\nthe Account Level Mastery Scales FF is DISABLED",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Outcome"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_alignments",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get aligned assignments for an outcome in a course for a particular student",
                    "notes": "",
                    "nickname": "get_aligned_assignments_for_outcome_in_course_for_particular_student",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The id of the course",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "The id of the student",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "OutcomeAlignment"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/front_page",
            "description": "Retrieve the content of the front page",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show front page",
                    "notes": "Retrieve the content of the front page",
                    "nickname": "show_front_page_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/front_page",
            "description": "Retrieve the content of the front page",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show front page",
                    "notes": "Retrieve the content of the front page",
                    "nickname": "show_front_page_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}/duplicate",
            "description": "Duplicate a wiki page",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Duplicate page",
                    "notes": "Duplicate a wiki page",
                    "nickname": "duplicate_page",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/front_page",
            "description": "Update the title or contents of the front page",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update/create front page",
                    "notes": "Update the title or contents of the front page",
                    "nickname": "update_create_front_page_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[title]",
                            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[body]",
                            "description": "The content for the new page.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[editing_roles]",
                            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teachers",
                                "students",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[notify_of_update]",
                            "description": "Whether participants should be notified when this page changes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[published]",
                            "description": "Whether the page is published (true) or draft state (false).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/front_page",
            "description": "Update the title or contents of the front page",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update/create front page",
                    "notes": "Update the title or contents of the front page",
                    "nickname": "update_create_front_page_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[title]",
                            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[body]",
                            "description": "The content for the new page.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[editing_roles]",
                            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teachers",
                                "students",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[notify_of_update]",
                            "description": "Whether participants should be notified when this page changes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[published]",
                            "description": "Whether the page is published (true) or draft state (false).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages",
            "description": "A paginated list of the wiki pages associated with a course or group",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List pages",
                    "notes": "A paginated list of the wiki pages associated with a course or group",
                    "nickname": "list_pages_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Sort results by this field.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "title",
                                "created_at",
                                "updated_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The sorting order. Defaults to 'asc'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the pages to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "published",
                            "description": "If true, include only published paqes. If false, exclude published\npages. If not present, do not filter on published status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Page"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages",
            "description": "A paginated list of the wiki pages associated with a course or group",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List pages",
                    "notes": "A paginated list of the wiki pages associated with a course or group",
                    "nickname": "list_pages_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "Sort results by this field.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "title",
                                "created_at",
                                "updated_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The sorting order. Defaults to 'asc'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the pages to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "published",
                            "description": "If true, include only published paqes. If false, exclude published\npages. If not present, do not filter on published status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Page"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages",
            "description": "Create a new wiki page",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create page",
                    "notes": "Create a new wiki page",
                    "nickname": "create_page_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[title]",
                            "description": "The title for the new page.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[body]",
                            "description": "The content for the new page.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[editing_roles]",
                            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teachers",
                                "students",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[notify_of_update]",
                            "description": "Whether participants should be notified when this page changes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[published]",
                            "description": "Whether the page is published (true) or draft state (false).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[front_page]",
                            "description": "Set an unhidden page as the front page (if true)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[publish_at]",
                            "description": "Schedule a future date/time to publish the page. This will have no effect unless the\n\"Scheduled Page Publication\" feature is enabled in the account. If a future date is\nsupplied, the page will be unpublished and wiki_page[published] will be ignored.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages",
            "description": "Create a new wiki page",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create page",
                    "notes": "Create a new wiki page",
                    "nickname": "create_page_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[title]",
                            "description": "The title for the new page.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[body]",
                            "description": "The content for the new page.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[editing_roles]",
                            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teachers",
                                "students",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[notify_of_update]",
                            "description": "Whether participants should be notified when this page changes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[published]",
                            "description": "Whether the page is published (true) or draft state (false).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[front_page]",
                            "description": "Set an unhidden page as the front page (if true)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[publish_at]",
                            "description": "Schedule a future date/time to publish the page. This will have no effect unless the\n\"Scheduled Page Publication\" feature is enabled in the account. If a future date is\nsupplied, the page will be unpublished and wiki_page[published] will be ignored.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}",
            "description": "Retrieve the content of a wiki page",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show page",
                    "notes": "Retrieve the content of a wiki page",
                    "nickname": "show_page_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages/{url_or_id}",
            "description": "Retrieve the content of a wiki page",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show page",
                    "notes": "Retrieve the content of a wiki page",
                    "nickname": "show_page_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}",
            "description": "Update the title or contents of a wiki page\n\nNOTE: You cannot specify the ID when creating a page. If you pass a numeric value\nas the page identifier and that does not represent a page ID that already\nexists, it will be interpreted as a URL.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update/create page",
                    "notes": "Update the title or contents of a wiki page\n\nNOTE: You cannot specify the ID when creating a page. If you pass a numeric value\nas the page identifier and that does not represent a page ID that already\nexists, it will be interpreted as a URL.",
                    "nickname": "update_create_page_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[title]",
                            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[body]",
                            "description": "The content for the new page.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[editing_roles]",
                            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teachers",
                                "students",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[notify_of_update]",
                            "description": "Whether participants should be notified when this page changes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[published]",
                            "description": "Whether the page is published (true) or draft state (false).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[publish_at]",
                            "description": "Schedule a future date/time to publish the page. This will have no effect unless the\n\"Scheduled Page Publication\" feature is enabled in the account. If a future date is\nset and the page is already published, it will be unpublished.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[front_page]",
                            "description": "Set an unhidden page as the front page (if true)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages/{url_or_id}",
            "description": "Update the title or contents of a wiki page\n\nNOTE: You cannot specify the ID when creating a page. If you pass a numeric value\nas the page identifier and that does not represent a page ID that already\nexists, it will be interpreted as a URL.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update/create page",
                    "notes": "Update the title or contents of a wiki page\n\nNOTE: You cannot specify the ID when creating a page. If you pass a numeric value\nas the page identifier and that does not represent a page ID that already\nexists, it will be interpreted as a URL.",
                    "nickname": "update_create_page_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[title]",
                            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[body]",
                            "description": "The content for the new page.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[editing_roles]",
                            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teachers",
                                "students",
                                "members",
                                "public"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[notify_of_update]",
                            "description": "Whether participants should be notified when this page changes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[published]",
                            "description": "Whether the page is published (true) or draft state (false).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[publish_at]",
                            "description": "Schedule a future date/time to publish the page. This will have no effect unless the\n\"Scheduled Page Publication\" feature is enabled in the account. If a future date is\nset and the page is already published, it will be unpublished.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "wiki_page[front_page]",
                            "description": "Set an unhidden page as the front page (if true)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}",
            "description": "Delete a wiki page",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete page",
                    "notes": "Delete a wiki page",
                    "nickname": "delete_page_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages/{url_or_id}",
            "description": "Delete a wiki page",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete page",
                    "notes": "Delete a wiki page",
                    "nickname": "delete_page_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Page"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}/revisions",
            "description": "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List revisions",
                    "notes": "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.",
                    "nickname": "list_revisions_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PageRevision"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages/{url_or_id}/revisions",
            "description": "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List revisions",
                    "notes": "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.",
                    "nickname": "list_revisions_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PageRevision"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}/revisions/latest",
            "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show revision",
                    "notes": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                    "nickname": "show_revision_courses_latest",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "summary",
                            "description": "If set, exclude page content from results",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PageRevision"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages/{url_or_id}/revisions/latest",
            "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show revision",
                    "notes": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                    "nickname": "show_revision_groups_latest",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "summary",
                            "description": "If set, exclude page content from results",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PageRevision"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}/revisions/{revision_id}",
            "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show revision",
                    "notes": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                    "nickname": "show_revision_courses_revision_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "revision_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "summary",
                            "description": "If set, exclude page content from results",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PageRevision"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages/{url_or_id}/revisions/{revision_id}",
            "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show revision",
                    "notes": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                    "nickname": "show_revision_groups_revision_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "revision_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "summary",
                            "description": "If set, exclude page content from results",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PageRevision"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/pages/{url_or_id}/revisions/{revision_id}",
            "description": "Revert a page to a prior revision.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Revert to revision",
                    "notes": "Revert a page to a prior revision.",
                    "nickname": "revert_to_revision_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "revision_id",
                            "description": "The revision to revert to (use the\n{api:WikiPagesApiController#revisions List Revisions API} to see\navailable revisions)",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PageRevision"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/pages/{url_or_id}/revisions/{revision_id}",
            "description": "Revert a page to a prior revision.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Revert to revision",
                    "notes": "Revert a page to a prior revision.",
                    "nickname": "revert_to_revision_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "url_or_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "revision_id",
                            "description": "The revision to revert to (use the\n{api:WikiPagesApiController#revisions List Revisions API} to see\navailable revisions)",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PageRevision"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews",
            "description": "Get a list of all Peer Reviews for this assignment",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all Peer Reviews",
                    "notes": "Get a list of all Peer Reviews for this assignment",
                    "nickname": "get_all_peer_reviews_courses_peer_reviews",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the peer review.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_comments",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PeerReview"
                    }
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews",
            "description": "Get a list of all Peer Reviews for this assignment",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all Peer Reviews",
                    "notes": "Get a list of all Peer Reviews for this assignment",
                    "nickname": "get_all_peer_reviews_sections_peer_reviews",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the peer review.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_comments",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PeerReview"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
            "description": "Get a list of all Peer Reviews for this assignment",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all Peer Reviews",
                    "notes": "Get a list of all Peer Reviews for this assignment",
                    "nickname": "get_all_peer_reviews_courses_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the peer review.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_comments",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PeerReview"
                    }
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
            "description": "Get a list of all Peer Reviews for this assignment",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all Peer Reviews",
                    "notes": "Get a list of all Peer Reviews for this assignment",
                    "nickname": "get_all_peer_reviews_sections_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the peer review.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_comments",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PeerReview"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
            "description": "Create a peer review for the assignment",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create Peer Review",
                    "notes": "Create a peer review for the assignment",
                    "nickname": "create_peer_review_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_id",
                            "description": "user_id to assign as reviewer on this assignment",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PeerReview"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
            "description": "Create a peer review for the assignment",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create Peer Review",
                    "notes": "Create a peer review for the assignment",
                    "nickname": "create_peer_review_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_id",
                            "description": "user_id to assign as reviewer on this assignment",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PeerReview"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
            "description": "Delete a peer review for the assignment",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete Peer Review",
                    "notes": "Delete a peer review for the assignment",
                    "nickname": "delete_peer_review_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "user_id to delete as reviewer on this assignment",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PeerReview"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
            "description": "Delete a peer review for the assignment",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete Peer Review",
                    "notes": "Delete a peer review for the assignment",
                    "nickname": "delete_peer_review_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "user_id to delete as reviewer on this assignment",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PeerReview"
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}",
            "description": "Get a single Canvas assignment by Canvas id or LTI id. Tool providers may only access\nassignments that are associated with their tool.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single assignment (lti)",
                    "notes": "Get a single Canvas assignment by Canvas id or LTI id. Tool providers may only access\nassignments that are associated with their tool.",
                    "nickname": "get_single_assignment_lti",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "The id of the user. Can be a Canvas or LTI id for the user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "LtiAssignment"
                }
            ]
        },
        {
            "path": "/lti/users/{id}",
            "description": "Get a single Canvas user by Canvas id or LTI id. Tool providers may only access\nusers that have been assigned an assignment associated with their tool.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single user (lti)",
                    "notes": "Get a single Canvas user by Canvas id or LTI id. Tool providers may only access\nusers that have been assigned an assignment associated with their tool.",
                    "nickname": "get_single_user_lti",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/lti/groups/{group_id}/users",
            "description": "Get all Canvas users in a group. Tool providers may only access\ngroups that belong to the context the tool is installed in.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all users in a group (lti)",
                    "notes": "Get all Canvas users in a group. Tool providers may only access\ngroups that belong to the context the tool is installed in.",
                    "nickname": "get_all_users_in_group_lti",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}/submissions/{submission_id}",
            "description": "Get a single submission, based on submission id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single submission",
                    "notes": "Get a single submission, based on submission id.",
                    "nickname": "get_single_submission",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/assignments/{assignment_id}/submissions/{submission_id}/history",
            "description": "Get a list of all attempts made for a submission, based on submission id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the history of a single submission",
                    "notes": "Get a list of all attempts made for a submission, based on submission id.",
                    "nickname": "get_history_of_single_submission",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/planner/items",
            "description": "Retrieve the paginated list of objects to be shown on the planner for the\ncurrent user with the associated planner override to override an item's\nvisibility if set.\n\nPlanner items for a student may also be retrieved by a linked observer. Use\nthe path that accepts a user_id and supply the student's id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List planner items",
                    "notes": "Retrieve the paginated list of objects to be shown on the planner for the\ncurrent user with the associated planner override to override an item's\nvisibility if set.\n\nPlanner items for a student may also be retrieved by a linked observer. Use\nthe path that accepts a user_id and supply the student's id.",
                    "nickname": "list_planner_items_planner",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return items starting from the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return items up to the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context codes of courses and/or groups whose items you want to see.\nIf not specified, defaults to all contexts associated to the current user.\nNote that concluded courses will be ignored unless specified in the includes[]\nparameter. The format of this field is the context type, followed by an underscore,\nfollowed by the context id. For example: course_42, group_123",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "observed_user_id",
                            "description": "Return planner items for the given observed user. Must be accompanied by context_codes[].\nThe user making the request must be observing the observed user in all the courses specified by\ncontext_codes[].",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "Only return items that have new or unread activity",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "new_activity"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/planner/items",
            "description": "Retrieve the paginated list of objects to be shown on the planner for the\ncurrent user with the associated planner override to override an item's\nvisibility if set.\n\nPlanner items for a student may also be retrieved by a linked observer. Use\nthe path that accepts a user_id and supply the student's id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List planner items",
                    "notes": "Retrieve the paginated list of objects to be shown on the planner for the\ncurrent user with the associated planner override to override an item's\nvisibility if set.\n\nPlanner items for a student may also be retrieved by a linked observer. Use\nthe path that accepts a user_id and supply the student's id.",
                    "nickname": "list_planner_items_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return items starting from the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return items up to the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context codes of courses and/or groups whose items you want to see.\nIf not specified, defaults to all contexts associated to the current user.\nNote that concluded courses will be ignored unless specified in the includes[]\nparameter. The format of this field is the context type, followed by an underscore,\nfollowed by the context id. For example: course_42, group_123",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "observed_user_id",
                            "description": "Return planner items for the given observed user. Must be accompanied by context_codes[].\nThe user making the request must be observing the observed user in all the courses specified by\ncontext_codes[].",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "Only return items that have new or unread activity",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "new_activity"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/planner_notes",
            "description": "Retrieve the paginated list of planner notes\n\nRetrieve planner note for a user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List planner notes",
                    "notes": "Retrieve the paginated list of planner notes\n\nRetrieve planner note for a user",
                    "nickname": "list_planner_notes",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return notes with todo dates since the start_date (inclusive).\nNo default. The value should be formatted as: yyyy-mm-dd or\nISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return notes with todo dates before the end_date (inclusive).\nNo default. The value should be formatted as: yyyy-mm-dd or\nISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date and start_date are both specified and equivalent,\nthen only notes with todo dates on that day are returned.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context codes of courses whose notes you want to see.\nIf not specified, defaults to all contexts that the user belongs to.\nThe format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42\nIncluding a code matching the user's own context code (e.g. user_1)\nwill include notes that are not associated with any particular course.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PlannerNote"
                    }
                }
            ]
        },
        {
            "path": "/v1/planner_notes/{id}",
            "description": "Retrieve a planner note for the current user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a planner note",
                    "notes": "Retrieve a planner note for the current user",
                    "nickname": "show_planner_note",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerNote"
                }
            ]
        },
        {
            "path": "/v1/planner_notes/{id}",
            "description": "Update a planner note for the current user",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a planner note",
                    "notes": "Update a planner note for the current user",
                    "nickname": "update_planner_note",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the planner note.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "details",
                            "description": "Text of the planner note.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "todo_date",
                            "description": "The date where this planner note should appear in the planner.\nThe value should be formatted as: yyyy-mm-dd.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_id",
                            "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to\nassociate it with a planner note. Use a null or empty value to remove a planner note from a course. Note that if\nthe planner note is linked to a learning object, its course_id cannot be changed.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerNote"
                }
            ]
        },
        {
            "path": "/v1/planner_notes",
            "description": "Create a planner note for the current user",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a planner note",
                    "notes": "Create a planner note for the current user",
                    "nickname": "create_planner_note",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "title",
                            "description": "The title of the planner note.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "details",
                            "description": "Text of the planner note.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "todo_date",
                            "description": "The date where this planner note should appear in the planner.\nThe value should be formatted as: yyyy-mm-dd.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_id",
                            "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to\nassociate it with a planner note.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "linked_object_type",
                            "description": "The type of a learning object to link to this planner note. Must be used in conjunction wtih linked_object_id\nand course_id. Valid linked_object_type values are:\n'announcement', 'assignment', 'discussion_topic', 'wiki_page', 'quiz'",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "linked_object_id",
                            "description": "The id of a learning object to link to this planner note. Must be used in conjunction with linked_object_type\nand course_id. The object must be in the same course as specified by course_id. If the title argument is not\nprovided, the planner note will use the learning object's title as its title. Only one planner note may be\nlinked to a specific learning object.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerNote"
                }
            ]
        },
        {
            "path": "/v1/planner_notes/{id}",
            "description": "Delete a planner note for the current user",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a planner note",
                    "notes": "Delete a planner note for the current user",
                    "nickname": "delete_planner_note",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerNote"
                }
            ]
        },
        {
            "path": "/v1/planner/overrides",
            "description": "Retrieve a planner override for the current user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List planner overrides",
                    "notes": "Retrieve a planner override for the current user",
                    "nickname": "list_planner_overrides",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PlannerOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/planner/overrides/{id}",
            "description": "Retrieve a planner override for the current user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a planner override",
                    "notes": "Retrieve a planner override for the current user",
                    "nickname": "show_planner_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerOverride"
                }
            ]
        },
        {
            "path": "/v1/planner/overrides/{id}",
            "description": "Update a planner override's visibilty for the current user",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a planner override",
                    "notes": "Update a planner override's visibilty for the current user",
                    "nickname": "update_planner_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "marked_complete",
                            "description": "determines whether the planner item is marked as completed",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "dismissed",
                            "description": "determines whether the planner item shows in the opportunities list",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerOverride"
                }
            ]
        },
        {
            "path": "/v1/planner/overrides",
            "description": "Create a planner override for the current user",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a planner override",
                    "notes": "Create a planner override for the current user",
                    "nickname": "create_planner_override",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "plannable_type",
                            "description": "Type of the item that you are overriding in the planner",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "announcement",
                                "assignment",
                                "discussion_topic",
                                "quiz",
                                "wiki_page",
                                "planner_note"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "plannable_id",
                            "description": "ID of the item that you are overriding in the planner",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "marked_complete",
                            "description": "If this is true, the item will show in the planner as completed",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "dismissed",
                            "description": "If this is true, the item will not show in the opportunities list",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerOverride"
                }
            ]
        },
        {
            "path": "/v1/planner/overrides/{id}",
            "description": "Delete a planner override for the current user",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a planner override",
                    "notes": "Delete a planner override for the current user",
                    "nickname": "delete_planner_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PlannerOverride"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions",
            "description": "Returns the paginated list of PollSessions in this poll.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List poll sessions for a poll",
                    "notes": "Returns the paginated list of PollSessions in this poll.",
                    "nickname": "list_poll_sessions_for_poll",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions/{id}",
            "description": "Returns the poll session with the given id",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the results for a single poll session",
                    "notes": "Returns the poll session with the given id",
                    "nickname": "get_results_for_single_poll_session",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions",
            "description": "Create a new poll session for this poll",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a single poll session",
                    "notes": "Create a new poll session for this poll",
                    "nickname": "create_single_poll_session",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "poll_sessions[course_id]",
                            "description": "The id of the course this session is associated with.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_sessions[course_section_id]",
                            "description": "The id of the course section this session is associated with.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_sessions[has_public_results]",
                            "description": "Whether or not results are viewable by students.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions/{id}",
            "description": "Update an existing poll session for this poll",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a single poll session",
                    "notes": "Update an existing poll session for this poll",
                    "nickname": "update_single_poll_session",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "poll_sessions[course_id]",
                            "description": "The id of the course this session is associated with.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_sessions[course_section_id]",
                            "description": "The id of the course section this session is associated with.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_sessions[has_public_results]",
                            "description": "Whether or not results are viewable by students.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions/{id}",
            "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a poll session",
                    "notes": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                    "nickname": "delete_poll_session",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions/{id}/open",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Open a poll session",
                    "notes": "",
                    "nickname": "open_poll_session",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions/{id}/close",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Close an opened poll session",
                    "notes": "",
                    "nickname": "close_opened_poll_session",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/poll_sessions/opened",
            "description": "A paginated list of all opened poll sessions available to the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List opened poll sessions",
                    "notes": "A paginated list of all opened poll sessions available to the current user.",
                    "nickname": "list_opened_poll_sessions",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/poll_sessions/closed",
            "description": "A paginated list of all closed poll sessions available to the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List closed poll sessions",
                    "notes": "A paginated list of all closed poll sessions available to the current user.",
                    "nickname": "list_closed_poll_sessions",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_choices",
            "description": "Returns the paginated list of PollChoices in this poll.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List poll choices in a poll",
                    "notes": "Returns the paginated list of PollChoices in this poll.",
                    "nickname": "list_poll_choices_in_poll",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_choices/{id}",
            "description": "Returns the poll choice with the given id",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single poll choice",
                    "notes": "Returns the poll choice with the given id",
                    "nickname": "get_single_poll_choice",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_choices",
            "description": "Create a new poll choice for this poll",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a single poll choice",
                    "notes": "Create a new poll choice for this poll",
                    "nickname": "create_single_poll_choice",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "poll_choices[text]",
                            "description": "The descriptive text of the poll choice.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_choices[is_correct]",
                            "description": "Whether this poll choice is considered correct or not. Defaults to false.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_choices[position]",
                            "description": "The order this poll choice should be returned in the context it's sibling poll choices.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_choices/{id}",
            "description": "Update an existing poll choice for this poll",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a single poll choice",
                    "notes": "Update an existing poll choice for this poll",
                    "nickname": "update_single_poll_choice",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "poll_choices[text]",
                            "description": "The descriptive text of the poll choice.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_choices[is_correct]",
                            "description": "Whether this poll choice is considered correct or not.  Defaults to false.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "poll_choices[position]",
                            "description": "The order this poll choice should be returned in the context it's sibling poll choices.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_choices/{id}",
            "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a poll choice",
                    "notes": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                    "nickname": "delete_poll_choice",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls",
            "description": "Returns the paginated list of polls for the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List polls",
                    "notes": "Returns the paginated list of polls for the current user.",
                    "nickname": "list_polls",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{id}",
            "description": "Returns the poll with the given id",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single poll",
                    "notes": "Returns the poll with the given id",
                    "nickname": "get_single_poll",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls",
            "description": "Create a new poll for the current user",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a single poll",
                    "notes": "Create a new poll for the current user",
                    "nickname": "create_single_poll",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "polls[question]",
                            "description": "The title of the poll.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "polls[description]",
                            "description": "A brief description or instructions for the poll.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{id}",
            "description": "Update an existing poll belonging to the current user",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a single poll",
                    "notes": "Update an existing poll belonging to the current user",
                    "nickname": "update_single_poll",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "polls[question]",
                            "description": "The title of the poll.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "polls[description]",
                            "description": "A brief description or instructions for the poll.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{id}",
            "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a poll",
                    "notes": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                    "nickname": "delete_poll",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}",
            "description": "Returns the poll submission with the given id",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single poll submission",
                    "notes": "Returns the poll submission with the given id",
                    "nickname": "get_single_poll_submission",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "poll_session_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions",
            "description": "Create a new poll submission for this poll session",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a single poll submission",
                    "notes": "Create a new poll submission for this poll session",
                    "nickname": "create_single_poll_submission",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "poll_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "poll_session_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "poll_submissions[poll_choice_id]",
                            "description": "The chosen poll choice for this submission.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_proficiency",
            "description": "Create or update account-level proficiency ratings. These ratings will apply to all\nsub-accounts, unless they have their own account-level proficiency ratings defined.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create/update proficiency ratings",
                    "notes": "Create or update account-level proficiency ratings. These ratings will apply to all\nsub-accounts, unless they have their own account-level proficiency ratings defined.",
                    "nickname": "create_update_proficiency_ratings_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of the rating level.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[mastery]",
                            "description": "Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[color]",
                            "description": "The color associated with the rating level. Should be a hex color code like '00FFFF'.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Proficiency"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_proficiency",
            "description": "Create or update account-level proficiency ratings. These ratings will apply to all\nsub-accounts, unless they have their own account-level proficiency ratings defined.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create/update proficiency ratings",
                    "notes": "Create or update account-level proficiency ratings. These ratings will apply to all\nsub-accounts, unless they have their own account-level proficiency ratings defined.",
                    "nickname": "create_update_proficiency_ratings_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[description]",
                            "description": "The description of the rating level.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[points]",
                            "description": "The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[mastery]",
                            "description": "Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "ratings[color]",
                            "description": "The color associated with the rating level. Should be a hex color code like '00FFFF'.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Proficiency"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/outcome_proficiency",
            "description": "Get account-level proficiency ratings. If not defined for this account,\nit will return proficiency ratings for the nearest super-account with ratings defined.\nWill return 404 if none found.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\\n        -H 'Authorization: Bearer <token>'",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get proficiency ratings",
                    "notes": "Get account-level proficiency ratings. If not defined for this account,\nit will return proficiency ratings for the nearest super-account with ratings defined.\nWill return 404 if none found.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\\n        -H 'Authorization: Bearer <token>'",
                    "nickname": "get_proficiency_ratings_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Proficiency"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/outcome_proficiency",
            "description": "Get account-level proficiency ratings. If not defined for this account,\nit will return proficiency ratings for the nearest super-account with ratings defined.\nWill return 404 if none found.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\\n        -H 'Authorization: Bearer <token>'",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get proficiency ratings",
                    "notes": "Get account-level proficiency ratings. If not defined for this account,\nit will return proficiency ratings for the nearest super-account with ratings defined.\nWill return 404 if none found.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\\n        -H 'Authorization: Bearer <token>'",
                    "nickname": "get_proficiency_ratings_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Proficiency"
                }
            ]
        },
        {
            "path": "/v1/progress/{id}",
            "description": "Return completion and status information about an asynchronous job",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query progress",
                    "notes": "Return completion and status information about an asynchronous job",
                    "nickname": "query_progress",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/progress/{id}",
            "description": "Return completion and status information about an asynchronous job",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query progress",
                    "notes": "Return completion and status information about an asynchronous job",
                    "nickname": "query_progress",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/lti/developer_key/update_public_jwk",
            "description": "Rotate the public key in jwk format when using lti services",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update Public JWK",
                    "notes": "Rotate the public key in jwk format when using lti services",
                    "nickname": "update_public_jwk",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "public_jwk",
                            "description": "The new public jwk that will be set to the tools current public jwk.",
                            "type": "json",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "DeveloperKey"
                }
            ]
        }
    ]
}