{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0",
    "title": "Canvas APIs"
  },
  "servers": [
    {
      "url": "https://canvas.instructure.com/api"
    }
  ],
  "paths": {
    "/v1/accounts/{account_id}/visible_calendars_count": {
      "get": {
        "tags": [
          "account_calendars"
        ],
        "summary": "Count of all visible account calendars",
        "description": "Returns the number of visible account calendars.",
        "operationId": "count_of_all_visible_account_calendars",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCalendar"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account_calendars": {
      "get": {
        "tags": [
          "account_calendars"
        ],
        "summary": "List available account calendars",
        "description": "Returns a paginated list of account calendars available to the current user.\nIncludes visible account calendars where the user has an account association.",
        "operationId": "list_available_account_calendars",
        "parameters": [
          {
            "name": "search_term",
            "in": "query",
            "description": "When included, searches available account calendars for the term. Returns matching\nresults. Term must be at least 2 characters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountCalendar"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/account_calendars/{account_id}": {
      "get": {
        "tags": [
          "account_calendars"
        ],
        "summary": "Get a single account calendar",
        "description": "Get details about a specific account calendar.",
        "operationId": "get_single_account_calendar",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCalendar"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "account_calendars"
        ],
        "summary": "Update a calendar's visibility",
        "description": "Set an account calendar as hidden or visible. Requires the\n`manage_account_calendar_visibility` permission on the account.",
        "operationId": "update_calendar_s_visibility",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "visible": {
                    "type": "boolean",
                    "description": "Allow administrators with `manage_account_calendar_events` permission\nto create events on this calendar, and allow users to view this\ncalendar and its events."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCalendar"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/account_calendars": {
      "get": {
        "tags": [
          "account_calendars"
        ],
        "summary": "List all account calendars",
        "description": "Returns a paginated list of account calendars for the provided account and\nits first level of sub-accounts. Includes hidden calendars in the response.\nRequires the `manage_account_calendar_visibility` permission.",
        "operationId": "list_all_account_calendars",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "When included, searches all descendent accounts of provided account for the\nterm. Returns matching results. Term must be at least 2 characters. Can be\ncombined with a filter value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "When included, only returns calendars that are either visible or hidden. Can\nbe combined with a search term.",
            "schema": {
              "type": "string",
              "enum": [
                "visible",
                "hidden"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountCalendar"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "account_calendars"
        ],
        "summary": "Update many calendars' visibility",
        "description": "Set visibility on many calendars simultaneously. Requires the\n`manage_account_calendar_visibility` permission on the account.\n\nAccepts a JSON array of objects containing 2 keys each: `id`\n(the account's id), and `visible` (a boolean indicating whether\nthe account calendar is visible).",
        "operationId": "update_many_calendars_visibility",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCalendar"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/search": {
      "get": {
        "tags": [
          "account_domain_lookups"
        ],
        "summary": "Search account domains",
        "description": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
        "operationId": "search_account_domains",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "campus name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "no description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "no description",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "no description",
            "schema": {
              "type": "number",
              "format": "float"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/account_notifications": {
      "get": {
        "tags": [
          "account_notifications"
        ],
        "summary": "Index of active global notification for the user",
        "description": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned, unless\na include_past parameter is passed in as true.",
        "operationId": "index_of_active_global_notification_for_user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_past",
            "in": "query",
            "description": "Include past and dismissed global announcements.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountNotification"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account_notifications"
        ],
        "summary": "Create a global notification",
        "description": "Create and return a new global notification for an account.",
        "operationId": "create_global_notification",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "account_notification[end_at]",
                  "account_notification[message]",
                  "account_notification[start_at]",
                  "account_notification[subject]"
                ],
                "properties": {
                  "account_notification[subject]": {
                    "type": "string",
                    "description": "The subject of the notification."
                  },
                  "account_notification[message]": {
                    "type": "string",
                    "description": "The message body of the notification."
                  },
                  "account_notification[start_at]": {
                    "type": "object",
                    "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
                  },
                  "account_notification[end_at]": {
                    "type": "object",
                    "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
                  },
                  "account_notification[icon]": {
                    "type": "string",
                    "description": "The icon to display with the notification.\nNote: Defaults to warning.",
                    "enum": [
                      "warning",
                      "information",
                      "question",
                      "error",
                      "calendar"
                    ]
                  },
                  "account_notification_roles": {
                    "type": "array",
                    "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/account_notifications/{id}": {
      "get": {
        "tags": [
          "account_notifications"
        ],
        "summary": "Show a global notification",
        "description": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
        "operationId": "show_global_notification",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNotification"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "account_notifications"
        ],
        "summary": "Update a global notification",
        "description": "Update global notification for an account.",
        "operationId": "update_global_notification",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "account_notification[subject]": {
                    "type": "string",
                    "description": "The subject of the notification."
                  },
                  "account_notification[message]": {
                    "type": "string",
                    "description": "The message body of the notification."
                  },
                  "account_notification[start_at]": {
                    "type": "object",
                    "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
                  },
                  "account_notification[end_at]": {
                    "type": "object",
                    "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
                  },
                  "account_notification[icon]": {
                    "type": "string",
                    "description": "The icon to display with the notification.",
                    "enum": [
                      "warning",
                      "information",
                      "question",
                      "error",
                      "calendar"
                    ]
                  },
                  "account_notification_roles": {
                    "type": "array",
                    "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "account_notifications"
        ],
        "summary": "Close notification for user",
        "description": "If the current user no long wants to see this notification it can be excused with this call",
        "operationId": "close_notification_for_user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNotification"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/reports/{report}": {
      "get": {
        "tags": [
          "account_reports"
        ],
        "summary": "Index of Reports",
        "description": "Shows all reports that have been run for the account of a specific type.",
        "operationId": "index_of_reports",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account_reports"
        ],
        "summary": "Start a Report",
        "description": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
        "operationId": "start_report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "parameters": {
                    "type": "string",
                    "description": "The parameters will vary for each report. To fetch a list\nof available parameters for each report, see {api:AccountReportsController#available_reports List Available Reports}.\nA few example parameters have been provided below. Note that the example\nparameters provided below may not be valid for every report."
                  },
                  "parameters[skip_message]": {
                    "type": "boolean",
                    "description": "If true, no message will be sent\nto the user upon completion of the report."
                  },
                  "parameters[course_id]": {
                    "type": "integer",
                    "description": "The id of the course to report on.\nNote: this parameter has been listed to serve as an example and may not be\nvalid for every report.",
                    "format": "int64"
                  },
                  "parameters[users]": {
                    "type": "boolean",
                    "description": "If true, user data will be included. If\nfalse, user data will be omitted. Note: this parameter has been listed to\nserve as an example and may not be valid for every report."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/reports/{report}/{id}": {
      "get": {
        "tags": [
          "account_reports"
        ],
        "summary": "Status of a Report",
        "description": "Returns the status of a report.",
        "operationId": "status_of_report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account_reports"
        ],
        "summary": "Delete a Report",
        "description": "Deletes a generated report instance.",
        "operationId": "delete_report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/reports": {
      "get": {
        "tags": [
          "account_reports"
        ],
        "summary": "List Available Reports",
        "description": "Returns a paginated list of reports for the current context.",
        "operationId": "list_available_reports",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{id}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get a single account",
        "description": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
        "operationId": "get_single_account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Update an account",
        "description": "Update an existing account.",
        "operationId": "update_account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "account[name]": {
                    "type": "string",
                    "description": "Updates the account name"
                  },
                  "account[sis_account_id]": {
                    "type": "string",
                    "description": "Updates the account sis_account_id\nMust have manage_sis permission and must not be a root_account."
                  },
                  "account[default_time_zone]": {
                    "type": "string",
                    "description": "The default time zone of the account. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
                  },
                  "account[default_storage_quota_mb]": {
                    "type": "integer",
                    "description": "The default course storage quota to be used, if not otherwise specified.",
                    "format": "int64"
                  },
                  "account[default_user_storage_quota_mb]": {
                    "type": "integer",
                    "description": "The default user storage quota to be used, if not otherwise specified.",
                    "format": "int64"
                  },
                  "account[default_group_storage_quota_mb]": {
                    "type": "integer",
                    "description": "The default group storage quota to be used, if not otherwise specified.",
                    "format": "int64"
                  },
                  "account[course_template_id]": {
                    "type": "integer",
                    "description": "The ID of a course to be used as a template for all newly created courses.\nEmpty means to inherit the setting from parent account, 0 means to not\nuse a template even if a parent account has one set. The course must be\nmarked as a template.",
                    "format": "int64"
                  },
                  "account[settings][restrict_student_past_view][value]": {
                    "type": "boolean",
                    "description": "Restrict students from viewing courses after end date"
                  },
                  "account[settings][restrict_student_past_view][locked]": {
                    "type": "boolean",
                    "description": "Lock this setting for sub-accounts and courses"
                  },
                  "account[settings][restrict_student_future_view][value]": {
                    "type": "boolean",
                    "description": "Restrict students from viewing courses before start date"
                  },
                  "account[settings][microsoft_sync_enabled]": {
                    "type": "boolean",
                    "description": "Determines whether this account has Microsoft Teams Sync enabled or not.\n\nNote that if you are altering Microsoft Teams sync settings you must enable\nthe Microsoft Group enrollment syncing feature flag. In addition, if you are enabling\nMicrosoft Teams sync, you must also specify a tenant, login attribute, and a remote attribute.\nSpecifying a suffix to use is optional."
                  },
                  "account[settings][microsoft_sync_tenant]": {
                    "type": "string",
                    "description": "The tenant this account should use when using Microsoft Teams Sync.\nThis should be an Azure Active Directory domain name."
                  },
                  "account[settings][microsoft_sync_login_attribute]": {
                    "type": "string",
                    "description": "The attribute this account should use to lookup users when using Microsoft Teams Sync.\nMust be one of \"sub\", \"email\", \"oid\", \"preferred_username\", or \"integration_id\"."
                  },
                  "account[settings][microsoft_sync_login_attribute_suffix]": {
                    "type": "string",
                    "description": "A suffix that will be appended to the result of the login attribute when associating\nCanvas users with Microsoft users. Must be under 255 characters and contain no whitespace.\nThis field is optional."
                  },
                  "account[settings][microsoft_sync_remote_attribute]": {
                    "type": "string",
                    "description": "The Active Directory attribute to use when associating Canvas users with Microsoft users.\nMust be one of \"mail\", \"mailNickname\", or \"userPrincipalName\"."
                  },
                  "account[settings][restrict_student_future_view][locked]": {
                    "type": "boolean",
                    "description": "Lock this setting for sub-accounts and courses"
                  },
                  "account[settings][lock_all_announcements][value]": {
                    "type": "boolean",
                    "description": "Disable comments on announcements"
                  },
                  "account[settings][lock_all_announcements][locked]": {
                    "type": "boolean",
                    "description": "Lock this setting for sub-accounts and courses"
                  },
                  "account[settings][usage_rights_required][value]": {
                    "type": "boolean",
                    "description": "Copyright and license information must be provided for files before they are published."
                  },
                  "account[settings][usage_rights_required][locked]": {
                    "type": "boolean",
                    "description": "Lock this setting for sub-accounts and courses"
                  },
                  "account[settings][restrict_student_future_listing][value]": {
                    "type": "boolean",
                    "description": "Restrict students from viewing future enrollments in course list"
                  },
                  "account[settings][restrict_student_future_listing][locked]": {
                    "type": "boolean",
                    "description": "Lock this setting for sub-accounts and courses"
                  },
                  "account[settings][conditional_release][value]": {
                    "type": "boolean",
                    "description": "Enable or disable individual learning paths for students based on assessment"
                  },
                  "account[settings][conditional_release][locked]": {
                    "type": "boolean",
                    "description": "Lock this setting for sub-accounts and courses"
                  },
                  "override_sis_stickiness": {
                    "type": "boolean",
                    "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness"
                  },
                  "account[settings][lock_outcome_proficiency][value]": {
                    "type": "boolean",
                    "description": "[DEPRECATED] Restrict instructors from changing mastery scale"
                  },
                  "account[lock_outcome_proficiency][locked]": {
                    "type": "boolean",
                    "description": "[DEPRECATED] Lock this setting for sub-accounts and courses"
                  },
                  "account[settings][lock_proficiency_calculation][value]": {
                    "type": "boolean",
                    "description": "[DEPRECATED] Restrict instructors from changing proficiency calculation method"
                  },
                  "account[lock_proficiency_calculation][locked]": {
                    "type": "boolean",
                    "description": "[DEPRECATED] Lock this setting for sub-accounts and courses"
                  },
                  "account[services]": {
                    "type": "object",
                    "description": "Give this a set of keys and boolean values to enable or disable services matching the keys"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/v1/course_accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "List accounts for course admins",
        "description": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
        "operationId": "list_accounts_for_course_admins",
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/permissions": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Permissions",
        "description": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
        "operationId": "permissions",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/help_links": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get help links",
        "description": "Returns the help links for that account",
        "operationId": "get_help_links",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelpLinks"
                }
              }
            }
          }
        }
      }
    },
    "/v1/manually_created_courses_account": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get the manually-created courses sub-account for the domain root account",
        "operationId": "get_manually_created_courses_sub_account_for_domain_root_account",
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "List accounts",
        "description": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
        "operationId": "list_accounts",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"lti_guid\":: the 'tool_consumer_instance_guid' that will be sent for this account on LTI launches\n\"registration_settings\":: returns info about the privacy policy and terms of use\n\"services\":: returns services and whether they are enabled (requires account management permissions)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "lti_guid",
                "registration_settings",
                "services"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/courses": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "List active courses in an account",
        "description": "Retrieve a paginated list of courses in this account.",
        "operationId": "list_active_courses_in_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_enrollments",
            "in": "query",
            "description": "If true, include only courses with at least one enrollment.  If false,\ninclude only courses with no enrollments.  If not present, do not filter\non course enrollment status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enrollment_type",
            "in": "query",
            "description": "If set, only return courses that have at least one user enrolled in\nin the course with one of the specified enrollment types.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "teacher",
                "student",
                "ta",
                "observer",
                "designer"
              ]
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "If true, include only published courses.  If false, exclude published\ncourses.  If not present, do not filter on published status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "completed",
            "in": "query",
            "description": "If true, include only completed courses (these may be in state\n'completed', or their enrollment term may have ended).  If false, exclude\ncompleted courses.  If not present, do not filter on completed status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blueprint",
            "in": "query",
            "description": "If true, include only blueprint courses. If false, exclude them.\nIf not present, do not filter on this basis.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blueprint_associated",
            "in": "query",
            "description": "If true, include only courses that inherit content from a blueprint course.\nIf false, exclude them. If not present, do not filter on this basis.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "by_teachers",
            "in": "query",
            "description": "List of User IDs of teachers; if supplied, include only courses taught by\none of the referenced users.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "by_subaccounts",
            "in": "query",
            "description": "List of Account IDs; if supplied, include only courses associated with one\nof the referenced subaccounts.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "hide_enrollmentless_courses",
            "in": "query",
            "description": "If present, only return courses that have at least one enrollment.\nEquivalent to 'with_enrollments=true'; retained for compatibility.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "If set, only return courses that are in the given state(s). By default,\nall states but \"deleted\" are returned.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "created",
                "claimed",
                "available",
                "completed",
                "deleted",
                "all"
              ]
            }
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "description": "If set, only includes courses from the specified term.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- All explanations can be seen in the {api:CoursesController#index Course API index documentation}\n- \"sections\", \"needs_grading_count\" and \"total_scores\" are not valid options at the account level",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "syllabus_body",
                "term",
                "course_progress",
                "storage_quota_used_mb",
                "total_students",
                "teachers",
                "account_name",
                "concluded"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The column to sort results by.",
            "schema": {
              "type": "string",
              "enum": [
                "course_name",
                "sis_course_id",
                "teacher",
                "account_name"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order to sort the given column by.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search_by",
            "in": "query",
            "description": "The filter to search by. \"course\" searches for course names, course codes,\nand SIS IDs. \"teacher\" searches for teacher names",
            "schema": {
              "type": "string",
              "enum": [
                "course",
                "teacher"
              ]
            }
          },
          {
            "name": "starts_before",
            "in": "query",
            "description": "If set, only return courses that start before the value (inclusive)\nor their enrollment term starts before the value (inclusive)\nor both the course's start_at and the enrollment term's start_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ends_after",
            "in": "query",
            "description": "If set, only return courses that end after the value (inclusive)\nor their enrollment term ends after the value (inclusive)\nor both the course's end_at and the enrollment term's end_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "homeroom",
            "in": "query",
            "description": "If set, only return homeroom courses.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "courses"
        ],
        "summary": "Update courses",
        "description": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
        "operationId": "update_courses",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "course_ids",
                  "event"
                ],
                "properties": {
                  "course_ids": {
                    "type": "array",
                    "description": "List of ids of courses to update. At most 500 courses may be updated in one call.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "event": {
                    "type": "string",
                    "description": "The action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n  rather than delete a course if there is any possibility the course will be used again.) The recovered course\n  will be unpublished. Deleted enrollments will not be recovered.",
                    "enum": [
                      "offer",
                      "conclude",
                      "delete",
                      "undelete"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseProgress"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Create a new course",
        "description": "Create a new course",
        "operationId": "create_new_course",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "course[name]": {
                    "type": "string",
                    "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\""
                  },
                  "course[course_code]": {
                    "type": "string",
                    "description": "The course code for the course."
                  },
                  "course[start_at]": {
                    "type": "string",
                    "format": "datetime",
                    "$ref": "#/components/schemas/DateTime",
                    "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true."
                  },
                  "course[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true."
                  },
                  "course[license]": {
                    "type": "string",
                    "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain)."
                  },
                  "course[is_public]": {
                    "type": "boolean",
                    "description": "Set to true if course is public to both authenticated and unauthenticated users."
                  },
                  "course[is_public_to_auth_users]": {
                    "type": "boolean",
                    "description": "Set to true if course is public only to authenticated users."
                  },
                  "course[public_syllabus]": {
                    "type": "boolean",
                    "description": "Set to true to make the course syllabus public."
                  },
                  "course[public_syllabus_to_auth]": {
                    "type": "boolean",
                    "description": "Set to true to make the course syllabus public for authenticated users."
                  },
                  "course[public_description]": {
                    "type": "string",
                    "description": "A publicly visible description of the course."
                  },
                  "course[allow_student_wiki_edits]": {
                    "type": "boolean",
                    "description": "If true, students will be able to modify the course wiki."
                  },
                  "course[allow_wiki_comments]": {
                    "type": "boolean",
                    "description": "If true, course members will be able to comment on wiki pages."
                  },
                  "course[allow_student_forum_attachments]": {
                    "type": "boolean",
                    "description": "If true, students can attach files to forum posts."
                  },
                  "course[open_enrollment]": {
                    "type": "boolean",
                    "description": "Set to true if the course is open enrollment."
                  },
                  "course[self_enrollment]": {
                    "type": "boolean",
                    "description": "Set to true if the course is self enrollment."
                  },
                  "course[restrict_enrollments_to_course_dates]": {
                    "type": "boolean",
                    "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse. This value must be set to true\nin order to specify a course start date and/or end date."
                  },
                  "course[term_id]": {
                    "type": "string",
                    "description": "The unique ID of the term to create to course in."
                  },
                  "course[sis_course_id]": {
                    "type": "string",
                    "description": "The unique SIS identifier."
                  },
                  "course[integration_id]": {
                    "type": "string",
                    "description": "The unique Integration identifier."
                  },
                  "course[hide_final_grades]": {
                    "type": "boolean",
                    "description": "If this option is set to true, the totals in student grades summary will\nbe hidden."
                  },
                  "course[apply_assignment_group_weights]": {
                    "type": "boolean",
                    "description": "Set to true to weight final grade based on assignment groups percentages."
                  },
                  "course[time_zone]": {
                    "type": "string",
                    "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
                  },
                  "offer": {
                    "type": "boolean",
                    "description": "If this option is set to true, the course will be available to students\nimmediately."
                  },
                  "enroll_me": {
                    "type": "boolean",
                    "description": "Set to true to enroll the current user as the teacher."
                  },
                  "course[default_view]": {
                    "type": "string",
                    "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                    "enum": [
                      "feed",
                      "wiki",
                      "modules",
                      "syllabus",
                      "assignments"
                    ]
                  },
                  "course[syllabus_body]": {
                    "type": "string",
                    "description": "The syllabus body for the course"
                  },
                  "course[grading_standard_id]": {
                    "type": "integer",
                    "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                    "format": "int64"
                  },
                  "course[grade_passback_setting]": {
                    "type": "string",
                    "description": "Optional. The grade_passback_setting for the course. Only 'nightly_sync', 'disabled', and '' are allowed"
                  },
                  "course[course_format]": {
                    "type": "string",
                    "description": "Optional. Specifies the format of the course. (Should be 'on_campus', 'online', or 'blended')"
                  },
                  "enable_sis_reactivation": {
                    "type": "boolean",
                    "description": "When true, will first try to re-activate a deleted course with matching sis_course_id if possible."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/sub_accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get the sub-accounts of an account",
        "description": "List accounts that are sub-accounts of the given account.",
        "operationId": "get_sub_accounts_of_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, the entire account tree underneath\nthis account will be returned (though still paginated). If false, only\ndirect sub-accounts of this account will be returned. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create a new sub-account",
        "description": "Add a new sub-account to a given account.",
        "operationId": "create_new_sub_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "account[name]"
                ],
                "properties": {
                  "account[name]": {
                    "type": "string",
                    "description": "The name of the new sub-account."
                  },
                  "account[sis_account_id]": {
                    "type": "string",
                    "description": "The account's identifier in the Student Information System."
                  },
                  "account[default_storage_quota_mb]": {
                    "type": "integer",
                    "description": "The default course storage quota to be used, if not otherwise specified.",
                    "format": "int64"
                  },
                  "account[default_user_storage_quota_mb]": {
                    "type": "integer",
                    "description": "The default user storage quota to be used, if not otherwise specified.",
                    "format": "int64"
                  },
                  "account[default_group_storage_quota_mb]": {
                    "type": "integer",
                    "description": "The default group storage quota to be used, if not otherwise specified.",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/terms_of_service": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get the Terms of Service",
        "description": "Returns the terms of service for that account",
        "operationId": "get_terms_of_service",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermsOfService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/sub_accounts/{id}": {
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete a sub-account",
        "description": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
        "operationId": "delete_sub_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/v1/manageable_accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get accounts that admins can manage",
        "description": "A paginated list of accounts where the current user has permission to create\nor manage courses. List will be empty for students and teachers as only admins\ncan view which accounts they are in.",
        "operationId": "get_accounts_that_admins_can_manage",
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/settings": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Settings",
        "description": "Returns settings for the specified account as a JSON object. The caller must be an Account\nadmin with the manage_account_settings permission.",
        "operationId": "settings",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/users/{user_id}": {
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete a user from the root account",
        "description": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
        "operationId": "delete_user_from_root_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/lti/accounts/{account_id}": {
      "get": {
        "tags": [
          "accounts_(lti)"
        ],
        "summary": "Get account",
        "description": "Retrieve information on an individual account, given by local or global ID.",
        "operationId": "get_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/admins": {
      "get": {
        "tags": [
          "admins"
        ],
        "summary": "List account admins",
        "description": "A paginated list of the admins in the account",
        "operationId": "list_account_admins",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Scope the results to those with user IDs equal to any of the IDs specified here.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Admin"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Make an account admin",
        "description": "Flag an existing user as an admin within the account.",
        "operationId": "make_account_admin",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "user_id"
                ],
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "The id of the user to promote.",
                    "format": "int64"
                  },
                  "role": {
                    "type": "string",
                    "description": "[DEPRECATED] The user's admin relationship with the account will be\ncreated with the given role. Defaults to 'AccountAdmin'."
                  },
                  "role_id": {
                    "type": "integer",
                    "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'.",
                    "format": "int64"
                  },
                  "send_confirmation": {
                    "type": "boolean",
                    "description": "Send a notification email to\nthe new admin if true. Default is true."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admin"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/admins/{user_id}": {
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "Remove account admin",
        "description": "Remove the rights associated with an account admin role from a user.",
        "operationId": "remove_account_admin",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "[DEPRECATED] Account role to remove from the user. Defaults to\n'AccountAdmin'. Any other account role must be specified explicitly.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admin"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/completed/statistics_by_subaccount": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level statistics, broken down by subaccount",
        "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_statistics_broken_down_by_subaccount_completed",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/analytics/student_summaries": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get course-level student summary data",
        "description": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
        "operationId": "get_course_level_student_summary_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_column",
            "in": "query",
            "description": "The order results in which results are returned.  Defaults to \"name\".",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "name_descending",
                "score",
                "score_descending",
                "participations",
                "participations_descending",
                "page_views",
                "page_views_descending"
              ]
            }
          },
          {
            "name": "student_id",
            "in": "query",
            "description": "If set, returns only the specified student.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/completed/activity": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level participation data",
        "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
        "operationId": "get_department_level_participation_data_completed",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics_by_subaccount": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level statistics, broken down by subaccount",
        "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_statistics_broken_down_by_subaccount_terms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/current/activity": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level participation data",
        "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
        "operationId": "get_department_level_participation_data_current",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/current/statistics": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level statistics",
        "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_statistics_current",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/terms/{term_id}/grades": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level grade data",
        "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_grade_data_terms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/analytics/activity": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get course-level participation data",
        "description": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
        "operationId": "get_course_level_participation_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/analytics/users/{student_id}/assignments": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get user-in-a-course-level assignment data",
        "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
        "operationId": "get_user_in_a_course_level_assignment_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "student_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/current/grades": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level grade data",
        "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_grade_data_current",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/analytics/assignments": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get course-level assignment data",
        "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
        "operationId": "get_course_level_assignment_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "If async is true, then the course_assignments call can happen asynch-\nronously and MAY return a response containing a progress_url key instead\nof an assignments array. If it does, then it is the caller's\nresponsibility to poll the API again to see if the progress is complete.\nIf the data is ready (possibly even on the first async call) then it\nwill be passed back normally, as documented in the example response.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/analytics/users/{student_id}/activity": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get user-in-a-course-level participation data",
        "description": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
        "operationId": "get_user_in_a_course_level_participation_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "student_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/completed/grades": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level grade data",
        "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_grade_data_completed",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/analytics/users/{student_id}/communication": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get user-in-a-course-level messaging data",
        "description": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
        "operationId": "get_user_in_a_course_level_messaging_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "student_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level statistics",
        "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_statistics_terms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/completed/statistics": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level statistics",
        "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_statistics_completed",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/current/statistics_by_subaccount": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level statistics, broken down by subaccount",
        "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operationId": "get_department_level_statistics_broken_down_by_subaccount_current",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/analytics/terms/{term_id}/activity": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get department-level participation data",
        "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
        "operationId": "get_department_level_participation_data_terms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/external_feeds/{external_feed_id}": {
      "delete": {
        "tags": [
          "announcement_external_feeds"
        ],
        "summary": "Delete an external feed",
        "description": "Deletes the external feed.",
        "operationId": "delete_external_feed_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_feed_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/external_feeds/{external_feed_id}": {
      "delete": {
        "tags": [
          "announcement_external_feeds"
        ],
        "summary": "Delete an external feed",
        "description": "Deletes the external feed.",
        "operationId": "delete_external_feed_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_feed_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/external_feeds": {
      "get": {
        "tags": [
          "announcement_external_feeds"
        ],
        "summary": "List external feeds",
        "description": "Returns the paginated list of External Feeds this course or group.",
        "operationId": "list_external_feeds_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalFeed"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "announcement_external_feeds"
        ],
        "summary": "Create an external feed",
        "description": "Create a new external feed for the course or group.",
        "operationId": "create_external_feed_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The url to the external rss or atom feed"
                  },
                  "header_match": {
                    "type": "boolean",
                    "description": "If given, only feed entries that contain this string in their title will be imported"
                  },
                  "verbosity": {
                    "type": "string",
                    "description": "Defaults to \"full\"",
                    "enum": [
                      "full",
                      "truncate",
                      "link_only"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/external_feeds": {
      "get": {
        "tags": [
          "announcement_external_feeds"
        ],
        "summary": "List external feeds",
        "description": "Returns the paginated list of External Feeds this course or group.",
        "operationId": "list_external_feeds_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalFeed"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "announcement_external_feeds"
        ],
        "summary": "Create an external feed",
        "description": "Create a new external feed for the course or group.",
        "operationId": "create_external_feed_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The url to the external rss or atom feed"
                  },
                  "header_match": {
                    "type": "boolean",
                    "description": "If given, only feed entries that contain this string in their title will be imported"
                  },
                  "verbosity": {
                    "type": "string",
                    "description": "Defaults to \"full\"",
                    "enum": [
                      "full",
                      "truncate",
                      "link_only"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          }
        }
      }
    },
    "/v1/announcements": {
      "get": {
        "tags": [
          "announcements"
        ],
        "summary": "List announcements",
        "description": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
        "operationId": "list_announcements",
        "parameters": [
          {
            "name": "context_codes",
            "in": "query",
            "description": "List of context_codes to retrieve announcements for (for example, +course_123+). Only courses\nare presently supported. The call will fail unless the caller has View Announcements permission\nin all listed courses.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Only return announcements posted since the start_date (inclusive).\nDefaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Only return announcements posted before the end_date (inclusive).\nDefaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nAnnouncements scheduled for future posting will only be returned to course administrators.",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "description": "Only return active announcements that have been published.\nApplies only to requesting users that have permission to view\nunpublished items.\nDefaults to false for users with access to view unpublished items,\notherwise true and unmodifiable.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "latest_only",
            "in": "query",
            "description": "Only return the latest announcement for each associated context.\nThe response will include at most one announcement for each\nspecified context in the context_codes[] parameter.\nDefaults to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Optional list of resources to include with the response. May include\na string of the name of the resource. Possible values are:\n\"sections\", \"sections_user_count\"\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscussionTopic"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/scopes": {
      "get": {
        "tags": [
          "api_token_scopes"
        ],
        "summary": "List scopes",
        "description": "A list of scopes that can be applied to developer keys and access tokens.",
        "operationId": "list_scopes",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "description": "The attribute to group the scopes by. By default no grouping is done.",
            "schema": {
              "type": "string",
              "enum": [
                "resource_name"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Scope"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/appointment_groups/{id}": {
      "get": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "Get a single appointment group",
        "description": "Returns information for a single appointment group",
        "operationId": "get_single_appointment_group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include. See include[] argument of\n\"List appointment groups\" action.\n\n\"child_events\":: reservations of time slots time slots\n\"appointments\":: will always be returned\n\"all_context_codes\":: all context codes associated with this appointment group",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "child_events",
                "appointments",
                "all_context_codes"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "Update an appointment group",
        "description": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
        "operationId": "update_appointment_group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "appointment_group[context_codes]"
                ],
                "properties": {
                  "appointment_group[context_codes]": {
                    "type": "array",
                    "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "appointment_group[sub_context_codes]": {
                    "type": "array",
                    "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                    "items": {
                      "type": "string"
                    }
                  },
                  "appointment_group[title]": {
                    "type": "string",
                    "description": "Short title for the appointment group."
                  },
                  "appointment_group[description]": {
                    "type": "string",
                    "description": "Longer text description of the appointment group."
                  },
                  "appointment_group[location_name]": {
                    "type": "string",
                    "description": "Location name of the appointment group."
                  },
                  "appointment_group[location_address]": {
                    "type": "string",
                    "description": "Location address."
                  },
                  "appointment_group[publish]": {
                    "type": "boolean",
                    "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false."
                  },
                  "appointment_group[participants_per_appointment]": {
                    "type": "integer",
                    "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                    "format": "int64"
                  },
                  "appointment_group[min_appointments_per_participant]": {
                    "type": "integer",
                    "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                    "format": "int64"
                  },
                  "appointment_group[max_appointments_per_participant]": {
                    "type": "integer",
                    "description": "Maximum number of time slots a user may register for.",
                    "format": "int64"
                  },
                  "appointment_group[new_appointments][X]": {
                    "type": "array",
                    "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "appointment_group[participant_visibility]": {
                    "type": "string",
                    "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up. Defaults to \"private\".",
                    "enum": [
                      "private",
                      "protected"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "Delete an appointment group",
        "description": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
        "operationId": "delete_appointment_group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cancel_reason",
            "in": "query",
            "description": "Reason for deleting/canceling the appointment group.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/appointment_groups/next_appointment": {
      "get": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "Get next appointment",
        "description": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
        "operationId": "get_next_appointment",
        "parameters": [
          {
            "name": "appointment_group_ids",
            "in": "query",
            "description": "List of ids of appointment groups to search.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/appointment_groups/{id}/users": {
      "get": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "List user participants",
        "description": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
        "operationId": "list_user_participants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registration_status",
            "in": "query",
            "description": "Limits results to the a given participation status, defaults to \"all\"",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "registered",
                "registered"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/appointment_groups/{id}/groups": {
      "get": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "List student group participants",
        "description": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
        "operationId": "list_student_group_participants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registration_status",
            "in": "query",
            "description": "Limits results to the a given participation status, defaults to \"all\"",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "registered",
                "registered"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/appointment_groups": {
      "get": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "List appointment groups",
        "description": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
        "operationId": "list_appointment_groups",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "Defaults to \"reservable\"",
            "schema": {
              "type": "string",
              "enum": [
                "reservable",
                "manageable"
              ]
            }
          },
          {
            "name": "context_codes",
            "in": "query",
            "description": "Array of context codes used to limit returned results.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_past_appointments",
            "in": "query",
            "description": "Defaults to false. If true, includes past appointment groups",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"appointments\":: calendar event time slots for this appointment group\n\"child_events\":: reservations of those time slots\n\"participant_count\":: number of reservations\n\"reserved_times\":: the event id, start time and end time of reservations\n                   the current user has made)\n\"all_context_codes\":: all context codes associated with this appointment group",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "appointments",
                "child_events",
                "participant_count",
                "reserved_times",
                "all_context_codes"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "appointment_groups"
        ],
        "summary": "Create an appointment group",
        "description": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
        "operationId": "create_appointment_group",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "appointment_group[context_codes]",
                  "appointment_group[title]"
                ],
                "properties": {
                  "appointment_group[context_codes]": {
                    "type": "array",
                    "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "appointment_group[sub_context_codes]": {
                    "type": "array",
                    "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                    "items": {
                      "type": "string"
                    }
                  },
                  "appointment_group[title]": {
                    "type": "string",
                    "description": "Short title for the appointment group."
                  },
                  "appointment_group[description]": {
                    "type": "string",
                    "description": "Longer text description of the appointment group."
                  },
                  "appointment_group[location_name]": {
                    "type": "string",
                    "description": "Location name of the appointment group."
                  },
                  "appointment_group[location_address]": {
                    "type": "string",
                    "description": "Location address."
                  },
                  "appointment_group[publish]": {
                    "type": "boolean",
                    "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false."
                  },
                  "appointment_group[participants_per_appointment]": {
                    "type": "integer",
                    "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                    "format": "int64"
                  },
                  "appointment_group[min_appointments_per_participant]": {
                    "type": "integer",
                    "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                    "format": "int64"
                  },
                  "appointment_group[max_appointments_per_participant]": {
                    "type": "integer",
                    "description": "Maximum number of time slots a user may register for.",
                    "format": "int64"
                  },
                  "appointment_group[new_appointments][X]": {
                    "type": "array",
                    "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "appointment_group[participant_visibility]": {
                    "type": "string",
                    "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up.  Defaults to\n              \"private\".",
                    "enum": [
                      "private",
                      "protected"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/extensions": {
      "post": {
        "tags": [
          "assignment_extensions"
        ],
        "summary": "Set extensions for student assignment submissions",
        "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend assignments for this course\n* <b>400 Bad Request</b> if any of the extensions are invalid",
        "operationId": "set_extensions_for_student_assignment_submissions",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "assignment_extensions[extra_attempts]",
                  "assignment_extensions[user_id]"
                ],
                "properties": {
                  "assignment_extensions[user_id]": {
                    "type": "array",
                    "description": "The ID of the user we want to add assignment extensions for.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "assignment_extensions[extra_attempts]": {
                    "type": "array",
                    "description": "Number of times the student is allowed to re-take the assignment over the\nlimit.",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignment_groups": {
      "get": {
        "tags": [
          "assignment_groups"
        ],
        "summary": "List assignment groups",
        "description": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
        "operationId": "list_assignment_groups",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Associations to include with the group. \"discussion_topic\", \"all_dates\", \"can_edit\",\n\"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included.\n\"score_statistics\" requires that the \"assignments\" and \"submission\" options are included.\nThe \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on.\nIf \"observed_users\" is passed along with \"assignments\" and \"submission\", submissions for observed users will also be included as an array.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "assignments",
                "discussion_topic",
                "all_dates",
                "assignment_visibility",
                "overrides",
                "submission",
                "observed_users",
                "can_edit",
                "score_statistics"
              ]
            }
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "description": "If \"assignments\" are included, optionally return only assignments having their ID in this array. This argument may also be passed as\na comma separated string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "exclude_assignment_submission_types",
            "in": "query",
            "description": "If \"assignments\" are included, those with the specified submission types\nwill be excluded from the assignment groups.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "online_quiz",
                "discussion_topic",
                "wiki_page",
                "external_tool"
              ]
            }
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "description": "Apply assignment overrides for each assignment, defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist.)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "scope_assignments_to_student",
            "in": "query",
            "description": "If true, all assignments returned will apply to the current user in the\nspecified grading period. If assignments apply to other students in the\nspecified grading period, but not the current user, they will not be\nreturned. (Requires the grading_period_id argument and grading periods to\nexist. In addition, the current user must be a student.)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentGroup"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "assignment_groups"
        ],
        "summary": "Create an Assignment Group",
        "description": "Create a new assignment group for this course.",
        "operationId": "create_assignment_group",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The assignment group's name"
                  },
                  "position": {
                    "type": "integer",
                    "description": "The position of this assignment group in relation to the other assignment groups",
                    "format": "int64"
                  },
                  "group_weight": {
                    "type": "number",
                    "description": "The percent of the total grade that this assignment group represents",
                    "format": "float"
                  },
                  "sis_source_id": {
                    "type": "string",
                    "description": "The sis source id of the Assignment Group"
                  },
                  "integration_data": {
                    "type": "object",
                    "description": "The integration data of the Assignment Group"
                  },
                  "rules": {
                    "type": "string",
                    "description": "The grading rules that are applied within this assignment group\nSee the Assignment Group object definition for format"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentGroup"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}": {
      "get": {
        "tags": [
          "assignment_groups"
        ],
        "summary": "Get an Assignment Group",
        "description": "Returns the assignment group with the given id.",
        "operationId": "get_assignment_group",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\"\nare only valid if \"assignments\" is also included. \"score_statistics\" is only valid if \"submission\" and\n\"assignments\" are also included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments\ncourse feature be turned on.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "assignments",
                "discussion_topic",
                "assignment_visibility",
                "submission",
                "score_statistics"
              ]
            }
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "description": "Apply assignment overrides for each assignment, defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist on the account)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assignment_groups"
        ],
        "summary": "Edit an Assignment Group",
        "description": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
        "operationId": "edit_assignment_group",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "assignment_groups"
        ],
        "summary": "Destroy an Assignment Group",
        "description": "Deletes the assignment group with the given id.",
        "operationId": "destroy_assignment_group",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "move_assignments_to",
            "in": "query",
            "description": "The ID of an active Assignment Group to which the assignments that are\ncurrently assigned to the destroyed Assignment Group will be assigned.\nNOTE: If this argument is not provided, any assignments in this Assignment\nGroup will be deleted.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentGroup"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/assignments/{assignment_id}/override": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "Redirect to the assignment override for a group",
        "description": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
        "operationId": "redirect_to_assignment_override_for_group",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments/bulk_update": {
      "put": {
        "tags": [
          "assignments"
        ],
        "summary": "Bulk update assignment dates",
        "description": "Update due dates and availability dates for multiple assignments in a course.\n\nAccepts a JSON array of objects containing two keys each: +id+, the assignment id,\nand +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override\ndates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments}\nendpoint with +include[]=all_dates+.\n\nThis endpoint cannot create or destroy assignment overrides; any existing assignment overrides\nthat are not referenced in the arguments will be left alone. If an override is given, any dates\nthat are not supplied with it will be defaulted. To clear a date, specify null explicitly.\n\nAll referenced assignments will be validated before any are saved. A list of errors will\nbe returned if any provided dates are invalid, and no changes will be saved.\n\nThe bulk update is performed in a background job, use the {api:ProgressController#show Progress API}\nto check its status.",
        "operationId": "bulk_update_assignment_dates",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseProgress"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "Get a single assignment override",
        "description": "Returns details of the the override with the given id.",
        "operationId": "get_single_assignment_override",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentOverride"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assignments"
        ],
        "summary": "Update an assignment override",
        "description": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
        "operationId": "update_assignment_override",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "assignment_override[student_ids]": {
                    "type": "array",
                    "description": "The IDs of the\noverride's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override. Ignored unless the override\nbeing updated is adhoc.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "assignment_override[title]": {
                    "type": "string",
                    "description": "The title of an adhoc\nassignment override. Ignored unless the override being updated is adhoc."
                  },
                  "assignment_override[due_at]": {
                    "type": "object",
                    "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate."
                  },
                  "assignment_override[unlock_at]": {
                    "type": "object",
                    "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date."
                  },
                  "assignment_override[lock_at]": {
                    "type": "object",
                    "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentOverride"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "assignments"
        ],
        "summary": "Delete an assignment override",
        "description": "Deletes an override and returns its former details.",
        "operationId": "delete_assignment_override",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentOverride"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/duplicate": {
      "post": {
        "tags": [
          "assignments"
        ],
        "summary": "Duplicate assignnment",
        "description": "Duplicate an assignment and return a json based on result_type argument.",
        "operationId": "duplicate_assignnment",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "result_type": {
                    "type": "string",
                    "description": "Optional information:\nWhen the root account has the feature `newquizzes_on_quiz_page` enabled\nand this argument is set to \"Quiz\" the response will be serialized into a\nquiz format({file:doc/api/quizzes.html#Quiz});\nWhen this argument isn't specified the response will be serialized into an\nassignment format;",
                    "enum": [
                      "Quiz"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assignment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "List assignments",
        "description": "Returns the paginated list of assignments for the current course or assignment group.",
        "operationId": "list_assignments_assignment_groups",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "submission",
                "assignment_visibility",
                "all_dates",
                "overrides",
                "observed_users",
                "can_edit",
                "score_statistics"
              ]
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial title of the assignments to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "description": "Apply assignment overrides for each assignment, defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "needs_grading_count_by_section",
            "in": "query",
            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "If included, only return certain assignments depending on due date and submission status.",
            "schema": {
              "type": "string",
              "enum": [
                "past",
                "overdue",
                "undated",
                "ungraded",
                "unsubmitted",
                "upcoming",
                "future"
              ]
            }
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "description": "if set, return only assignments specified",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Determines the order of the assignments. Defaults to \"position\".",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "name",
                "due_at"
              ]
            }
          },
          {
            "name": "post_to_sis",
            "in": "query",
            "description": "Return only assignments that have post_to_sis set or not set.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/courses/{course_id}/assignments": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "List assignments for user",
        "description": "Returns the paginated list of assignments for the specified user if the current user has rights to view.\nSee {api:AssignmentsApiController#index List assignments} for valid arguments.",
        "operationId": "list_assignments_for_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/sections/{course_section_id}/assignments/{assignment_id}/override": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "Redirect to the assignment override for a section",
        "description": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
        "operationId": "redirect_to_assignment_override_for_section",
        "parameters": [
          {
            "name": "course_section_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments/overrides": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "Batch retrieve overrides in a course",
        "description": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
        "operationId": "batch_retrieve_overrides_in_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_overrides[id]",
            "in": "query",
            "description": "Ids of overrides to retrieve",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "assignment_overrides[assignment_id]",
            "in": "query",
            "description": "Ids of assignments for each override",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentOverride"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assignments"
        ],
        "summary": "Batch update overrides in a course",
        "description": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
        "operationId": "batch_update_overrides_in_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "assignment_overrides"
                ],
                "properties": {
                  "assignment_overrides": {
                    "type": "array",
                    "description": "Attributes for the updated overrides.",
                    "items": {
                      "$ref": "#/components/schemas/AssignmentOverride"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentOverride"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "assignments"
        ],
        "summary": "Batch create overrides in a course",
        "description": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
        "operationId": "batch_create_overrides_in_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "assignment_overrides"
                ],
                "properties": {
                  "assignment_overrides": {
                    "type": "array",
                    "description": "Attributes for the new assignment overrides.\nSee {api:AssignmentOverridesController#create Create an assignment override} for available\nattributes",
                    "items": {
                      "$ref": "#/components/schemas/AssignmentOverride"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentOverride"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments/{id}": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "Get a single assignment",
        "description": "Returns the assignment with the given id.",
        "operationId": "get_single_assignment",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included.\nFor \"score_statistics\" to be included, the \"submission\" option must also be set.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "submission",
                "assignment_visibility",
                "overrides",
                "observed_users",
                "can_edit",
                "score_statistics"
              ]
            }
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "description": "Apply assignment overrides to the assignment, defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "needs_grading_count_by_section",
            "in": "query",
            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "all_dates",
            "in": "query",
            "description": "All dates associated with the assignment, if applicable",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assignment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assignments"
        ],
        "summary": "Edit an assignment",
        "description": "Modify an existing assignment.",
        "operationId": "edit_assignment",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "assignment[name]": {
                    "type": "string",
                    "description": "The assignment name."
                  },
                  "assignment[position]": {
                    "type": "integer",
                    "description": "The position of this assignment in the group when displaying\nassignment lists.",
                    "format": "int64"
                  },
                  "assignment[submission_types]": {
                    "type": "array",
                    "description": "Only applies if the assignment doesn't have student submissions.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "assignment[allowed_extensions]": {
                    "type": "array",
                    "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                    "items": {
                      "type": "string"
                    }
                  },
                  "assignment[turnitin_enabled]": {
                    "type": "boolean",
                    "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course."
                  },
                  "assignment[vericite_enabled]": {
                    "type": "boolean",
                    "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course."
                  },
                  "assignment[turnitin_settings]": {
                    "type": "string",
                    "description": "Settings to send along to turnitin. See Assignment object definition for\nformat."
                  },
                  "assignment[sis_assignment_id]": {
                    "type": "string",
                    "description": "The sis id of the Assignment"
                  },
                  "assignment[integration_data]": {
                    "type": "string",
                    "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required."
                  },
                  "assignment[integration_id]": {
                    "type": "string",
                    "description": "Unique ID from third party integrations"
                  },
                  "assignment[peer_reviews]": {
                    "type": "boolean",
                    "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment."
                  },
                  "assignment[automatic_peer_reviews]": {
                    "type": "boolean",
                    "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled."
                  },
                  "assignment[notify_of_update]": {
                    "type": "boolean",
                    "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed."
                  },
                  "assignment[group_category_id]": {
                    "type": "integer",
                    "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                    "format": "int64"
                  },
                  "assignment[grade_group_students_individually]": {
                    "type": "integer",
                    "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                    "format": "int64"
                  },
                  "assignment[external_tool_tag_attributes]": {
                    "type": "string",
                    "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format."
                  },
                  "assignment[points_possible]": {
                    "type": "number",
                    "description": "The maximum points possible on the assignment.",
                    "format": "float"
                  },
                  "assignment[grading_type]": {
                    "type": "string",
                    "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                    "enum": [
                      "pass_fail",
                      "percent",
                      "letter_grade",
                      "gpa_scale",
                      "points",
                      "not_graded"
                    ]
                  },
                  "assignment[due_at]": {
                    "type": "object",
                    "description": "The day/time the assignment is due.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
                  },
                  "assignment[lock_at]": {
                    "type": "object",
                    "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
                  },
                  "assignment[unlock_at]": {
                    "type": "object",
                    "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
                  },
                  "assignment[description]": {
                    "type": "string",
                    "description": "The assignment's description, supports HTML."
                  },
                  "assignment[assignment_group_id]": {
                    "type": "integer",
                    "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                    "format": "int64"
                  },
                  "assignment[assignment_overrides]": {
                    "type": "array",
                    "description": "List of overrides for the assignment.\nIf the +assignment[assignment_overrides]+ key is absent, any existing\noverrides are kept as is. If the +assignment[assignment_overrides]+ key is\npresent, existing overrides are updated or deleted (and new ones created,\nas necessary) to match the provided list.",
                    "items": {
                      "$ref": "#/components/schemas/AssignmentOverride"
                    }
                  },
                  "assignment[only_visible_to_overrides]": {
                    "type": "boolean",
                    "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)"
                  },
                  "assignment[published]": {
                    "type": "boolean",
                    "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students."
                  },
                  "assignment[grading_standard_id]": {
                    "type": "integer",
                    "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                    "format": "int64"
                  },
                  "assignment[omit_from_final_grade]": {
                    "type": "boolean",
                    "description": "Whether this assignment is counted towards a student's final grade."
                  },
                  "assignment[moderated_grading]": {
                    "type": "boolean",
                    "description": "Whether this assignment is moderated."
                  },
                  "assignment[grader_count]": {
                    "type": "integer",
                    "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                    "format": "int64"
                  },
                  "assignment[final_grader_id]": {
                    "type": "integer",
                    "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                    "format": "int64"
                  },
                  "assignment[grader_comments_visible_to_graders]": {
                    "type": "boolean",
                    "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments."
                  },
                  "assignment[graders_anonymous_to_graders]": {
                    "type": "boolean",
                    "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments."
                  },
                  "assignment[graders_names_visible_to_final_grader]": {
                    "type": "boolean",
                    "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments."
                  },
                  "assignment[anonymous_grading]": {
                    "type": "boolean",
                    "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities."
                  },
                  "assignment[allowed_attempts]": {
                    "type": "integer",
                    "description": "The number of submission attempts allowed for this assignment. Set to -1 or null for\nunlimited attempts.",
                    "format": "int64"
                  },
                  "assignment[annotatable_attachment_id]": {
                    "type": "integer",
                    "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                    "format": "int64"
                  },
                  "assignment[force_updated_at]": {
                    "type": "boolean",
                    "description": "If true, updated_at will be set even if no changes were made."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assignment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "assignments"
        ],
        "summary": "Delete an assignment",
        "description": "Delete the given assignment.",
        "operationId": "delete_assignment",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assignment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "List assignments",
        "description": "Returns the paginated list of assignments for the current course or assignment group.",
        "operationId": "list_assignments_assignments",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "submission",
                "assignment_visibility",
                "all_dates",
                "overrides",
                "observed_users",
                "can_edit",
                "score_statistics"
              ]
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial title of the assignments to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "description": "Apply assignment overrides for each assignment, defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "needs_grading_count_by_section",
            "in": "query",
            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "If included, only return certain assignments depending on due date and submission status.",
            "schema": {
              "type": "string",
              "enum": [
                "past",
                "overdue",
                "undated",
                "ungraded",
                "unsubmitted",
                "upcoming",
                "future"
              ]
            }
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "description": "if set, return only assignments specified",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Determines the order of the assignments. Defaults to \"position\".",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "name",
                "due_at"
              ]
            }
          },
          {
            "name": "post_to_sis",
            "in": "query",
            "description": "Return only assignments that have post_to_sis set or not set.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "assignments"
        ],
        "summary": "Create an assignment",
        "description": "Create a new assignment for this course. The assignment is created in the\nactive state.",
        "operationId": "create_assignment",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "assignment[name]"
                ],
                "properties": {
                  "assignment[name]": {
                    "type": "string",
                    "description": "The assignment name."
                  },
                  "assignment[position]": {
                    "type": "integer",
                    "description": "The position of this assignment in the group when displaying\nassignment lists.",
                    "format": "int64"
                  },
                  "assignment[submission_types]": {
                    "type": "array",
                    "description": "List of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)\n  \"student_annotation\"",
                    "items": {
                      "type": "string"
                    },
                    "enum": [
                      "online_quiz",
                      "none",
                      "on_paper",
                      "discussion_topic",
                      "external_tool",
                      "online_upload",
                      "online_text_entry",
                      "online_url",
                      "media_recording",
                      "student_annotation"
                    ]
                  },
                  "assignment[allowed_extensions]": {
                    "type": "array",
                    "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                    "items": {
                      "type": "string"
                    }
                  },
                  "assignment[turnitin_enabled]": {
                    "type": "boolean",
                    "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course."
                  },
                  "assignment[vericite_enabled]": {
                    "type": "boolean",
                    "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course."
                  },
                  "assignment[turnitin_settings]": {
                    "type": "string",
                    "description": "Settings to send along to turnitin. See Assignment object definition for\nformat."
                  },
                  "assignment[integration_data]": {
                    "type": "string",
                    "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required."
                  },
                  "assignment[integration_id]": {
                    "type": "string",
                    "description": "Unique ID from third party integrations"
                  },
                  "assignment[peer_reviews]": {
                    "type": "boolean",
                    "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment."
                  },
                  "assignment[automatic_peer_reviews]": {
                    "type": "boolean",
                    "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled."
                  },
                  "assignment[notify_of_update]": {
                    "type": "boolean",
                    "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed."
                  },
                  "assignment[group_category_id]": {
                    "type": "integer",
                    "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                    "format": "int64"
                  },
                  "assignment[grade_group_students_individually]": {
                    "type": "integer",
                    "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                    "format": "int64"
                  },
                  "assignment[external_tool_tag_attributes]": {
                    "type": "string",
                    "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format."
                  },
                  "assignment[points_possible]": {
                    "type": "number",
                    "description": "The maximum points possible on the assignment.",
                    "format": "float"
                  },
                  "assignment[grading_type]": {
                    "type": "string",
                    "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                    "enum": [
                      "pass_fail",
                      "percent",
                      "letter_grade",
                      "gpa_scale",
                      "points",
                      "not_graded"
                    ]
                  },
                  "assignment[due_at]": {
                    "type": "object",
                    "description": "The day/time the assignment is due. Must be between the lock dates if there are lock dates.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
                  },
                  "assignment[lock_at]": {
                    "type": "object",
                    "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
                  },
                  "assignment[unlock_at]": {
                    "type": "object",
                    "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
                  },
                  "assignment[description]": {
                    "type": "string",
                    "description": "The assignment's description, supports HTML."
                  },
                  "assignment[assignment_group_id]": {
                    "type": "integer",
                    "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                    "format": "int64"
                  },
                  "assignment[assignment_overrides]": {
                    "type": "array",
                    "description": "List of overrides for the assignment.",
                    "items": {
                      "$ref": "#/components/schemas/AssignmentOverride"
                    }
                  },
                  "assignment[only_visible_to_overrides]": {
                    "type": "boolean",
                    "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)"
                  },
                  "assignment[published]": {
                    "type": "boolean",
                    "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students."
                  },
                  "assignment[grading_standard_id]": {
                    "type": "integer",
                    "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                    "format": "int64"
                  },
                  "assignment[omit_from_final_grade]": {
                    "type": "boolean",
                    "description": "Whether this assignment is counted towards a student's final grade."
                  },
                  "assignment[quiz_lti]": {
                    "type": "boolean",
                    "description": "Whether this assignment should use the Quizzes 2 LTI tool. Sets the\nsubmission type to 'external_tool' and configures the external tool\nattributes to use the Quizzes 2 LTI tool configured for this course.\nHas no effect if no Quizzes 2 LTI tool is configured."
                  },
                  "assignment[moderated_grading]": {
                    "type": "boolean",
                    "description": "Whether this assignment is moderated."
                  },
                  "assignment[grader_count]": {
                    "type": "integer",
                    "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                    "format": "int64"
                  },
                  "assignment[final_grader_id]": {
                    "type": "integer",
                    "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                    "format": "int64"
                  },
                  "assignment[grader_comments_visible_to_graders]": {
                    "type": "boolean",
                    "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments."
                  },
                  "assignment[graders_anonymous_to_graders]": {
                    "type": "boolean",
                    "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments."
                  },
                  "assignment[graders_names_visible_to_final_grader]": {
                    "type": "boolean",
                    "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments."
                  },
                  "assignment[anonymous_grading]": {
                    "type": "boolean",
                    "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities."
                  },
                  "assignment[allowed_attempts]": {
                    "type": "integer",
                    "description": "The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.",
                    "format": "int64"
                  },
                  "assignment[annotatable_attachment_id]": {
                    "type": "integer",
                    "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assignment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/overrides": {
      "get": {
        "tags": [
          "assignments"
        ],
        "summary": "List assignment overrides",
        "description": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
        "operationId": "list_assignment_overrides",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentOverride"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "assignments"
        ],
        "summary": "Create an assignment override",
        "description": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
        "operationId": "create_assignment_override",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "assignment_override[student_ids]": {
                    "type": "array",
                    "description": "The IDs of\nthe override's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "assignment_override[title]": {
                    "type": "string",
                    "description": "The title of the adhoc\nassignment override. Required if student_ids is present, ignored\notherwise (the title is set to the name of the targetted group or section\ninstead)."
                  },
                  "assignment_override[group_id]": {
                    "type": "integer",
                    "description": "The ID of the\noverride's target group. If present, the following conditions must be met\nfor the override to be successful:\n\n1. the assignment MUST be a group assignment (a group_category_id is assigned to it)\n2. the ID must identify an active group in the group set the assignment is in\n3. the ID must not be targetted by a different override\n\nSee {Appendix: Group assignments} for more info.",
                    "format": "int64"
                  },
                  "assignment_override[course_section_id]": {
                    "type": "integer",
                    "description": "The ID\nof the override's target section. If present, must identify an active\nsection of the assignment's course not already targetted by a different\noverride.",
                    "format": "int64"
                  },
                  "assignment_override[due_at]": {
                    "type": "object",
                    "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate."
                  },
                  "assignment_override[unlock_at]": {
                    "type": "object",
                    "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date."
                  },
                  "assignment_override[lock_at]": {
                    "type": "object",
                    "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentOverride"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/authentication_providers/{id}": {
      "get": {
        "tags": [
          "authentication_providers"
        ],
        "summary": "Get authentication provider",
        "description": "Get the specified authentication provider",
        "operationId": "get_authentication_provider",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationProvider"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "authentication_providers"
        ],
        "summary": "Update authentication provider",
        "description": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
        "operationId": "update_authentication_provider",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationProvider"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "authentication_providers"
        ],
        "summary": "Delete authentication provider",
        "description": "Delete the config",
        "operationId": "delete_authentication_provider",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/authentication_providers": {
      "get": {
        "tags": [
          "authentication_providers"
        ],
        "summary": "List authentication providers",
        "description": "Returns a paginated list of authentication providers",
        "operationId": "list_authentication_providers",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationProvider"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "authentication_providers"
        ],
        "summary": "Add authentication provider",
        "description": "Add external authentication provider(s) for the account.\nServices may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook',\n'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect',\n'saml', or 'twitter'. The other recognized parameters depend on this\nauth_type; unrecognized parameters are discarded. Provider specifications\nnot specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any provider. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any provider\nbesides Canvas. You can set 'mfa_required' for any provider.\n\nFor Apple, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The developer’s client identifier, as provided by WWDR. Not available if\n  configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'firstName', 'lastName', and 'sub'.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
        "operationId": "add_authentication_provider",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationProvider"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/sso_settings": {
      "get": {
        "tags": [
          "authentication_providers"
        ],
        "summary": "show account auth settings",
        "description": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
        "operationId": "show_account_auth_settings",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "authentication_providers"
        ],
        "summary": "update account auth settings",
        "description": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
        "operationId": "update_account_auth_settings",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audit/authentication/logins/{login_id}": {
      "get": {
        "tags": [
          "authentications_log"
        ],
        "summary": "Query by login.",
        "description": "List authentication events for a given login.",
        "operationId": "query_by_login",
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "The end of the time range from which you want events.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/audit/authentication/users/{user_id}": {
      "get": {
        "tags": [
          "authentications_log"
        ],
        "summary": "Query by user.",
        "description": "List authentication events for a given user.",
        "operationId": "query_by_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "The end of the time range from which you want events.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/audit/authentication/accounts/{account_id}": {
      "get": {
        "tags": [
          "authentications_log"
        ],
        "summary": "Query by account.",
        "description": "List authentication events for a given account.",
        "operationId": "query_by_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "The end of the time range from which you want events.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/{user_id}/courses": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "List courses for a user",
        "description": "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.",
        "operationId": "list_courses_for_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade' (see Enrollment\n  documentation for more information on these fields). This argument\n  is ignored if the course is configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the course is configured to hide final\n  grades or if the total_scores argument is not included.\n- \"grading_periods\": Optional information to include with each Course. When\n  grading_periods is given, a list of the grading periods associated with\n  each course is returned.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional information to include with each Course. Returns course\n  image url if a course image has been set.\n- \"banner_image\": Optional information to include with each Course. Returns course\n  banner image url if the course is a Canvas for Elementary subject and a banner\n  image has been set.\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "needs_grading_count",
                "syllabus_body",
                "public_description",
                "total_scores",
                "current_grading_period_scores",
                "grading_periods",
                "term",
                "account",
                "course_progress",
                "sections",
                "storage_quota_used_mb",
                "total_students",
                "passback_status",
                "favorites",
                "teachers",
                "observed_users",
                "course_image",
                "banner_image",
                "concluded"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "unpublished",
                "available",
                "completed",
                "deleted"
              ]
            }
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "invited_or_pending",
                "completed"
              ]
            }
          },
          {
            "name": "homeroom",
            "in": "query",
            "description": "If set, only return homeroom courses.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List files",
        "description": "Returns the paginated list of files for the folder or course.",
        "operationId": "list_files_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_types",
            "in": "query",
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "exclude_content_types",
            "in": "query",
            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name of the files to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "only",
            "in": "query",
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "size",
                "created_at",
                "updated_at",
                "content_type",
                "user"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The sorting order. Defaults to 'asc'.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Upload a file",
        "description": "Upload a file to the course.\n\nThis API endpoint is the first step in uploading a file to a course.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course can upload files\nto the course. By default, this is Teachers, TAs and Designers.",
        "operationId": "upload_file",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/reset_content": {
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Reset a course",
        "description": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
        "operationId": "reset_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/effective_due_dates": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get effective due dates",
        "description": "For each assignment in the course, returns each assigned student's ID\nand their corresponding due date along with some grading period data.\nReturns a collection with keys representing assignment IDs and values as a\ncollection containing keys representing student IDs and values representing\nthe student's effective due_at, the grading_period_id of which the due_at falls\nin, and whether or not the grading period is closed (in_closed_grading_period)\n\nThe list of assignment IDs for which effective student due dates are\nrequested. If not provided, all assignments in the course will be used.",
        "operationId": "get_effective_due_dates",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "description": "no description",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{id}/dismiss_migration_limitation_message": {
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Remove quiz migration alert",
        "description": "Remove alert about the limitations of quiz migrations that is displayed\nto a user in a course\n\nyou must be logged in to use this endpoint",
        "operationId": "remove_quiz_migration_alert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/users": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "List users in course",
        "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
        "operationId": "list_users_in_course_users",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name or full ID of the users to match and return in the results list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "When set, sort the results of the search based on the given field.",
            "schema": {
              "type": "string",
              "enum": [
                "username",
                "last_login",
                "email",
                "sis_id"
              ]
            }
          },
          {
            "name": "enrollment_type",
            "in": "query",
            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "teacher",
                "student",
                "student_view",
                "ta",
                "observer",
                "designer"
              ]
            }
          },
          {
            "name": "enrollment_role",
            "in": "query",
            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrollment_role_id",
            "in": "query",
            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.\n- \"uuid\": Optionally include the users uuid",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "enrollments",
                "locked",
                "avatar_url",
                "test_student",
                "bio",
                "custom_links",
                "current_grading_period_scores",
                "uuid"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "active",
                "invited",
                "rejected",
                "completed",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/users/{id}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get single user",
        "description": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
        "operationId": "get_single_user",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/courses/{id}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get a single course",
        "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
        "operationId": "get_single_course_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": Include observed users in the enrollments\n- \"course_image\": Include course image url if a course image has been set\n- \"banner_image\": Include course banner image url if the course is a Canvas for\n  Elementary subject and a banner image has been set\n- \"concluded\": Optional information to include with Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "needs_grading_count",
                "syllabus_body",
                "public_description",
                "total_scores",
                "current_grading_period_scores",
                "term",
                "account",
                "course_progress",
                "sections",
                "storage_quota_used_mb",
                "total_students",
                "passback_status",
                "favorites",
                "teachers",
                "observed_users",
                "all_courses",
                "permissions",
                "course_image",
                "banner_image",
                "concluded"
              ]
            }
          },
          {
            "name": "teacher_limit",
            "in": "query",
            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/users/{user_id}/progress": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get user progress",
        "description": "Return progress information for the user and course\n\nYou can supply +self+ as the user_id to query your own progress in a course. To query another user's progress,\nyou must be a teacher in the course, an administrator, or a linked observer of the user.",
        "operationId": "get_user_progress",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseProgress"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_share_users": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Search for content share users",
        "description": "Returns a paginated list of users you can share content with.  Requires the content share\nfeature and the user must have the manage content permission for the course.",
        "operationId": "search_for_content_share_users",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "Term used to find users.  Will search available share users with the search term in their name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/preview_html": {
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Preview processed html",
        "description": "Preview html content processed for this course",
        "operationId": "preview_processed_html",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "html": {
                    "type": "string",
                    "description": "The html content to process"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/recent_students": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "List recently logged in students",
        "description": "Returns the paginated list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
        "operationId": "list_recently_logged_in_students",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/course_copy/{id}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get course copy status",
        "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
        "operationId": "get_course_copy_status",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/search_users": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "List users in course",
        "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
        "operationId": "list_users_in_course_search_users",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name or full ID of the users to match and return in the results list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "When set, sort the results of the search based on the given field.",
            "schema": {
              "type": "string",
              "enum": [
                "username",
                "last_login",
                "email",
                "sis_id"
              ]
            }
          },
          {
            "name": "enrollment_type",
            "in": "query",
            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "teacher",
                "student",
                "student_view",
                "ta",
                "observer",
                "designer"
              ]
            }
          },
          {
            "name": "enrollment_role",
            "in": "query",
            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrollment_role_id",
            "in": "query",
            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.\n- \"uuid\": Optionally include the users uuid",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "enrollments",
                "locked",
                "avatar_url",
                "test_student",
                "bio",
                "custom_links",
                "current_grading_period_scores",
                "uuid"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "active",
                "invited",
                "rejected",
                "completed",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/bulk_user_progress": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get bulk user progress",
        "description": "Returns progress information for all users enrolled in the given course.\n\nYou must be a user who has permission to view all grades in the course (such as a teacher or administrator).",
        "operationId": "get_bulk_user_progress",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/activity_stream": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Course activity stream",
        "description": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
        "operationId": "course_activity_stream",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/todo": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Course TODO items",
        "description": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
        "operationId": "course_todo_items",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "List your courses",
        "description": "Returns the paginated list of active courses for the current user.",
        "operationId": "list_your_courses",
        "parameters": [
          {
            "name": "enrollment_type",
            "in": "query",
            "description": "When set, only return courses where the user is enrolled as this type. For\nexample, set to \"teacher\" to return only courses where the user is\nenrolled as a Teacher.  This argument is ignored if enrollment_role is given.",
            "schema": {
              "type": "string",
              "enum": [
                "teacher",
                "student",
                "ta",
                "observer",
                "designer"
              ]
            }
          },
          {
            "name": "enrollment_role",
            "in": "query",
            "description": "Deprecated\nWhen set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a base role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrollment_role_id",
            "in": "query",
            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "invited_or_pending",
                "completed"
              ]
            }
          },
          {
            "name": "exclude_blueprint_courses",
            "in": "query",
            "description": "When set, only return courses that are not configured as blueprint courses.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade', as well as (if\n  the user has permission) 'unposted_current_score',\n  'unposted_final_score', 'unposted_current_grade', and\n  'unposted_final_grade' (see Enrollment documentation for more\n  information on these fields). This argument is ignored if the course is\n  configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the total_scores argument is not\n  included. If the course is configured to hide final grades, the\n  following fields are not returned:\n  'totals_for_all_grading_periods_option',\n  'current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade',\n  'current_period_computed_final_grade',\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade'\n- \"grading_periods\": Optional information to include with each Course. When\n  grading_periods is given, a list of the grading periods associated with\n  each course is returned.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional information to include with each Course. Returns course\n  image url if a course image has been set.\n- \"banner_image\": Optional information to include with each Course. Returns course\n  banner image url if the course is a Canvas for Elementary subject and a banner\n  image has been set.\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "needs_grading_count",
                "syllabus_body",
                "public_description",
                "total_scores",
                "current_grading_period_scores",
                "grading_periods",
                "term",
                "account",
                "course_progress",
                "sections",
                "storage_quota_used_mb",
                "total_students",
                "passback_status",
                "favorites",
                "teachers",
                "observed_users",
                "course_image",
                "banner_image",
                "concluded"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "unpublished",
                "available",
                "completed",
                "deleted"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/permissions": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Permissions",
        "description": "Returns permission information for the calling user in the given course.\nSee also the {api:AccountsController#permissions Account} and\n{api:GroupsController#permissions Group} counterparts.",
        "operationId": "course_permissions",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/activity_stream/summary": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Course activity stream summary",
        "description": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
        "operationId": "course_activity_stream_summary",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/students": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "List students",
        "description": "Returns the paginated list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
        "operationId": "list_students",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/settings": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get course settings",
        "description": "Returns some of a course's settings.",
        "operationId": "get_course_settings",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "courses"
        ],
        "summary": "Update course settings",
        "description": "Can update the following course settings:",
        "operationId": "update_course_settings",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "allow_student_discussion_topics": {
                    "type": "boolean",
                    "description": "Let students create discussion topics"
                  },
                  "allow_student_forum_attachments": {
                    "type": "boolean",
                    "description": "Let students attach files to discussions"
                  },
                  "allow_student_discussion_editing": {
                    "type": "boolean",
                    "description": "Let students edit or delete their own discussion replies"
                  },
                  "allow_student_organized_groups": {
                    "type": "boolean",
                    "description": "Let students organize their own groups"
                  },
                  "allow_student_discussion_reporting": {
                    "type": "boolean",
                    "description": "Let students report offensive discussion content"
                  },
                  "allow_student_anonymous_discussion_topics": {
                    "type": "boolean",
                    "description": "Let students create anonymous discussion topics"
                  },
                  "filter_speed_grader_by_student_group": {
                    "type": "boolean",
                    "description": "Filter SpeedGrader to only the selected student group"
                  },
                  "hide_final_grades": {
                    "type": "boolean",
                    "description": "Hide totals in student grades summary"
                  },
                  "hide_distribution_graphs": {
                    "type": "boolean",
                    "description": "Hide grade distribution graphs from students"
                  },
                  "hide_sections_on_course_users_page": {
                    "type": "boolean",
                    "description": "Disallow students from viewing students in sections they do not belong to"
                  },
                  "lock_all_announcements": {
                    "type": "boolean",
                    "description": "Disable comments on announcements"
                  },
                  "usage_rights_required": {
                    "type": "boolean",
                    "description": "Copyright and license information must be provided for files before they are published."
                  },
                  "restrict_student_past_view": {
                    "type": "boolean",
                    "description": "Restrict students from viewing courses after end date"
                  },
                  "restrict_student_future_view": {
                    "type": "boolean",
                    "description": "Restrict students from viewing courses before start date"
                  },
                  "show_announcements_on_home_page": {
                    "type": "boolean",
                    "description": "Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit).\nCanvas for Elementary subjects ignore this setting."
                  },
                  "home_page_announcement_limit": {
                    "type": "integer",
                    "description": "Limit the number of announcements on the home page if enabled via show_announcements_on_home_page",
                    "format": "int64"
                  },
                  "syllabus_course_summary": {
                    "type": "boolean",
                    "description": "Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true."
                  },
                  "default_due_time": {
                    "type": "string",
                    "description": "Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface\nwhen setting a due date for an assignment. It does not change when any existing assignment is due. It should be\ngiven in 24-hour HH:MM:SS format. The default is \"23:59:59\". Use \"inherit\" to inherit the account setting."
                  },
                  "conditional_release": {
                    "type": "boolean",
                    "description": "Enable or disable individual learning paths for students based on assessment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/student_view_student": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Return test student for course",
        "description": "Returns information for a test student in this course. Creates a test\nstudent if one does not already exist for the course. The caller must have\npermission to access the course's student view.",
        "operationId": "return_test_student_for_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{id}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get a single course",
        "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
        "operationId": "get_single_course_courses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": Include observed users in the enrollments\n- \"course_image\": Include course image url if a course image has been set\n- \"banner_image\": Include course banner image url if the course is a Canvas for\n  Elementary subject and a banner image has been set\n- \"concluded\": Optional information to include with Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "needs_grading_count",
                "syllabus_body",
                "public_description",
                "total_scores",
                "current_grading_period_scores",
                "term",
                "account",
                "course_progress",
                "sections",
                "storage_quota_used_mb",
                "total_students",
                "passback_status",
                "favorites",
                "teachers",
                "observed_users",
                "all_courses",
                "permissions",
                "course_image",
                "banner_image",
                "concluded"
              ]
            }
          },
          {
            "name": "teacher_limit",
            "in": "query",
            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "courses"
        ],
        "summary": "Update a course",
        "description": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).\n\nIf a user has content management rights, but not full course editing rights, the only attribute\neditable through this endpoint will be \"syllabus_body\"",
        "operationId": "update_course",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "course[account_id]": {
                    "type": "integer",
                    "description": "The unique ID of the account to move the course to.",
                    "format": "int64"
                  },
                  "course[name]": {
                    "type": "string",
                    "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\""
                  },
                  "course[course_code]": {
                    "type": "string",
                    "description": "The course code for the course."
                  },
                  "course[start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true,\nor the course is already published."
                  },
                  "course[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true."
                  },
                  "course[license]": {
                    "type": "string",
                    "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain)."
                  },
                  "course[is_public]": {
                    "type": "boolean",
                    "description": "Set to true if course is public to both authenticated and unauthenticated users."
                  },
                  "course[is_public_to_auth_users]": {
                    "type": "boolean",
                    "description": "Set to true if course is public only to authenticated users."
                  },
                  "course[public_syllabus]": {
                    "type": "boolean",
                    "description": "Set to true to make the course syllabus public."
                  },
                  "course[public_syllabus_to_auth]": {
                    "type": "boolean",
                    "description": "Set to true to make the course syllabus to public for authenticated users."
                  },
                  "course[public_description]": {
                    "type": "string",
                    "description": "A publicly visible description of the course."
                  },
                  "course[allow_student_wiki_edits]": {
                    "type": "boolean",
                    "description": "If true, students will be able to modify the course wiki."
                  },
                  "course[allow_wiki_comments]": {
                    "type": "boolean",
                    "description": "If true, course members will be able to comment on wiki pages."
                  },
                  "course[allow_student_forum_attachments]": {
                    "type": "boolean",
                    "description": "If true, students can attach files to forum posts."
                  },
                  "course[open_enrollment]": {
                    "type": "boolean",
                    "description": "Set to true if the course is open enrollment."
                  },
                  "course[self_enrollment]": {
                    "type": "boolean",
                    "description": "Set to true if the course is self enrollment."
                  },
                  "course[restrict_enrollments_to_course_dates]": {
                    "type": "boolean",
                    "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse. Setting this value to false will\nremove the course end date (if it exists), as well as the course start date\n(if the course is unpublished)."
                  },
                  "course[term_id]": {
                    "type": "integer",
                    "description": "The unique ID of the term to create to course in.",
                    "format": "int64"
                  },
                  "course[sis_course_id]": {
                    "type": "string",
                    "description": "The unique SIS identifier."
                  },
                  "course[integration_id]": {
                    "type": "string",
                    "description": "The unique Integration identifier."
                  },
                  "course[hide_final_grades]": {
                    "type": "boolean",
                    "description": "If this option is set to true, the totals in student grades summary will\nbe hidden."
                  },
                  "course[time_zone]": {
                    "type": "string",
                    "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
                  },
                  "course[apply_assignment_group_weights]": {
                    "type": "boolean",
                    "description": "Set to true to weight final grade based on assignment groups percentages."
                  },
                  "course[storage_quota_mb]": {
                    "type": "integer",
                    "description": "Set the storage quota for the course, in megabytes. The caller must have\nthe \"Manage storage quotas\" account permission.",
                    "format": "int64"
                  },
                  "offer": {
                    "type": "boolean",
                    "description": "If this option is set to true, the course will be available to students\nimmediately."
                  },
                  "course[event]": {
                    "type": "string",
                    "description": "The action to take on each course.\n* 'claim' makes a course no longer visible to students. This action is also called \"unpublish\" on the web site.\n  A course cannot be unpublished if students have received graded submissions.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. This action requires account administrative rights.\n  (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course\n  will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.",
                    "enum": [
                      "claim",
                      "offer",
                      "conclude",
                      "delete",
                      "undelete"
                    ]
                  },
                  "course[default_view]": {
                    "type": "string",
                    "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'wiki' Wiki Front Page\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                    "enum": [
                      "feed",
                      "wiki",
                      "modules",
                      "syllabus",
                      "assignments"
                    ]
                  },
                  "course[syllabus_body]": {
                    "type": "string",
                    "description": "The syllabus body for the course"
                  },
                  "course[syllabus_course_summary]": {
                    "type": "boolean",
                    "description": "Optional. Indicates whether the Course Summary (consisting of the course's assignments and calendar events) is displayed on the syllabus page. Defaults to +true+."
                  },
                  "course[grading_standard_id]": {
                    "type": "integer",
                    "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                    "format": "int64"
                  },
                  "course[grade_passback_setting]": {
                    "type": "string",
                    "description": "Optional. The grade_passback_setting for the course. Only 'nightly_sync' and '' are allowed"
                  },
                  "course[course_format]": {
                    "type": "string",
                    "description": "Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')"
                  },
                  "course[image_id]": {
                    "type": "integer",
                    "description": "This is a file ID corresponding to an image file in the course that will\nbe used as the course image.\nThis will clear the course's image_url setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail.",
                    "format": "int64"
                  },
                  "course[image_url]": {
                    "type": "string",
                    "description": "This is a URL to an image to be used as the course image.\nThis will clear the course's image_id setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail."
                  },
                  "course[remove_image]": {
                    "type": "boolean",
                    "description": "If this option is set to true, the course image url and course image\nID are both set to nil"
                  },
                  "course[remove_banner_image]": {
                    "type": "boolean",
                    "description": "If this option is set to true, the course banner image url and course\nbanner image ID are both set to nil"
                  },
                  "course[blueprint]": {
                    "type": "boolean",
                    "description": "Sets the course as a blueprint course."
                  },
                  "course[blueprint_restrictions]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Sets a default set to apply to blueprint course objects when restricted,\nunless _use_blueprint_restrictions_by_object_type_ is enabled.\nSee the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation"
                  },
                  "course[use_blueprint_restrictions_by_object_type]": {
                    "type": "boolean",
                    "description": "When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of\nthe _blueprint_restrictions_by_object_type_ parameter"
                  },
                  "course[blueprint_restrictions_by_object_type]": {
                    "type": "object",
                    "description": "Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction}\nto apply to blueprint course objects of the matching type when restricted.\nThe possible object types are \"assignment\", \"attachment\", \"discussion_topic\", \"quiz\" and \"wiki_page\".\nExample usage:\n  course[blueprint_restrictions_by_object_type][assignment][content]=1"
                  },
                  "course[homeroom_course]": {
                    "type": "boolean",
                    "description": "Sets the course as a homeroom course. The setting takes effect only when the course is associated\nwith a Canvas for Elementary-enabled account."
                  },
                  "course[sync_enrollments_from_homeroom]": {
                    "type": "string",
                    "description": "Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the\ncourse is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled."
                  },
                  "course[homeroom_course_id]": {
                    "type": "string",
                    "description": "Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the\ncourse is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled."
                  },
                  "course[template]": {
                    "type": "boolean",
                    "description": "Enable or disable the course as a template that can be selected by an account"
                  },
                  "course[course_color]": {
                    "type": "string",
                    "description": "Sets a color in hex code format to be associated with the course. The setting takes effect only when the course\nis associated with a Canvas for Elementary-enabled account."
                  },
                  "course[friendly_name]": {
                    "type": "string",
                    "description": "Set a friendly name for the course. If this is provided and the course is associated with a Canvas for\nElementary account, it will be shown instead of the course name. This setting takes priority over\ncourse nicknames defined by individual users."
                  },
                  "course[enable_course_paces]": {
                    "type": "boolean",
                    "description": "Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is\nenabled for the sub-account. Otherwise, Course Pacing are always disabled.\n  Note: Course Pacing is in active development."
                  },
                  "course[conditional_release]": {
                    "type": "boolean",
                    "description": "Enable or disable individual learning paths for students based on assessment"
                  },
                  "override_sis_stickiness": {
                    "type": "boolean",
                    "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "courses"
        ],
        "summary": "Delete/Conclude a course",
        "description": "Delete or conclude an existing course",
        "operationId": "delete_conclude_course",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The action to take on the course.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "delete",
                "conclude"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/course_copy": {
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Copy course content",
        "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
        "operationId": "copy_course_content",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "source_course": {
                    "type": "string",
                    "description": "ID or SIS-ID of the course to copy the content from"
                  },
                  "except": {
                    "type": "array",
                    "description": "A list of the course content types to exclude, all areas not listed will\nbe copied.",
                    "items": {
                      "type": "string"
                    },
                    "enum": [
                      "course_settings",
                      "assignments",
                      "external_tools",
                      "files",
                      "topics",
                      "calendar_events",
                      "quizzes",
                      "wiki_pages",
                      "modules",
                      "outcomes"
                    ]
                  },
                  "only": {
                    "type": "array",
                    "description": "A list of the course content types to copy, all areas not listed will not\nbe copied.",
                    "items": {
                      "type": "string"
                    },
                    "enum": [
                      "course_settings",
                      "assignments",
                      "external_tools",
                      "files",
                      "topics",
                      "calendar_events",
                      "quizzes",
                      "wiki_pages",
                      "modules",
                      "outcomes"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/blackout_dates/{id}": {
      "get": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Get a single blackout date",
        "description": "Returns the blackout date with the given id.",
        "operationId": "get_single_blackout_date_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Update Blackout Date",
        "description": "Update a blackout date for the given context.",
        "operationId": "update_blackout_date_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "start_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date of the blackout date."
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date of the blackout date."
                  },
                  "event_title": {
                    "type": "string",
                    "description": "The title of the blackout date."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Delete Blackout Date",
        "description": "Delete a blackout date for the given context.",
        "operationId": "delete_blackout_date_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blackout_dates/new": {
      "get": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "New Blackout Date",
        "description": "Initialize an unsaved Blackout Date for the given context.",
        "operationId": "new_blackout_date_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blackout_dates": {
      "get": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "List blackout dates",
        "description": "Returns the list of blackout dates for the current context.",
        "operationId": "list_blackout_dates_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlackoutDate"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Update a list of Blackout Dates",
        "description": "Create, update, and delete blackout dates to sync the db with the incoming data.",
        "operationId": "update_list_of_blackout_dates",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "blackout_dates:": {
                    "type": "string",
                    "description": "[blackout_date, ...]\nAn object containing the array of BlackoutDates we want to exist after this operation.\nFor array entries, if it has an id it will be updated, if not created, and if\nan existing BlackoutDate id is missing from the array, it will be deleted."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlackoutDate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Create Blackout Date",
        "description": "Create a blackout date for the given context.",
        "operationId": "create_blackout_date_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "start_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date of the blackout date."
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date of the blackout date."
                  },
                  "event_title": {
                    "type": "string",
                    "description": "The title of the blackout date."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/blackout_dates": {
      "get": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "List blackout dates",
        "description": "Returns the list of blackout dates for the current context.",
        "operationId": "list_blackout_dates_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlackoutDate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Create Blackout Date",
        "description": "Create a blackout date for the given context.",
        "operationId": "create_blackout_date_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "start_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date of the blackout date."
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date of the blackout date."
                  },
                  "event_title": {
                    "type": "string",
                    "description": "The title of the blackout date."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/blackout_dates/{id}": {
      "get": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Get a single blackout date",
        "description": "Returns the blackout date with the given id.",
        "operationId": "get_single_blackout_date_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Update Blackout Date",
        "description": "Update a blackout date for the given context.",
        "operationId": "update_blackout_date_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "start_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date of the blackout date."
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date of the blackout date."
                  },
                  "event_title": {
                    "type": "string",
                    "description": "The title of the blackout date."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "Delete Blackout Date",
        "description": "Delete a blackout date for the given context.",
        "operationId": "delete_blackout_date_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/blackout_dates/new": {
      "get": {
        "tags": [
          "blackout_dates"
        ],
        "summary": "New Blackout Date",
        "description": "Initialize an unsaved Blackout Date for the given context.",
        "operationId": "new_blackout_date_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlackoutDate"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Get unsynced changes",
        "description": "Retrieve a list of learning objects that have changed since the last blueprint sync operation.\nIf no syncs have been completed, a ChangeRecord with a change_type of +initial_sync+ is returned.",
        "operationId": "get_unsynced_changes",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Get import details",
        "description": "Show the changes that were propagated to a course associated with a blueprint.  See also\n{api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.",
        "operationId": "get_import_details",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item": {
      "put": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Set or remove restrictions on a blueprint course object",
        "description": "If a blueprint course object is restricted, editing will be limited for copies in associated courses.",
        "operationId": "set_or_remove_restrictions_on_blueprint_course_object",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "content_type": {
                    "type": "string",
                    "description": "[String, \"assignment\"|\"attachment\"|\"discussion_topic\"|\"external_tool\"|\"lti-quiz\"|\"quiz\"|\"wiki_page\"]\nThe type of the object."
                  },
                  "content_id": {
                    "type": "integer",
                    "description": "The ID of the object.",
                    "format": "int64"
                  },
                  "restricted": {
                    "type": "boolean",
                    "description": "Whether to apply restrictions."
                  },
                  "restrictions": {
                    "type": "object",
                    "description": "(Optional) If the object is restricted, this specifies a set of restrictions. If not specified,\nthe course-level restrictions will be used. See {api:CoursesController#update Course API update documentation}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Get migration details",
        "description": "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.",
        "operationId": "get_migration_details",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Show a blueprint import",
        "description": "Shows the status of an import into a course associated with a blueprint. See also\n{api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.",
        "operationId": "show_blueprint_import",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Get associated course information",
        "description": "Returns a list of courses that are configured to receive updates from this blueprint",
        "operationId": "get_associated_course_information",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "List blueprint migrations",
        "description": "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.",
        "operationId": "list_blueprint_migrations",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlueprintMigration"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Begin a migration to push to associated courses",
        "description": "Begins a migration to push recently updated content to all associated courses.\nOnly one migration can be running at a time.",
        "operationId": "begin_migration_to_push_to_associated_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "An optional comment to be included in the sync history."
                  },
                  "send_notification": {
                    "type": "boolean",
                    "description": "Send a notification to the calling user when the sync completes."
                  },
                  "copy_settings": {
                    "type": "boolean",
                    "description": "Whether course settings should be copied over to associated courses.\nDefaults to true for newly associated courses."
                  },
                  "publish_after_initial_sync": {
                    "type": "boolean",
                    "description": "If set, newly associated courses will be automatically published after the sync completes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "List blueprint subscriptions",
        "description": "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)",
        "operationId": "list_blueprint_subscriptions",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlueprintSubscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations": {
      "put": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Update associated courses",
        "description": "Send a list of course ids to add or remove new associations for the template.\nCannot add courses that do not belong to the blueprint course's account. Also cannot add\nother blueprint courses or courses that already have an association with another blueprint course.\n\nAfter associating new courses, {api:MasterCourses::MasterTemplatesController#queue_migration start a sync} to populate their contents from the blueprint.",
        "operationId": "update_associated_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "course_ids_to_add": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Courses to add as associated courses"
                  },
                  "course_ids_to_remove": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Courses to remove as associated courses"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "List blueprint imports",
        "description": "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also\n{api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.\n\nUse 'default' as the subscription_id to use the currently active blueprint subscription.",
        "operationId": "list_blueprint_imports",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlueprintMigration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Get blueprint information",
        "description": "Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course).\nHowever, using specific template ids may become necessary in the future",
        "operationId": "get_blueprint_information",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintTemplate"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}": {
      "get": {
        "tags": [
          "blueprint_courses"
        ],
        "summary": "Show a blueprint migration",
        "description": "Shows the status of a migration. This endpoint can be called on a blueprint course. See also\n{api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.",
        "operationId": "show_blueprint_migration",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/self/bookmarks": {
      "get": {
        "tags": [
          "bookmarks"
        ],
        "summary": "List bookmarks",
        "description": "Returns the paginated list of bookmarks.",
        "operationId": "list_bookmarks",
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Bookmark"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bookmarks"
        ],
        "summary": "Create bookmark",
        "description": "Creates a bookmark.",
        "operationId": "create_bookmark",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the bookmark"
                  },
                  "url": {
                    "type": "string",
                    "description": "The url of the bookmark"
                  },
                  "position": {
                    "type": "integer",
                    "description": "The position of the bookmark. Defaults to the bottom.",
                    "format": "int64"
                  },
                  "data": {
                    "type": "string",
                    "description": "The data associated with the bookmark"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookmark"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/self/bookmarks/{id}": {
      "get": {
        "tags": [
          "bookmarks"
        ],
        "summary": "Get bookmark",
        "description": "Returns the details for a bookmark.",
        "operationId": "get_bookmark",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookmark"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "bookmarks"
        ],
        "summary": "Update bookmark",
        "description": "Updates a bookmark",
        "operationId": "update_bookmark",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the bookmark"
                  },
                  "url": {
                    "type": "string",
                    "description": "The url of the bookmark"
                  },
                  "position": {
                    "type": "integer",
                    "description": "The position of the bookmark. Defaults to the bottom.",
                    "format": "int64"
                  },
                  "data": {
                    "type": "string",
                    "description": "The data associated with the bookmark"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bookmarks"
        ],
        "summary": "Delete bookmark",
        "description": "Deletes a bookmark",
        "operationId": "delete_bookmark",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/brand_variables": {
      "get": {
        "tags": [
          "brand_configs"
        ],
        "summary": "Get the brand config variables that should be used for this domain",
        "description": "Will redirect to a static json file that has all of the brand\nvariables used by this account. Even though this is a redirect,\ndo not store the redirected url since if the account makes any changes\nit will redirect to a new url. Needs no authentication.",
        "operationId": "get_brand_config_variables_that_should_be_used_for_this_domain",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/calendar_events/timetable_events": {
      "post": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Create or update events directly for a course timetable",
        "description": "Creates and updates \"timetable\" events for a course or course section.\nSimilar to {api:CalendarEventsApiController#set_course_timetable setting a course timetable},\nbut instead of generating a list of events based on a timetable schedule,\nthis endpoint expects a complete list of events.",
        "operationId": "create_or_update_events_directly_for_course_timetable",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "course_section_id": {
                    "type": "string",
                    "description": "Events will be created for the course section specified by course_section_id.\nIf not present, events will be created for the entire course."
                  },
                  "events": {
                    "type": "array",
                    "description": "An array of event objects to use.",
                    "items": {
                      "$ref": "#/components/schemas/Array"
                    }
                  },
                  "events[start_at]": {
                    "type": "array",
                    "description": "Start time for the event",
                    "items": {
                      "$ref": "#/components/schemas/DateTime"
                    }
                  },
                  "events[end_at]": {
                    "type": "array",
                    "description": "End time for the event",
                    "items": {
                      "$ref": "#/components/schemas/DateTime"
                    }
                  },
                  "events[location_name]": {
                    "type": "array",
                    "description": "Location name for the event",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events[code]": {
                    "type": "array",
                    "description": "A unique identifier that can be used to update the event at a later time\nIf one is not specified, an identifier will be generated based on the start and end times",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events[title]": {
                    "type": "array",
                    "description": "Title for the meeting. If not present, will default to the associated course's name",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/calendar_events/{id}/reservations": {
      "post": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Reserve a time slot",
        "description": "Reserves a particular time slot and return the new reservation",
        "operationId": "reserve_time_slot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "participant_id": {
                    "type": "string",
                    "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group)."
                  },
                  "comments": {
                    "type": "string",
                    "description": "Comments to associate with this reservation"
                  },
                  "cancel_existing": {
                    "type": "boolean",
                    "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/calendar_events/{id}/reservations/{participant_id}": {
      "post": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Reserve a time slot",
        "description": "Reserves a particular time slot and return the new reservation",
        "operationId": "reserve_time_slot_participant_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participant_id",
            "in": "path",
            "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "comments": {
                    "type": "string",
                    "description": "Comments to associate with this reservation"
                  },
                  "cancel_existing": {
                    "type": "boolean",
                    "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/calendar_events": {
      "get": {
        "tags": [
          "calendar_events"
        ],
        "summary": "List calendar events",
        "description": "Retrieve the paginated list of calendar events or assignments for the current user",
        "operationId": "list_calendar_events",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Defaults to \"event\"",
            "schema": {
              "type": "string",
              "enum": [
                "event",
                "assignment"
              ]
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "undated",
            "in": "query",
            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "all_events",
            "in": "query",
            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "context_codes",
            "in": "query",
            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "excludes",
            "in": "query",
            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Array of optional attributes to include. Possible values are \"web_conferenes\" and \"series_natural_language\"",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "important_dates",
            "in": "query",
            "description": "Defaults to false.\nIf true, only events with important dates set to true will be returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blackout_date",
            "in": "query",
            "description": "Defaults to false.\nIf true, only events with blackout date set to true will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Create a calendar event",
        "description": "Create and return a new calendar event",
        "operationId": "create_calendar_event",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "calendar_event[context_code]"
                ],
                "properties": {
                  "calendar_event[context_code]": {
                    "type": "string",
                    "description": "Context code of the course/group/user whose calendar this event should be\nadded to."
                  },
                  "calendar_event[title]": {
                    "type": "string",
                    "description": "Short title for the calendar event."
                  },
                  "calendar_event[description]": {
                    "type": "string",
                    "description": "Longer HTML description of the event."
                  },
                  "calendar_event[start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date/time of the event."
                  },
                  "calendar_event[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date/time of the event."
                  },
                  "calendar_event[location_name]": {
                    "type": "string",
                    "description": "Location name of the event."
                  },
                  "calendar_event[location_address]": {
                    "type": "string",
                    "description": "Location address"
                  },
                  "calendar_event[time_zone_edited]": {
                    "type": "string",
                    "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
                  },
                  "calendar_event[all_day]": {
                    "type": "boolean",
                    "description": "When true event is considered to span the whole day and times are ignored."
                  },
                  "calendar_event[child_event_data][X][start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code"
                  },
                  "calendar_event[child_event_data][X][end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Section-level end time(s) if this is a course event."
                  },
                  "calendar_event[child_event_data][X][context_code]": {
                    "type": "string",
                    "description": "Context code(s) corresponding to the section-level start and end time(s)."
                  },
                  "calendar_event[duplicate][count]": {
                    "type": "number",
                    "description": "Number of times to copy/duplicate the event.  Count cannot exceed 200."
                  },
                  "calendar_event[duplicate][interval]": {
                    "type": "number",
                    "description": "Defaults to 1 if duplicate `count` is set.  The interval between the duplicated events."
                  },
                  "calendar_event[duplicate][frequency]": {
                    "type": "string",
                    "description": "Defaults to \"weekly\".  The frequency at which to duplicate the event",
                    "enum": [
                      "daily",
                      "weekly",
                      "monthly"
                    ]
                  },
                  "calendar_event[duplicate][append_iterator]": {
                    "type": "boolean",
                    "description": "Defaults to false.  If set to `true`, an increasing counter number will be appended to the event title\nwhen the event is duplicated.  (e.g. Event 1, Event 2, Event 3, etc)"
                  },
                  "calendar_event[rrule]": {
                    "type": "string",
                    "description": "If the calendar_series flag is enabled,\nthis parameter replaces the calendar_event's duplicate parameter to\ncreate a series of recurring events.\nIts value is the {https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html iCalendar RRULE}\ndefining how the event repeats, though unending series not supported."
                  },
                  "calendar_event[blackout_date]": {
                    "type": "boolean",
                    "description": "If the blackout_date is true, this event represents a holiday or some\nother special day that does not count in course pacing."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/calendar_events/timetable": {
      "get": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Get course timetable",
        "description": "Returns the last timetable set by the\n{api:CalendarEventsApiController#set_course_timetable Set a course timetable} endpoint",
        "operationId": "get_course_timetable",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Set a course timetable",
        "description": "Creates and updates \"timetable\" events for a course.\nCan automaticaly generate a series of calendar events based on simple schedules\n(e.g. \"Monday and Wednesday at 2:00pm\" )\n\nExisting timetable events for the course and course sections\nwill be updated if they still are part of the timetable.\nOtherwise, they will be deleted.",
        "operationId": "set_course_timetable",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "timetables[course_section_id]": {
                    "type": "array",
                    "description": "An array of timetable objects for the course section specified by course_section_id.\nIf course_section_id is set to \"all\", events will be created for the entire course.",
                    "items": {
                      "$ref": "#/components/schemas/Array"
                    }
                  },
                  "timetables[course_section_id][weekdays]": {
                    "type": "array",
                    "description": "A comma-separated list of abbreviated weekdays\n(Mon-Monday, Tue-Tuesday, Wed-Wednesday, Thu-Thursday, Fri-Friday, Sat-Saturday, Sun-Sunday)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "timetables[course_section_id][start_time]": {
                    "type": "array",
                    "description": "Time to start each event at (e.g. \"9:00 am\")",
                    "items": {
                      "type": "string"
                    }
                  },
                  "timetables[course_section_id][end_time]": {
                    "type": "array",
                    "description": "Time to end each event at (e.g. \"9:00 am\")",
                    "items": {
                      "type": "string"
                    }
                  },
                  "timetables[course_section_id][location_name]": {
                    "type": "array",
                    "description": "A location name to set for each event",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/{user_id}/calendar_events": {
      "get": {
        "tags": [
          "calendar_events"
        ],
        "summary": "List calendar events for a user",
        "description": "Retrieve the paginated list of calendar events or assignments for the specified user.\nTo view calendar events for a user other than yourself,\nyou must either be an observer of that user or an administrator.",
        "operationId": "list_calendar_events_for_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Defaults to \"event\"",
            "schema": {
              "type": "string",
              "enum": [
                "event",
                "assignment"
              ]
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "undated",
            "in": "query",
            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "all_events",
            "in": "query",
            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "context_codes",
            "in": "query",
            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "excludes",
            "in": "query",
            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "submission_types",
            "in": "query",
            "description": "When type is \"assignment\", specifies the allowable submission types for returned assignments.\nIgnored if type is not \"assignment\" or if exclude_submission_types is provided.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "exclude_submission_types",
            "in": "query",
            "description": "When type is \"assignment\", specifies the submission types to be excluded from the returned\nassignments. Ignored if type is not \"assignment\".",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Array of optional attributes to include. Possible values are \"web_conferenes\" and \"series_natural_language\"",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "important_dates",
            "in": "query",
            "description": "Defaults to false\nIf true, only events with important dates set to true will be returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blackout_date",
            "in": "query",
            "description": "Defaults to false\nIf true, only events with blackout date set to true will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/calendar_events/save_enabled_account_calendars": {
      "post": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Save enabled account calendars\n\nCreates and updates the enabled_account_calendars and mark_feature_as_seen user preferences\n@argument mark_feature_as_seen [Optional, Boolean]\n  Flag to mark account calendars feature as seen\n@argument enabled_account_calendars[] [Optional, Array]\n  An array of account Ids to remember in the calendars list of the user\n curl 'https://<canvas>/api/v1/calendar_events/save_enabled_account_calendars' \\\n      -X POST \\\n      -F 'mark_feature_as_seen=true' \\\n      -F 'enabled_account_calendars[]=1' \\\n      -F 'enabled_account_calendars[]=2' \\\n      -H \"Authorization: Bearer <token>\"",
        "operationId": "save_enabled_account_calendars_creates_and_updates_enabled_account_calendars_and_mark_feature_as_seen_user_preferences_argument_mark_feature_as_seen_optional_boolean_flag_to_mark_account_calendars_feature_as_seen_argument_enabled_account_calendars_optional_array_array_of_account_ids_to_remember_in_calendars_list_of_user_curl_https_canvas_api_v_calendar_events_save_enabled_account_calendars_x_post_f_mark_feature_as_seen_true_f_enabled_account_calendars_f_enabled_account_calendars_h_authorization_bearer_token",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/calendar_events/{id}": {
      "get": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Get a single calendar event or assignment",
        "operationId": "get_single_calendar_event_or_assignment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEvent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Update a calendar event",
        "description": "Update and return a calendar event",
        "operationId": "update_calendar_event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "calendar_event[context_code]": {
                    "type": "string",
                    "description": "Context code of the course/group/user to move this event to.\nScheduler appointments and events with section-specific times cannot be moved between calendars."
                  },
                  "calendar_event[title]": {
                    "type": "string",
                    "description": "Short title for the calendar event."
                  },
                  "calendar_event[description]": {
                    "type": "string",
                    "description": "Longer HTML description of the event."
                  },
                  "calendar_event[start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date/time of the event."
                  },
                  "calendar_event[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date/time of the event."
                  },
                  "calendar_event[location_name]": {
                    "type": "string",
                    "description": "Location name of the event."
                  },
                  "calendar_event[location_address]": {
                    "type": "string",
                    "description": "Location address"
                  },
                  "calendar_event[time_zone_edited]": {
                    "type": "string",
                    "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
                  },
                  "calendar_event[all_day]": {
                    "type": "boolean",
                    "description": "When true event is considered to span the whole day and times are ignored."
                  },
                  "calendar_event[child_event_data][X][start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code"
                  },
                  "calendar_event[child_event_data][X][end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Section-level end time(s) if this is a course event."
                  },
                  "calendar_event[child_event_data][X][context_code]": {
                    "type": "string",
                    "description": "Context code(s) corresponding to the section-level start and end time(s)."
                  },
                  "calendar_event[rrule]": {
                    "type": "string",
                    "description": "Valid if the calendar_series feature is enabled and the event whose\nID is in the URL is part of a series.\nThis defines the shape of the recurring event series after it's updated.\nIts value is the iCalendar RRULE, though unending series not supported."
                  },
                  "which": {
                    "type": "string",
                    "description": "Valid if the calendar_series feature is enabled and the event whose\nID is in the URL is part of a series.\nUpdate just the event whose ID is in in the URL, all events\nin the series, or the given event and all those following.",
                    "enum": [
                      "one",
                      "all",
                      "following"
                    ]
                  },
                  "calendar_event[blackout_date]": {
                    "type": "boolean",
                    "description": "If the blackout_date is true, this event represents a holiday or some\nother special day that does not count in course pacing."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "calendar_events"
        ],
        "summary": "Delete a calendar event",
        "description": "Delete an event from the calendar and return the deleted event",
        "operationId": "delete_calendar_event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cancel_reason",
            "in": "query",
            "description": "Reason for deleting/canceling the event.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "which",
            "in": "query",
            "description": "Valid if the calendar_series feature is enabled and the\nevent whose ID is in the URL is part of a series.\nDelete just the event whose ID is in in the URL, all events\nin the series, or the given event and all those following.",
            "schema": {
              "type": "string",
              "enum": [
                "one",
                "all",
                "following"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/collaborations": {
      "get": {
        "tags": [
          "collaborations"
        ],
        "summary": "List collaborations",
        "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
        "operationId": "list_collaborations_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Collaboration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/potential_collaborators": {
      "get": {
        "tags": [
          "collaborations"
        ],
        "summary": "List potential members",
        "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
        "operationId": "list_potential_members_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/collaborations": {
      "get": {
        "tags": [
          "collaborations"
        ],
        "summary": "List collaborations",
        "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
        "operationId": "list_collaborations_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Collaboration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/potential_collaborators": {
      "get": {
        "tags": [
          "collaborations"
        ],
        "summary": "List potential members",
        "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
        "operationId": "list_potential_members_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/collaborations/{id}/members": {
      "get": {
        "tags": [
          "collaborations"
        ],
        "summary": "List members of a collaboration.",
        "description": "A paginated list of the collaborators of a given collaboration",
        "operationId": "list_members_of_collaboration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "- \"collaborator_lti_id\": Optional information to include with each member.\n  Represents an identifier to be used for the member in an LTI context.\n- \"avatar_image_url\": Optional information to include with each member.\n  The url for the avatar of a collaborator with type 'user'.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "collaborator_lti_id",
                "avatar_image_url"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Collaborator"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/comm_messages": {
      "get": {
        "tags": [
          "comm_messages"
        ],
        "summary": "List of CommMessages for a user",
        "description": "Retrieve a paginated list of messages sent to a user.",
        "operationId": "list_of_commmessages_for_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "The user id for whom you want to retrieve CommMessages",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "The beginning of the time range you want to retrieve message from.\nUp to a year prior to the current date is available.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "The end of the time range you want to retrieve messages for.\nUp to a year prior to the current date is available.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/communication_channels": {
      "get": {
        "tags": [
          "communication_channels"
        ],
        "summary": "List user communication channels",
        "description": "Returns a paginated list of communication channels for the specified user,\nsorted by position.",
        "operationId": "list_user_communication_channels",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunicationChannel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "communication_channels"
        ],
        "summary": "Create a communication channel",
        "description": "Creates a new communication channel for the specified user.",
        "operationId": "create_communication_channel",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "communication_channel[address]",
                  "communication_channel[type]"
                ],
                "properties": {
                  "communication_channel[address]": {
                    "type": "string",
                    "description": "An email address or SMS number. Not required for \"push\" type channels."
                  },
                  "communication_channel[type]": {
                    "type": "string",
                    "description": "The type of communication channel.\n\nIn order to enable push notification support, the server must be\nproperly configured (via sns.yml) to communicate with Amazon\nSimple Notification Services, and the developer key used to create\nthe access token from this request must have an SNS ARN configured on\nit.",
                    "enum": [
                      "email",
                      "sms",
                      "push"
                    ]
                  },
                  "communication_channel[token]": {
                    "type": "string",
                    "description": "A registration id, device token, or equivalent token given to an app when\nregistering with a push notification provider. Only valid for \"push\" type channels."
                  },
                  "skip_confirmation": {
                    "type": "boolean",
                    "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationChannel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/communication_channels/{type}/{address}": {
      "delete": {
        "tags": [
          "communication_channels"
        ],
        "summary": "Delete a communication channel",
        "description": "Delete an existing communication channel.",
        "operationId": "delete_communication_channel_type",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationChannel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/self/communication_channels/push": {
      "delete": {
        "tags": [
          "communication_channels"
        ],
        "summary": "Delete a push notification endpoint",
        "operationId": "delete_push_notification_endpoint",
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/{success: true}"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/communication_channels/{id}": {
      "delete": {
        "tags": [
          "communication_channels"
        ],
        "summary": "Delete a communication channel",
        "description": "Delete an existing communication channel.",
        "operationId": "delete_communication_channel_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationChannel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/conferences": {
      "get": {
        "tags": [
          "conferences"
        ],
        "summary": "List conferences",
        "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
        "operationId": "list_conferences_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conference"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/conferences": {
      "get": {
        "tags": [
          "conferences"
        ],
        "summary": "List conferences",
        "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
        "operationId": "list_conferences_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conference"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/conferences": {
      "get": {
        "tags": [
          "conferences"
        ],
        "summary": "List conferences for the current user",
        "description": "Retrieve the paginated list of conferences for all courses and groups\nthe current user belongs to\n\nThis API returns a JSON object containing the list of conferences.\nThe key for the list of conferences is \"conferences\".",
        "operationId": "list_conferences_for_current_user",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "If set to \"live\", returns only conferences that are live (i.e., have\nstarted and not finished yet). If omitted, returns all conferences for\nthis user's groups and courses.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conference"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_exports": {
      "get": {
        "tags": [
          "content_exports"
        ],
        "summary": "List content exports",
        "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
        "operationId": "list_content_exports_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentExport"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_exports"
        ],
        "summary": "Export content",
        "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
        "operationId": "export_content_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "export_type"
                ],
                "properties": {
                  "export_type": {
                    "type": "string",
                    "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                    "enum": [
                      "common_cartridge",
                      "qti",
                      "zip"
                    ]
                  },
                  "skip_notifications": {
                    "type": "boolean",
                    "description": "Don't send the notifications about the export to the user. Default: false"
                  },
                  "select": {
                    "type": "string",
                    "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                    "enum": [
                      "folders",
                      "files",
                      "attachments",
                      "quizzes",
                      "assignments",
                      "announcements",
                      "calendar_events",
                      "discussion_topics",
                      "modules",
                      "module_items",
                      "pages",
                      "rubrics"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_exports": {
      "get": {
        "tags": [
          "content_exports"
        ],
        "summary": "List content exports",
        "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
        "operationId": "list_content_exports_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentExport"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_exports"
        ],
        "summary": "Export content",
        "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
        "operationId": "export_content_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "export_type"
                ],
                "properties": {
                  "export_type": {
                    "type": "string",
                    "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                    "enum": [
                      "common_cartridge",
                      "qti",
                      "zip"
                    ]
                  },
                  "skip_notifications": {
                    "type": "boolean",
                    "description": "Don't send the notifications about the export to the user. Default: false"
                  },
                  "select": {
                    "type": "string",
                    "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                    "enum": [
                      "folders",
                      "files",
                      "attachments",
                      "quizzes",
                      "assignments",
                      "announcements",
                      "calendar_events",
                      "discussion_topics",
                      "modules",
                      "module_items",
                      "pages",
                      "rubrics"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_exports": {
      "get": {
        "tags": [
          "content_exports"
        ],
        "summary": "List content exports",
        "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
        "operationId": "list_content_exports_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentExport"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_exports"
        ],
        "summary": "Export content",
        "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
        "operationId": "export_content_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "export_type"
                ],
                "properties": {
                  "export_type": {
                    "type": "string",
                    "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                    "enum": [
                      "common_cartridge",
                      "qti",
                      "zip"
                    ]
                  },
                  "skip_notifications": {
                    "type": "boolean",
                    "description": "Don't send the notifications about the export to the user. Default: false"
                  },
                  "select": {
                    "type": "string",
                    "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                    "enum": [
                      "folders",
                      "files",
                      "attachments",
                      "quizzes",
                      "assignments",
                      "announcements",
                      "calendar_events",
                      "discussion_topics",
                      "modules",
                      "module_items",
                      "pages",
                      "rubrics"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_exports/{id}": {
      "get": {
        "tags": [
          "content_exports"
        ],
        "summary": "Show content export",
        "description": "Get information about a single content export.",
        "operationId": "show_content_export_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_exports/{id}": {
      "get": {
        "tags": [
          "content_exports"
        ],
        "summary": "Show content export",
        "description": "Get information about a single content export.",
        "operationId": "show_content_export_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_exports/{id}": {
      "get": {
        "tags": [
          "content_exports"
        ],
        "summary": "Show content export",
        "description": "Get information about a single content export.",
        "operationId": "show_content_export_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a migration issue",
        "description": "Returns data on an individual migration issue",
        "operationId": "get_migration_issue_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a migration issue",
        "description": "Update the workflow_state of a migration issue",
        "operationId": "update_migration_issue_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "workflow_state"
                ],
                "properties": {
                  "workflow_state": {
                    "type": "string",
                    "description": "Set the workflow_state of the issue.",
                    "enum": [
                      "active",
                      "resolved"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a migration issue",
        "description": "Returns data on an individual migration issue",
        "operationId": "get_migration_issue_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a migration issue",
        "description": "Update the workflow_state of a migration issue",
        "operationId": "update_migration_issue_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "workflow_state"
                ],
                "properties": {
                  "workflow_state": {
                    "type": "string",
                    "description": "Set the workflow_state of the issue.",
                    "enum": [
                      "active",
                      "resolved"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_migrations": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List content migrations",
        "description": "Returns paginated content migrations",
        "operationId": "list_content_migrations_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentMigration"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Create a content migration",
        "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
        "operationId": "create_content_migration_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "migration_type"
                ],
                "properties": {
                  "migration_type": {
                    "type": "string",
                    "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
                  },
                  "pre_attachment[name]": {
                    "type": "string",
                    "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
                  },
                  "pre_attachment[*]": {
                    "type": "string",
                    "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
                  },
                  "settings[file_url]": {
                    "type": "string",
                    "description": "A URL to download the file from. Must not require authentication."
                  },
                  "settings[content_export_id]": {
                    "type": "string",
                    "description": "The id of a ContentExport to import. This allows you to import content previously exported from Canvas\nwithout needing to download and re-upload it."
                  },
                  "settings[source_course_id]": {
                    "type": "string",
                    "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
                  },
                  "settings[folder_id]": {
                    "type": "string",
                    "description": "The folder to unzip the .zip file into for a zip_file_import."
                  },
                  "settings[overwrite_quizzes]": {
                    "type": "boolean",
                    "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
                  },
                  "settings[question_bank_id]": {
                    "type": "integer",
                    "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                    "format": "int64"
                  },
                  "settings[question_bank_name]": {
                    "type": "string",
                    "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
                  },
                  "settings[insert_into_module_id]": {
                    "type": "integer",
                    "description": "The id of a module in the target course. This will add all imported items\n(that can be added to a module) to the given module.",
                    "format": "int64"
                  },
                  "settings[insert_into_module_type]": {
                    "type": "string",
                    "description": "If provided (and +insert_into_module_id+ is supplied),\nonly add objects of the specified type to the module.",
                    "enum": [
                      "assignment",
                      "discussion_topic",
                      "file",
                      "page",
                      "quiz"
                    ]
                  },
                  "settings[insert_into_module_position]": {
                    "type": "integer",
                    "description": "The (1-based) position to insert the imported items into the course\n(if +insert_into_module_id+ is supplied). If this parameter\nis omitted, items will be added to the end of the module.",
                    "format": "int64"
                  },
                  "settings[move_to_assignment_group_id]": {
                    "type": "integer",
                    "description": "The id of an assignment group in the target course. If provided, all\nimported assignments will be moved to the given assignment group.",
                    "format": "int64"
                  },
                  "settings[importer_skips]": {
                    "type": "string",
                    "description": "Set of importers to skip, even if otherwise selected by migration settings.",
                    "enum": [
                      "all_course_settings"
                    ]
                  },
                  "date_shift_options[shift_dates]": {
                    "type": "boolean",
                    "description": "Whether to shift dates in the copied course"
                  },
                  "date_shift_options[old_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original start date of the source content/course"
                  },
                  "date_shift_options[old_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original end date of the source content/course"
                  },
                  "date_shift_options[new_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new start date for the content/course"
                  },
                  "date_shift_options[new_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new end date for the source content/course"
                  },
                  "date_shift_options[day_substitutions][X]": {
                    "type": "integer",
                    "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                    "format": "int64"
                  },
                  "date_shift_options[remove_dates]": {
                    "type": "boolean",
                    "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
                  },
                  "selective_import": {
                    "type": "boolean",
                    "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
                  },
                  "select": {
                    "type": "string",
                    "description": "For +course_copy_importer+ migrations, this parameter allows you to select\nthe objects to copy without using the +selective_import+ argument and\n+waiting_for_select+ state as is required for uploaded imports (though that\nworkflow is also supported for course copy migrations).\nThe keys are object types like 'files', 'folders', 'pages', etc. The value\nfor each key is a list of object ids. An id can be an integer or a string.\nMultiple object types can be selected in the same call.",
                    "enum": [
                      "folders",
                      "files",
                      "attachments",
                      "quizzes",
                      "assignments",
                      "announcements",
                      "calendar_events",
                      "discussion_topics",
                      "modules",
                      "module_items",
                      "pages",
                      "rubrics"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_migrations/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a content migration",
        "description": "Returns data on an individual content migration",
        "operationId": "get_content_migration_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a content migration",
        "description": "Update a content migration. Takes same arguments as {api:ContentMigrationsController#create create} except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem, or when\nimporting content selectively. If the first upload has a problem you can\nsupply new _pre_attachment_ values to start the process again.",
        "operationId": "update_content_migration_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List migration issues",
        "description": "Returns paginated migration issues",
        "operationId": "list_migration_issues_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigrationIssue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a migration issue",
        "description": "Returns data on an individual migration issue",
        "operationId": "get_migration_issue_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a migration issue",
        "description": "Update the workflow_state of a migration issue",
        "operationId": "update_migration_issue_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "workflow_state"
                ],
                "properties": {
                  "workflow_state": {
                    "type": "string",
                    "description": "Set the workflow_state of the issue.",
                    "enum": [
                      "active",
                      "resolved"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_migrations": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List content migrations",
        "description": "Returns paginated content migrations",
        "operationId": "list_content_migrations_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentMigration"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Create a content migration",
        "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
        "operationId": "create_content_migration_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "migration_type"
                ],
                "properties": {
                  "migration_type": {
                    "type": "string",
                    "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
                  },
                  "pre_attachment[name]": {
                    "type": "string",
                    "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
                  },
                  "pre_attachment[*]": {
                    "type": "string",
                    "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
                  },
                  "settings[file_url]": {
                    "type": "string",
                    "description": "A URL to download the file from. Must not require authentication."
                  },
                  "settings[content_export_id]": {
                    "type": "string",
                    "description": "The id of a ContentExport to import. This allows you to import content previously exported from Canvas\nwithout needing to download and re-upload it."
                  },
                  "settings[source_course_id]": {
                    "type": "string",
                    "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
                  },
                  "settings[folder_id]": {
                    "type": "string",
                    "description": "The folder to unzip the .zip file into for a zip_file_import."
                  },
                  "settings[overwrite_quizzes]": {
                    "type": "boolean",
                    "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
                  },
                  "settings[question_bank_id]": {
                    "type": "integer",
                    "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                    "format": "int64"
                  },
                  "settings[question_bank_name]": {
                    "type": "string",
                    "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
                  },
                  "settings[insert_into_module_id]": {
                    "type": "integer",
                    "description": "The id of a module in the target course. This will add all imported items\n(that can be added to a module) to the given module.",
                    "format": "int64"
                  },
                  "settings[insert_into_module_type]": {
                    "type": "string",
                    "description": "If provided (and +insert_into_module_id+ is supplied),\nonly add objects of the specified type to the module.",
                    "enum": [
                      "assignment",
                      "discussion_topic",
                      "file",
                      "page",
                      "quiz"
                    ]
                  },
                  "settings[insert_into_module_position]": {
                    "type": "integer",
                    "description": "The (1-based) position to insert the imported items into the course\n(if +insert_into_module_id+ is supplied). If this parameter\nis omitted, items will be added to the end of the module.",
                    "format": "int64"
                  },
                  "settings[move_to_assignment_group_id]": {
                    "type": "integer",
                    "description": "The id of an assignment group in the target course. If provided, all\nimported assignments will be moved to the given assignment group.",
                    "format": "int64"
                  },
                  "settings[importer_skips]": {
                    "type": "string",
                    "description": "Set of importers to skip, even if otherwise selected by migration settings.",
                    "enum": [
                      "all_course_settings"
                    ]
                  },
                  "date_shift_options[shift_dates]": {
                    "type": "boolean",
                    "description": "Whether to shift dates in the copied course"
                  },
                  "date_shift_options[old_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original start date of the source content/course"
                  },
                  "date_shift_options[old_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original end date of the source content/course"
                  },
                  "date_shift_options[new_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new start date for the content/course"
                  },
                  "date_shift_options[new_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new end date for the source content/course"
                  },
                  "date_shift_options[day_substitutions][X]": {
                    "type": "integer",
                    "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                    "format": "int64"
                  },
                  "date_shift_options[remove_dates]": {
                    "type": "boolean",
                    "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
                  },
                  "selective_import": {
                    "type": "boolean",
                    "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
                  },
                  "select": {
                    "type": "string",
                    "description": "For +course_copy_importer+ migrations, this parameter allows you to select\nthe objects to copy without using the +selective_import+ argument and\n+waiting_for_select+ state as is required for uploaded imports (though that\nworkflow is also supported for course copy migrations).\nThe keys are object types like 'files', 'folders', 'pages', etc. The value\nfor each key is a list of object ids. An id can be an integer or a string.\nMultiple object types can be selected in the same call.",
                    "enum": [
                      "folders",
                      "files",
                      "attachments",
                      "quizzes",
                      "assignments",
                      "announcements",
                      "calendar_events",
                      "discussion_topics",
                      "modules",
                      "module_items",
                      "pages",
                      "rubrics"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_migrations/migrators": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List Migration Systems",
        "description": "Lists the currently available migration types. These values may change.",
        "operationId": "list_migration_systems_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Migrator"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_migrations/migrators": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List Migration Systems",
        "description": "Lists the currently available migration types. These values may change.",
        "operationId": "list_migration_systems_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Migrator"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_migrations": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List content migrations",
        "description": "Returns paginated content migrations",
        "operationId": "list_content_migrations_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentMigration"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Create a content migration",
        "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
        "operationId": "create_content_migration_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "migration_type"
                ],
                "properties": {
                  "migration_type": {
                    "type": "string",
                    "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
                  },
                  "pre_attachment[name]": {
                    "type": "string",
                    "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
                  },
                  "pre_attachment[*]": {
                    "type": "string",
                    "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
                  },
                  "settings[file_url]": {
                    "type": "string",
                    "description": "A URL to download the file from. Must not require authentication."
                  },
                  "settings[content_export_id]": {
                    "type": "string",
                    "description": "The id of a ContentExport to import. This allows you to import content previously exported from Canvas\nwithout needing to download and re-upload it."
                  },
                  "settings[source_course_id]": {
                    "type": "string",
                    "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
                  },
                  "settings[folder_id]": {
                    "type": "string",
                    "description": "The folder to unzip the .zip file into for a zip_file_import."
                  },
                  "settings[overwrite_quizzes]": {
                    "type": "boolean",
                    "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
                  },
                  "settings[question_bank_id]": {
                    "type": "integer",
                    "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                    "format": "int64"
                  },
                  "settings[question_bank_name]": {
                    "type": "string",
                    "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
                  },
                  "settings[insert_into_module_id]": {
                    "type": "integer",
                    "description": "The id of a module in the target course. This will add all imported items\n(that can be added to a module) to the given module.",
                    "format": "int64"
                  },
                  "settings[insert_into_module_type]": {
                    "type": "string",
                    "description": "If provided (and +insert_into_module_id+ is supplied),\nonly add objects of the specified type to the module.",
                    "enum": [
                      "assignment",
                      "discussion_topic",
                      "file",
                      "page",
                      "quiz"
                    ]
                  },
                  "settings[insert_into_module_position]": {
                    "type": "integer",
                    "description": "The (1-based) position to insert the imported items into the course\n(if +insert_into_module_id+ is supplied). If this parameter\nis omitted, items will be added to the end of the module.",
                    "format": "int64"
                  },
                  "settings[move_to_assignment_group_id]": {
                    "type": "integer",
                    "description": "The id of an assignment group in the target course. If provided, all\nimported assignments will be moved to the given assignment group.",
                    "format": "int64"
                  },
                  "settings[importer_skips]": {
                    "type": "string",
                    "description": "Set of importers to skip, even if otherwise selected by migration settings.",
                    "enum": [
                      "all_course_settings"
                    ]
                  },
                  "date_shift_options[shift_dates]": {
                    "type": "boolean",
                    "description": "Whether to shift dates in the copied course"
                  },
                  "date_shift_options[old_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original start date of the source content/course"
                  },
                  "date_shift_options[old_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original end date of the source content/course"
                  },
                  "date_shift_options[new_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new start date for the content/course"
                  },
                  "date_shift_options[new_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new end date for the source content/course"
                  },
                  "date_shift_options[day_substitutions][X]": {
                    "type": "integer",
                    "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                    "format": "int64"
                  },
                  "date_shift_options[remove_dates]": {
                    "type": "boolean",
                    "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
                  },
                  "selective_import": {
                    "type": "boolean",
                    "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
                  },
                  "select": {
                    "type": "string",
                    "description": "For +course_copy_importer+ migrations, this parameter allows you to select\nthe objects to copy without using the +selective_import+ argument and\n+waiting_for_select+ state as is required for uploaded imports (though that\nworkflow is also supported for course copy migrations).\nThe keys are object types like 'files', 'folders', 'pages', etc. The value\nfor each key is a list of object ids. An id can be an integer or a string.\nMultiple object types can be selected in the same call.",
                    "enum": [
                      "folders",
                      "files",
                      "attachments",
                      "quizzes",
                      "assignments",
                      "announcements",
                      "calendar_events",
                      "discussion_topics",
                      "modules",
                      "module_items",
                      "pages",
                      "rubrics"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a content migration",
        "description": "Returns data on an individual content migration",
        "operationId": "get_content_migration_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a content migration",
        "description": "Update a content migration. Takes same arguments as {api:ContentMigrationsController#create create} except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem, or when\nimporting content selectively. If the first upload has a problem you can\nsupply new _pre_attachment_ values to start the process again.",
        "operationId": "update_content_migration_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_migrations/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a content migration",
        "description": "Returns data on an individual content migration",
        "operationId": "get_content_migration_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a content migration",
        "description": "Update a content migration. Takes same arguments as {api:ContentMigrationsController#create create} except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem, or when\nimporting content selectively. If the first upload has a problem you can\nsupply new _pre_attachment_ values to start the process again.",
        "operationId": "update_content_migration_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List migration issues",
        "description": "Returns paginated migration issues",
        "operationId": "list_migration_issues_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigrationIssue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List migration issues",
        "description": "Returns paginated migration issues",
        "operationId": "list_migration_issues_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigrationIssue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a migration issue",
        "description": "Returns data on an individual migration issue",
        "operationId": "get_migration_issue_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a migration issue",
        "description": "Update the workflow_state of a migration issue",
        "operationId": "update_migration_issue_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "workflow_state"
                ],
                "properties": {
                  "workflow_state": {
                    "type": "string",
                    "description": "Set the workflow_state of the issue.",
                    "enum": [
                      "active",
                      "resolved"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationIssue"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_migrations/migrators": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List Migration Systems",
        "description": "Lists the currently available migration types. These values may change.",
        "operationId": "list_migration_systems_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Migrator"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_migrations/{id}/selective_data": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List items for selective import",
        "description": "Enumerates the content available for selective import in a tree structure. Each node provides\na +property+ copy argument that can be supplied to the {api:ContentMigrationsController#update Update endpoint}\nto selectively copy the content associated with that tree node and its children. Each node may also\nprovide a +sub_items_url+ or an array of +sub_items+ which you can use to obtain copy parameters\nfor a subset of the resources in a given node.\n\nIf no +type+ is sent you will get a list of the top-level sections in the content. It will look something like this:\n\n  [{\n    \"type\": \"course_settings\",\n    \"property\": \"copy[all_course_settings]\",\n    \"title\": \"Course Settings\"\n  },\n  {\n    \"type\": \"context_modules\",\n    \"property\": \"copy[all_context_modules]\",\n    \"title\": \"Modules\",\n    \"count\": 5,\n    \"sub_items_url\": \"http://example.com/api/v1/courses/22/content_migrations/77/selective_data?type=context_modules\"\n  },\n  {\n    \"type\": \"assignments\",\n    \"property\": \"copy[all_assignments]\",\n    \"title\": \"Assignments\",\n    \"count\": 2,\n    \"sub_items_url\": \"http://localhost:3000/api/v1/courses/22/content_migrations/77/selective_data?type=assignments\"\n  }]\n\nWhen a +type+ is provided, nodes may be further divided via +sub_items+. For example, using +type=assignments+\nresults in a node for each assignment group and a sub_item for each assignment, like this:\n\n  [{\n    \"type\": \"assignment_groups\",\n    \"title\": \"An Assignment Group\",\n    \"property\": \"copy[assignment_groups][id_i855cf145e5acc7435e1bf1c6e2126e5f]\",\n    \"sub_items\": [{\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 1\",\n        \"property\": \"copy[assignments][id_i2102a7fa93b29226774949298626719d]\"\n    }, {\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 2\",\n        \"property\": \"copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]\"\n    }]\n  }]\n\n\nTo import the items corresponding to a particular tree node, use the +property+ as a parameter to the\n{api:ContentMigrationsController#update Update endpoint} and assign a value of 1, for example:\n\n  copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]=1\n\nYou can include multiple copy parameters to selectively import multiple items or groups of items.",
        "operationId": "list_items_for_selective_import_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of content to enumerate.",
            "schema": {
              "type": "string",
              "enum": [
                "context_modules",
                "assignments",
                "quizzes",
                "assessment_question_banks",
                "discussion_topics",
                "wiki_pages",
                "context_external_tools",
                "tool_profiles",
                "announcements",
                "calendar_events",
                "rubrics",
                "groups",
                "learning_outcomes",
                "attachments"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list of content items"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_migrations/{id}/selective_data": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List items for selective import",
        "description": "Enumerates the content available for selective import in a tree structure. Each node provides\na +property+ copy argument that can be supplied to the {api:ContentMigrationsController#update Update endpoint}\nto selectively copy the content associated with that tree node and its children. Each node may also\nprovide a +sub_items_url+ or an array of +sub_items+ which you can use to obtain copy parameters\nfor a subset of the resources in a given node.\n\nIf no +type+ is sent you will get a list of the top-level sections in the content. It will look something like this:\n\n  [{\n    \"type\": \"course_settings\",\n    \"property\": \"copy[all_course_settings]\",\n    \"title\": \"Course Settings\"\n  },\n  {\n    \"type\": \"context_modules\",\n    \"property\": \"copy[all_context_modules]\",\n    \"title\": \"Modules\",\n    \"count\": 5,\n    \"sub_items_url\": \"http://example.com/api/v1/courses/22/content_migrations/77/selective_data?type=context_modules\"\n  },\n  {\n    \"type\": \"assignments\",\n    \"property\": \"copy[all_assignments]\",\n    \"title\": \"Assignments\",\n    \"count\": 2,\n    \"sub_items_url\": \"http://localhost:3000/api/v1/courses/22/content_migrations/77/selective_data?type=assignments\"\n  }]\n\nWhen a +type+ is provided, nodes may be further divided via +sub_items+. For example, using +type=assignments+\nresults in a node for each assignment group and a sub_item for each assignment, like this:\n\n  [{\n    \"type\": \"assignment_groups\",\n    \"title\": \"An Assignment Group\",\n    \"property\": \"copy[assignment_groups][id_i855cf145e5acc7435e1bf1c6e2126e5f]\",\n    \"sub_items\": [{\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 1\",\n        \"property\": \"copy[assignments][id_i2102a7fa93b29226774949298626719d]\"\n    }, {\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 2\",\n        \"property\": \"copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]\"\n    }]\n  }]\n\n\nTo import the items corresponding to a particular tree node, use the +property+ as a parameter to the\n{api:ContentMigrationsController#update Update endpoint} and assign a value of 1, for example:\n\n  copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]=1\n\nYou can include multiple copy parameters to selectively import multiple items or groups of items.",
        "operationId": "list_items_for_selective_import_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of content to enumerate.",
            "schema": {
              "type": "string",
              "enum": [
                "context_modules",
                "assignments",
                "quizzes",
                "assessment_question_banks",
                "discussion_topics",
                "wiki_pages",
                "context_external_tools",
                "tool_profiles",
                "announcements",
                "calendar_events",
                "rubrics",
                "groups",
                "learning_outcomes",
                "attachments"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list of content items"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List migration issues",
        "description": "Returns paginated migration issues",
        "operationId": "list_migration_issues_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigrationIssue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/content_migrations": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List content migrations",
        "description": "Returns paginated content migrations",
        "operationId": "list_content_migrations_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentMigration"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Create a content migration",
        "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
        "operationId": "create_content_migration_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "migration_type"
                ],
                "properties": {
                  "migration_type": {
                    "type": "string",
                    "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
                  },
                  "pre_attachment[name]": {
                    "type": "string",
                    "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
                  },
                  "pre_attachment[*]": {
                    "type": "string",
                    "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
                  },
                  "settings[file_url]": {
                    "type": "string",
                    "description": "A URL to download the file from. Must not require authentication."
                  },
                  "settings[content_export_id]": {
                    "type": "string",
                    "description": "The id of a ContentExport to import. This allows you to import content previously exported from Canvas\nwithout needing to download and re-upload it."
                  },
                  "settings[source_course_id]": {
                    "type": "string",
                    "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
                  },
                  "settings[folder_id]": {
                    "type": "string",
                    "description": "The folder to unzip the .zip file into for a zip_file_import."
                  },
                  "settings[overwrite_quizzes]": {
                    "type": "boolean",
                    "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
                  },
                  "settings[question_bank_id]": {
                    "type": "integer",
                    "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                    "format": "int64"
                  },
                  "settings[question_bank_name]": {
                    "type": "string",
                    "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
                  },
                  "settings[insert_into_module_id]": {
                    "type": "integer",
                    "description": "The id of a module in the target course. This will add all imported items\n(that can be added to a module) to the given module.",
                    "format": "int64"
                  },
                  "settings[insert_into_module_type]": {
                    "type": "string",
                    "description": "If provided (and +insert_into_module_id+ is supplied),\nonly add objects of the specified type to the module.",
                    "enum": [
                      "assignment",
                      "discussion_topic",
                      "file",
                      "page",
                      "quiz"
                    ]
                  },
                  "settings[insert_into_module_position]": {
                    "type": "integer",
                    "description": "The (1-based) position to insert the imported items into the course\n(if +insert_into_module_id+ is supplied). If this parameter\nis omitted, items will be added to the end of the module.",
                    "format": "int64"
                  },
                  "settings[move_to_assignment_group_id]": {
                    "type": "integer",
                    "description": "The id of an assignment group in the target course. If provided, all\nimported assignments will be moved to the given assignment group.",
                    "format": "int64"
                  },
                  "settings[importer_skips]": {
                    "type": "string",
                    "description": "Set of importers to skip, even if otherwise selected by migration settings.",
                    "enum": [
                      "all_course_settings"
                    ]
                  },
                  "date_shift_options[shift_dates]": {
                    "type": "boolean",
                    "description": "Whether to shift dates in the copied course"
                  },
                  "date_shift_options[old_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original start date of the source content/course"
                  },
                  "date_shift_options[old_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original end date of the source content/course"
                  },
                  "date_shift_options[new_start_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new start date for the content/course"
                  },
                  "date_shift_options[new_end_date]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The new end date for the source content/course"
                  },
                  "date_shift_options[day_substitutions][X]": {
                    "type": "integer",
                    "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                    "format": "int64"
                  },
                  "date_shift_options[remove_dates]": {
                    "type": "boolean",
                    "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
                  },
                  "selective_import": {
                    "type": "boolean",
                    "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
                  },
                  "select": {
                    "type": "string",
                    "description": "For +course_copy_importer+ migrations, this parameter allows you to select\nthe objects to copy without using the +selective_import+ argument and\n+waiting_for_select+ state as is required for uploaded imports (though that\nworkflow is also supported for course copy migrations).\nThe keys are object types like 'files', 'folders', 'pages', etc. The value\nfor each key is a list of object ids. An id can be an integer or a string.\nMultiple object types can be selected in the same call.",
                    "enum": [
                      "folders",
                      "files",
                      "attachments",
                      "quizzes",
                      "assignments",
                      "announcements",
                      "calendar_events",
                      "discussion_topics",
                      "modules",
                      "module_items",
                      "pages",
                      "rubrics"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/content_migrations/migrators": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List Migration Systems",
        "description": "Lists the currently available migration types. These values may change.",
        "operationId": "list_migration_systems_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Migrator"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{id}/selective_data": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List items for selective import",
        "description": "Enumerates the content available for selective import in a tree structure. Each node provides\na +property+ copy argument that can be supplied to the {api:ContentMigrationsController#update Update endpoint}\nto selectively copy the content associated with that tree node and its children. Each node may also\nprovide a +sub_items_url+ or an array of +sub_items+ which you can use to obtain copy parameters\nfor a subset of the resources in a given node.\n\nIf no +type+ is sent you will get a list of the top-level sections in the content. It will look something like this:\n\n  [{\n    \"type\": \"course_settings\",\n    \"property\": \"copy[all_course_settings]\",\n    \"title\": \"Course Settings\"\n  },\n  {\n    \"type\": \"context_modules\",\n    \"property\": \"copy[all_context_modules]\",\n    \"title\": \"Modules\",\n    \"count\": 5,\n    \"sub_items_url\": \"http://example.com/api/v1/courses/22/content_migrations/77/selective_data?type=context_modules\"\n  },\n  {\n    \"type\": \"assignments\",\n    \"property\": \"copy[all_assignments]\",\n    \"title\": \"Assignments\",\n    \"count\": 2,\n    \"sub_items_url\": \"http://localhost:3000/api/v1/courses/22/content_migrations/77/selective_data?type=assignments\"\n  }]\n\nWhen a +type+ is provided, nodes may be further divided via +sub_items+. For example, using +type=assignments+\nresults in a node for each assignment group and a sub_item for each assignment, like this:\n\n  [{\n    \"type\": \"assignment_groups\",\n    \"title\": \"An Assignment Group\",\n    \"property\": \"copy[assignment_groups][id_i855cf145e5acc7435e1bf1c6e2126e5f]\",\n    \"sub_items\": [{\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 1\",\n        \"property\": \"copy[assignments][id_i2102a7fa93b29226774949298626719d]\"\n    }, {\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 2\",\n        \"property\": \"copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]\"\n    }]\n  }]\n\n\nTo import the items corresponding to a particular tree node, use the +property+ as a parameter to the\n{api:ContentMigrationsController#update Update endpoint} and assign a value of 1, for example:\n\n  copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]=1\n\nYou can include multiple copy parameters to selectively import multiple items or groups of items.",
        "operationId": "list_items_for_selective_import_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of content to enumerate.",
            "schema": {
              "type": "string",
              "enum": [
                "context_modules",
                "assignments",
                "quizzes",
                "assessment_question_banks",
                "discussion_topics",
                "wiki_pages",
                "context_external_tools",
                "tool_profiles",
                "announcements",
                "calendar_events",
                "rubrics",
                "groups",
                "learning_outcomes",
                "attachments"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list of content items"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_migrations/{id}": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Get a content migration",
        "description": "Returns data on an individual content migration",
        "operationId": "get_content_migration_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_migrations"
        ],
        "summary": "Update a content migration",
        "description": "Update a content migration. Takes same arguments as {api:ContentMigrationsController#create create} except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem, or when\nimporting content selectively. If the first upload has a problem you can\nsupply new _pre_attachment_ values to start the process again.",
        "operationId": "update_content_migration_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMigration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_migrations/{id}/selective_data": {
      "get": {
        "tags": [
          "content_migrations"
        ],
        "summary": "List items for selective import",
        "description": "Enumerates the content available for selective import in a tree structure. Each node provides\na +property+ copy argument that can be supplied to the {api:ContentMigrationsController#update Update endpoint}\nto selectively copy the content associated with that tree node and its children. Each node may also\nprovide a +sub_items_url+ or an array of +sub_items+ which you can use to obtain copy parameters\nfor a subset of the resources in a given node.\n\nIf no +type+ is sent you will get a list of the top-level sections in the content. It will look something like this:\n\n  [{\n    \"type\": \"course_settings\",\n    \"property\": \"copy[all_course_settings]\",\n    \"title\": \"Course Settings\"\n  },\n  {\n    \"type\": \"context_modules\",\n    \"property\": \"copy[all_context_modules]\",\n    \"title\": \"Modules\",\n    \"count\": 5,\n    \"sub_items_url\": \"http://example.com/api/v1/courses/22/content_migrations/77/selective_data?type=context_modules\"\n  },\n  {\n    \"type\": \"assignments\",\n    \"property\": \"copy[all_assignments]\",\n    \"title\": \"Assignments\",\n    \"count\": 2,\n    \"sub_items_url\": \"http://localhost:3000/api/v1/courses/22/content_migrations/77/selective_data?type=assignments\"\n  }]\n\nWhen a +type+ is provided, nodes may be further divided via +sub_items+. For example, using +type=assignments+\nresults in a node for each assignment group and a sub_item for each assignment, like this:\n\n  [{\n    \"type\": \"assignment_groups\",\n    \"title\": \"An Assignment Group\",\n    \"property\": \"copy[assignment_groups][id_i855cf145e5acc7435e1bf1c6e2126e5f]\",\n    \"sub_items\": [{\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 1\",\n        \"property\": \"copy[assignments][id_i2102a7fa93b29226774949298626719d]\"\n    }, {\n        \"type\": \"assignments\",\n        \"title\": \"Assignment 2\",\n        \"property\": \"copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]\"\n    }]\n  }]\n\n\nTo import the items corresponding to a particular tree node, use the +property+ as a parameter to the\n{api:ContentMigrationsController#update Update endpoint} and assign a value of 1, for example:\n\n  copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]=1\n\nYou can include multiple copy parameters to selectively import multiple items or groups of items.",
        "operationId": "list_items_for_selective_import_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of content to enumerate.",
            "schema": {
              "type": "string",
              "enum": [
                "context_modules",
                "assignments",
                "quizzes",
                "assessment_question_banks",
                "discussion_topics",
                "wiki_pages",
                "context_external_tools",
                "tool_profiles",
                "announcements",
                "calendar_events",
                "rubrics",
                "groups",
                "learning_outcomes",
                "attachments"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list of content items"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/csp_settings/domains/batch_create": {
      "post": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Add multiple allowed domains to an account",
        "description": "Adds multiple allowed domains for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
        "operationId": "add_multiple_allowed_domains_to_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "domains"
                ],
                "properties": {
                  "domains": {
                    "type": "ref",
                    "description": "no description"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/csp_settings": {
      "get": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Get current settings for account or course",
        "description": "Update multiple modules in an account.",
        "operationId": "get_current_settings_for_account_or_course_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Enable, disable, or clear explicit CSP setting",
        "description": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
        "operationId": "enable_disable_or_clear_explicit_csp_setting_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the allowed domains set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set.",
                    "enum": [
                      "enabled",
                      "disabled",
                      "inherited"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/csp_settings/lock": {
      "put": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Lock or unlock current CSP settings for sub-accounts and courses",
        "description": "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. \"inherited\" is false).",
        "operationId": "lock_or_unlock_current_csp_settings_for_sub_accounts_and_courses",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "settings_locked"
                ],
                "properties": {
                  "settings_locked": {
                    "type": "boolean",
                    "description": "Whether sub-accounts and courses will be prevented from overriding settings inherited from this account."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/csp_settings/domains": {
      "post": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Add an allowed domain to account",
        "description": "Adds an allowed domain for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
        "operationId": "add_allowed_domain_to_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "domain"
                ],
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "no description"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Remove a domain from account",
        "description": "Removes an allowed domain from the current account.",
        "operationId": "remove_domain_from_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "no description",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/csp_log": {
      "get": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Retrieve reported CSP Violations for account",
        "description": "Must be called on a root account.",
        "operationId": "retrieve_reported_csp_violations_for_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/csp_settings": {
      "get": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Get current settings for account or course",
        "description": "Update multiple modules in an account.",
        "operationId": "get_current_settings_for_account_or_course_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "content_security_policy_settings"
        ],
        "summary": "Enable, disable, or clear explicit CSP setting",
        "description": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
        "operationId": "enable_disable_or_clear_explicit_csp_setting_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the allowed domains set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set.",
                    "enum": [
                      "enabled",
                      "disabled",
                      "inherited"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/{user_id}/content_shares/{id}/add_users": {
      "post": {
        "tags": [
          "content_shares"
        ],
        "summary": "Add users to content share",
        "description": "Send a previously created content share to additional users",
        "operationId": "add_users_to_content_share",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "receiver_ids": {
                    "type": "ref",
                    "description": "IDs of users to share the content with."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentShare"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_shares": {
      "post": {
        "tags": [
          "content_shares"
        ],
        "summary": "Create a content share",
        "description": "Share content directly between two or more users",
        "operationId": "create_content_share",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "content_id",
                  "content_type",
                  "receiver_ids"
                ],
                "properties": {
                  "receiver_ids": {
                    "type": "ref",
                    "description": "IDs of users to share the content with."
                  },
                  "content_type": {
                    "type": "string",
                    "description": "Type of content you are sharing.",
                    "enum": [
                      "assignment",
                      "discussion_topic",
                      "page",
                      "quiz",
                      "module",
                      "module_item"
                    ]
                  },
                  "content_id": {
                    "type": "integer",
                    "description": "The id of the content that you are sharing",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentShare"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_shares/sent": {
      "get": {
        "tags": [
          "content_shares"
        ],
        "summary": "List content shares",
        "description": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
        "operationId": "list_content_shares_sent",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentShare"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_shares/unread_count": {
      "get": {
        "tags": [
          "content_shares"
        ],
        "summary": "Get unread shares count",
        "description": "Return the number of content shares a user has received that have not yet been read. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
        "operationId": "get_unread_shares_count",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/{ \"unread_count\": \"integer\" }"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_shares/{id}": {
      "get": {
        "tags": [
          "content_shares"
        ],
        "summary": "Get content share",
        "description": "Return information about a single content share. You may use +self+ as the user_id to retrieve your own content share.",
        "operationId": "get_content_share",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentShare"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_shares"
        ],
        "summary": "Update a content share",
        "description": "Mark a content share read or unread",
        "operationId": "update_content_share",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "read_state": {
                    "type": "string",
                    "description": "Read state for the content share",
                    "enum": [
                      "read",
                      "unread"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentShare"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "content_shares"
        ],
        "summary": "Remove content share",
        "description": "Remove a content share from your list. Use +self+ as the user_id. Note that this endpoint does not delete other users'\ncopies of the content share.",
        "operationId": "remove_content_share",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/{user_id}/content_shares/received": {
      "get": {
        "tags": [
          "content_shares"
        ],
        "summary": "List content shares",
        "description": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
        "operationId": "list_content_shares_received",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentShare"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/conversations/{id}/remove_messages": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Delete a message",
        "description": "Delete messages from this conversation. Note that this only affects this\nuser's view of the conversation. If all messages are deleted, the\nconversation will be as well (equivalent to DELETE)",
        "operationId": "delete_message",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "remove"
                ],
                "properties": {
                  "remove": {
                    "type": "array",
                    "description": "Array of message ids to be deleted",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations/find_recipients": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Find recipients",
        "description": "Deprecated, see the {api:SearchController#recipients Find recipients endpoint} in the Search API",
        "operationId": "find_recipients",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations/mark_all_as_read": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Mark all as read",
        "description": "Mark all conversations as read.",
        "operationId": "mark_all_as_read",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations/{id}/add_recipients": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Add recipients",
        "description": "Add recipients to an existing group conversation. Response is similar to\nthe GET/show action, except that only includes the\nlatest message (e.g. \"joe was added to the conversation by bob\")",
        "operationId": "add_recipients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "recipients"
                ],
                "properties": {
                  "recipients": {
                    "type": "array",
                    "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations/{id}/add_message": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Add a message",
        "description": "Add a message to an existing conversation. Response is similar to the\nGET/show action, except that only includes the\nlatest message (i.e. what we just sent)\n\nAn array of user ids. Defaults to all of the current conversation\nrecipients. To explicitly send a message to no other recipients,\nthis array should consist of the logged-in user id.\n\nAn array of message ids from this conversation to send to recipients\nof the new message. Recipients who already had a copy of included\nmessages will not be affected.",
        "operationId": "add_message",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "body"
                ],
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The message to be sent."
                  },
                  "attachment_ids": {
                    "type": "array",
                    "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "media_comment_id": {
                    "type": "string",
                    "description": "Media comment id of an audio of video file to be associated with this\nmessage."
                  },
                  "media_comment_type": {
                    "type": "string",
                    "description": "Type of the associated media file.",
                    "enum": [
                      "audio",
                      "video"
                    ]
                  },
                  "recipients": {
                    "type": "array",
                    "description": "no description",
                    "items": {
                      "type": "string"
                    }
                  },
                  "included_messages": {
                    "type": "array",
                    "description": "no description",
                    "items": {
                      "type": "string"
                    }
                  },
                  "user_note": {
                    "type": "boolean",
                    "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "List conversations",
        "description": "Returns the paginated list of conversations for the current user, most\nrecent ones first.",
        "operationId": "list_conversations",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "When set, only return conversations of the specified type. For example,\nset to \"unread\" to return only conversations that haven't been read.\nThe default behavior is to return all non-archived conversations (i.e.\nread and unread).",
            "schema": {
              "type": "string",
              "enum": [
                "unread",
                "starred",
                "archived"
              ]
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "When set, only return conversations for the specified courses, groups\nor users. The id should be prefixed with its type, e.g. \"user_123\" or\n\"course_456\". Can be an array (by setting \"filter[]\") or single value\n(by setting \"filter\")",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter_mode",
            "in": "query",
            "description": "When filter[] contains multiple filters, combine them with this mode,\nfiltering conversations that at have at least all of the contexts (\"and\")\nor at least one of the contexts (\"or\")",
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or",
                "default or"
              ]
            }
          },
          {
            "name": "interleave_submissions",
            "in": "query",
            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_all_conversation_ids",
            "in": "query",
            "description": "Default is false. If true,\nthe top-level element of the response will be an object rather than\nan array, and will have the keys \"conversations\" which will contain the\npaged conversation data, and \"conversation_ids\" which will contain the\nids of all conversations under this scope/filter in the same order.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "\"participant_avatars\":: Optionally include an \"avatar_url\" key for each user participanting in the conversation",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "participant_avatars"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conversation"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "conversations"
        ],
        "summary": "Batch update conversations",
        "description": "Perform a change on a set of conversations. Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
        "operationId": "batch_update_conversations",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "conversation_ids",
                  "event"
                ],
                "properties": {
                  "conversation_ids": {
                    "type": "array",
                    "description": "List of conversations to update. Limited to 500 conversations.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "event": {
                    "type": "string",
                    "description": "The action to take on each conversation.",
                    "enum": [
                      "mark_as_read",
                      "mark_as_unread",
                      "star",
                      "unstar",
                      "archive",
                      "destroy"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Progress"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Create a conversation",
        "description": "Create a new conversation with one or more recipients. If there is already\nan existing private conversation with the given recipients, it will be\nreused.",
        "operationId": "create_conversation",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "body",
                  "recipients"
                ],
                "properties": {
                  "recipients": {
                    "type": "array",
                    "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3. If the course/group\nhas over 100 enrollments, 'bulk_message' and 'group_conversation' must be\nset to true.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject of the conversation. This is ignored when reusing a\nconversation. Maximum length is 255 characters."
                  },
                  "body": {
                    "type": "string",
                    "description": "The message to be sent"
                  },
                  "force_new": {
                    "type": "boolean",
                    "description": "Forces a new message to be created, even if there is an existing private conversation."
                  },
                  "group_conversation": {
                    "type": "boolean",
                    "description": "Defaults to false.  When false, individual private conversations will be\ncreated with each recipient. If true, this will be a group conversation\n(i.e. all recipients may see all messages and replies). Must be set true if\nthe number of recipients is over the set maximum (default is 100)."
                  },
                  "attachment_ids": {
                    "type": "array",
                    "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "media_comment_id": {
                    "type": "string",
                    "description": "Media comment id of an audio or video file to be associated with this\nmessage."
                  },
                  "media_comment_type": {
                    "type": "string",
                    "description": "Type of the associated media file",
                    "enum": [
                      "audio",
                      "video"
                    ]
                  },
                  "user_note": {
                    "type": "boolean",
                    "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account."
                  },
                  "mode": {
                    "type": "string",
                    "description": "Determines whether the messages will be created/sent synchronously or\nasynchronously. Defaults to sync, and this option is ignored if this is a\ngroup conversation or there is just one recipient (i.e. it must be a bulk\nprivate message). When sent async, the response will be an empty array\n(batch status can be queried via the {api:ConversationsController#batches batches API})",
                    "enum": [
                      "sync",
                      "async"
                    ]
                  },
                  "scope": {
                    "type": "string",
                    "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                    "enum": [
                      "unread",
                      "starred",
                      "archived"
                    ]
                  },
                  "filter": {
                    "type": "array",
                    "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                    "items": {
                      "type": "string"
                    }
                  },
                  "filter_mode": {
                    "type": "string",
                    "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                    "enum": [
                      "and",
                      "or",
                      "default or"
                    ]
                  },
                  "context_code": {
                    "type": "string",
                    "description": "The course or group that is the context for this conversation. Same format\nas courses or groups in the recipients argument."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations/batches": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Get running batches",
        "description": "Returns any currently running conversation batches for the current user.\nConversation batches are created when a bulk private message is sent\nasynchronously (see the mode argument to the {api:ConversationsController#create create API action}).",
        "operationId": "get_running_batches",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations/{id}": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Get a single conversation",
        "description": "Returns information for a single conversation for the current user. Response includes all\nfields that are present in the list/index action as well as messages\nand extended participant information.",
        "operationId": "get_single_conversation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interleave_submissions",
            "in": "query",
            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
            "schema": {
              "type": "string",
              "enum": [
                "unread",
                "starred",
                "archived"
              ]
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter_mode",
            "in": "query",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or",
                "default or"
              ]
            }
          },
          {
            "name": "auto_mark_as_read",
            "in": "query",
            "description": "Default true. If true, unread\nconversations will be automatically marked as read. This will default\nto false in a future API release, so clients should explicitly send\ntrue if that is the desired behavior.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "conversations"
        ],
        "summary": "Edit a conversation",
        "description": "Updates attributes for a single conversation.",
        "operationId": "edit_conversation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "conversation[workflow_state]": {
                    "type": "string",
                    "description": "Change the state of this conversation",
                    "enum": [
                      "read",
                      "unread",
                      "archived"
                    ]
                  },
                  "conversation[subscribed]": {
                    "type": "boolean",
                    "description": "Toggle the current user's subscription to the conversation (only valid for\ngroup conversations). If unsubscribed, the user will still have access to\nthe latest messages, but the conversation won't be automatically flagged\nas unread, nor will it jump to the top of the inbox."
                  },
                  "conversation[starred]": {
                    "type": "boolean",
                    "description": "Toggle the starred state of the current user's view of the conversation."
                  },
                  "scope": {
                    "type": "string",
                    "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                    "enum": [
                      "unread",
                      "starred",
                      "archived"
                    ]
                  },
                  "filter": {
                    "type": "array",
                    "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                    "items": {
                      "type": "string"
                    }
                  },
                  "filter_mode": {
                    "type": "string",
                    "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                    "enum": [
                      "and",
                      "or",
                      "default or"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "conversations"
        ],
        "summary": "Delete a conversation",
        "description": "Delete this conversation and its messages. Note that this only deletes\nthis user's view of the conversation.\n\nResponse includes same fields as UPDATE action",
        "operationId": "delete_conversation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/conversations/unread_count": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Unread count",
        "description": "Get the number of unread conversations for the current user",
        "operationId": "unread_count",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/audit/course/accounts/{account_id}": {
      "get": {
        "tags": [
          "course_audit_log"
        ],
        "summary": "Query by account.",
        "description": "List course change events for a given account.",
        "operationId": "query_by_account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "The beginning of the time range from which you want events.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "The end of the time range from which you want events.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/audit/course/courses/{course_id}": {
      "get": {
        "tags": [
          "course_audit_log"
        ],
        "summary": "Query by course.",
        "description": "List course change events for a given course.",
        "operationId": "query_by_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "The beginning of the time range from which you want events.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "The end of the time range from which you want events.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/quiz_extensions": {
      "post": {
        "tags": [
          "course_quiz_extensions"
        ],
        "summary": "Set extensions for student quiz submissions",
        "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
        "operationId": "set_extensions_for_student_quiz_submissions",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "user_id"
                ],
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "The ID of the user we want to add quiz extensions for.",
                    "format": "int64"
                  },
                  "extra_attempts": {
                    "type": "integer",
                    "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less.",
                    "format": "int64"
                  },
                  "extra_time": {
                    "type": "integer",
                    "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)",
                    "format": "int64"
                  },
                  "manually_unlocked": {
                    "type": "boolean",
                    "description": "Allow the student to take the quiz even if it's locked for\neveryone else."
                  },
                  "extend_from_now": {
                    "type": "integer",
                    "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)",
                    "format": "int64"
                  },
                  "extend_from_end_at": {
                    "type": "integer",
                    "description": "The number of minutes to extend the quiz beyond the quiz's current\nending time. This is mutually exclusive to extend_from_now. This is\nlimited to 1440 minutes (24 hours)",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}": {
      "put": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "Update column data",
        "description": "Set the content of a custom column",
        "operationId": "update_column_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "column_data[content]"
                ],
                "properties": {
                  "column_data[content]": {
                    "type": "string",
                    "description": "Column content.  Setting this to blank will delete the datum object."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnDatum"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_column_data": {
      "put": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "Bulk update column data",
        "description": "Set the content of custom columns\n\n{\n  \"column_data\": [\n    {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content\": example_content\n      },\n      {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content: example_content\n    }\n  ]\n}",
        "operationId": "bulk_update_column_data",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "column_data"
                ],
                "properties": {
                  "column_data": {
                    "type": "array",
                    "description": "Column content. Setting this to an empty string will delete the data object.",
                    "items": {
                      "$ref": "#/components/schemas/Array"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Progress"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns": {
      "get": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "List custom gradebook columns",
        "description": "A paginated list of all custom gradebook columns for a course",
        "operationId": "list_custom_gradebook_columns",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "description": "Include hidden parameters (defaults to false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomColumn"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "Create a custom gradebook column",
        "description": "Create a custom gradebook column",
        "operationId": "create_custom_gradebook_column",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "column[title]"
                ],
                "properties": {
                  "column[title]": {
                    "type": "string",
                    "description": "no description"
                  },
                  "column[position]": {
                    "type": "integer",
                    "description": "The position of the column relative to other custom columns",
                    "format": "int64"
                  },
                  "column[hidden]": {
                    "type": "boolean",
                    "description": "Hidden columns are not displayed in the gradebook"
                  },
                  "column[teacher_notes]": {
                    "type": "boolean",
                    "description": "Set this if the column is created by a teacher.  The gradebook only\nsupports one teacher_notes column."
                  },
                  "column[read_only]": {
                    "type": "boolean",
                    "description": "Set this to prevent the column from being editable in the gradebook ui"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomColumn"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/reorder": {
      "post": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "Reorder custom columns",
        "description": "Puts the given columns in the specified order\n\n<b>200 OK</b> is returned if successful",
        "operationId": "reorder_custom_columns",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "order"
                ],
                "properties": {
                  "order": {
                    "type": "array",
                    "description": "no description",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data": {
      "get": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "List entries for a column",
        "description": "This does not list entries for students without associated data.",
        "operationId": "list_entries_for_column",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "description": "If true, hidden columns will be included in the\nresult. If false or absent, only visible columns\nwill be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDatum"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/{id}": {
      "put": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "Update a custom gradebook column",
        "description": "Accepts the same parameters as custom gradebook column creation",
        "operationId": "update_custom_gradebook_column",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomColumn"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "custom_gradebook_columns"
        ],
        "summary": "Delete a custom gradebook column",
        "description": "Permanently deletes a custom column and its associated data",
        "operationId": "delete_custom_gradebook_column",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomColumn"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List topic entries",
        "description": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
        "operationId": "list_topic_entries_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Post an entry",
        "description": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
        "operationId": "post_entry_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The body of the entry."
                  },
                  "attachment": {
                    "type": "string",
                    "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/duplicate": {
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Duplicate discussion topic",
        "description": "Duplicate a discussion topic according to context (Course/Group)",
        "operationId": "duplicate_discussion_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionTopic"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/view": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Get the full topic",
        "description": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
        "operationId": "get_full_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List discussion topics",
        "description": "Returns the paginated list of discussion topics for this course or group.",
        "operationId": "list_discussion_topics_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all_dates",
                "sections",
                "sections_user_count",
                "overrides"
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Determines the order of the discussion topic list. Defaults to \"position\".",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "recent_activity",
                "title"
              ]
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string.",
            "schema": {
              "type": "string",
              "enum": [
                "locked",
                "unlocked",
                "pinned",
                "unpinned"
              ]
            }
          },
          {
            "name": "only_announcements",
            "in": "query",
            "description": "Return announcements instead of discussion topics. Defaults to false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter_by",
            "in": "query",
            "description": "The state of the discussion topic to return. Currently only supports unread state.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "unread"
              ]
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial title of the discussion topics to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_context_module_locked_topics",
            "in": "query",
            "description": "For students, exclude topics that are locked by module progression.\nDefaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscussionTopic"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Create a new discussion topic",
        "description": "Create an new discussion topic for the course or group.",
        "operationId": "create_new_discussion_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "no description"
                  },
                  "message": {
                    "type": "string",
                    "description": "no description"
                  },
                  "discussion_type": {
                    "type": "string",
                    "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                    "enum": [
                      "side_comment",
                      "threaded"
                    ]
                  },
                  "published": {
                    "type": "boolean",
                    "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
                  },
                  "delayed_post_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will not be published until that time."
                  },
                  "allow_rating": {
                    "type": "boolean",
                    "description": "Whether or not users can rate entries in this topic."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
                  },
                  "podcast_enabled": {
                    "type": "boolean",
                    "description": "If true, the topic will have an associated podcast feed."
                  },
                  "podcast_has_student_posts": {
                    "type": "boolean",
                    "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
                  },
                  "require_initial_post": {
                    "type": "boolean",
                    "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
                  },
                  "assignment": {
                    "type": "object",
                    "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                  },
                  "is_announcement": {
                    "type": "boolean",
                    "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
                  },
                  "pinned": {
                    "type": "boolean",
                    "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
                  },
                  "position_after": {
                    "type": "string",
                    "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
                  },
                  "group_category_id": {
                    "type": "integer",
                    "description": "If present, the topic will become a group discussion assigned\nto the group.",
                    "format": "int64"
                  },
                  "only_graders_can_rate": {
                    "type": "boolean",
                    "description": "If true, only graders will be allowed to rate entries."
                  },
                  "sort_by_rating": {
                    "type": "boolean",
                    "description": "If true, entries will be sorted by rating."
                  },
                  "attachment": {
                    "type": "string",
                    "description": "A multipart/form-data form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions.",
                    "format": "binary"
                  },
                  "specific_sections": {
                    "type": "string",
                    "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific to.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Update an entry",
        "description": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
        "operationId": "update_entry_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The updated body of the entry."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Delete an entry",
        "description": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
        "operationId": "delete_entry_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark entry as read",
        "description": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_entry_as_read_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "forced_read_state": {
                    "type": "boolean",
                    "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark entry as unread",
        "description": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_entry_as_unread_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/view": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Get the full topic",
        "description": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
        "operationId": "get_full_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/read": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark topic as read",
        "description": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_topic_as_read_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark topic as unread",
        "description": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_topic_as_unread_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List entries",
        "description": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
        "operationId": "list_entries_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Subscribe to a topic",
        "description": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
        "operationId": "subscribe_to_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Unsubscribe from a topic",
        "description": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
        "operationId": "unsubscribe_from_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/read": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark topic as read",
        "description": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_topic_as_read_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark topic as unread",
        "description": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_topic_as_unread_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark all entries as read",
        "description": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_all_entries_as_read_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "forced_read_state": {
                    "type": "boolean",
                    "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark all entries as unread",
        "description": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_all_entries_as_unread_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List entries",
        "description": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
        "operationId": "list_entries_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/reorder": {
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Reorder pinned topics",
        "description": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
        "operationId": "reorder_pinned_topics_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "order"
                ],
                "properties": {
                  "order": {
                    "type": "array",
                    "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/duplicate": {
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Duplicate discussion topic",
        "description": "Duplicate a discussion topic according to context (Course/Group)",
        "operationId": "duplicate_discussion_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionTopic"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List entry replies",
        "description": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
        "operationId": "list_entry_replies_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Post a reply",
        "description": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
        "operationId": "post_reply_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The body of the entry."
                  },
                  "attachment": {
                    "type": "string",
                    "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark all entries as read",
        "description": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_all_entries_as_read_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "forced_read_state": {
                    "type": "boolean",
                    "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark all entries as unread",
        "description": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_all_entries_as_unread_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List topic entries",
        "description": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
        "operationId": "list_topic_entries_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Post an entry",
        "description": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
        "operationId": "post_entry_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The body of the entry."
                  },
                  "attachment": {
                    "type": "string",
                    "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List discussion topics",
        "description": "Returns the paginated list of discussion topics for this course or group.",
        "operationId": "list_discussion_topics_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all_dates",
                "sections",
                "sections_user_count",
                "overrides"
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Determines the order of the discussion topic list. Defaults to \"position\".",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "recent_activity",
                "title"
              ]
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string.",
            "schema": {
              "type": "string",
              "enum": [
                "locked",
                "unlocked",
                "pinned",
                "unpinned"
              ]
            }
          },
          {
            "name": "only_announcements",
            "in": "query",
            "description": "Return announcements instead of discussion topics. Defaults to false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter_by",
            "in": "query",
            "description": "The state of the discussion topic to return. Currently only supports unread state.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "unread"
              ]
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial title of the discussion topics to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_context_module_locked_topics",
            "in": "query",
            "description": "For students, exclude topics that are locked by module progression.\nDefaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscussionTopic"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Create a new discussion topic",
        "description": "Create an new discussion topic for the course or group.",
        "operationId": "create_new_discussion_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "no description"
                  },
                  "message": {
                    "type": "string",
                    "description": "no description"
                  },
                  "discussion_type": {
                    "type": "string",
                    "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                    "enum": [
                      "side_comment",
                      "threaded"
                    ]
                  },
                  "published": {
                    "type": "boolean",
                    "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
                  },
                  "delayed_post_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will not be published until that time."
                  },
                  "allow_rating": {
                    "type": "boolean",
                    "description": "Whether or not users can rate entries in this topic."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
                  },
                  "podcast_enabled": {
                    "type": "boolean",
                    "description": "If true, the topic will have an associated podcast feed."
                  },
                  "podcast_has_student_posts": {
                    "type": "boolean",
                    "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
                  },
                  "require_initial_post": {
                    "type": "boolean",
                    "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
                  },
                  "assignment": {
                    "type": "object",
                    "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                  },
                  "is_announcement": {
                    "type": "boolean",
                    "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
                  },
                  "pinned": {
                    "type": "boolean",
                    "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
                  },
                  "position_after": {
                    "type": "string",
                    "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
                  },
                  "group_category_id": {
                    "type": "integer",
                    "description": "If present, the topic will become a group discussion assigned\nto the group.",
                    "format": "int64"
                  },
                  "only_graders_can_rate": {
                    "type": "boolean",
                    "description": "If true, only graders will be allowed to rate entries."
                  },
                  "sort_by_rating": {
                    "type": "boolean",
                    "description": "If true, entries will be sorted by rating."
                  },
                  "attachment": {
                    "type": "string",
                    "description": "A multipart/form-data form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions.",
                    "format": "binary"
                  },
                  "specific_sections": {
                    "type": "string",
                    "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific to.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Update an entry",
        "description": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
        "operationId": "update_entry_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The updated body of the entry."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Delete an entry",
        "description": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
        "operationId": "delete_entry_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Subscribe to a topic",
        "description": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
        "operationId": "subscribe_to_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Unsubscribe from a topic",
        "description": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
        "operationId": "unsubscribe_from_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/reorder": {
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Reorder pinned topics",
        "description": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
        "operationId": "reorder_pinned_topics_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "order"
                ],
                "properties": {
                  "order": {
                    "type": "array",
                    "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Get a single topic",
        "description": "Returns data on an individual discussion topic. See the List action for the response formatting.",
        "operationId": "get_single_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all_dates",
                "sections",
                "sections_user_count",
                "overrides"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Update a topic",
        "description": "Update an existing discussion topic for the course or group.",
        "operationId": "update_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "no description"
                  },
                  "message": {
                    "type": "string",
                    "description": "no description"
                  },
                  "discussion_type": {
                    "type": "string",
                    "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                    "enum": [
                      "side_comment",
                      "threaded"
                    ]
                  },
                  "published": {
                    "type": "boolean",
                    "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
                  },
                  "delayed_post_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will not be published until that time."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
                  },
                  "podcast_enabled": {
                    "type": "boolean",
                    "description": "If true, the topic will have an associated podcast feed."
                  },
                  "podcast_has_student_posts": {
                    "type": "boolean",
                    "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
                  },
                  "require_initial_post": {
                    "type": "boolean",
                    "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
                  },
                  "assignment": {
                    "type": "object",
                    "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                  },
                  "is_announcement": {
                    "type": "boolean",
                    "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
                  },
                  "pinned": {
                    "type": "boolean",
                    "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
                  },
                  "position_after": {
                    "type": "string",
                    "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
                  },
                  "group_category_id": {
                    "type": "integer",
                    "description": "If present, the topic will become a group discussion assigned\nto the group.",
                    "format": "int64"
                  },
                  "allow_rating": {
                    "type": "boolean",
                    "description": "If true, users will be allowed to rate entries."
                  },
                  "only_graders_can_rate": {
                    "type": "boolean",
                    "description": "If true, only graders will be allowed to rate entries."
                  },
                  "sort_by_rating": {
                    "type": "boolean",
                    "description": "If true, entries will be sorted by rating."
                  },
                  "specific_sections": {
                    "type": "string",
                    "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Delete a topic",
        "description": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
        "operationId": "delete_topic_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read": {
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark entry as read",
        "description": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_entry_as_read_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "forced_read_state": {
                    "type": "boolean",
                    "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Mark entry as unread",
        "description": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "mark_entry_as_unread_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Get a single topic",
        "description": "Returns data on an individual discussion topic. See the List action for the response formatting.",
        "operationId": "get_single_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all_dates",
                "sections",
                "sections_user_count",
                "overrides"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Update a topic",
        "description": "Update an existing discussion topic for the course or group.",
        "operationId": "update_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "no description"
                  },
                  "message": {
                    "type": "string",
                    "description": "no description"
                  },
                  "discussion_type": {
                    "type": "string",
                    "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                    "enum": [
                      "side_comment",
                      "threaded"
                    ]
                  },
                  "published": {
                    "type": "boolean",
                    "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
                  },
                  "delayed_post_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will not be published until that time."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
                  },
                  "podcast_enabled": {
                    "type": "boolean",
                    "description": "If true, the topic will have an associated podcast feed."
                  },
                  "podcast_has_student_posts": {
                    "type": "boolean",
                    "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
                  },
                  "require_initial_post": {
                    "type": "boolean",
                    "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
                  },
                  "assignment": {
                    "type": "object",
                    "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                  },
                  "is_announcement": {
                    "type": "boolean",
                    "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
                  },
                  "pinned": {
                    "type": "boolean",
                    "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
                  },
                  "position_after": {
                    "type": "string",
                    "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
                  },
                  "group_category_id": {
                    "type": "integer",
                    "description": "If present, the topic will become a group discussion assigned\nto the group.",
                    "format": "int64"
                  },
                  "allow_rating": {
                    "type": "boolean",
                    "description": "If true, users will be allowed to rate entries."
                  },
                  "only_graders_can_rate": {
                    "type": "boolean",
                    "description": "If true, only graders will be allowed to rate entries."
                  },
                  "sort_by_rating": {
                    "type": "boolean",
                    "description": "If true, entries will be sorted by rating."
                  },
                  "specific_sections": {
                    "type": "string",
                    "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Delete a topic",
        "description": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
        "operationId": "delete_topic_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating": {
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Rate entry",
        "description": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "rate_entry_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "rating": {
                    "type": "integer",
                    "description": "A rating to set on this entry. Only 0 and 1 are accepted.",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating": {
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Rate entry",
        "description": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
        "operationId": "rate_entry_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "rating": {
                    "type": "integer",
                    "description": "A rating to set on this entry. Only 0 and 1 are accepted.",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies": {
      "get": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "List entry replies",
        "description": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
        "operationId": "list_entry_replies_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "discussion_topics"
        ],
        "summary": "Post a reply",
        "description": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
        "operationId": "post_reply_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The body of the entry."
                  },
                  "attachment": {
                    "type": "string",
                    "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/terms/{id}": {
      "get": {
        "tags": [
          "enrollment_terms"
        ],
        "summary": "Retrieve enrollment term",
        "description": "Retrieves the details for an enrollment term in the account. Includes overrides by default.",
        "operationId": "retrieve_enrollment_term",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentTerm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "enrollment_terms"
        ],
        "summary": "Update enrollment term",
        "description": "Update an existing enrollment term for the specified account.",
        "operationId": "update_enrollment_term",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "enrollment_term[name]": {
                    "type": "string",
                    "description": "The name of the term."
                  },
                  "enrollment_term[start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
                  },
                  "enrollment_term[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
                  },
                  "enrollment_term[sis_term_id]": {
                    "type": "string",
                    "description": "The unique SIS identifier for the term."
                  },
                  "enrollment_term[overrides][enrollment_type][start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
                  },
                  "enrollment_term[overrides][enrollment_type][end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
                  },
                  "override_sis_stickiness": {
                    "type": "boolean",
                    "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentTerm"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "enrollment_terms"
        ],
        "summary": "Delete enrollment term",
        "description": "Delete the specified enrollment term.",
        "operationId": "delete_enrollment_term",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentTerm"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/terms": {
      "get": {
        "tags": [
          "enrollment_terms"
        ],
        "summary": "List enrollment terms",
        "description": "An object with a paginated list of all of the terms in the account.",
        "operationId": "list_enrollment_terms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflow_state",
            "in": "query",
            "description": "If set, only returns terms that are in the given state.\nDefaults to 'active'.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "active",
                "deleted",
                "all"
              ]
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"overrides\":: term start/end dates overridden for different enrollment types\n\"course_count\":: the number of courses in each term",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "overrides"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentTermsList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "enrollment_terms"
        ],
        "summary": "Create enrollment term",
        "description": "Create a new enrollment term for the specified account.",
        "operationId": "create_enrollment_term",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "enrollment_term[name]": {
                    "type": "string",
                    "description": "The name of the term."
                  },
                  "enrollment_term[start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
                  },
                  "enrollment_term[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
                  },
                  "enrollment_term[sis_term_id]": {
                    "type": "string",
                    "description": "The unique SIS identifier for the term."
                  },
                  "enrollment_term[overrides][enrollment_type][start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
                  },
                  "enrollment_term[overrides][enrollment_type][end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentTerm"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/enrollments": {
      "get": {
        "tags": [
          "enrollments"
        ],
        "summary": "List enrollments",
        "description": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
        "operationId": "list_enrollments_users",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. The following synthetic states are supported only when\nquerying a user's enrollments (either via user_id argument or via user\nenrollments endpoint): +current_and_invited+, +current_and_future+, +current_and_concluded+",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "active",
                "invited",
                "creation_pending",
                "deleted",
                "rejected",
                "completed",
                "inactive",
                "current_and_invited",
                "current_and_future",
                "current_and_concluded"
              ]
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\"\nis specified, the fields \"current_points\" and (if the caller has\npermissions to manage grades) \"unposted_current_points\" will be included\nin the \"grades\" hash for student enrollments.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "avatar_url",
                "group_ids",
                "locked",
                "observed_users",
                "can_be_removed",
                "uuid",
                "current_points"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sis_account_id",
            "in": "query",
            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_course_id",
            "in": "query",
            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_section_id",
            "in": "query",
            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_user_id",
            "in": "query",
            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_for_sis_id",
            "in": "query",
            "description": "If sis_user_id is present and created_for_sis_id is true, Returns only\nenrollments for the specified SIS ID(s).\nIf a user has two sis_id's, one enrollment may be created using one of the\ntwo ids. This would limit the enrollments returned from the endpoint to\nenrollments that were created from a sis_import with that sis_user_id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enrollment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}": {
      "delete": {
        "tags": [
          "enrollments"
        ],
        "summary": "Conclude, deactivate, or delete an enrollment",
        "description": "Conclude, deactivate, or delete an enrollment. If the +task+ argument isn't given, the enrollment\nwill be concluded.",
        "operationId": "conclude_deactivate_or_delete_enrollment",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task",
            "in": "query",
            "description": "The action to take on the enrollment.\nWhen inactive, a user will still appear in the course roster to admins, but be unable to participate.\n(\"inactivate\" and \"deactivate\" are equivalent tasks)",
            "schema": {
              "type": "string",
              "enum": [
                "conclude",
                "delete",
                "inactivate",
                "deactivate"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}/accept": {
      "post": {
        "tags": [
          "enrollments"
        ],
        "summary": "Accept Course Invitation",
        "description": "accepts a pending course invitation for the current user",
        "operationId": "accept_course_invitation",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/enrollments": {
      "get": {
        "tags": [
          "enrollments"
        ],
        "summary": "List enrollments",
        "description": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
        "operationId": "list_enrollments_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. The following synthetic states are supported only when\nquerying a user's enrollments (either via user_id argument or via user\nenrollments endpoint): +current_and_invited+, +current_and_future+, +current_and_concluded+",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "active",
                "invited",
                "creation_pending",
                "deleted",
                "rejected",
                "completed",
                "inactive",
                "current_and_invited",
                "current_and_future",
                "current_and_concluded"
              ]
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\"\nis specified, the fields \"current_points\" and (if the caller has\npermissions to manage grades) \"unposted_current_points\" will be included\nin the \"grades\" hash for student enrollments.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "avatar_url",
                "group_ids",
                "locked",
                "observed_users",
                "can_be_removed",
                "uuid",
                "current_points"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sis_account_id",
            "in": "query",
            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_course_id",
            "in": "query",
            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_section_id",
            "in": "query",
            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_user_id",
            "in": "query",
            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_for_sis_id",
            "in": "query",
            "description": "If sis_user_id is present and created_for_sis_id is true, Returns only\nenrollments for the specified SIS ID(s).\nIf a user has two sis_id's, one enrollment may be created using one of the\ntwo ids. This would limit the enrollments returned from the endpoint to\nenrollments that were created from a sis_import with that sis_user_id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enrollment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "enrollments"
        ],
        "summary": "Enroll a user",
        "description": "Create a new user enrollment for a course or section.",
        "operationId": "enroll_user_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "enrollment[type]",
                  "enrollment[user_id]"
                ],
                "properties": {
                  "enrollment[start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z"
                  },
                  "enrollment[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z"
                  },
                  "enrollment[user_id]": {
                    "type": "string",
                    "description": "The ID of the user to be enrolled in the course."
                  },
                  "enrollment[type]": {
                    "type": "string",
                    "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used.",
                    "enum": [
                      "StudentEnrollment",
                      "TeacherEnrollment",
                      "TaEnrollment",
                      "ObserverEnrollment",
                      "DesignerEnrollment"
                    ]
                  },
                  "enrollment[role]": {
                    "type": "string",
                    "description": "Assigns a custom course-level role to the user."
                  },
                  "enrollment[role_id]": {
                    "type": "integer",
                    "description": "Assigns a custom course-level role to the user.",
                    "format": "int64"
                  },
                  "enrollment[enrollment_state]": {
                    "type": "string",
                    "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated.",
                    "enum": [
                      "active",
                      "invited",
                      "inactive"
                    ]
                  },
                  "enrollment[course_section_id]": {
                    "type": "integer",
                    "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored.",
                    "format": "int64"
                  },
                  "enrollment[limit_privileges_to_course_section]": {
                    "type": "boolean",
                    "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course."
                  },
                  "enrollment[notify]": {
                    "type": "boolean",
                    "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default."
                  },
                  "enrollment[self_enrollment_code]": {
                    "type": "string",
                    "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored."
                  },
                  "enrollment[self_enrolled]": {
                    "type": "boolean",
                    "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false."
                  },
                  "enrollment[associated_user_id]": {
                    "type": "integer",
                    "description": "For an observer enrollment, the ID of a student to observe.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}.",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/enrollments/{id}": {
      "get": {
        "tags": [
          "enrollments"
        ],
        "summary": "Enrollment by ID",
        "description": "Get an Enrollment object by Enrollment ID",
        "operationId": "enrollment_by_id",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enrollment object",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}/reject": {
      "post": {
        "tags": [
          "enrollments"
        ],
        "summary": "Reject Course Invitation",
        "description": "rejects a pending course invitation for the current user",
        "operationId": "reject_course_invitation",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/sections/{section_id}/enrollments": {
      "get": {
        "tags": [
          "enrollments"
        ],
        "summary": "List enrollments",
        "description": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments.\nA user can, however, return his/her own enrollments.\n\nEnrollments scoped to a course context will include inactive states by default\nif the caller has account admin authorization and the state[] parameter is omitted.",
        "operationId": "list_enrollments_sections",
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. The following synthetic states are supported only when\nquerying a user's enrollments (either via user_id argument or via user\nenrollments endpoint): +current_and_invited+, +current_and_future+, +current_and_concluded+",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "active",
                "invited",
                "creation_pending",
                "deleted",
                "rejected",
                "completed",
                "inactive",
                "current_and_invited",
                "current_and_future",
                "current_and_concluded"
              ]
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\"\nis specified, the fields \"current_points\" and (if the caller has\npermissions to manage grades) \"unposted_current_points\" will be included\nin the \"grades\" hash for student enrollments.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "avatar_url",
                "group_ids",
                "locked",
                "observed_users",
                "can_be_removed",
                "uuid",
                "current_points"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sis_account_id",
            "in": "query",
            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_course_id",
            "in": "query",
            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_section_id",
            "in": "query",
            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sis_user_id",
            "in": "query",
            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_for_sis_id",
            "in": "query",
            "description": "If sis_user_id is present and created_for_sis_id is true, Returns only\nenrollments for the specified SIS ID(s).\nIf a user has two sis_id's, one enrollment may be created using one of the\ntwo ids. This would limit the enrollments returned from the endpoint to\nenrollments that were created from a sis_import with that sis_user_id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enrollment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "enrollments"
        ],
        "summary": "Enroll a user",
        "description": "Create a new user enrollment for a course or section.",
        "operationId": "enroll_user_sections",
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "enrollment[type]",
                  "enrollment[user_id]"
                ],
                "properties": {
                  "enrollment[start_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z"
                  },
                  "enrollment[end_at]": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z"
                  },
                  "enrollment[user_id]": {
                    "type": "string",
                    "description": "The ID of the user to be enrolled in the course."
                  },
                  "enrollment[type]": {
                    "type": "string",
                    "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used.",
                    "enum": [
                      "StudentEnrollment",
                      "TeacherEnrollment",
                      "TaEnrollment",
                      "ObserverEnrollment",
                      "DesignerEnrollment"
                    ]
                  },
                  "enrollment[role]": {
                    "type": "string",
                    "description": "Assigns a custom course-level role to the user."
                  },
                  "enrollment[role_id]": {
                    "type": "integer",
                    "description": "Assigns a custom course-level role to the user.",
                    "format": "int64"
                  },
                  "enrollment[enrollment_state]": {
                    "type": "string",
                    "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated.",
                    "enum": [
                      "active",
                      "invited",
                      "inactive"
                    ]
                  },
                  "enrollment[course_section_id]": {
                    "type": "integer",
                    "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored.",
                    "format": "int64"
                  },
                  "enrollment[limit_privileges_to_course_section]": {
                    "type": "boolean",
                    "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course."
                  },
                  "enrollment[notify]": {
                    "type": "boolean",
                    "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default."
                  },
                  "enrollment[self_enrollment_code]": {
                    "type": "string",
                    "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored."
                  },
                  "enrollment[self_enrolled]": {
                    "type": "boolean",
                    "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false."
                  },
                  "enrollment[associated_user_id]": {
                    "type": "integer",
                    "description": "For an observer enrollment, the ID of a student to observe.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}.",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/users/{user_id}/last_attended": {
      "put": {
        "tags": [
          "enrollments"
        ],
        "summary": "Adds last attended date to student enrollment in course",
        "operationId": "adds_last_attended_date_to_student_enrollment_in_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}/reactivate": {
      "put": {
        "tags": [
          "enrollments"
        ],
        "summary": "Re-activate an enrollment",
        "description": "Activates an inactive enrollment",
        "operationId": "re_activate_enrollment",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eportfolios/{id}": {
      "get": {
        "tags": [
          "e_portfolios"
        ],
        "summary": "Get an ePortfolio",
        "description": "Get details for a single ePortfolio.",
        "operationId": "get_eportfolio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ePortfolio"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "e_portfolios"
        ],
        "summary": "Delete an ePortfolio",
        "description": "Mark an ePortfolio as deleted.",
        "operationId": "delete_eportfolio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ePortfolio"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/eportfolios": {
      "get": {
        "tags": [
          "e_portfolios"
        ],
        "summary": "Get all ePortfolios for a User",
        "description": "Get a list of all ePortfolios for the specified user.",
        "operationId": "get_all_eportfolios_for_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "deleted:: Include deleted ePortfolios. Only available to admins who can\nmoderate_user_content.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "deleted"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ePortfolio"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "e_portfolios"
        ],
        "summary": "Moderate all ePortfolios for a User",
        "description": "Update the spam_status for all active eportfolios of a user. Only available to\nadmins who can moderate_user_content.",
        "operationId": "moderate_all_eportfolios_for_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "spam_status": {
                    "type": "string",
                    "description": "The spam status for all the ePortfolios",
                    "enum": [
                      "marked_as_spam",
                      "marked_as_safe"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/eportfolios/{eportfolio_id}/pages": {
      "get": {
        "tags": [
          "e_portfolios"
        ],
        "summary": "Get ePortfolio Pages",
        "description": "Get details for the pages of an ePortfolio",
        "operationId": "get_eportfolio_pages",
        "parameters": [
          {
            "name": "eportfolio_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ePortfolioPage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/eportfolios/{eportfolio_id}/moderate": {
      "put": {
        "tags": [
          "e_portfolios"
        ],
        "summary": "Moderate an ePortfolio",
        "description": "Update the spam_status of an eportfolio. Only available to admins who can\nmoderate_user_content.",
        "operationId": "moderate_eportfolio",
        "parameters": [
          {
            "name": "eportfolio_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "spam_status": {
                    "type": "string",
                    "description": "The spam status for the ePortfolio",
                    "enum": [
                      "marked_as_spam",
                      "marked_as_safe"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ePortfolio"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eportfolios/{eportfolio_id}/restore": {
      "put": {
        "tags": [
          "e_portfolios"
        ],
        "summary": "Restore a deleted ePortfolio",
        "description": "Restore an ePortfolio back to active that was previously deleted. Only\navailable to admins who can moderate_user_content.",
        "operationId": "restore_deleted_eportfolio",
        "parameters": [
          {
            "name": "eportfolio_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ePortfolio"
                }
              }
            }
          }
        }
      }
    },
    "/v1/epub_exports": {
      "get": {
        "tags": [
          "e_pub_exports"
        ],
        "summary": "List courses with their latest ePub export",
        "description": "A paginated list of all courses a user is actively participating in, and\nthe latest ePub export associated with the user & course.",
        "operationId": "list_courses_with_their_latest_epub_export",
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseEpubExport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/epub_exports": {
      "post": {
        "tags": [
          "e_pub_exports"
        ],
        "summary": "Create ePub Export",
        "description": "Begin an ePub export for a course.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The export's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:EpubExportsController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
        "operationId": "create_epub_export",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpubExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/epub_exports/{id}": {
      "get": {
        "tags": [
          "e_pub_exports"
        ],
        "summary": "Show ePub export",
        "description": "Get information about a single ePub export.",
        "operationId": "show_epub_export",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpubExport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/error_reports": {
      "post": {
        "tags": [
          "error_reports"
        ],
        "summary": "Create Error Report",
        "description": "Create a new error report documenting an experienced problem\n\nPerforms the same action as when a user uses the \"help -> report a problem\"\ndialog.",
        "operationId": "create_error_report",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "error[subject]"
                ],
                "properties": {
                  "error[subject]": {
                    "type": "string",
                    "description": "The summary of the problem"
                  },
                  "error[url]": {
                    "type": "string",
                    "description": "URL from which the report was issued"
                  },
                  "error[email]": {
                    "type": "string",
                    "description": "Email address for the reporting user"
                  },
                  "error[comments]": {
                    "type": "string",
                    "description": "The long version of the story from the user one what they experienced"
                  },
                  "error[http_env]": {
                    "type": "object",
                    "description": "A collection of metadata about the users' environment.  If not provided,\ncanvas will collect it based on information found in the request.\n(Doesn't have to be HTTPENV info, could be anything JSON object that can be\nserialized as a hash, a mobile app might include relevant metadata for\nitself)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/external_tools/visible_course_nav_tools": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "Get visible course navigation tools",
        "description": "Get a list of external tools with the course_navigation placement that have not been hidden in\ncourse settings and whose visibility settings apply to the requesting user. These tools are the\nsame that appear in the course navigation.\n\nThe response format is the same as for List external tools, but with additional context_id and\ncontext_name fields on each element in the array.",
        "operationId": "get_visible_course_navigation_tools",
        "parameters": [
          {
            "name": "context_codes",
            "in": "query",
            "description": "List of context_codes to retrieve visible course nav tools for (for example, +course_123+). Only\ncourses are presently supported.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/external_tools/visible_course_nav_tools": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "Get visible course navigation tools for a single course",
        "description": "Get a list of external tools with the course_navigation placement that have not been hidden in\ncourse settings and whose visibility settings apply to the requesting user. These tools are the\nsame that appear in the course navigation.\n\nThe response format is the same as Get visible course navigation tools.",
        "operationId": "get_visible_course_navigation_tools_for_single_course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/external_tools/{external_tool_id}": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "Get a single external tool",
        "description": "Returns the specified external tool.",
        "operationId": "get_single_external_tool_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "external_tools"
        ],
        "summary": "Edit an external tool",
        "description": "Update the specified external tool. Uses same parameters as create",
        "operationId": "edit_external_tool_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "external_tools"
        ],
        "summary": "Delete an external tool",
        "description": "Remove the specified external tool",
        "operationId": "delete_external_tool_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/external_tools/rce_favorites/{id}": {
      "post": {
        "tags": [
          "external_tools"
        ],
        "summary": "Add tool to RCE Favorites",
        "description": "Add the specified editor_button external tool to a preferred location in the RCE\nfor courses in the given account and its subaccounts (if the subaccounts\nhaven't set their own RCE Favorites). Cannot set more than 2 RCE Favorites.",
        "operationId": "add_tool_to_rce_favorites",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "external_tools"
        ],
        "summary": "Remove tool from RCE Favorites",
        "description": "Remove the specified external tool from a preferred location in the RCE\nfor the given account",
        "operationId": "remove_tool_from_rce_favorites",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/external_tools": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "List external tools",
        "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
        "operationId": "list_external_tools_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name of the tools to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectable",
            "in": "query",
            "description": "If true, then only tools that are meant to be selectable are returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_parents",
            "in": "query",
            "description": "If true, then include tools installed in all accounts above the current context",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/external_tools/sessionless_launch": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "Get a sessionless launch url for an external tool.",
        "description": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
        "operationId": "get_sessionless_launch_url_for_external_tool_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The external id of the tool to launch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The LTI launch url for the external tool.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "query",
            "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_item_id",
            "in": "query",
            "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "launch_type",
            "in": "query",
            "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided.",
            "schema": {
              "type": "string",
              "enum": [
                "assessment",
                "module_item"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/external_tools": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "List external tools",
        "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
        "operationId": "list_external_tools_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name of the tools to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectable",
            "in": "query",
            "description": "If true, then only tools that are meant to be selectable are returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_parents",
            "in": "query",
            "description": "If true, then include tools installed in all accounts above the current context",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "external_tools"
        ],
        "summary": "Create an external tool",
        "description": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.\nIf a client ID is supplied canvas will attempt to create a context external\ntool using the LTI 1.3 standard.",
        "operationId": "create_external_tool_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "client_id",
                  "consumer_key",
                  "name",
                  "privacy_level",
                  "shared_secret"
                ],
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "The client id is attached to the developer key.\nIf supplied all other parameters are unnecessary and will be ignored"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the tool"
                  },
                  "privacy_level": {
                    "type": "string",
                    "description": "What information to send to the external tool.",
                    "enum": [
                      "anonymous",
                      "name_only",
                      "public"
                    ]
                  },
                  "consumer_key": {
                    "type": "string",
                    "description": "The consumer key for the external tool"
                  },
                  "shared_secret": {
                    "type": "string",
                    "description": "The shared secret with the external tool"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the tool"
                  },
                  "url": {
                    "type": "string",
                    "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both."
                  },
                  "domain": {
                    "type": "string",
                    "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both."
                  },
                  "icon_url": {
                    "type": "string",
                    "description": "The url of the icon to show for this tool"
                  },
                  "text": {
                    "type": "string",
                    "description": "The default text to show for this tool"
                  },
                  "custom_fields[field_name]": {
                    "type": "string",
                    "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times"
                  },
                  "is_rce_favorite": {
                    "type": "boolean",
                    "description": "(Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and\n{api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites})\nWhether this tool should appear in a preferred location in the RCE.\nThis only applies to tools in root account contexts that have an editor\nbutton placement."
                  },
                  "account_navigation[url]": {
                    "type": "string",
                    "description": "The url of the external tool for account navigation"
                  },
                  "account_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "account_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the left-tab in the account navigation"
                  },
                  "account_navigation[selection_width]": {
                    "type": "string",
                    "description": "The width of the dialog the tool is launched in"
                  },
                  "account_navigation[selection_height]": {
                    "type": "string",
                    "description": "The height of the dialog the tool is launched in"
                  },
                  "account_navigation[display_type]": {
                    "type": "string",
                    "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\""
                  },
                  "user_navigation[url]": {
                    "type": "string",
                    "description": "The url of the external tool for user navigation"
                  },
                  "user_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "user_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the left-tab in the user navigation"
                  },
                  "user_navigation[visibility]": {
                    "type": "string",
                    "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                    "enum": [
                      "admins",
                      "members",
                      "public"
                    ]
                  },
                  "course_home_sub_navigation[url]": {
                    "type": "string",
                    "description": "The url of the external tool for right-side course home navigation menu"
                  },
                  "course_home_sub_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "course_home_sub_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the right-side course home navigation menu"
                  },
                  "course_home_sub_navigation[icon_url]": {
                    "type": "string",
                    "description": "The url of the icon to show in the right-side course home navigation menu"
                  },
                  "course_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "course_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the left-tab in the course navigation"
                  },
                  "course_navigation[visibility]": {
                    "type": "string",
                    "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, \"public\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                    "enum": [
                      "admins",
                      "members",
                      "public"
                    ]
                  },
                  "course_navigation[windowTarget]": {
                    "type": "string",
                    "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas.",
                    "enum": [
                      "_blank",
                      "_self"
                    ]
                  },
                  "course_navigation[default]": {
                    "type": "string",
                    "description": "If set to \"disabled\" the tool will not appear in the course navigation\nuntil a teacher explicitly enables it.\n\nIf set to \"enabled\" the tool will appear in the course navigation\nwithout requiring a teacher to explicitly enable it.\n\ndefaults to \"enabled\"",
                    "enum": [
                      "disabled",
                      "enabled"
                    ]
                  },
                  "course_navigation[display_type]": {
                    "type": "string",
                    "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\""
                  },
                  "editor_button[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "editor_button[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "editor_button[icon_url]": {
                    "type": "string",
                    "description": "The url of the icon to show in the WYSIWYG editor"
                  },
                  "editor_button[selection_width]": {
                    "type": "string",
                    "description": "The width of the dialog the tool is launched in"
                  },
                  "editor_button[selection_height]": {
                    "type": "string",
                    "description": "The height of the dialog the tool is launched in"
                  },
                  "editor_button[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "homework_submission[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "homework_submission[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "homework_submission[text]": {
                    "type": "string",
                    "description": "The text that will show on the homework submission tab"
                  },
                  "homework_submission[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "link_selection[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "link_selection[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "link_selection[text]": {
                    "type": "string",
                    "description": "The text that will show for the link selection text"
                  },
                  "link_selection[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "migration_selection[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "migration_selection[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "migration_selection[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "tool_configuration[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "tool_configuration[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "tool_configuration[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "tool_configuration[prefer_sis_email]": {
                    "type": "boolean",
                    "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit"
                  },
                  "resource_selection[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "resource_selection[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature. If set to false,\nnot_selectable must also be set to true in order to hide this tool\nfrom the selection UI in modules and assignments."
                  },
                  "resource_selection[icon_url]": {
                    "type": "string",
                    "description": "The url of the icon to show in the module external tool list"
                  },
                  "resource_selection[selection_width]": {
                    "type": "string",
                    "description": "The width of the dialog the tool is launched in"
                  },
                  "resource_selection[selection_height]": {
                    "type": "string",
                    "description": "The height of the dialog the tool is launched in"
                  },
                  "config_type": {
                    "type": "string",
                    "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml"
                  },
                  "config_xml": {
                    "type": "string",
                    "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\""
                  },
                  "config_url": {
                    "type": "string",
                    "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\""
                  },
                  "not_selectable": {
                    "type": "boolean",
                    "description": "Default: false. If set to true, and if resource_selection is set to false,\nthe tool won't show up in the external tool\nselection UI in modules and assignments"
                  },
                  "oauth_compliant": {
                    "type": "boolean",
                    "description": "Default: false, if set to true LTI query params will not be copied to the\npost body."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/external_tools/sessionless_launch": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "Get a sessionless launch url for an external tool.",
        "description": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
        "operationId": "get_sessionless_launch_url_for_external_tool_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The external id of the tool to launch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The LTI launch url for the external tool.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignment_id",
            "in": "query",
            "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_item_id",
            "in": "query",
            "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "launch_type",
            "in": "query",
            "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided.",
            "schema": {
              "type": "string",
              "enum": [
                "assessment",
                "module_item"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/external_tools/{external_tool_id}": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "Get a single external tool",
        "description": "Returns the specified external tool.",
        "operationId": "get_single_external_tool_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "external_tools"
        ],
        "summary": "Edit an external tool",
        "description": "Update the specified external tool. Uses same parameters as create",
        "operationId": "edit_external_tool_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "external_tools"
        ],
        "summary": "Delete an external tool",
        "description": "Remove the specified external tool",
        "operationId": "delete_external_tool_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/external_tools": {
      "get": {
        "tags": [
          "external_tools"
        ],
        "summary": "List external tools",
        "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
        "operationId": "list_external_tools_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name of the tools to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectable",
            "in": "query",
            "description": "If true, then only tools that are meant to be selectable are returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_parents",
            "in": "query",
            "description": "If true, then include tools installed in all accounts above the current context",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "external_tools"
        ],
        "summary": "Create an external tool",
        "description": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.\nIf a client ID is supplied canvas will attempt to create a context external\ntool using the LTI 1.3 standard.",
        "operationId": "create_external_tool_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "client_id",
                  "consumer_key",
                  "name",
                  "privacy_level",
                  "shared_secret"
                ],
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "The client id is attached to the developer key.\nIf supplied all other parameters are unnecessary and will be ignored"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the tool"
                  },
                  "privacy_level": {
                    "type": "string",
                    "description": "What information to send to the external tool.",
                    "enum": [
                      "anonymous",
                      "name_only",
                      "public"
                    ]
                  },
                  "consumer_key": {
                    "type": "string",
                    "description": "The consumer key for the external tool"
                  },
                  "shared_secret": {
                    "type": "string",
                    "description": "The shared secret with the external tool"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the tool"
                  },
                  "url": {
                    "type": "string",
                    "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both."
                  },
                  "domain": {
                    "type": "string",
                    "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both."
                  },
                  "icon_url": {
                    "type": "string",
                    "description": "The url of the icon to show for this tool"
                  },
                  "text": {
                    "type": "string",
                    "description": "The default text to show for this tool"
                  },
                  "custom_fields[field_name]": {
                    "type": "string",
                    "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times"
                  },
                  "is_rce_favorite": {
                    "type": "boolean",
                    "description": "(Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and\n{api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites})\nWhether this tool should appear in a preferred location in the RCE.\nThis only applies to tools in root account contexts that have an editor\nbutton placement."
                  },
                  "account_navigation[url]": {
                    "type": "string",
                    "description": "The url of the external tool for account navigation"
                  },
                  "account_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "account_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the left-tab in the account navigation"
                  },
                  "account_navigation[selection_width]": {
                    "type": "string",
                    "description": "The width of the dialog the tool is launched in"
                  },
                  "account_navigation[selection_height]": {
                    "type": "string",
                    "description": "The height of the dialog the tool is launched in"
                  },
                  "account_navigation[display_type]": {
                    "type": "string",
                    "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\""
                  },
                  "user_navigation[url]": {
                    "type": "string",
                    "description": "The url of the external tool for user navigation"
                  },
                  "user_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "user_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the left-tab in the user navigation"
                  },
                  "user_navigation[visibility]": {
                    "type": "string",
                    "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                    "enum": [
                      "admins",
                      "members",
                      "public"
                    ]
                  },
                  "course_home_sub_navigation[url]": {
                    "type": "string",
                    "description": "The url of the external tool for right-side course home navigation menu"
                  },
                  "course_home_sub_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "course_home_sub_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the right-side course home navigation menu"
                  },
                  "course_home_sub_navigation[icon_url]": {
                    "type": "string",
                    "description": "The url of the icon to show in the right-side course home navigation menu"
                  },
                  "course_navigation[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "course_navigation[text]": {
                    "type": "string",
                    "description": "The text that will show on the left-tab in the course navigation"
                  },
                  "course_navigation[visibility]": {
                    "type": "string",
                    "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, \"public\" for everyone. Setting this to `null` will remove this configuration\nand use the default behavior, which is \"public\".",
                    "enum": [
                      "admins",
                      "members",
                      "public"
                    ]
                  },
                  "course_navigation[windowTarget]": {
                    "type": "string",
                    "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas.",
                    "enum": [
                      "_blank",
                      "_self"
                    ]
                  },
                  "course_navigation[default]": {
                    "type": "string",
                    "description": "If set to \"disabled\" the tool will not appear in the course navigation\nuntil a teacher explicitly enables it.\n\nIf set to \"enabled\" the tool will appear in the course navigation\nwithout requiring a teacher to explicitly enable it.\n\ndefaults to \"enabled\"",
                    "enum": [
                      "disabled",
                      "enabled"
                    ]
                  },
                  "course_navigation[display_type]": {
                    "type": "string",
                    "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\""
                  },
                  "editor_button[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "editor_button[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "editor_button[icon_url]": {
                    "type": "string",
                    "description": "The url of the icon to show in the WYSIWYG editor"
                  },
                  "editor_button[selection_width]": {
                    "type": "string",
                    "description": "The width of the dialog the tool is launched in"
                  },
                  "editor_button[selection_height]": {
                    "type": "string",
                    "description": "The height of the dialog the tool is launched in"
                  },
                  "editor_button[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "homework_submission[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "homework_submission[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "homework_submission[text]": {
                    "type": "string",
                    "description": "The text that will show on the homework submission tab"
                  },
                  "homework_submission[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "link_selection[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "link_selection[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "link_selection[text]": {
                    "type": "string",
                    "description": "The text that will show for the link selection text"
                  },
                  "link_selection[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "migration_selection[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "migration_selection[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "migration_selection[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "tool_configuration[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "tool_configuration[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature"
                  },
                  "tool_configuration[message_type]": {
                    "type": "string",
                    "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
                  },
                  "tool_configuration[prefer_sis_email]": {
                    "type": "boolean",
                    "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit"
                  },
                  "resource_selection[url]": {
                    "type": "string",
                    "description": "The url of the external tool"
                  },
                  "resource_selection[enabled]": {
                    "type": "boolean",
                    "description": "Set this to enable this feature. If set to false,\nnot_selectable must also be set to true in order to hide this tool\nfrom the selection UI in modules and assignments."
                  },
                  "resource_selection[icon_url]": {
                    "type": "string",
                    "description": "The url of the icon to show in the module external tool list"
                  },
                  "resource_selection[selection_width]": {
                    "type": "string",
                    "description": "The width of the dialog the tool is launched in"
                  },
                  "resource_selection[selection_height]": {
                    "type": "string",
                    "description": "The height of the dialog the tool is launched in"
                  },
                  "config_type": {
                    "type": "string",
                    "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml"
                  },
                  "config_xml": {
                    "type": "string",
                    "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\""
                  },
                  "config_url": {
                    "type": "string",
                    "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\""
                  },
                  "not_selectable": {
                    "type": "boolean",
                    "description": "Default: false. If set to true, and if resource_selection is set to false,\nthe tool won't show up in the external tool\nselection UI in modules and assignments"
                  },
                  "oauth_compliant": {
                    "type": "boolean",
                    "description": "Default: false, if set to true LTI query params will not be copied to the\npost body."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/self/favorites/courses": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "List favorite courses",
        "description": "Retrieve the paginated list of favorite courses for the current user. If the user has not chosen\nany favorites, then a selection of currently enrolled courses will be returned.\n\nSee the {api:CoursesController#index List courses API} for details on accepted include[] parameters.",
        "operationId": "list_favorite_courses",
        "parameters": [
          {
            "name": "exclude_blueprint_courses",
            "in": "query",
            "description": "When set, only return courses that are not configured as blueprint courses.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Reset course favorites",
        "description": "Reset the current user's course favorites to the default\nautomatically generated list of enrolled courses",
        "operationId": "reset_course_favorites",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/self/favorites/groups": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "List favorite groups",
        "description": "Retrieve the paginated list of favorite groups for the current user. If the user has not chosen\nany favorites, then a selection of groups that the user is a member of will be returned.",
        "operationId": "list_favorite_groups",
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Reset group favorites",
        "description": "Reset the current user's group favorites to the default\nautomatically generated list of enrolled group",
        "operationId": "reset_group_favorites",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/self/favorites/groups/{id}": {
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Add group to favorites",
        "description": "Add a group to the current user's favorites.  If the group is already\nin the user's favorites, nothing happens.",
        "operationId": "add_group_to_favorites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or SIS ID of the group to add.  The current user must be\na member of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Remove group from favorites",
        "description": "Remove a group from the current user's favorites.",
        "operationId": "remove_group_from_favorites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID or SIS ID of the group to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/self/favorites/courses/{id}": {
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Add course to favorites",
        "description": "Add a course to the current user's favorites.  If the course is already\nin the user's favorites, nothing happens. Canvas for Elementary subject\nand homeroom courses can be added to favorites, but this has no effect in\nthe UI.",
        "operationId": "add_course_to_favorites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or SIS ID of the course to add.  The current user must be\nregistered in the course.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Remove course from favorites",
        "description": "Remove a course from the current user's favorites.",
        "operationId": "remove_course_from_favorites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID or SIS ID of the course to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/features": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List features",
        "description": "A paginated list of all features that apply to a given Account, Course, or User.",
        "operationId": "list_features_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/features/flags/{feature}": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Get feature flag",
        "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
        "operationId": "get_feature_flag_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Set feature flag",
        "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
        "operationId": "set_feature_flag_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                    "enum": [
                      "off",
                      "allowed",
                      "on"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Remove feature flag",
        "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
        "operationId": "remove_feature_flag_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/features/enabled": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List enabled features",
        "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
        "operationId": "list_enabled_features_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/features/enabled": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List enabled features",
        "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
        "operationId": "list_enabled_features_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/features": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List features",
        "description": "A paginated list of all features that apply to a given Account, Course, or User.",
        "operationId": "list_features_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/features/environment": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List environment features",
        "description": "Return a hash of global feature options that pertain to the\nCanvas user interface. This is the same information supplied to the\nweb interface as +ENV.FEATURES+.",
        "operationId": "list_environment_features",
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/features/flags/{feature}": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Get feature flag",
        "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
        "operationId": "get_feature_flag_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Set feature flag",
        "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
        "operationId": "set_feature_flag_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                    "enum": [
                      "off",
                      "allowed",
                      "on"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Remove feature flag",
        "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
        "operationId": "remove_feature_flag_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/features/flags/{feature}": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Get feature flag",
        "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
        "operationId": "get_feature_flag_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Set feature flag",
        "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
        "operationId": "set_feature_flag_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                    "enum": [
                      "off",
                      "allowed",
                      "on"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "feature_flags"
        ],
        "summary": "Remove feature flag",
        "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
        "operationId": "remove_feature_flag_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/features/enabled": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List enabled features",
        "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
        "operationId": "list_enabled_features_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/accounts/{account_id}/features": {
      "get": {
        "tags": [
          "feature_flags"
        ],
        "summary": "List features",
        "description": "A paginated list of all features that apply to a given Account, Course, or User.",
        "operationId": "list_features_accounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/usage_rights": {
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Set usage rights",
        "description": "Sets copyright and license information for one or more files",
        "operationId": "set_usage_rights_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file_ids",
                  "usage_rights[use_justification]"
                ],
                "properties": {
                  "file_ids": {
                    "type": "array",
                    "description": "List of ids of files to set usage rights for.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "folder_ids": {
                    "type": "array",
                    "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "publish": {
                    "type": "boolean",
                    "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save)."
                  },
                  "usage_rights[use_justification]": {
                    "type": "string",
                    "description": "The intellectual property justification for using the files in Canvas",
                    "enum": [
                      "own_copyright",
                      "used_by_permission",
                      "fair_use",
                      "public_domain",
                      "creative_commons"
                    ]
                  },
                  "usage_rights[legal_copyright]": {
                    "type": "string",
                    "description": "The legal copyright line for the files"
                  },
                  "usage_rights[license]": {
                    "type": "string",
                    "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRights"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Remove usage rights",
        "description": "Removes copyright and license information associated with one or more files",
        "operationId": "remove_usage_rights_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_ids",
            "in": "query",
            "description": "List of ids of files to remove associated usage rights from.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "folder_ids",
            "in": "query",
            "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/{user_id}/files/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get file",
        "description": "Returns the standard attachment json object",
        "operationId": "get_file_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "replacement_chain_context_type",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacement_chain_context_id",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/folders/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get folder",
        "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
        "operationId": "get_folder_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/folders/media": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get uploaded media folder for user",
        "description": "Returns the details for a designated upload folder that the user has rights to\nupload to, and creates it if it doesn't exist.\n\nIf the current user does not have the permissions to manage files\nin the course or group, the folder will belong to the current user directly.",
        "operationId": "get_uploaded_media_folder_for_user_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/usage_rights": {
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Set usage rights",
        "description": "Sets copyright and license information for one or more files",
        "operationId": "set_usage_rights_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file_ids",
                  "usage_rights[use_justification]"
                ],
                "properties": {
                  "file_ids": {
                    "type": "array",
                    "description": "List of ids of files to set usage rights for.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "folder_ids": {
                    "type": "array",
                    "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "publish": {
                    "type": "boolean",
                    "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save)."
                  },
                  "usage_rights[use_justification]": {
                    "type": "string",
                    "description": "The intellectual property justification for using the files in Canvas",
                    "enum": [
                      "own_copyright",
                      "used_by_permission",
                      "fair_use",
                      "public_domain",
                      "creative_commons"
                    ]
                  },
                  "usage_rights[legal_copyright]": {
                    "type": "string",
                    "description": "The legal copyright line for the files"
                  },
                  "usage_rights[license]": {
                    "type": "string",
                    "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRights"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Remove usage rights",
        "description": "Removes copyright and license information associated with one or more files",
        "operationId": "remove_usage_rights_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_ids",
            "in": "query",
            "description": "List of ids of files to remove associated usage rights from.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "folder_ids",
            "in": "query",
            "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/{user_id}/folders/by_path/*full_path": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Resolve path",
        "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
        "operationId": "resolve_path_users_full_path",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/folders/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get folder",
        "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
        "operationId": "get_folder_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/folders/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get folder",
        "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
        "operationId": "get_folder_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get folder",
        "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
        "operationId": "get_folder_folders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Update folder",
        "description": "Updates a folder",
        "operationId": "update_folder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name of the folder"
                  },
                  "parent_folder_id": {
                    "type": "string",
                    "description": "The id of the folder to move this folder into. The new folder must be in the same context as the original parent folder."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to lock the folder at"
                  },
                  "unlock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to unlock the folder at"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Flag the folder as locked"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Flag the folder as hidden"
                  },
                  "position": {
                    "type": "integer",
                    "description": "Set an explicit sort position for the folder",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete folder",
        "description": "Remove the specified folder. You can only delete empty folders unless you\nset the 'force' flag",
        "operationId": "delete_folder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Set to 'true' to allow deleting a non-empty folder",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/folders/{id}/folders": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List folders",
        "description": "Returns the paginated list of folders in the folder.",
        "operationId": "list_folders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List files",
        "description": "Returns the paginated list of files for the folder or course.",
        "operationId": "list_files_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_types",
            "in": "query",
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "exclude_content_types",
            "in": "query",
            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name of the files to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "only",
            "in": "query",
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "size",
                "created_at",
                "updated_at",
                "content_type",
                "user"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The sorting order. Defaults to 'asc'.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List files",
        "description": "Returns the paginated list of files for the folder or course.",
        "operationId": "list_files_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_types",
            "in": "query",
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "exclude_content_types",
            "in": "query",
            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name of the files to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "only",
            "in": "query",
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "size",
                "created_at",
                "updated_at",
                "content_type",
                "user"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The sorting order. Defaults to 'asc'.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/usage_rights": {
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Set usage rights",
        "description": "Sets copyright and license information for one or more files",
        "operationId": "set_usage_rights_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file_ids",
                  "usage_rights[use_justification]"
                ],
                "properties": {
                  "file_ids": {
                    "type": "array",
                    "description": "List of ids of files to set usage rights for.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "folder_ids": {
                    "type": "array",
                    "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "publish": {
                    "type": "boolean",
                    "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save)."
                  },
                  "usage_rights[use_justification]": {
                    "type": "string",
                    "description": "The intellectual property justification for using the files in Canvas",
                    "enum": [
                      "own_copyright",
                      "used_by_permission",
                      "fair_use",
                      "public_domain",
                      "creative_commons"
                    ]
                  },
                  "usage_rights[legal_copyright]": {
                    "type": "string",
                    "description": "The legal copyright line for the files"
                  },
                  "usage_rights[license]": {
                    "type": "string",
                    "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRights"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Remove usage rights",
        "description": "Removes copyright and license information associated with one or more files",
        "operationId": "remove_usage_rights_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_ids",
            "in": "query",
            "description": "List of ids of files to remove associated usage rights from.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "folder_ids",
            "in": "query",
            "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/folders/{folder_id}/folders": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Create folder",
        "description": "Creates a folder in the specified context",
        "operationId": "create_folder_folders",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the folder"
                  },
                  "parent_folder_id": {
                    "type": "string",
                    "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "parent_folder_path": {
                    "type": "string",
                    "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to lock the folder at"
                  },
                  "unlock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to unlock the folder at"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Flag the folder as locked"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Flag the folder as hidden"
                  },
                  "position": {
                    "type": "integer",
                    "description": "Set an explicit sort position for the folder",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/folders/by_path": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Resolve path",
        "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
        "operationId": "resolve_path_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/content_licenses": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List licenses",
        "description": "A paginated list of licenses that can be applied",
        "operationId": "list_licenses_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/License"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/{id}/public_url": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get public inline preview url",
        "description": "Determine the URL that should be used for inline preview of the file.",
        "operationId": "get_public_inline_preview_url",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submission_id",
            "in": "query",
            "description": "The id of the submission the file is associated with.  Provide this argument to gain access to a file\nthat has been submitted to an assignment (Canvas will verify that the file belongs to the submission\nand the calling user has rights to view the submission).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/files/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get file",
        "description": "Returns the standard attachment json object",
        "operationId": "get_file_files",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "replacement_chain_context_type",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacement_chain_context_id",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Update file",
        "description": "Update some settings on the specified file",
        "operationId": "update_file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new display name of the file, with a limit of 255 characters."
                  },
                  "parent_folder_id": {
                    "type": "string",
                    "description": "The id of the folder to move this file into.\nThe new folder must be in the same context as the original parent folder.\nIf the file is in a context without folders this does not apply."
                  },
                  "on_duplicate": {
                    "type": "string",
                    "description": "If the file is moved to a folder containing a file with the same name,\nor renamed to a name matching an existing file, the API call will fail\nunless this parameter is supplied.\n\n\"overwrite\":: Replace the existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique",
                    "enum": [
                      "overwrite",
                      "rename"
                    ]
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to lock the file at"
                  },
                  "unlock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to unlock the file at"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Flag the file as locked"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Flag the file as hidden"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete file",
        "description": "Remove the specified file. Unlike most other DELETE endpoints, using this\nendpoint will result in comprehensive, irretrievable destruction of the file.\nIt should be used with the `replace` parameter set to true in cases where the\nfile preview also needs to be destroyed (such as to remove files that violate\nprivacy laws).",
        "operationId": "delete_file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replace",
            "in": "query",
            "description": "This action is irreversible.\nIf replace is set to true the file contents will be replaced with a\ngeneric \"file has been removed\" file. This also destroys any previews\nthat have been generated for the file.\nMust have manage files and become other users permissions",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/folders/media": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get uploaded media folder for user",
        "description": "Returns the details for a designated upload folder that the user has rights to\nupload to, and creates it if it doesn't exist.\n\nIf the current user does not have the permissions to manage files\nin the course or group, the folder will belong to the current user directly.",
        "operationId": "get_uploaded_media_folder_for_user_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/content_licenses": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List licenses",
        "description": "A paginated list of licenses that can be applied",
        "operationId": "list_licenses_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/License"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/{id}/icon_metadata": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get icon metadata",
        "description": "Returns the icon maker file attachment metadata",
        "operationId": "get_icon_metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/folders/{dest_folder_id}/copy_file": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Copy a file",
        "description": "Copy a file from elsewhere in Canvas into a folder.\n\nCopying a file across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.",
        "operationId": "copy_file",
        "parameters": [
          {
            "name": "dest_folder_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "source_file_id"
                ],
                "properties": {
                  "source_file_id": {
                    "type": "string",
                    "description": "The id of the source file"
                  },
                  "on_duplicate": {
                    "type": "string",
                    "description": "What to do if a file with the same name already exists at the destination.\nIf such a file exists and this parameter is not given, the call will fail.\n\n\"overwrite\":: Replace an existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique",
                    "enum": [
                      "overwrite",
                      "rename"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/folders/by_path/*full_path": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Resolve path",
        "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
        "operationId": "resolve_path_groups_full_path",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/folders/by_path": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Resolve path",
        "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
        "operationId": "resolve_path_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/folders/by_path/*full_path": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Resolve path",
        "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
        "operationId": "resolve_path_courses_full_path",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{dest_folder_id}/copy_folder": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Copy a folder",
        "description": "Copy a folder (and its contents) from elsewhere in Canvas into a folder.\n\nCopying a folder across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.\nIf the source and destination folders are in the same context, the\nsource folder may not contain the destination folder. A folder will be\nrenamed at its destination if another folder with the same name already\nexists.",
        "operationId": "copy_folder",
        "parameters": [
          {
            "name": "dest_folder_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "source_folder_id"
                ],
                "properties": {
                  "source_folder_id": {
                    "type": "string",
                    "description": "The id of the source folder"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{id}/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List files",
        "description": "Returns the paginated list of files for the folder or course.",
        "operationId": "list_files_folders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_types",
            "in": "query",
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "exclude_content_types",
            "in": "query",
            "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "The partial name of the files to match and return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "only",
            "in": "query",
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Array"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "size",
                "created_at",
                "updated_at",
                "content_type",
                "user"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The sorting order. Defaults to 'asc'.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/files/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get file",
        "description": "Returns the standard attachment json object",
        "operationId": "get_file_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "replacement_chain_context_type",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacement_chain_context_id",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/folders": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List all folders",
        "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
        "operationId": "list_all_folders_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Create folder",
        "description": "Creates a folder in the specified context",
        "operationId": "create_folder_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the folder"
                  },
                  "parent_folder_id": {
                    "type": "string",
                    "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "parent_folder_path": {
                    "type": "string",
                    "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to lock the folder at"
                  },
                  "unlock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to unlock the folder at"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Flag the folder as locked"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Flag the folder as hidden"
                  },
                  "position": {
                    "type": "integer",
                    "description": "Set an explicit sort position for the folder",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{folder_id}/files": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a file",
        "description": "Upload a file to a folder.\n\nThis API endpoint is the first step in uploading a file.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course or group can\nupload files to a folder in that course or group.",
        "operationId": "upload_file",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/content_licenses": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List licenses",
        "description": "A paginated list of licenses that can be applied",
        "operationId": "list_licenses_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/License"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups/{group_id}/folders": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List all folders",
        "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
        "operationId": "list_all_folders_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Create folder",
        "description": "Creates a folder in the specified context",
        "operationId": "create_folder_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the folder"
                  },
                  "parent_folder_id": {
                    "type": "string",
                    "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "parent_folder_path": {
                    "type": "string",
                    "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to lock the folder at"
                  },
                  "unlock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to unlock the folder at"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Flag the folder as locked"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Flag the folder as hidden"
                  },
                  "position": {
                    "type": "integer",
                    "description": "Set an explicit sort position for the folder",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/files/file_ref/{migration_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Translate file reference",
        "description": "Get information about a file from a course copy file reference",
        "operationId": "translate_file_reference",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "migration_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/folders/by_path": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Resolve path",
        "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
        "operationId": "resolve_path_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/folders": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List all folders",
        "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
        "operationId": "list_all_folders_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Create folder",
        "description": "Creates a folder in the specified context",
        "operationId": "create_folder_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the folder"
                  },
                  "parent_folder_id": {
                    "type": "string",
                    "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "parent_folder_path": {
                    "type": "string",
                    "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
                  },
                  "lock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to lock the folder at"
                  },
                  "unlock_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime to unlock the folder at"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Flag the folder as locked"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Flag the folder as hidden"
                  },
                  "position": {
                    "type": "integer",
                    "description": "Set an explicit sort position for the folder",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/{id}/reset_verifier": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Reset link verifier",
        "description": "Resets the link verifier. Any existing links to the file using\nthe previous hard-coded \"verifier\" parameter will no longer\nautomatically grant access.\n\nMust have manage files and become other users permissions",
        "operationId": "reset_link_verifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/courses/{course_id}/files/quota": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get quota information",
        "description": "Returns the total and used storage quota for the course, group, or user.",
        "operationId": "get_quota_information_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/groups/{group_id}/files/quota": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get quota information",
        "description": "Returns the total and used storage quota for the course, group, or user.",
        "operationId": "get_quota_information_groups",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/users/{user_id}/files/quota": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get quota information",
        "description": "Returns the total and used storage quota for the course, group, or user.",
        "operationId": "get_quota_information_users",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v1/courses/{course_id}/files/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get file",
        "description": "Returns the standard attachment json object",
        "operationId": "get_file_courses",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "user"
              ]
            }
          },
          {
            "name": "replacement_chain_context_type",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nMust be set to 'course' or 'account'. The \"replacement_chain_context_id\" parameter must\nalso be included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacement_chain_context_id",
            "in": "query",
            "description": "When a user replaces a file during upload, Canvas keeps track of the \"replacement chain.\"\n\nInclude this parameter if you wish Canvas to follow the replacement chain if the requested\nfile was deleted and replaced by another.\n\nIndicates the context ID Canvas should use when following the \"replacement chain.\" The\n\"replacement_chain_context_type\" parameter must also be included.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the ID of the Account object"
          },
          "name": {
            "type": "string",
            "description": "The display name of the account"
          },
          "uuid": {
            "type": "string",
            "description": "The UUID of the account"
          },
          "parent_account_id": {
            "type": "integer",
            "description": "The account's parent ID, or null if this is the root account"
          },
          "root_account_id": {
            "type": "integer",
            "description": "The ID of the root account, or null if this is the root account"
          },
          "default_storage_quota_mb": {
            "type": "integer",
            "description": "The storage quota for the account in megabytes, if not otherwise specified"
          },
          "default_user_storage_quota_mb": {
            "type": "integer",
            "description": "The storage quota for a user in the account in megabytes, if not otherwise specified"
          },
          "default_group_storage_quota_mb": {
            "type": "integer",
            "description": "The storage quota for a group in the account in megabytes, if not otherwise specified"
          },
          "default_time_zone": {
            "type": "string",
            "description": "The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          "sis_account_id": {
            "type": "string",
            "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information."
          },
          "integration_id": {
            "type": "string",
            "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information."
          },
          "sis_import_id": {
            "type": "integer",
            "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information."
          },
          "lti_guid": {
            "type": "string",
            "description": "The account's identifier that is sent as context_id in LTI launches."
          },
          "workflow_state": {
            "type": "string",
            "description": "The state of the account. Can be 'active' or 'deleted'."
          }
        },
        "description": ""
      },
      "AccountCalendar": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the ID of the account associated with this calendar"
          },
          "name": {
            "type": "string",
            "description": "the name of the account associated with this calendar"
          },
          "parent_account_id": {
            "type": "integer",
            "description": "the account's parent ID, or null if this is the root account"
          },
          "root_account_id": {
            "type": "integer",
            "description": "the ID of the root account, or null if this is the root account"
          },
          "visible": {
            "type": "boolean",
            "description": "whether this calendar is visible to users"
          },
          "sub_account_count": {
            "type": "integer",
            "description": "number of this account's direct sub-accounts"
          },
          "asset_string": {
            "type": "string",
            "description": "Asset string of the account"
          },
          "type": {
            "type": "string",
            "description": "Object type"
          },
          "calendar_event_url": {
            "type": "string",
            "description": "url to get full detailed events"
          },
          "can_create_calendar_events": {
            "type": "boolean",
            "description": "whether the user can create calendar events"
          },
          "create_calendar_event_url": {
            "type": "string",
            "description": "API path to create events for the account"
          },
          "new_calendar_event_url": {
            "type": "string",
            "description": "url to open the more options event editor"
          }
        },
        "description": ""
      },
      "AccountNotification": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "The subject of the notifications"
          },
          "message": {
            "type": "string",
            "description": "The message to be sent in the notification."
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "icon": {
            "type": "string",
            "description": "The icon to display with the message.  Defaults to warning."
          },
          "roles": {
            "type": "array",
            "description": "(Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles",
            "items": {
              "type": "string"
            }
          },
          "role_ids": {
            "type": "array",
            "description": "The roles to send the notification to.  If roles is not passed it defaults to all roles",
            "items": {
              "type": "integer"
            }
          }
        },
        "description": ""
      },
      "Admin": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the account role/user assignment."
          },
          "role": {
            "type": "string",
            "description": "The account role assigned. This can be 'AccountAdmin' or a user-defined role created by the Roles API."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "workflow_state": {
            "type": "string",
            "description": "The status of the account role/user assignment."
          }
        },
        "description": ""
      },
      "AnonymousUserDisplay": {
        "type": "object",
        "properties": {
          "anonymous_id": {
            "type": "string",
            "description": "A unique short ID identifying this user within the scope of a particular assignment."
          },
          "avatar_image_url": {
            "type": "string",
            "description": "A URL to retrieve a generic avatar."
          },
          "display_name": {
            "type": "string",
            "description": "The anonymized display name for the student."
          }
        },
        "description": "This mini-object is returned in place of UserDisplay when returning student data for anonymous assignments, and includes an anonymous ID to identify a user within the scope of a single assignment."
      },
      "Appointment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The appointment identifier."
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": "Date and time for an appointment"
      },
      "AppointmentGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the appointment group"
          },
          "title": {
            "type": "string",
            "description": "The title of the appointment group"
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "description": {
            "type": "string",
            "description": "The text description of the appointment group"
          },
          "location_name": {
            "type": "string",
            "description": "The location name of the appointment group"
          },
          "location_address": {
            "type": "string",
            "description": "The address of the appointment group's location"
          },
          "participant_count": {
            "type": "integer",
            "description": "The number of participant who have reserved slots (see include[] argument)"
          },
          "reserved_times": {
            "type": "array",
            "description": "The start and end times of slots reserved by the current user as well as the id of the calendar event for the reservation (see include[] argument)",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "context_codes": {
            "type": "array",
            "description": "The context codes (i.e. courses) this appointment group belongs to. Only people in these courses will be eligible to sign up.",
            "items": {
              "type": "string"
            }
          },
          "sub_context_codes": {
            "type": "array",
            "description": "The sub-context codes (i.e. course sections and group categories) this appointment group is restricted to",
            "items": {
              "type": "integer"
            }
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the appointment group ('pending', 'active' or 'deleted'). 'pending' indicates that it has not been published yet and is invisible to participants."
          },
          "requiring_action": {
            "type": "boolean",
            "description": "Boolean indicating whether the current user needs to sign up for this appointment group (i.e. it's reservable and the min_appointments_per_participant limit has not been met by this user)."
          },
          "appointments_count": {
            "type": "integer",
            "description": "Number of time slots in this appointment group"
          },
          "appointments": {
            "type": "array",
            "description": "Calendar Events representing the time slots (see include[] argument) Refer to the Calendar Events API for more information",
            "items": {
              "$ref": "#/components/schemas/CalendarEvent"
            }
          },
          "new_appointments": {
            "type": "array",
            "description": "Newly created time slots (same format as appointments above). Only returned in Create/Update responses where new time slots have been added",
            "items": {
              "$ref": "#/components/schemas/CalendarEvent"
            }
          },
          "max_appointments_per_participant": {
            "type": "integer",
            "description": "Maximum number of time slots a user may register for, or null if no limit"
          },
          "min_appointments_per_participant": {
            "type": "integer",
            "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots"
          },
          "participants_per_appointment": {
            "type": "integer",
            "description": "Maximum number of participants that may register for each time slot, or null if no limit"
          },
          "participant_visibility": {
            "type": "string",
            "description": "'private' means participants cannot see who has signed up for a particular time slot, 'protected' means that they can"
          },
          "participant_type": {
            "type": "string",
            "description": "Indicates how participants sign up for the appointment group, either as individuals ('User') or in student groups ('Group'). Related to sub_context_codes (i.e. 'Group' signups always have a single group category)"
          },
          "url": {
            "type": "string",
            "description": "URL for this appointment group (to update, delete, etc.)"
          },
          "html_url": {
            "type": "string",
            "description": "URL for a user to view this appointment group"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": ""
      },
      "Assignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the ID of the assignment"
          },
          "name": {
            "type": "string",
            "description": "the name of the assignment"
          },
          "description": {
            "type": "string",
            "description": "the assignment description, in an HTML fragment"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "due_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "lock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "unlock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "has_overrides": {
            "type": "boolean",
            "description": "whether this assignment has overrides"
          },
          "all_dates": {
            "type": "array",
            "description": "(Optional) all dates associated with the assignment, if applicable",
            "items": {
              "$ref": "#/components/schemas/AssignmentDate"
            }
          },
          "course_id": {
            "type": "integer",
            "description": "the ID of the course the assignment belongs to"
          },
          "html_url": {
            "type": "string",
            "description": "the URL to the assignment's web page"
          },
          "submissions_download_url": {
            "type": "string",
            "description": "the URL to download all submissions as a zip"
          },
          "assignment_group_id": {
            "type": "integer",
            "description": "the ID of the assignment's group"
          },
          "due_date_required": {
            "type": "boolean",
            "description": "Boolean flag indicating whether the assignment requires a due date based on the account level setting"
          },
          "allowed_extensions": {
            "type": "array",
            "description": "Allowed file extensions, which take effect if submission_types includes 'online_upload'.",
            "items": {
              "type": "string"
            }
          },
          "max_name_length": {
            "type": "integer",
            "description": "An integer indicating the maximum length an assignment's name may be"
          },
          "turnitin_enabled": {
            "type": "boolean",
            "description": "Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available"
          },
          "vericite_enabled": {
            "type": "boolean",
            "description": "Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available"
          },
          "turnitin_settings": {
            "$ref": "#/components/schemas/TurnitinSettings"
          },
          "grade_group_students_individually": {
            "type": "boolean",
            "description": "If this is a group assignment, boolean flag indicating whether or not students will be graded individually."
          },
          "external_tool_tag_attributes": {
            "$ref": "#/components/schemas/ExternalToolTagAttributes"
          },
          "peer_reviews": {
            "type": "boolean",
            "description": "Boolean indicating if peer reviews are required for this assignment"
          },
          "automatic_peer_reviews": {
            "type": "boolean",
            "description": "Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews."
          },
          "peer_review_count": {
            "type": "integer",
            "description": "Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true."
          },
          "peer_reviews_assign_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "intra_group_peer_reviews": {
            "type": "boolean",
            "description": "Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work"
          },
          "group_category_id": {
            "type": "integer",
            "description": "The ID of the assignment’s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment."
          },
          "needs_grading_count": {
            "type": "integer",
            "description": "if the requesting user has grading rights, the number of submissions that need grading."
          },
          "needs_grading_count_by_section": {
            "type": "array",
            "description": "if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)",
            "items": {
              "$ref": "#/components/schemas/NeedsGradingCount"
            }
          },
          "position": {
            "type": "integer",
            "description": "the sorting order of the assignment in the group"
          },
          "post_to_sis": {
            "type": "boolean",
            "description": "(optional, present if Sync Grades to SIS feature is enabled)"
          },
          "integration_id": {
            "type": "string",
            "description": "(optional, Third Party unique identifier for Assignment)"
          },
          "integration_data": {
            "type": "object",
            "properties": {},
            "description": "(optional, Third Party integration data for assignment)"
          },
          "points_possible": {
            "type": "number",
            "description": "the maximum points possible for the assignment"
          },
          "submission_types": {
            "type": "array",
            "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'",
            "items": {
              "type": "string"
            }
          },
          "has_submitted_submissions": {
            "type": "boolean",
            "description": "If true, the assignment has been submitted to by at least one student"
          },
          "grading_type": {
            "type": "string",
            "description": "The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'"
          },
          "grading_standard_id": {
            "type": "integer",
            "description": "The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'."
          },
          "published": {
            "type": "boolean",
            "description": "Whether the assignment is published"
          },
          "unpublishable": {
            "type": "boolean",
            "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment."
          },
          "only_visible_to_overrides": {
            "type": "boolean",
            "description": "Whether the assignment is only visible to overrides."
          },
          "locked_for_user": {
            "type": "boolean",
            "description": "Whether or not this is locked for the user."
          },
          "lock_info": {
            "$ref": "#/components/schemas/LockInfo"
          },
          "lock_explanation": {
            "type": "string",
            "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true."
          },
          "quiz_id": {
            "type": "integer",
            "description": "(Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])"
          },
          "anonymous_submissions": {
            "type": "boolean",
            "description": "(Optional) whether anonymous submissions are accepted (applies only to quiz assignments)"
          },
          "discussion_topic": {
            "$ref": "#/components/schemas/DiscussionTopic"
          },
          "freeze_on_copy": {
            "type": "boolean",
            "description": "(Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account."
          },
          "frozen": {
            "type": "boolean",
            "description": "(Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account."
          },
          "frozen_attributes": {
            "type": "array",
            "description": "(Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
            "items": {
              "type": "string"
            }
          },
          "submission": {
            "$ref": "#/components/schemas/Submission"
          },
          "use_rubric_for_grading": {
            "type": "boolean",
            "description": "(Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric."
          },
          "rubric_settings": {
            "type": "string",
            "description": "(Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric."
          },
          "rubric": {
            "type": "array",
            "description": "(Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.",
            "items": {
              "$ref": "#/components/schemas/RubricCriteria"
            }
          },
          "assignment_visibility": {
            "type": "array",
            "description": "(Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.",
            "items": {
              "type": "integer"
            }
          },
          "overrides": {
            "type": "array",
            "description": "(Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.",
            "items": {
              "$ref": "#/components/schemas/AssignmentOverride"
            }
          },
          "omit_from_final_grade": {
            "type": "boolean",
            "description": "(Optional) If true, the assignment will be omitted from the student's final grade"
          },
          "moderated_grading": {
            "type": "boolean",
            "description": "Boolean indicating if the assignment is moderated."
          },
          "grader_count": {
            "type": "integer",
            "description": "The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors."
          },
          "final_grader_id": {
            "type": "integer",
            "description": "The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments."
          },
          "grader_comments_visible_to_graders": {
            "type": "boolean",
            "description": "Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments."
          },
          "graders_anonymous_to_graders": {
            "type": "boolean",
            "description": "Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments with grader_comments_visible_to_graders set to true."
          },
          "grader_names_visible_to_final_grader": {
            "type": "boolean",
            "description": "Boolean indicating if provisional grader identities are visible to the final grader. Only relevant for moderated assignments."
          },
          "anonymous_grading": {
            "type": "boolean",
            "description": "Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities."
          },
          "allowed_attempts": {
            "type": "integer",
            "description": "The number of submission attempts a student can make for this assignment. -1 is considered unlimited."
          },
          "post_manually": {
            "type": "boolean",
            "description": "Whether the assignment has manual posting enabled. Only relevant for courses using New Gradebook."
          },
          "score_statistics": {
            "$ref": "#/components/schemas/ScoreStatistic"
          },
          "can_submit": {
            "type": "boolean",
            "description": "(Optional) If retrieving a single assignment and 'can_submit' is included in the 'include' parameter, flags whether user has the right to submit the assignment (i.e. checks enrollment dates, submission types, locked status, attempts remaining, etc...). Including 'can submit' automatically includes 'submission' in the include parameter. Not available when observed_users are included."
          },
          "annotatable_attachment_id": {
            "type": "integer",
            "description": "The id of the attachment to be annotated by students. Relevant only if submission_types includes 'student_annotation'."
          },
          "anonymize_students": {
            "type": "boolean",
            "description": "(Optional) Boolean indicating whether student names are anonymized"
          },
          "require_lockdown_browser": {
            "type": "boolean",
            "description": "(Optional) Boolean indicating whether the Respondus LockDown Browser® is required for this assignment."
          },
          "important_dates": {
            "type": "boolean",
            "description": "(Optional) Boolean indicating whether this assignment has important dates."
          },
          "muted": {
            "type": "boolean",
            "description": "(Optional, Deprecated) Boolean indicating whether notifications are muted for this assignment."
          }
        },
        "description": ""
      },
      "AssignmentDate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "(Optional, missing if 'base' is present) id of the assignment override this date represents"
          },
          "base": {
            "type": "boolean",
            "description": "(Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date"
          },
          "title": {
            "type": "string"
          },
          "due_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "unlock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "lock_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": "Object representing a due date for an assignment or quiz. If the due date came from an assignment override, it will have an 'id' field."
      },
      "AssignmentEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A synthetic ID for the assignment"
          },
          "title": {
            "type": "string",
            "description": "The title of the assignment"
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "description": {
            "type": "string",
            "description": "The HTML description of the assignment"
          },
          "context_code": {
            "type": "string",
            "description": "the context code of the (course) calendar this assignment belongs to"
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the assignment ('published' or 'deleted')"
          },
          "url": {
            "type": "string",
            "description": "URL for this assignment (note that updating/deleting should be done via the Assignments API)"
          },
          "html_url": {
            "type": "string",
            "description": "URL for a user to view this assignment"
          },
          "all_day_date": {
            "$ref": "#/components/schemas/datetime"
          },
          "all_day": {
            "type": "boolean",
            "description": "Boolean indicating whether this is an all-day event (e.g. assignment due at midnight)"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "assignment": {
            "$ref": "#/components/schemas/Assignment"
          },
          "assignment_overrides": {
            "$ref": "#/components/schemas/AssignmentOverride"
          },
          "important_dates": {
            "type": "boolean",
            "description": "Boolean indicating whether this has important dates."
          }
        },
        "description": ""
      },
      "AssignmentExtension": {
        "required": [
          "assignment_id",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "assignment_id": {
            "type": "integer",
            "description": "The ID of the Assignment the extension belongs to.",
            "format": "int64"
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the Student that needs the assignment extension.",
            "format": "int64"
          },
          "extra_attempts": {
            "type": "integer",
            "description": "Number of times the student is allowed to re-submit the assignment",
            "format": "int64"
          }
        },
        "description": ""
      },
      "AssignmentGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the id of the Assignment Group"
          },
          "name": {
            "type": "string",
            "description": "the name of the Assignment Group"
          },
          "position": {
            "type": "integer",
            "description": "the position of the Assignment Group"
          },
          "group_weight": {
            "type": "integer",
            "description": "the weight of the Assignment Group"
          },
          "sis_source_id": {
            "type": "string",
            "description": "the sis source id of the Assignment Group"
          },
          "integration_data": {
            "type": "object",
            "properties": {},
            "description": "the integration data of the Assignment Group"
          },
          "assignments": {
            "type": "array",
            "description": "the assignments in this Assignment Group (see the Assignment API for a detailed list of fields)",
            "items": {
              "type": "integer"
            }
          },
          "rules": {
            "$ref": "#/components/schemas/GradingRules"
          }
        },
        "description": ""
      },
      "AssignmentOverride": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the ID of the assignment override"
          },
          "assignment_id": {
            "type": "integer",
            "description": "the ID of the assignment the override applies to"
          },
          "student_ids": {
            "type": "array",
            "description": "the IDs of the override's target students (present if the override targets an ad-hoc set of students)",
            "items": {
              "type": "integer"
            }
          },
          "group_id": {
            "type": "integer",
            "description": "the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)"
          },
          "course_section_id": {
            "type": "integer",
            "description": "the ID of the overrides's target section (present if the override targets a section)"
          },
          "title": {
            "type": "string",
            "description": "the title of the override"
          },
          "due_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "all_day": {
            "type": "boolean",
            "description": "the overridden all day flag (present if due_at is overridden)"
          },
          "all_day_date": {
            "$ref": "#/components/schemas/datetime"
          },
          "unlock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "lock_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": ""
      },
      "AuthenticationEvent": {
        "type": "object",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "event_type": {
            "type": "string",
            "description": "authentication event type ('login' or 'logout')"
          },
          "pseudonym_id": {
            "type": "integer",
            "description": "ID of the pseudonym (login) associated with the event"
          },
          "account_id": {
            "type": "integer",
            "description": "ID of the account associated with the event. will match the account_id in the associated pseudonym."
          },
          "user_id": {
            "type": "integer",
            "description": "ID of the user associated with the event will match the user_id in the associated pseudonym."
          }
        },
        "description": ""
      },
      "AuthenticationProvider": {
        "type": "object",
        "properties": {
          "identifier_format": {
            "type": "string",
            "description": "Valid for SAML providers."
          },
          "auth_type": {
            "type": "string",
            "description": "Valid for all providers."
          },
          "id": {
            "type": "integer",
            "description": "Valid for all providers."
          },
          "log_out_url": {
            "type": "string",
            "description": "Valid for SAML providers."
          },
          "log_in_url": {
            "type": "string",
            "description": "Valid for SAML and CAS providers."
          },
          "certificate_fingerprint": {
            "type": "string",
            "description": "Valid for SAML providers."
          },
          "requested_authn_context": {
            "type": "string",
            "description": "Valid for SAML providers."
          },
          "auth_host": {
            "type": "string",
            "description": "Valid for LDAP providers."
          },
          "auth_filter": {
            "type": "string",
            "description": "Valid for LDAP providers."
          },
          "auth_over_tls": {
            "type": "integer",
            "description": "Valid for LDAP providers."
          },
          "auth_base": {
            "type": "string",
            "description": "Valid for LDAP and CAS providers."
          },
          "auth_username": {
            "type": "string",
            "description": "Valid for LDAP providers."
          },
          "auth_port": {
            "type": "integer",
            "description": "Valid for LDAP providers."
          },
          "position": {
            "type": "integer",
            "description": "Valid for all providers."
          },
          "idp_entity_id": {
            "type": "string",
            "description": "Valid for SAML providers."
          },
          "login_attribute": {
            "type": "string",
            "description": "Valid for SAML providers."
          },
          "sig_alg": {
            "type": "string",
            "description": "Valid for SAML providers."
          },
          "jit_provisioning": {
            "type": "boolean",
            "description": "Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting)."
          },
          "federated_attributes": {
            "$ref": "#/components/schemas/FederatedAttributesConfig"
          },
          "mfa_required": {
            "type": "boolean",
            "description": "If multi-factor authentication is required when logging in with this authentication provider. The account must not have MFA disabled."
          }
        },
        "description": ""
      },
      "Avatar": {
        "required": [
          "display_name",
          "token",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "['gravatar'|'attachment'|'no_pic'] The type of avatar record, for categorization purposes."
          },
          "url": {
            "type": "string",
            "description": "The url of the avatar"
          },
          "token": {
            "type": "string",
            "description": "A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client."
          },
          "display_name": {
            "type": "string",
            "description": "A textual description of the avatar record."
          },
          "id": {
            "type": "integer",
            "description": "['attachment' type only] the internal id of the attachment"
          },
          "content-type": {
            "type": "string",
            "description": "['attachment' type only] the content-type of the attachment."
          },
          "filename": {
            "type": "string",
            "description": "['attachment' type only] the filename of the attachment"
          },
          "size": {
            "type": "integer",
            "description": "['attachment' type only] the size of the attachment"
          }
        },
        "description": "Possible avatar for a user."
      },
      "BlackoutDate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the ID of the blackout date"
          },
          "context_id": {
            "type": "integer",
            "description": "the context owning the blackout date"
          },
          "context_type": {
            "type": "string"
          },
          "start_date": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_date": {
            "$ref": "#/components/schemas/datetime"
          },
          "event_title": {
            "type": "string",
            "description": "title of the blackout date"
          }
        },
        "description": "Blackout dates are used to prevent scheduling assignments on a given date in course pacing."
      },
      "BlueprintMigration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the migration.",
            "format": "int64"
          },
          "template_id": {
            "type": "integer",
            "description": "The ID of the template the migration belongs to. Only present when querying a blueprint course.",
            "format": "int64"
          },
          "subscription_id": {
            "type": "integer",
            "description": "The ID of the associated course's blueprint subscription. Only present when querying a course associated with a blueprint.",
            "format": "int64"
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the user who queued the migration.",
            "format": "int64"
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "exports_started_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "imports_queued_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "imports_completed_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "comment": {
            "type": "string",
            "description": "User-specified comment describing changes made in this operation"
          }
        },
        "description": ""
      },
      "BlueprintRestriction": {
        "type": "object",
        "properties": {
          "content": {
            "type": "boolean",
            "description": "Restriction on main content (e.g. title, description)."
          },
          "points": {
            "type": "boolean",
            "description": "Restriction on points possible for assignments and graded learning objects"
          },
          "due_dates": {
            "type": "boolean",
            "description": "Restriction on due dates for assignments and graded learning objects"
          },
          "availability_dates": {
            "type": "boolean",
            "description": "Restriction on availability dates for an object"
          }
        },
        "description": "A set of restrictions on editing for copied objects in associated courses"
      },
      "BlueprintSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the blueprint course subscription",
            "format": "int64"
          },
          "template_id": {
            "type": "integer",
            "description": "The ID of the blueprint template the associated course is subscribed to",
            "format": "int64"
          },
          "blueprint_course": {
            "type": "object",
            "properties": {},
            "description": "The blueprint course subscribed to"
          }
        },
        "description": "Associates a course with a blueprint"
      },
      "BlueprintTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the template.",
            "format": "int64"
          },
          "course_id": {
            "type": "integer",
            "description": "The ID of the Course the template belongs to.",
            "format": "int64"
          },
          "last_export_completed_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "associated_course_count": {
            "type": "integer",
            "description": "Number of associated courses for the template"
          },
          "latest_migration": {
            "$ref": "#/components/schemas/BlueprintMigration"
          }
        },
        "description": ""
      },
      "Bookmark": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "position": {
            "type": "integer"
          },
          "data": {
            "type": "object",
            "properties": {}
          }
        },
        "description": ""
      },
      "CalendarEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the calendar event"
          },
          "title": {
            "type": "string",
            "description": "The title of the calendar event"
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "description": {
            "type": "string",
            "description": "The HTML description of the event"
          },
          "location_name": {
            "type": "string",
            "description": "The location name of the event"
          },
          "location_address": {
            "type": "string",
            "description": "The address where the event is taking place"
          },
          "context_code": {
            "type": "string",
            "description": "the context code of the calendar this event belongs to (course, user or group)"
          },
          "effective_context_code": {
            "type": "string",
            "description": "if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course's context code here, while the section's context code would be returned above)"
          },
          "context_name": {
            "type": "string",
            "description": "the context name of the calendar this event belongs to (course, user or group)"
          },
          "all_context_codes": {
            "type": "string",
            "description": "a comma-separated list of all calendar contexts this event is part of"
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the event ('active', 'locked' or 'deleted') 'locked' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)"
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events."
          },
          "parent_event_id": {
            "type": "integer",
            "description": "Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event."
          },
          "child_events_count": {
            "type": "integer",
            "description": "The number of child_events. See child_events (and parent_event_id)"
          },
          "child_events": {
            "type": "array",
            "description": "Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)",
            "items": {
              "type": "integer"
            }
          },
          "url": {
            "type": "string",
            "description": "URL for this calendar event (to update, delete, etc.)"
          },
          "html_url": {
            "type": "string",
            "description": "URL for a user to view this event"
          },
          "all_day_date": {
            "$ref": "#/components/schemas/datetime"
          },
          "all_day": {
            "type": "boolean",
            "description": "Boolean indicating whether this is an all-day event (midnight to midnight)"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "appointment_group_id": {
            "type": "integer",
            "description": "Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group"
          },
          "appointment_group_url": {
            "type": "string",
            "description": "The API URL of the appointment group"
          },
          "own_reservation": {
            "type": "boolean",
            "description": "If the event is a reservation, this a boolean indicating whether it is the current user's reservation, or someone else's"
          },
          "reserve_url": {
            "type": "string",
            "description": "If the event is a time slot, the API URL for reserving it"
          },
          "reserved": {
            "type": "boolean",
            "description": "If the event is a time slot, a boolean indicating whether the user has already made a reservation for it"
          },
          "participant_type": {
            "type": "string",
            "description": "The type of participant to sign up for a slot: 'User' or 'Group'"
          },
          "participants_per_appointment": {
            "type": "integer",
            "description": "If the event is a time slot, this is the participant limit"
          },
          "available_slots": {
            "type": "integer",
            "description": "If the event is a time slot and it has a participant limit, an integer indicating how many slots are available"
          },
          "user": {
            "type": "string",
            "description": "If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API)."
          },
          "group": {
            "type": "string",
            "description": "If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API)."
          },
          "important_dates": {
            "type": "boolean",
            "description": "Boolean indicating whether this has important dates."
          },
          "series_uuid": {
            "$ref": "#/components/schemas/uuid"
          },
          "rrule": {
            "type": "string",
            "description": "An iCalendar RRULE for defining how events in a recurring event series repeat."
          },
          "series_natural_language": {
            "type": "string",
            "description": "A natural language expression of how events occur in the series. (e.g. Daily, 2 times)"
          },
          "blackout_date": {
            "type": "boolean",
            "description": "Boolean indicating whether this has blackout date."
          }
        },
        "description": ""
      },
      "CalendarLink": {
        "type": "object",
        "properties": {
          "ics": {
            "type": "string",
            "description": "The URL of the calendar in ICS format"
          }
        },
        "description": ""
      },
      "ChangeRecord": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "integer",
            "description": "The ID of the learning object that was changed in the blueprint course.",
            "format": "int64"
          },
          "asset_type": {
            "type": "string",
            "description": "The type of the learning object that was changed in the blueprint course.  One of 'assignment', 'attachment', 'discussion_topic', 'external_tool', 'quiz', 'wiki_page', 'syllabus', or 'settings'.  For 'syllabus' or 'settings', the asset_id is the course id."
          },
          "asset_name": {
            "type": "string",
            "description": "The name of the learning object that was changed in the blueprint course."
          },
          "change_type": {
            "type": "string",
            "description": "The type of change; one of 'created', 'updated', 'deleted'"
          },
          "html_url": {
            "type": "string",
            "description": "The URL of the changed object"
          },
          "locked": {
            "type": "boolean",
            "description": "Whether the object is locked in the blueprint"
          },
          "exceptions": {
            "type": "array",
            "description": "A list of ExceptionRecords for linked courses that did not receive this update.",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "Describes a learning object change propagated to associated courses from a blueprint course"
      },
      "Collaborator": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique user or group identifier for the collaborator."
          },
          "type": {
            "type": "string",
            "description": "The type of collaborator (e.g. 'user' or 'group')."
          },
          "name": {
            "type": "string",
            "description": "The name of the collaborator."
          }
        },
        "description": ""
      },
      "Collaboration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the collaboration"
          },
          "collaboration_type": {
            "type": "string",
            "description": "A name for the type of collaboration"
          },
          "document_id": {
            "type": "string",
            "description": "The collaboration document identifier for the collaboration provider"
          },
          "user_id": {
            "type": "integer",
            "description": "The canvas id of the user who created the collaboration"
          },
          "context_id": {
            "type": "integer",
            "description": "The canvas id of the course or group to which the collaboration belongs"
          },
          "context_type": {
            "type": "string",
            "description": "The canvas type of the course or group to which the collaboration belongs"
          },
          "url": {
            "type": "string",
            "description": "The LTI launch url to view collaboration."
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "description": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Another representation of the collaboration type"
          },
          "update_url": {
            "type": "string",
            "description": "The LTI launch url to edit the collaboration"
          },
          "user_name": {
            "type": "string",
            "description": "The name of the user who owns the collaboration"
          }
        },
        "description": ""
      },
      "ColumnDatum": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "user_id": {
            "type": "integer"
          }
        },
        "description": "ColumnDatum objects contain the entry for a column for each user."
      },
      "CommMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the CommMessage."
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "sent_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "workflow_state": {
            "type": "string",
            "description": "The workflow state of the message. One of 'created', 'staged', 'sending', 'sent', 'bounced', 'dashboard', 'cancelled', or 'closed'"
          },
          "from": {
            "type": "string",
            "description": "The address that was put in the 'from' field of the message"
          },
          "from_name": {
            "type": "string",
            "description": "The display name for the from address"
          },
          "to": {
            "type": "string",
            "description": "The address the message was sent to:"
          },
          "reply_to": {
            "type": "string",
            "description": "The reply_to header of the message"
          },
          "subject": {
            "type": "string",
            "description": "The message subject"
          },
          "body": {
            "type": "string",
            "description": "The plain text body of the message"
          },
          "html_body": {
            "type": "string",
            "description": "The HTML body of the message."
          }
        },
        "description": ""
      },
      "CommunicationChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the communication channel."
          },
          "address": {
            "type": "string",
            "description": "The address, or path, of the communication channel."
          },
          "type": {
            "type": "string",
            "description": "The type of communcation channel being described. Possible values are: 'email', 'push', 'sms', or 'twitter'. This field determines the type of value seen in 'address'."
          },
          "position": {
            "type": "integer",
            "description": "The position of this communication channel relative to the user's other channels when they are ordered."
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the user that owns this communication channel."
          },
          "workflow_state": {
            "type": "string",
            "description": "The current state of the communication channel. Possible values are: 'unconfirmed' or 'active'."
          }
        },
        "description": ""
      },
      "Conference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the conference"
          },
          "conference_type": {
            "type": "string",
            "description": "The type of conference"
          },
          "conference_key": {
            "type": "string",
            "description": "The 3rd party's ID for the conference"
          },
          "description": {
            "type": "string",
            "description": "The description for the conference"
          },
          "duration": {
            "type": "integer",
            "description": "The expected duration the conference is supposed to last"
          },
          "ended_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "started_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "title": {
            "type": "string",
            "description": "The title of the conference"
          },
          "users": {
            "type": "array",
            "description": "Array of user ids that are participants in the conference",
            "items": {
              "type": "integer"
            }
          },
          "has_advanced_settings": {
            "type": "boolean",
            "description": "True if the conference type has advanced settings."
          },
          "long_running": {
            "type": "boolean",
            "description": "If true the conference is long running and has no expected end time"
          },
          "user_settings": {
            "type": "object",
            "properties": {},
            "description": "A collection of settings specific to the conference type"
          },
          "recordings": {
            "type": "array",
            "description": "A List of recordings for the conference",
            "items": {
              "$ref": "#/components/schemas/ConferenceRecording"
            }
          },
          "url": {
            "type": "string",
            "description": "URL for the conference, may be null if the conference type doesn't set it"
          },
          "join_url": {
            "type": "string",
            "description": "URL to join the conference, may be null if the conference type doesn't set it"
          },
          "context_type": {
            "type": "string",
            "description": "The type of this conference's context, typically 'Course' or 'Group'."
          },
          "context_id": {
            "type": "integer",
            "description": "The ID of this conference's context."
          }
        },
        "description": ""
      },
      "ConferenceRecording": {
        "type": "object",
        "properties": {
          "duration_minutes": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "playback_url": {
            "type": "string"
          }
        },
        "description": ""
      },
      "ContentExport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the unique identifier for the export"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "export_type": {
            "type": "string",
            "description": "the type of content migration: 'common_cartridge' or 'qti'"
          },
          "attachment": {
            "$ref": "#/components/schemas/File"
          },
          "progress_url": {
            "type": "string",
            "description": "The api endpoint for polling the current progress"
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the user who started the export"
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the content migration: created exporting exported failed"
          }
        },
        "description": ""
      },
      "ContentMigration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the unique identifier for the migration"
          },
          "migration_type": {
            "type": "string",
            "description": "the type of content migration"
          },
          "migration_type_title": {
            "type": "string",
            "description": "the name of the content migration type"
          },
          "migration_issues_url": {
            "type": "string",
            "description": "API url to the content migration's issues"
          },
          "attachment": {
            "type": "string",
            "description": "attachment api object for the uploaded file may not be present for all migrations"
          },
          "progress_url": {
            "type": "string",
            "description": "The api endpoint for polling the current progress"
          },
          "user_id": {
            "type": "integer",
            "description": "The user who started the migration"
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the content migration: pre_processing, pre_processed, running, waiting_for_select, completed, failed"
          },
          "started_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "finished_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "pre_attachment": {
            "type": "string",
            "description": "file uploading data, see {file:file_uploads.html File Upload Documentation} for file upload workflow This works a little differently in that all the file data is in the pre_attachment hash if there is no upload_url then there was an attachment pre-processing error, the error message will be in the message key This data will only be here after a create or update call"
          }
        },
        "description": ""
      },
      "ContentShare": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the content share for the current user"
          },
          "name": {
            "type": "string",
            "description": "The name of the shared content"
          },
          "content_type": {
            "type": "string",
            "description": "The type of content that was shared. Can be assignment, discussion_topic, page, quiz, module, or module_item."
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "user_id": {
            "type": "integer",
            "description": "The id of the user who sent or received the content share."
          },
          "sender": {
            "type": "object",
            "properties": {},
            "description": "The user who shared the content. This field is provided only to receivers; it is not populated in the sender's list of sent content shares."
          },
          "receivers": {
            "type": "array",
            "description": "An Array of users the content is shared with.  This field is provided only to senders; an empty array will be returned for the receiving users.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "source_course": {
            "type": "object",
            "properties": {},
            "description": "The course the content was originally shared from."
          },
          "read_state": {
            "type": "string",
            "description": "Whether the recipient has viewed the content share."
          },
          "content_export": {
            "$ref": "#/components/schemas/ContentExport"
          }
        },
        "description": "Content shared between users"
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the unique identifier for the conversation.",
            "format": "int64"
          },
          "subject": {
            "type": "string",
            "description": "the subject of the conversation."
          },
          "workflow_state": {
            "type": "string",
            "description": "The current state of the conversation (read, unread or archived)."
          },
          "last_message": {
            "type": "string",
            "description": "A <=100 character preview from the most recent message."
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "message_count": {
            "type": "integer",
            "description": "the number of messages in the conversation."
          },
          "subscribed": {
            "type": "boolean",
            "description": "whether the current user is subscribed to the conversation."
          },
          "private": {
            "type": "boolean",
            "description": "whether the conversation is private."
          },
          "starred": {
            "type": "boolean",
            "description": "whether the conversation is starred."
          },
          "properties": {
            "type": "array",
            "description": "Additional conversation flags (last_author, attachments, media_objects). Each listed property means the flag is set to true (i.e. the current user is the most recent author, there are attachments, or there are media objects)",
            "items": {
              "type": "string"
            }
          },
          "audience": {
            "type": "array",
            "description": "Array of user ids who are involved in the conversation, ordered by participation level, then alphabetical. Excludes current user, unless this is a monologue.",
            "items": {
              "type": "integer"
            }
          },
          "audience_contexts": {
            "type": "array",
            "description": "Most relevant shared contexts (courses and groups) between current user and other participants. If there is only one participant, it will also include that user's enrollment(s)/ membership type(s) in each course/group.",
            "items": {
              "type": "string"
            }
          },
          "avatar_url": {
            "type": "string",
            "description": "URL to appropriate icon for this conversation (custom, individual or group avatar, depending on audience)."
          },
          "participants": {
            "type": "array",
            "description": "Array of users participating in the conversation. Includes current user.",
            "items": {
              "$ref": "#/components/schemas/ConversationParticipant"
            }
          },
          "visible": {
            "type": "boolean",
            "description": "indicates whether the conversation is visible under the current scope and filter. This attribute is always true in the index API response, and is primarily useful in create/update responses so that you can know if the record should be displayed in the UI. The default scope is assumed, unless a scope or filter is passed to the create/update API call."
          },
          "context_name": {
            "type": "string",
            "description": "Name of the course or group in which the conversation is occurring."
          }
        },
        "description": ""
      },
      "ConversationParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The user ID for the participant.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "A short name the user has selected, for use in conversations or other less formal places through the site."
          },
          "full_name": {
            "type": "string",
            "description": "The full name of the user."
          },
          "avatar_url": {
            "type": "string",
            "description": "If requested, this field will be included and contain a url to retrieve the user's avatar."
          }
        },
        "description": ""
      },
      "Course": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the unique identifier for the course"
          },
          "sis_course_id": {
            "type": "string",
            "description": "the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information."
          },
          "uuid": {
            "type": "string",
            "description": "the UUID of the course"
          },
          "integration_id": {
            "type": "string",
            "description": "the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information."
          },
          "sis_import_id": {
            "type": "integer",
            "description": "the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information."
          },
          "name": {
            "type": "string",
            "description": "the full name of the course. If the requesting user has set a nickname for the course, the nickname will be shown here."
          },
          "course_code": {
            "type": "string",
            "description": "the course code"
          },
          "original_name": {
            "type": "string",
            "description": "the actual course name. This field is returned only if the requesting user has set a nickname for the course."
          },
          "workflow_state": {
            "type": "string",
            "description": "the current state of the course one of 'unpublished', 'available', 'completed', or 'deleted'"
          },
          "account_id": {
            "type": "integer",
            "description": "the account associated with the course"
          },
          "root_account_id": {
            "type": "integer",
            "description": "the root account associated with the course"
          },
          "enrollment_term_id": {
            "type": "integer",
            "description": "the enrollment term associated with the course"
          },
          "grading_periods": {
            "type": "array",
            "description": "A list of grading periods associated with the course",
            "items": {
              "$ref": "#/components/schemas/GradingPeriod"
            }
          },
          "grading_standard_id": {
            "type": "integer",
            "description": "the grading standard associated with the course"
          },
          "grade_passback_setting": {
            "type": "string",
            "description": "the grade_passback_setting set on the course"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "locale": {
            "type": "string",
            "description": "the course-set locale, if applicable"
          },
          "enrollments": {
            "type": "array",
            "description": "A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores",
            "items": {
              "$ref": "#/components/schemas/Enrollment"
            }
          },
          "total_students": {
            "type": "integer",
            "description": "optional: the total number of active and invited students in the course"
          },
          "calendar": {
            "$ref": "#/components/schemas/CalendarLink"
          },
          "default_view": {
            "type": "string",
            "description": "the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future"
          },
          "syllabus_body": {
            "type": "string",
            "description": "optional: user-generated HTML for the course syllabus"
          },
          "needs_grading_count": {
            "type": "integer",
            "description": "optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count"
          },
          "term": {
            "$ref": "#/components/schemas/Term"
          },
          "course_progress": {
            "$ref": "#/components/schemas/CourseProgress"
          },
          "apply_assignment_group_weights": {
            "type": "boolean",
            "description": "weight final grade based on assignment group percentages"
          },
          "permissions": {
            "type": "object",
            "properties": {},
            "description": "optional: the permissions the user has for the course. returned only for a single course and include[]=permissions"
          },
          "is_public": {
            "type": "boolean"
          },
          "is_public_to_auth_users": {
            "type": "boolean"
          },
          "public_syllabus": {
            "type": "boolean"
          },
          "public_syllabus_to_auth": {
            "type": "boolean"
          },
          "public_description": {
            "type": "string",
            "description": "optional: the public description of the course"
          },
          "storage_quota_mb": {
            "type": "integer"
          },
          "storage_quota_used_mb": {
            "type": "number"
          },
          "hide_final_grades": {
            "type": "boolean"
          },
          "license": {
            "type": "string"
          },
          "allow_student_assignment_edits": {
            "type": "boolean"
          },
          "allow_wiki_comments": {
            "type": "boolean"
          },
          "allow_student_forum_attachments": {
            "type": "boolean"
          },
          "open_enrollment": {
            "type": "boolean"
          },
          "self_enrollment": {
            "type": "boolean"
          },
          "restrict_enrollments_to_course_dates": {
            "type": "boolean"
          },
          "course_format": {
            "type": "string"
          },
          "access_restricted_by_date": {
            "type": "boolean",
            "description": "optional: this will be true if this user is currently prevented from viewing the course because of date restriction settings"
          },
          "time_zone": {
            "type": "string",
            "description": "The course's IANA time zone name."
          },
          "blueprint": {
            "type": "boolean",
            "description": "optional: whether the course is set as a Blueprint Course (blueprint fields require the Blueprint Courses feature)"
          },
          "blueprint_restrictions": {
            "type": "object",
            "properties": {},
            "description": "optional: Set of restrictions applied to all locked course objects"
          },
          "blueprint_restrictions_by_object_type": {
            "type": "object",
            "properties": {},
            "description": "optional: Sets of restrictions differentiated by object type applied to locked course objects"
          },
          "template": {
            "type": "boolean",
            "description": "optional: whether the course is set as a template (requires the Course Templates feature)"
          }
        },
        "description": ""
      },
      "CourseEpubExport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the unique identifier for the course"
          },
          "name": {
            "type": "string",
            "description": "the name for the course"
          },
          "epub_export": {
            "$ref": "#/components/schemas/EpubExport"
          }
        },
        "description": "Combination of a Course & EpubExport."
      },
      "CourseEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the event."
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "event_type": {
            "type": "string",
            "description": "Course event type The event type defines the type and schema of the event_data object."
          },
          "event_data": {
            "type": "string",
            "description": "Course event data depending on the event type.  This will return an object containing the relevant event data.  An updated event type will return an UpdatedEventData object."
          },
          "event_source": {
            "type": "string",
            "description": "Course event source depending on the event type.  This will return a string containing the source of the event."
          },
          "links": {
            "$ref": "#/components/schemas/CourseEventLink"
          }
        },
        "description": ""
      },
      "CourseEventLink": {
        "type": "object",
        "properties": {
          "course": {
            "type": "integer",
            "description": "ID of the course for the event."
          },
          "user": {
            "type": "integer",
            "description": "ID of the user for the event (who made the change)."
          },
          "page_view": {
            "type": "string",
            "description": "ID of the page view during the event if it exists."
          },
          "copied_from": {
            "type": "integer",
            "description": "ID of the course that this course was copied from. This is only included if the event_type is copied_from."
          },
          "copied_to": {
            "type": "integer",
            "description": "ID of the course that this course was copied to. This is only included if the event_type is copied_to."
          },
          "sis_batch": {
            "type": "integer",
            "description": "ID of the SIS batch that triggered the event."
          }
        },
        "description": ""
      },
      "CourseNickname": {
        "type": "object",
        "properties": {
          "course_id": {
            "type": "integer",
            "description": "the ID of the course"
          },
          "name": {
            "type": "string",
            "description": "the actual name of the course"
          },
          "nickname": {
            "type": "string",
            "description": "the calling user's nickname for the course"
          }
        },
        "description": ""
      },
      "CourseProgress": {
        "type": "object",
        "properties": {
          "requirement_count": {
            "type": "integer",
            "description": "total number of requirements from all modules"
          },
          "requirement_completed_count": {
            "type": "integer",
            "description": "total number of requirements the user has completed from all modules"
          },
          "next_requirement_url": {
            "type": "string",
            "description": "url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress"
          },
          "completed_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": ""
      },
      "CourseQuizExtension": {
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "description": "The ID of the Student that needs the quiz extension.",
            "format": "int64"
          },
          "extra_attempts": {
            "type": "integer",
            "description": "Number of times the student is allowed to re-take the quiz over the multiple-attempt limit.",
            "format": "int64"
          },
          "extra_time": {
            "type": "integer",
            "description": "Amount of extra time allowed for the quiz submission, in minutes.",
            "format": "int64"
          },
          "manually_unlocked": {
            "type": "boolean",
            "description": "The student can take the quiz even if it's locked for everyone else"
          },
          "end_at": {
            "type": "string",
            "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission.",
            "format": "date-time"
          }
        },
        "description": ""
      },
      "CreatedEventData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "start_at": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/datetime"
            }
          },
          "conclude_at": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/datetime"
            }
          },
          "is_public": {
            "type": "array",
            "items": {
              "type": "boolean"
            }
          },
          "created_source": {
            "type": "string",
            "description": "The type of action that triggered the creation of the course."
          }
        },
        "description": "The created event data object returns all the fields that were set in the format of the following example.  If a field does not exist it was not set. The value of each field changed is in the format of [:old_value, :new_value].  The created event type also includes a created_source field to specify what triggered the creation of the course."
      },
      "CustomColumn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the custom gradebook column"
          },
          "teacher_notes": {
            "type": "boolean",
            "description": "When true, this column's visibility will be toggled in the Gradebook when a user selects to show or hide notes"
          },
          "title": {
            "type": "string",
            "description": "header text"
          },
          "position": {
            "type": "integer",
            "description": "column order"
          },
          "hidden": {
            "type": "boolean",
            "description": "won't be displayed if hidden is true"
          },
          "read_only": {
            "type": "boolean",
            "description": "won't be editable in the gradebook UI"
          }
        },
        "description": ""
      },
      "DateTime": {
        "type": "string",
        "format": "int32",
        "example": "2016-08-29T09:12:33.001Z"
      },
      "DiscussionTopic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of this topic."
          },
          "title": {
            "type": "string",
            "description": "The topic title."
          },
          "message": {
            "type": "string",
            "description": "The HTML content of the message body."
          },
          "html_url": {
            "type": "string",
            "description": "The URL to the discussion topic in canvas."
          },
          "posted_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "last_reply_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "require_initial_post": {
            "type": "boolean",
            "description": "If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false."
          },
          "user_can_see_posts": {
            "type": "boolean",
            "description": "Whether or not posts in this topic are visible to the user."
          },
          "discussion_subentry_count": {
            "type": "integer",
            "description": "The count of entries in the topic."
          },
          "read_state": {
            "type": "string",
            "description": "The read_state of the topic for the current user, 'read' or 'unread'."
          },
          "unread_count": {
            "type": "integer",
            "description": "The count of unread entries of this topic for the current user."
          },
          "subscribed": {
            "type": "boolean",
            "description": "Whether or not the current user is subscribed to this topic."
          },
          "subscription_hold": {
            "type": "string",
            "description": "(Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement"
          },
          "assignment_id": {
            "type": "integer",
            "description": "The unique identifier of the assignment if the topic is for grading, otherwise null."
          },
          "delayed_post_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "published": {
            "type": "boolean",
            "description": "Whether this discussion topic is published (true) or draft state (false)"
          },
          "lock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "locked": {
            "type": "boolean",
            "description": "Whether or not the discussion is 'closed for comments'."
          },
          "pinned": {
            "type": "boolean",
            "description": "Whether or not the discussion has been 'pinned' by an instructor"
          },
          "locked_for_user": {
            "type": "boolean",
            "description": "Whether or not this is locked for the user."
          },
          "lock_info": {
            "$ref": "#/components/schemas/LockInfo"
          },
          "lock_explanation": {
            "type": "string",
            "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true."
          },
          "user_name": {
            "type": "string",
            "description": "The username of the topic creator."
          },
          "topic_children": {
            "type": "array",
            "description": "DEPRECATED An array of topic_ids for the group discussions the user is a part of.",
            "items": {
              "type": "integer"
            }
          },
          "group_topic_children": {
            "type": "array",
            "description": "An array of group discussions the user is a part of. Fields include: id, group_id",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "root_topic_id": {
            "type": "integer",
            "description": "If the topic is for grading and a group assignment this will point to the original topic in the course."
          },
          "podcast_url": {
            "type": "string",
            "description": "If the topic is a podcast topic this is the feed url for the current user."
          },
          "discussion_type": {
            "type": "string",
            "description": "The type of discussion. Values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions."
          },
          "group_category_id": {
            "type": "integer",
            "description": "The unique identifier of the group category if the topic is a group discussion, otherwise null."
          },
          "attachments": {
            "type": "array",
            "description": "Array of file attachments.",
            "items": {
              "$ref": "#/components/schemas/FileAttachment"
            }
          },
          "permissions": {
            "type": "object",
            "properties": {},
            "description": "The current user's permissions on this topic."
          },
          "allow_rating": {
            "type": "boolean",
            "description": "Whether or not users can rate entries in this topic."
          },
          "only_graders_can_rate": {
            "type": "boolean",
            "description": "Whether or not grade permissions are required to rate entries."
          },
          "sort_by_rating": {
            "type": "boolean",
            "description": "Whether or not entries should be sorted by rating."
          }
        },
        "description": "A discussion topic"
      },
      "EnrollmentTermsList": {
        "type": "object",
        "properties": {
          "enrollment_terms": {
            "type": "array",
            "description": "a paginated list of all terms in the account",
            "items": {
              "$ref": "#/components/schemas/EnrollmentTerm"
            }
          }
        },
        "description": ""
      },
      "EnrollmentTerm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the enrollment term."
          },
          "sis_term_id": {
            "type": "string",
            "description": "The SIS id of the term. Only included if the user has permission to view SIS information."
          },
          "sis_import_id": {
            "type": "integer",
            "description": "the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information."
          },
          "name": {
            "type": "string",
            "description": "The name of the term."
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "workflow_state": {
            "type": "string",
            "description": "The state of the term. Can be 'active' or 'deleted'."
          },
          "overrides": {
            "type": "object",
            "properties": {},
            "description": "Term date overrides for specific enrollment types"
          },
          "course_count": {
            "type": "integer",
            "description": "The number of courses in the term (available via include)"
          }
        },
        "description": ""
      },
      "Enrollment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the enrollment."
          },
          "course_id": {
            "type": "integer",
            "description": "The unique id of the course."
          },
          "sis_course_id": {
            "type": "string",
            "description": "The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information."
          },
          "course_integration_id": {
            "type": "string",
            "description": "The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information."
          },
          "course_section_id": {
            "type": "integer",
            "description": "The unique id of the user's section."
          },
          "section_integration_id": {
            "type": "string",
            "description": "The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information."
          },
          "sis_account_id": {
            "type": "string",
            "description": "The SIS Account ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information."
          },
          "sis_section_id": {
            "type": "string",
            "description": "The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information."
          },
          "sis_user_id": {
            "type": "string",
            "description": "The SIS User ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information."
          },
          "enrollment_state": {
            "type": "string",
            "description": "The state of the user's enrollment in the course."
          },
          "limit_privileges_to_course_section": {
            "type": "boolean",
            "description": "User can only access his or her own course section."
          },
          "sis_import_id": {
            "type": "integer",
            "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information."
          },
          "root_account_id": {
            "type": "integer",
            "description": "The unique id of the user's account."
          },
          "type": {
            "type": "string",
            "description": "The enrollment type. One of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', 'ObserverEnrollment'."
          },
          "user_id": {
            "type": "integer",
            "description": "The unique id of the user."
          },
          "associated_user_id": {
            "type": "integer",
            "description": "The unique id of the associated user. Will be null unless type is ObserverEnrollment."
          },
          "role": {
            "type": "string",
            "description": "The enrollment role, for course-level permissions. This field will match `type` if the enrollment role has not been customized."
          },
          "role_id": {
            "type": "integer",
            "description": "The id of the enrollment role."
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "last_activity_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "last_attended_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "total_activity_time": {
            "type": "integer",
            "description": "The total activity time of the user for the enrollment, in seconds."
          },
          "html_url": {
            "type": "string",
            "description": "The URL to the Canvas web UI page for this course enrollment."
          },
          "grades": {
            "$ref": "#/components/schemas/Grade"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "override_grade": {
            "type": "string",
            "description": "The user's override grade for the course."
          },
          "override_score": {
            "type": "number",
            "description": "The user's override score for the course."
          },
          "unposted_current_grade": {
            "type": "string",
            "description": "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins."
          },
          "unposted_final_grade": {
            "type": "string",
            "description": "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.."
          },
          "unposted_current_score": {
            "type": "string",
            "description": "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins.."
          },
          "unposted_final_score": {
            "type": "string",
            "description": "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins.."
          },
          "has_grading_periods": {
            "type": "boolean",
            "description": "optional: Indicates whether the course the enrollment belongs to has grading periods set up. (applies only to student enrollments, and only available in course endpoints)"
          },
          "totals_for_all_grading_periods_option": {
            "type": "boolean",
            "description": "optional: Indicates whether the course the enrollment belongs to has the Display Totals for 'All Grading Periods' feature enabled. (applies only to student enrollments, and only available in course endpoints)"
          },
          "current_grading_period_title": {
            "type": "string",
            "description": "optional: The name of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)"
          },
          "current_grading_period_id": {
            "type": "integer",
            "description": "optional: The id of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)"
          },
          "current_period_override_grade": {
            "type": "string",
            "description": "The user's override grade for the current grading period."
          },
          "current_period_override_score": {
            "type": "number",
            "description": "The user's override score for the current grading period."
          },
          "current_period_unposted_current_score": {
            "type": "number",
            "description": "optional: The student's score in the course for the current grading period, including muted/unposted assignments. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)"
          },
          "current_period_unposted_final_score": {
            "type": "number",
            "description": "optional: The student's score in the course for the current grading period, including muted/unposted assignments and including ungraded assignments with a score of 0. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)"
          },
          "current_period_unposted_current_grade": {
            "type": "string",
            "description": "optional: The letter grade equivalent of current_period_unposted_current_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)"
          },
          "current_period_unposted_final_grade": {
            "type": "string",
            "description": "optional: The letter grade equivalent of current_period_unposted_final_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)"
          }
        },
        "description": ""
      },
      "ePortfolio": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The database ID of the ePortfolio"
          },
          "user_id": {
            "type": "integer",
            "description": "The user ID to which the ePortfolio belongs"
          },
          "name": {
            "type": "string",
            "description": "The name of the ePortfolio"
          },
          "public": {
            "type": "boolean",
            "description": "Whether or not the ePortfolio is visible without authentication"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "workflow_state": {
            "type": "string",
            "description": "The state of the ePortfolio. Either 'active' or 'deleted'"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "spam_status": {
            "type": "string",
            "description": "A flag indicating whether the ePortfolio has been\n      flagged or moderated as spam. One of 'flagged_as_possible_spam',\n      'marked_as_safe', 'marked_as_spam', or null"
          }
        },
        "description": ""
      },
      "ePortfolioPage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The database ID of the ePortfolio"
          },
          "eportfolio_id": {
            "type": "integer",
            "description": "The ePortfolio ID to which the entry belongs"
          },
          "position": {
            "type": "integer",
            "description": "The positional order of the entry in the list"
          },
          "name": {
            "type": "string",
            "description": "The name of the ePortfolio"
          },
          "content": {
            "type": "string",
            "description": "The user entered content of the entry"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": ""
      },
      "EpubExport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the unique identifier for the export"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "attachment": {
            "$ref": "#/components/schemas/File"
          },
          "progress_url": {
            "type": "string",
            "description": "The api endpoint for polling the current progress"
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the user who started the export"
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the ePub export: created exporting exported generating generated failed"
          }
        },
        "description": ""
      },
      "ErrorReport": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "The users problem summary, like an email subject line"
          },
          "comments": {
            "type": "string",
            "description": "long form documentation of what was witnessed"
          },
          "user_perceived_severity": {
            "type": "string",
            "description": "categorization of how bad the user thinks the problem is.  Should be one of [just_a_comment, not_urgent, workaround_possible, blocks_what_i_need_to_do, extreme_critical_emergency]."
          },
          "email": {
            "type": "string",
            "description": "the email address of the reporting user"
          },
          "url": {
            "type": "string",
            "description": "URL of the page on which the error was reported"
          },
          "context_asset_string": {
            "type": "string",
            "description": "string describing the asset being interacted with at the time of error.  Formatted '[type]_[id]'"
          },
          "user_roles": {
            "type": "string",
            "description": "comma seperated list of roles the reporting user holds.  Can be one [student], or many [teacher,admin]"
          }
        },
        "description": "A collection of information around a specific notification of a problem"
      },
      "ExceptionRecord": {
        "type": "object",
        "properties": {
          "course_id": {
            "type": "integer",
            "description": "The ID of the associated course",
            "format": "int64"
          },
          "conflicting_changes": {
            "type": "array",
            "description": "A list of change classes in the associated course's copy of the item that prevented a blueprint change from being applied. One or more of ['content', 'points', 'due_dates', 'availability_dates'].",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "Lists associated courses that did not receive a change propagated from a blueprint"
      },
      "ExternalFeed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the feed"
          },
          "display_name": {
            "type": "string",
            "description": "The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL"
          },
          "url": {
            "type": "string",
            "description": "The HTTP/HTTPS URL to the feed"
          },
          "header_match": {
            "type": "string",
            "description": "If not null, only feed entries whose title contains this string will trigger new posts in Canvas"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "verbosity": {
            "type": "string",
            "description": "The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used."
          }
        },
        "description": ""
      },
      "ExternalToolTagAttributes": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to the external tool"
          },
          "new_tab": {
            "type": "boolean",
            "description": "Whether or not there is a new tab for the external tool"
          },
          "resource_link_id": {
            "type": "string",
            "description": "the identifier for this tool_tag"
          }
        },
        "description": ""
      },
      "Favorite": {
        "type": "object",
        "properties": {
          "context_id": {
            "type": "integer",
            "description": "The ID of the object the Favorite refers to"
          },
          "context_type": {
            "type": "string",
            "description": "The type of the object the Favorite refers to (currently, only 'Course' is supported)"
          }
        },
        "description": ""
      },
      "Feature": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "The symbolic name of the feature, used in FeatureFlags"
          },
          "display_name": {
            "type": "string",
            "description": "The user-visible name of the feature"
          },
          "applies_to": {
            "type": "string",
            "description": "The type of object the feature applies to (RootAccount, Account, Course, or User):\n * RootAccount features may only be controlled by flags on root accounts.\n * Account features may be controlled by flags on accounts and their parent accounts.\n * Course features may be controlled by flags on courses and their parent accounts.\n * User features may be controlled by flags on users and site admin only."
          },
          "feature_flag": {
            "$ref": "#/components/schemas/FeatureFlag"
          },
          "root_opt_in": {
            "type": "boolean",
            "description": "If true, a feature that is 'allowed' globally will be 'off' by default in root accounts. Otherwise, root accounts inherit the global 'allowed' setting, which allows sub-accounts and courses to turn features on with no root account action."
          },
          "beta": {
            "type": "boolean",
            "description": "Whether the feature is a feature preview. If true, opting in includes ongoing updates outside the regular release schedule."
          },
          "autoexpand": {
            "type": "boolean",
            "description": "Whether the details of the feature are autoexpanded on page load vs. the user clicking to expand."
          },
          "release_notes_url": {
            "type": "string",
            "description": "A URL to the release notes describing the feature"
          }
        },
        "description": ""
      },
      "FeatureFlag": {
        "type": "object",
        "properties": {
          "context_type": {
            "type": "string",
            "description": "The type of object to which this flag applies (Account, Course, or User). (This field is not present if this FeatureFlag represents the global Canvas default)"
          },
          "context_id": {
            "type": "integer",
            "description": "The id of the object to which this flag applies (This field is not present if this FeatureFlag represents the global Canvas default)"
          },
          "feature": {
            "type": "string",
            "description": "The feature this flag controls"
          },
          "state": {
            "type": "string",
            "description": "The policy for the feature at this context.  can be 'off', 'allowed', 'allowed_on', or 'on'."
          },
          "locked": {
            "type": "boolean",
            "description": "If set, this feature flag cannot be changed in the caller's context because the flag is set 'off' or 'on' in a higher context"
          }
        },
        "description": ""
      },
      "FederatedAttributeConfig": {
        "type": "object",
        "properties": {
          "attribute": {
            "type": "string",
            "description": "The name of the attribute as it will be sent from the authentication provider"
          },
          "provisioning_only": {
            "type": "boolean",
            "description": "If the attribute should be applied only when provisioning a new user, rather than all logins"
          }
        },
        "description": "A single attribute name to be federated when a user logs in"
      },
      "FederatedAttributesConfig": {
        "type": "object",
        "properties": {
          "admin_roles": {
            "type": "string",
            "description": "A comma separated list of role names to grant to the user. Note that these only apply at the root account level, and not sub-accounts. If the attribute is not marked for provisioning only, the user will also be removed from any other roles they currently hold that are not still specified by the IdP."
          },
          "display_name": {
            "type": "string",
            "description": "The full display name of the user"
          },
          "email": {
            "type": "string",
            "description": "The user's e-mail address"
          },
          "given_name": {
            "type": "string",
            "description": "The first, or given, name of the user"
          },
          "integration_id": {
            "type": "string",
            "description": "The secondary unique identifier for SIS purposes"
          },
          "locale": {
            "type": "string",
            "description": "The user's preferred locale/language"
          },
          "name": {
            "type": "string",
            "description": "The full name of the user"
          },
          "sis_user_id": {
            "type": "string",
            "description": "The unique SIS identifier"
          },
          "sortable_name": {
            "type": "string",
            "description": "The full name of the user for sorting purposes"
          },
          "surname": {
            "type": "string",
            "description": "The surname, or last name, of the user"
          },
          "timezone": {
            "type": "string",
            "description": "The user's preferred time zone"
          }
        },
        "description": "A mapping of Canvas attribute names to attribute names that a provider may send, in order to update the value of these attributes when a user logs in. The values can be a FederatedAttributeConfig, or a raw string corresponding to the \"attribute\" property of a FederatedAttributeConfig. In responses, full FederatedAttributeConfig objects are returned if JIT provisioning is enabled, otherwise just the attribute names are returned."
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "uuid": {
            "type": "string"
          },
          "folder_id": {
            "type": "integer"
          },
          "display_name": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "content-type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "description": "file size in bytes"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "unlock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "locked": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "lock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "hidden_for_user": {
            "type": "boolean"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "modified_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "mime_class": {
            "type": "string",
            "description": "simplified content-type mapping"
          },
          "media_entry_id": {
            "type": "string",
            "description": "identifier for file in third-party transcoding service"
          },
          "locked_for_user": {
            "type": "boolean"
          },
          "lock_info": {
            "$ref": "#/components/schemas/LockInfo"
          },
          "lock_explanation": {
            "type": "string"
          },
          "preview_url": {
            "type": "string",
            "description": "optional: url to the document preview. This url is specific to the user making the api call. Only included in submission endpoints."
          }
        },
        "description": ""
      },
      "FileAttachment": {
        "type": "object",
        "properties": {
          "content-type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          }
        },
        "description": "A file attachment"
      },
      "Folder": {
        "type": "object",
        "properties": {
          "context_type": {
            "type": "string"
          },
          "context_id": {
            "type": "integer"
          },
          "files_count": {
            "type": "integer"
          },
          "position": {
            "type": "integer"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "folders_url": {
            "type": "string"
          },
          "files_url": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "lock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "id": {
            "type": "integer"
          },
          "folders_count": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent_folder_id": {
            "type": "integer"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "unlock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "hidden": {
            "type": "boolean"
          },
          "hidden_for_user": {
            "type": "boolean"
          },
          "locked": {
            "type": "boolean"
          },
          "locked_for_user": {
            "type": "boolean"
          },
          "for_submissions": {
            "type": "boolean",
            "description": "If true, indicates this is a read-only folder containing files submitted to assignments"
          }
        },
        "description": ""
      },
      "Grade": {
        "type": "object",
        "properties": {
          "html_url": {
            "type": "string",
            "description": "The URL to the Canvas web UI page for the user's grades, if this is a student enrollment."
          },
          "current_grade": {
            "type": "string",
            "description": "The user's current grade in the class. Only included if user has permissions to view this grade."
          },
          "final_grade": {
            "type": "string",
            "description": "The user's final grade for the class. Only included if user has permissions to view this grade."
          },
          "current_score": {
            "type": "string",
            "description": "The user's current score in the class. Only included if user has permissions to view this score."
          },
          "final_score": {
            "type": "string",
            "description": "The user's final score for the class. Only included if user has permissions to view this score."
          },
          "current_points": {
            "type": "integer",
            "description": "The total points the user has earned in the class. Only included if user has permissions to view this score and 'current_points' is passed in the request's 'include' parameter."
          },
          "unposted_current_grade": {
            "type": "string",
            "description": "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins."
          },
          "unposted_final_grade": {
            "type": "string",
            "description": "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.."
          },
          "unposted_current_score": {
            "type": "string",
            "description": "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins.."
          },
          "unposted_final_score": {
            "type": "string",
            "description": "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins.."
          },
          "unposted_current_points": {
            "type": "integer",
            "description": "The total points the user has earned in the class, including muted/unposted assignments. Only included if user has permissions to view this score (typically teachers, TAs, and admins) and 'current_points' is passed in the request's 'include' parameter."
          }
        },
        "description": ""
      },
      "GradingRules": {
        "type": "object",
        "properties": {
          "drop_lowest": {
            "type": "integer",
            "description": "Number of lowest scores to be dropped for each user."
          },
          "drop_highest": {
            "type": "integer",
            "description": "Number of highest scores to be dropped for each user."
          },
          "never_drop": {
            "type": "array",
            "description": "Assignment IDs that should never be dropped.",
            "items": {
              "type": "integer"
            }
          }
        },
        "description": ""
      },
      "HelpLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the help link"
          },
          "text": {
            "type": "string",
            "description": "The name of the help link"
          },
          "subtext": {
            "type": "string",
            "description": "The description of the help link"
          },
          "url": {
            "type": "string",
            "description": "The URL of the help link"
          },
          "type": {
            "type": "string",
            "description": "The type of the help link",
            "enum": [
              "default",
              "custom"
            ]
          },
          "available_to": {
            "type": "array",
            "description": "The roles that have access to this help link",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "HelpLinks": {
        "type": "object",
        "properties": {
          "help_link_name": {
            "type": "string",
            "description": "Help link button title"
          },
          "help_link_icon": {
            "type": "string",
            "description": "Help link button icon"
          },
          "custom_help_links": {
            "type": "array",
            "description": "Help links defined by the account. Could include default help links.",
            "items": {
              "$ref": "#/components/schemas/HelpLink"
            }
          },
          "default_help_links": {
            "type": "array",
            "description": "Default help links provided when account has not set help links of their own.",
            "items": {
              "$ref": "#/components/schemas/HelpLink"
            }
          }
        },
        "description": ""
      },
      "License": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "a short string identifying the license"
          },
          "name": {
            "type": "string",
            "description": "the name of the license"
          },
          "url": {
            "type": "string",
            "description": "a link to the license text"
          }
        },
        "description": ""
      },
      "LockInfo": {
        "type": "object",
        "properties": {
          "asset_string": {
            "type": "string",
            "description": "Asset string for the object causing the lock"
          },
          "unlock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "lock_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "context_module": {
            "type": "string",
            "description": "(Optional) Context module causing the lock."
          },
          "manually_locked": {
            "type": "boolean"
          }
        },
        "description": ""
      },
      "MigrationIssue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the unique identifier for the issue"
          },
          "content_migration_url": {
            "type": "string",
            "description": "API url to the content migration"
          },
          "description": {
            "type": "string",
            "description": "Description of the issue for the end-user"
          },
          "workflow_state": {
            "type": "string",
            "description": "Current state of the issue: active, resolved"
          },
          "fix_issue_html_url": {
            "type": "string",
            "description": "HTML Url to the Canvas page to investigate the issue"
          },
          "issue_type": {
            "type": "string",
            "description": "Severity of the issue: todo, warning, error"
          },
          "error_report_html_url": {
            "type": "string",
            "description": "Link to a Canvas error report if present (If the requesting user has permissions)"
          },
          "error_message": {
            "type": "string",
            "description": "Site administrator error message (If the requesting user has permissions)"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": ""
      },
      "Migrator": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The value to pass to the create endpoint"
          },
          "requires_file_upload": {
            "type": "boolean",
            "description": "Whether this endpoint requires a file upload"
          },
          "name": {
            "type": "string",
            "description": "Description of the package type expected"
          },
          "required_settings": {
            "type": "array",
            "description": "A list of fields this system requires",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "NeedsGradingCount": {
        "type": "object",
        "properties": {
          "section_id": {
            "type": "string",
            "description": "The section ID"
          },
          "needs_grading_count": {
            "type": "integer",
            "description": "Number of submissions that need grading"
          }
        },
        "description": "Used by Assignment model"
      },
      "PageView": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID representing the page view.  This is also the unique request id"
          },
          "app_name": {
            "type": "string",
            "description": "If the request is from an API request, the app that generated the access token"
          },
          "url": {
            "type": "string",
            "description": "The URL requested"
          },
          "context_type": {
            "type": "string",
            "description": "The type of context for the request"
          },
          "asset_type": {
            "type": "string",
            "description": "The type of asset in the context for the request, if any"
          },
          "controller": {
            "type": "string",
            "description": "The rails controller that handled the request"
          },
          "action": {
            "type": "string",
            "description": "The rails action that handled the request"
          },
          "contributed": {
            "type": "boolean",
            "description": "This field is deprecated, and will always be false"
          },
          "interaction_seconds": {
            "type": "number",
            "description": "An approximation of how long the user spent on the page, in seconds"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "user_request": {
            "type": "boolean",
            "description": "A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)"
          },
          "render_time": {
            "type": "number",
            "description": "How long the response took to render, in seconds"
          },
          "user_agent": {
            "type": "string",
            "description": "The user-agent of the browser or program that made the request"
          },
          "participated": {
            "type": "boolean",
            "description": "True if the request counted as participating, such as submitting homework"
          },
          "http_method": {
            "type": "string",
            "description": "The HTTP method such as GET or POST"
          },
          "remote_ip": {
            "type": "string",
            "description": "The origin IP address of the request"
          },
          "links": {
            "$ref": "#/components/schemas/PageViewLinks"
          }
        },
        "description": "The record of a user page view access in Canvas"
      },
      "PageViewLinks": {
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "description": "The ID of the user for this page view",
            "format": "int64"
          },
          "context": {
            "type": "integer",
            "description": "The ID of the context for the request (course id if context_type is Course, etc)",
            "format": "int64"
          },
          "asset": {
            "type": "integer",
            "description": "The ID of the asset for the request, if any",
            "format": "int64"
          },
          "real_user": {
            "type": "integer",
            "description": "The ID of the actual user who made this request, if the request was made by a user who was masquerading",
            "format": "int64"
          },
          "account": {
            "type": "integer",
            "description": "The ID of the account context for this page view",
            "format": "int64"
          }
        },
        "description": "The links of a page view access in Canvas"
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the user."
          },
          "name": {
            "type": "string",
            "description": "Sample User"
          },
          "short_name": {
            "type": "string",
            "description": "Sample User"
          },
          "sortable_name": {
            "type": "string",
            "description": "user, sample"
          },
          "title": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "primary_email": {
            "type": "string",
            "description": "sample_user@example.com"
          },
          "login_id": {
            "type": "string",
            "description": "sample_user@example.com"
          },
          "sis_user_id": {
            "type": "string",
            "description": "sis1"
          },
          "lti_user_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string",
            "description": "The avatar_url can change over time, so we recommend not caching it for more than a few hours"
          },
          "calendar": {
            "$ref": "#/components/schemas/CalendarLink"
          },
          "time_zone": {
            "type": "string",
            "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone."
          },
          "locale": {
            "type": "string",
            "description": "The users locale."
          },
          "k5_user": {
            "type": "boolean",
            "description": "Optional: Whether or not the user is a K5 user. This field is nil if the user settings are not for the user making the request."
          }
        },
        "description": "Profile details for a Canvas user."
      },
      "Report": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the report."
          },
          "report": {
            "type": "string",
            "description": "The type of report."
          },
          "file_url": {
            "type": "string",
            "description": "The url to the report download."
          },
          "attachment": {
            "$ref": "#/components/schemas/File"
          },
          "status": {
            "type": "string",
            "description": "The status of the report"
          },
          "created_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "started_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "ended_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "parameters": {
            "$ref": "#/components/schemas/ReportParameters"
          },
          "progress": {
            "type": "integer",
            "description": "The progress of the report"
          },
          "current_line": {
            "type": "integer",
            "description": "This is the current line count being written to the report. It updates every 1000 records."
          }
        },
        "description": ""
      },
      "ReportParameters": {
        "type": "object",
        "properties": {
          "enrollment_term_id": {
            "type": "integer",
            "description": "The canvas id of the term to get grades from"
          },
          "include_deleted": {
            "type": "boolean",
            "description": "If true, deleted objects will be included. If false, deleted objects will be omitted."
          },
          "course_id": {
            "type": "integer",
            "description": "The id of the course to report on"
          },
          "order": {
            "type": "string",
            "description": "The sort order for the csv, Options: 'users', 'courses', 'outcomes'."
          },
          "users": {
            "type": "boolean",
            "description": "If true, user data will be included. If false, user data will be omitted."
          },
          "accounts": {
            "type": "boolean",
            "description": "If true, account data will be included. If false, account data will be omitted."
          },
          "terms": {
            "type": "boolean",
            "description": "If true, term data will be included. If false, term data will be omitted."
          },
          "courses": {
            "type": "boolean",
            "description": "If true, course data will be included. If false, course data will be omitted."
          },
          "sections": {
            "type": "boolean",
            "description": "If true, section data will be included. If false, section data will be omitted."
          },
          "enrollments": {
            "type": "boolean",
            "description": "If true, enrollment data will be included. If false, enrollment data will be omitted."
          },
          "groups": {
            "type": "boolean",
            "description": "If true, group data will be included. If false, group data will be omitted."
          },
          "xlist": {
            "type": "boolean",
            "description": "If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted."
          },
          "sis_terms_csv": {
            "type": "integer"
          },
          "sis_accounts_csv": {
            "type": "integer"
          },
          "include_enrollment_state": {
            "type": "boolean",
            "description": "If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false."
          },
          "enrollment_state": {
            "type": "array",
            "description": "Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']",
            "items": {
              "type": "string"
            }
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": "The parameters returned will vary for each report."
      },
      "RubricCriteria": {
        "type": "object",
        "properties": {
          "points": {
            "type": "integer"
          },
          "id": {
            "type": "string",
            "description": "The id of rubric criteria."
          },
          "learning_outcome_id": {
            "type": "string",
            "description": "(Optional) The id of the learning outcome this criteria uses, if any."
          },
          "vendor_guid": {
            "type": "string",
            "description": "(Optional) The 3rd party vendor's GUID for the outcome this criteria references, if any."
          },
          "description": {
            "type": "string"
          },
          "long_description": {
            "type": "string"
          },
          "criterion_use_range": {
            "type": "boolean"
          },
          "ratings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RubricRating"
            }
          },
          "ignore_for_scoring": {
            "type": "boolean"
          }
        },
        "description": ""
      },
      "RubricRating": {
        "type": "object",
        "properties": {
          "points": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "long_description": {
            "type": "string"
          }
        },
        "description": ""
      },
      "Scope": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "description": "The resource the scope is associated with"
          },
          "resource_name": {
            "type": "string",
            "description": "The localized resource name"
          },
          "controller": {
            "type": "string",
            "description": "The controller the scope is associated to"
          },
          "action": {
            "type": "string",
            "description": "The controller action the scope is associated to"
          },
          "verb": {
            "type": "string",
            "description": "The HTTP verb for the scope"
          },
          "scope": {
            "type": "string",
            "description": "The identifier for the scope"
          }
        },
        "description": ""
      },
      "ScoreStatistic": {
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "description": "Min score"
          },
          "max": {
            "type": "integer",
            "description": "Max score"
          },
          "mean": {
            "type": "integer",
            "description": "Mean score"
          },
          "upper_q": {
            "type": "integer",
            "description": "Upper quartile score"
          },
          "median": {
            "type": "integer",
            "description": "Median score"
          },
          "lower_q": {
            "type": "integer",
            "description": "Lower quartile score"
          }
        },
        "description": "Used by Assignment model"
      },
      "SSOSettings": {
        "type": "object",
        "properties": {
          "login_handle_name": {
            "type": "string",
            "description": "The label used for unique login identifiers."
          },
          "change_password_url": {
            "type": "string",
            "description": "The url to redirect users to for password resets. Leave blank for default Canvas behavior"
          },
          "auth_discovery_url": {
            "type": "string",
            "description": "If a discovery url is set, canvas will forward all users to that URL when they need to be authenticated. That page will need to then help the user figure out where they need to go to log in. If no discovery url is configured, the first configuration will be used to attempt to authenticate the user."
          },
          "unknown_user_url": {
            "type": "string",
            "description": "If an unknown user url is set, Canvas will forward to that url when a service authenticates a user, but that user does not exist in Canvas. The default behavior is to present an error."
          }
        },
        "description": "Settings that are applicable across an account's authentication configuration, even if there are multiple individual providers"
      },
      "Term": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "start_at": {
            "$ref": "#/components/schemas/datetime"
          },
          "end_at": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": ""
      },
      "TermsOfService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Terms Of Service id"
          },
          "terms_type": {
            "type": "string",
            "description": "The given type for the Terms of Service",
            "enum": [
              "default",
              "custom",
              "no_terms"
            ]
          },
          "passive": {
            "type": "boolean",
            "description": "Boolean dictating if the user must accept Terms of Service"
          },
          "account_id": {
            "type": "integer",
            "description": "The id of the root account that owns the Terms of Service"
          },
          "content": {
            "type": "string",
            "description": "Content of the Terms of Service"
          },
          "self_registration_type": {
            "type": "string",
            "description": "The type of self registration allowed"
          }
        },
        "description": ""
      },
      "TurnitinSettings": {
        "type": "object",
        "properties": {
          "originality_report_visibility": {
            "type": "string"
          },
          "s_paper_check": {
            "type": "boolean"
          },
          "internet_check": {
            "type": "boolean"
          },
          "journal_check": {
            "type": "boolean"
          },
          "exclude_biblio": {
            "type": "boolean"
          },
          "exclude_quoted": {
            "type": "boolean"
          },
          "exclude_small_matches_type": {
            "type": "string"
          },
          "exclude_small_matches_value": {
            "type": "integer"
          }
        },
        "description": ""
      },
      "UpdatedEventData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "start_at": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/datetime"
            }
          },
          "conclude_at": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/datetime"
            }
          },
          "is_public": {
            "type": "array",
            "items": {
              "type": "boolean"
            }
          }
        },
        "description": "The updated event data object returns all the fields that have changed in the format of the following example.  If a field does not exist it was not changed.  The value is an array that contains the before and after values for the change as in [:old_value, :new_value]."
      },
      "UsageRights": {
        "type": "object",
        "properties": {
          "legal_copyright": {
            "type": "string",
            "description": "Copyright line for the file"
          },
          "use_justification": {
            "type": "string",
            "description": "Justification for using the file in a Canvas course. Valid values are 'own_copyright', 'public_domain', 'used_by_permission', 'fair_use', 'creative_commons'"
          },
          "license": {
            "type": "string",
            "description": "License identifier for the file."
          },
          "license_name": {
            "type": "string",
            "description": "Readable license name"
          },
          "message": {
            "type": "string",
            "description": "Explanation of the action performed"
          },
          "file_ids": {
            "type": "array",
            "description": "List of ids of files that were updated",
            "items": {
              "type": "integer"
            }
          }
        },
        "description": "Describes the copyright and license information for a File"
      },
      "User": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the user.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of the user."
          },
          "sortable_name": {
            "type": "string",
            "description": "The name of the user that is should be used for sorting groups of users, such as in the gradebook."
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the user."
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the user."
          },
          "short_name": {
            "type": "string",
            "description": "A short name the user has selected, for use in conversations or other less formal places through the site."
          },
          "sis_user_id": {
            "type": "string",
            "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information."
          },
          "sis_import_id": {
            "type": "integer",
            "description": "The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.",
            "format": "int64"
          },
          "integration_id": {
            "type": "string",
            "description": "The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information."
          },
          "login_id": {
            "type": "string",
            "description": "The unique login id for the user.  This is what the user uses to log in to Canvas."
          },
          "avatar_url": {
            "type": "string",
            "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar."
          },
          "avatar_state": {
            "type": "string",
            "description": "Optional: If avatars are enabled and caller is admin, this field can be requested and will contain the current state of the user's avatar."
          },
          "enrollments": {
            "type": "array",
            "description": "Optional: This field can be requested with certain API calls, and will return a list of the users active enrollments. See the List enrollments API for more details about the format of these records.",
            "items": {
              "$ref": "#/components/schemas/Enrollment"
            }
          },
          "email": {
            "type": "string",
            "description": "Optional: This field can be requested with certain API calls, and will return the users primary email address."
          },
          "locale": {
            "type": "string",
            "description": "Optional: This field can be requested with certain API calls, and will return the users locale in RFC 5646 format."
          },
          "last_login": {
            "type": "string",
            "description": "Optional: This field is only returned in certain API calls, and will return a timestamp representing the last time the user logged in to canvas.",
            "format": "date-time"
          },
          "time_zone": {
            "type": "string",
            "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone."
          },
          "bio": {
            "type": "string",
            "description": "Optional: The user's bio."
          }
        },
        "description": "A Canvas user, e.g. a student, teacher, administrator, observer, etc."
      },
      "UserDisplay": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the user.",
            "format": "int64"
          },
          "short_name": {
            "type": "string",
            "description": "A short name the user has selected, for use in conversations or other less formal places through the site."
          },
          "avatar_image_url": {
            "type": "string",
            "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar."
          },
          "html_url": {
            "type": "string",
            "description": "URL to access user, either nested to a context or directly."
          }
        },
        "description": "This mini-object is used for secondary user responses, when we just want to provide enough information to display a user."
      }
    }
  }
}