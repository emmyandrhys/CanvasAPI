{
    "apiVersion": "1.0",
    "swaggerVersion": "1.2",
    "basePath": "https://canvas.instructure.com/api",
    "resourcePath": "/account_calendars",
    "produces": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/v1/account_calendars",
            "description": "Returns a paginated list of account calendars available to the current user.\nIncludes visible account calendars where the user has an account association.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List available account calendars",
                    "notes": "Returns a paginated list of account calendars available to the current user.\nIncludes visible account calendars where the user has an account association.",
                    "nickname": "list_available_account_calendars",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "When included, searches available account calendars for the term. Returns matching\nresults. Term must be at least 2 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "{ \"account_calendars\": AccountCalendar, \"total_results\": \"integer\"}"
                    }
                }
            ]
        },
        {
            "path": "/v1/account_calendars/{account_id}",
            "description": "Get details about a specific account calendar.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single account calendar",
                    "notes": "Get details about a specific account calendar.",
                    "nickname": "get_single_account_calendar",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountCalendar"
                }
            ]
        },
        {
            "path": "/v1/account_calendars/{account_id}",
            "description": "Set an account calendar as hidden or visible. Requires the\n`manage_account_calendar_visibility` permission on the account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a calendar's visibility",
                    "notes": "Set an account calendar as hidden or visible. Requires the\n`manage_account_calendar_visibility` permission on the account.",
                    "nickname": "update_calendar_s_visibility",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "visible",
                            "description": "Allow administrators with `manage_account_calendar_events` permission\nto create events on this calendar, and allow users to view this\ncalendar and its events.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountCalendar"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_calendars",
            "description": "Set visibility on many calendars simultaneously. Requires the\n`manage_account_calendar_visibility` permission on the account.\n\nAccepts a JSON array of objects containing 2 keys each: `id`\n(the account's id), and `visible` (a boolean indicating whether\nthe account calendar is visible).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update many calendars' visibility",
                    "notes": "Set visibility on many calendars simultaneously. Requires the\n`manage_account_calendar_visibility` permission on the account.\n\nAccepts a JSON array of objects containing 2 keys each: `id`\n(the account's id), and `visible` (a boolean indicating whether\nthe account calendar is visible).",
                    "nickname": "update_many_calendars_visibility",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountCalendar"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_calendars",
            "description": "Returns a paginated list of account calendars for the provided account and\nits first level of sub-accounts. Includes hidden calendars in the response.\nRequires the `manage_account_calendar_visibility` permission.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all account calendars",
                    "notes": "Returns a paginated list of account calendars for the provided account and\nits first level of sub-accounts. Includes hidden calendars in the response.\nRequires the `manage_account_calendar_visibility` permission.",
                    "nickname": "list_all_account_calendars",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "When included, searches all descendent accounts of provided account for the\nterm. Returns matching results. Term must be at least 2 characters. Can be\ncombined with a filter value.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "When included, only returns calendars that are either visible or hidden. Can\nbe combined with a search term.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "visible",
                                "hidden"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AccountCalendar"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/visible_calendars_count",
            "description": "Returns the number of visible account calendars.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Count of all visible account calendars",
                    "notes": "Returns the number of visible account calendars.",
                    "nickname": "count_of_all_visible_account_calendars",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "{ \"count\": \"integer\" }"
                }
            ]
        },
        {
            "path": "/v1/accounts/search",
            "description": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Search account domains",
                    "notes": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
                    "nickname": "search_account_domains",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "name",
                            "description": "campus name",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "domain",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "latitude",
                            "description": "no description",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "longitude",
                            "description": "no description",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports",
            "description": "Returns a paginated list of reports for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Available Reports",
                    "notes": "Returns a paginated list of reports for the current context.",
                    "nickname": "list_available_reports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "name",
                            "description": "The name of the report.",
                            "deprecated": false
                        },
                        {
                            "name": "parameters",
                            "description": "The parameters will vary for each report",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}",
            "description": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Start a Report",
                    "notes": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
                    "nickname": "start_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters",
                            "description": "The parameters will vary for each report. To fetch a list\nof available parameters for each report, see {api:AccountReportsController#available_reports List Available Reports}.\nA few example parameters have been provided below. Note that the example\nparameters provided below may not be valid for every report.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters[skip_message]",
                            "description": "If true, no message will be sent\nto the user upon completion of the report.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters[course_id]",
                            "description": "The id of the course to report on.\nNote: this parameter has been listed to serve as an example and may not be\nvalid for every report.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters[users]",
                            "description": "If true, user data will be included. If\nfalse, user data will be omitted. Note: this parameter has been listed to\nserve as an example and may not be valid for every report.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Report"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}",
            "description": "Shows all reports that have been run for the account of a specific type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Index of Reports",
                    "notes": "Shows all reports that have been run for the account of a specific type.",
                    "nickname": "index_of_reports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Report"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}/{id}",
            "description": "Returns the status of a report.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Status of a Report",
                    "notes": "Returns the status of a report.",
                    "nickname": "status_of_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Report"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}/{id}",
            "description": "Deletes a generated report instance.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a Report",
                    "notes": "Deletes a generated report instance.",
                    "nickname": "delete_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Report"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications",
            "description": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned, unless\na include_past parameter is passed in as true.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Index of active global notification for the user",
                    "notes": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned, unless\na include_past parameter is passed in as true.",
                    "nickname": "index_of_active_global_notification_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_past",
                            "description": "Include past and dismissed global announcements.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AccountNotification"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications/{id}",
            "description": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a global notification",
                    "notes": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
                    "nickname": "show_global_notification",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountNotification"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications/{id}",
            "description": "If the current user no long wants to see this notification it can be excused with this call",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Close notification for user",
                    "notes": "If the current user no long wants to see this notification it can be excused with this call",
                    "nickname": "close_notification_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountNotification"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications",
            "description": "Create and return a new global notification for an account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a global notification",
                    "notes": "Create and return a new global notification for an account.",
                    "nickname": "create_global_notification",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[subject]",
                            "description": "The subject of the notification.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[message]",
                            "description": "The message body of the notification.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[start_at]",
                            "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[end_at]",
                            "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[icon]",
                            "description": "The icon to display with the notification.\nNote: Defaults to warning.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "warning",
                                "information",
                                "question",
                                "error",
                                "calendar"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification_roles",
                            "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications/{id}",
            "description": "Update global notification for an account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a global notification",
                    "notes": "Update global notification for an account.",
                    "nickname": "update_global_notification",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[subject]",
                            "description": "The subject of the notification.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[message]",
                            "description": "The message body of the notification.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[start_at]",
                            "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[end_at]",
                            "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[icon]",
                            "description": "The icon to display with the notification.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "warning",
                                "information",
                                "question",
                                "error",
                                "calendar"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification_roles",
                            "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts",
            "description": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List accounts",
                    "notes": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
                    "nickname": "list_accounts",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"lti_guid\":: the 'tool_consumer_instance_guid' that will be sent for this account on LTI launches\n\"registration_settings\":: returns info about the privacy policy and terms of use\n\"services\":: returns services and whether they are enabled (requires account management permissions)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "lti_guid",
                                "registration_settings",
                                "services"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/manageable_accounts",
            "description": "A paginated list of accounts where the current user has permission to create\nor manage courses. List will be empty for students and teachers as only admins\ncan view which accounts they are in.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get accounts that admins can manage",
                    "notes": "A paginated list of accounts where the current user has permission to create\nor manage courses. List will be empty for students and teachers as only admins\ncan view which accounts they are in.",
                    "nickname": "get_accounts_that_admins_can_manage",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/course_accounts",
            "description": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List accounts for course admins",
                    "notes": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
                    "nickname": "list_accounts_for_course_admins",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{id}",
            "description": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single account",
                    "notes": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
                    "nickname": "get_single_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/settings",
            "description": "Returns settings for the specified account as a JSON object. The caller must be an Account\nadmin with the manage_account_settings permission.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Settings",
                    "notes": "Returns settings for the specified account as a JSON object. The caller must be an Account\nadmin with the manage_account_settings permission.",
                    "nickname": "settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/permissions",
            "description": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Permissions",
                    "notes": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
                    "nickname": "permissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "permissions",
                            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sub_accounts",
            "description": "List accounts that are sub-accounts of the given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the sub-accounts of an account",
                    "notes": "List accounts that are sub-accounts of the given account.",
                    "nickname": "get_sub_accounts_of_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "recursive",
                            "description": "If true, the entire account tree underneath\nthis account will be returned (though still paginated). If false, only\ndirect sub-accounts of this account will be returned. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/terms_of_service",
            "description": "Returns the terms of service for that account",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the Terms of Service",
                    "notes": "Returns the terms of service for that account",
                    "nickname": "get_terms_of_service",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "TermsOfService"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/help_links",
            "description": "Returns the help links for that account",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get help links",
                    "notes": "Returns the help links for that account",
                    "nickname": "get_help_links",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "HelpLinks"
                }
            ]
        },
        {
            "path": "/v1/manually_created_courses_account",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the manually-created courses sub-account for the domain root account",
                    "notes": "",
                    "nickname": "get_manually_created_courses_sub_account_for_domain_root_account",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses",
            "description": "Retrieve a paginated list of courses in this account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List active courses in an account",
                    "notes": "Retrieve a paginated list of courses in this account.",
                    "nickname": "list_active_courses_in_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "with_enrollments",
                            "description": "If true, include only courses with at least one enrollment.  If false,\ninclude only courses with no enrollments.  If not present, do not filter\non course enrollment status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "If set, only return courses that have at least one user enrolled in\nin the course with one of the specified enrollment types.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "ta",
                                "observer",
                                "designer"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "published",
                            "description": "If true, include only published courses.  If false, exclude published\ncourses.  If not present, do not filter on published status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "completed",
                            "description": "If true, include only completed courses (these may be in state\n'completed', or their enrollment term may have ended).  If false, exclude\ncompleted courses.  If not present, do not filter on completed status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blueprint",
                            "description": "If true, include only blueprint courses. If false, exclude them.\nIf not present, do not filter on this basis.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blueprint_associated",
                            "description": "If true, include only courses that inherit content from a blueprint course.\nIf false, exclude them. If not present, do not filter on this basis.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "by_teachers",
                            "description": "List of User IDs of teachers; if supplied, include only courses taught by\none of the referenced users.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "by_subaccounts",
                            "description": "List of Account IDs; if supplied, include only courses associated with one\nof the referenced subaccounts.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "hide_enrollmentless_courses",
                            "description": "If present, only return courses that have at least one enrollment.\nEquivalent to 'with_enrollments=true'; retained for compatibility.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set, only return courses that are in the given state(s). By default,\nall states but \"deleted\" are returned.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "created",
                                "claimed",
                                "available",
                                "completed",
                                "deleted",
                                "all"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_term_id",
                            "description": "If set, only includes courses from the specified term.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- All explanations can be seen in the {api:CoursesController#index Course API index documentation}\n- \"sections\", \"needs_grading_count\" and \"total_scores\" are not valid options at the account level",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "syllabus_body",
                                "term",
                                "course_progress",
                                "storage_quota_used_mb",
                                "total_students",
                                "teachers",
                                "account_name",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "The column to sort results by.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_name",
                                "sis_course_id",
                                "teacher",
                                "account_name"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The order to sort the given column by.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "search_by",
                            "description": "The filter to search by. \"course\" searches for course names, course codes,\nand SIS IDs. \"teacher\" searches for teacher names",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course",
                                "teacher"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "starts_before",
                            "description": "If set, only return courses that start before the value (inclusive)\nor their enrollment term starts before the value (inclusive)\nor both the course's start_at and the enrollment term's start_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ends_after",
                            "description": "If set, only return courses that end after the value (inclusive)\nor their enrollment term ends after the value (inclusive)\nor both the course's end_at and the enrollment term's end_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "homeroom",
                            "description": "If set, only return homeroom courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{id}",
            "description": "Update an existing account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an account",
                    "notes": "Update an existing account.",
                    "nickname": "update_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[name]",
                            "description": "Updates the account name",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[sis_account_id]",
                            "description": "Updates the account sis_account_id\nMust have manage_sis permission and must not be a root_account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_time_zone]",
                            "description": "The default time zone of the account. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_storage_quota_mb]",
                            "description": "The default course storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_user_storage_quota_mb]",
                            "description": "The default user storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_group_storage_quota_mb]",
                            "description": "The default group storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[course_template_id]",
                            "description": "The ID of a course to be used as a template for all newly created courses.\nEmpty means to inherit the setting from parent account, 0 means to not\nuse a template even if a parent account has one set. The course must be\nmarked as a template.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_past_view][value]",
                            "description": "Restrict students from viewing courses after end date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_past_view][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_view][value]",
                            "description": "Restrict students from viewing courses before start date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_enabled]",
                            "description": "Determines whether this account has Microsoft Teams Sync enabled or not.\n\nNote that if you are altering Microsoft Teams sync settings you must enable\nthe Microsoft Group enrollment syncing feature flag. In addition, if you are enabling\nMicrosoft Teams sync, you must also specify a tenant, login attribute, and a remote attribute.\nSpecifying a suffix to use is optional.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_tenant]",
                            "description": "The tenant this account should use when using Microsoft Teams Sync.\nThis should be an Azure Active Directory domain name.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_login_attribute]",
                            "description": "The attribute this account should use to lookup users when using Microsoft Teams Sync.\nMust be one of \"sub\", \"email\", \"oid\", \"preferred_username\", or \"integration_id\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_login_attribute_suffix]",
                            "description": "A suffix that will be appended to the result of the login attribute when associating\nCanvas users with Microsoft users. Must be under 255 characters and contain no whitespace.\nThis field is optional.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_remote_attribute]",
                            "description": "The Active Directory attribute to use when associating Canvas users with Microsoft users.\nMust be one of \"mail\", \"mailNickname\", or \"userPrincipalName\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_view][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_all_announcements][value]",
                            "description": "Disable comments on announcements",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_all_announcements][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][usage_rights_required][value]",
                            "description": "Copyright and license information must be provided for files before they are published.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][usage_rights_required][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_listing][value]",
                            "description": "Restrict students from viewing future enrollments in course list",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_listing][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][conditional_release][value]",
                            "description": "Enable or disable individual learning paths for students based on assessment",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][conditional_release][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_outcome_proficiency][value]",
                            "description": "[DEPRECATED] Restrict instructors from changing mastery scale",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[lock_outcome_proficiency][locked]",
                            "description": "[DEPRECATED] Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_proficiency_calculation][value]",
                            "description": "[DEPRECATED] Restrict instructors from changing proficiency calculation method",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[lock_proficiency_calculation][locked]",
                            "description": "[DEPRECATED] Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[services]",
                            "description": "Give this a set of keys and boolean values to enable or disable services matching the keys",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/users/{user_id}",
            "description": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a user from the root account",
                    "notes": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
                    "nickname": "delete_user_from_root_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sub_accounts",
            "description": "Add a new sub-account to a given account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new sub-account",
                    "notes": "Add a new sub-account to a given account.",
                    "nickname": "create_new_sub_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[name]",
                            "description": "The name of the new sub-account.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[sis_account_id]",
                            "description": "The account's identifier in the Student Information System.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_storage_quota_mb]",
                            "description": "The default course storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_user_storage_quota_mb]",
                            "description": "The default user storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_group_storage_quota_mb]",
                            "description": "The default group storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sub_accounts/{id}",
            "description": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a sub-account",
                    "notes": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
                    "nickname": "delete_sub_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/lti/accounts/{account_id}",
            "description": "Retrieve information on an individual account, given by local or global ID.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get account",
                    "notes": "Retrieve information on an individual account, given by local or global ID.",
                    "nickname": "get_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/admins",
            "description": "Flag an existing user as an admin within the account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Make an account admin",
                    "notes": "Flag an existing user as an admin within the account.",
                    "nickname": "make_account_admin",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_id",
                            "description": "The id of the user to promote.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "role",
                            "description": "[DEPRECATED] The user's admin relationship with the account will be\ncreated with the given role. Defaults to 'AccountAdmin'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "role_id",
                            "description": "The user's admin relationship with the account will be created with the given role. Defaults to the built-in role for 'AccountAdmin'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "send_confirmation",
                            "description": "Send a notification email to\nthe new admin if true. Default is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Admin"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/admins/{user_id}",
            "description": "Remove the rights associated with an account admin role from a user.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove account admin",
                    "notes": "Remove the rights associated with an account admin role from a user.",
                    "nickname": "remove_account_admin",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "[DEPRECATED] Account role to remove from the user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role_id",
                            "description": "The id of the role representing the user's admin relationship with the account.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Admin"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/admins",
            "description": "A paginated list of the admins in the account",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List account admins",
                    "notes": "A paginated list of the admins in the account",
                    "nickname": "list_account_admins",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "Scope the results to those with user IDs equal to any of the IDs specified here.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "[Integer]"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Admin"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/activity",
            "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level participation data",
                    "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                    "nickname": "get_department_level_participation_data_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/activity",
            "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level participation data",
                    "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                    "nickname": "get_department_level_participation_data_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/activity",
            "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level participation data",
                    "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                    "nickname": "get_department_level_participation_data_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/grades",
            "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level grade data",
                    "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_grade_data_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/grades",
            "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level grade data",
                    "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_grade_data_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/grades",
            "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level grade data",
                    "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_grade_data_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics",
            "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics",
                    "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/statistics",
            "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics",
                    "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/statistics",
            "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics",
                    "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics_by_subaccount",
            "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics, broken down by subaccount",
                    "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_broken_down_by_subaccount_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/statistics_by_subaccount",
            "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics, broken down by subaccount",
                    "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_broken_down_by_subaccount_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/statistics_by_subaccount",
            "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics, broken down by subaccount",
                    "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_broken_down_by_subaccount_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/activity",
            "description": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course-level participation data",
                    "notes": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
                    "nickname": "get_course_level_participation_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/assignments",
            "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course-level assignment data",
                    "notes": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
                    "nickname": "get_course_level_assignment_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "async",
                            "description": "If async is true, then the course_assignments call can happen asynch-\nronously and MAY return a response containing a progress_url key instead\nof an assignments array. If it does, then it is the caller's\nresponsibility to poll the API again to see if the progress is complete.\nIf the data is ready (possibly even on the first async call) then it\nwill be passed back normally, as documented in the example response.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/student_summaries",
            "description": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course-level student summary data",
                    "notes": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
                    "nickname": "get_course_level_student_summary_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort_column",
                            "description": "The order results in which results are returned.  Defaults to \"name\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "name",
                                "name_descending",
                                "score",
                                "score_descending",
                                "participations",
                                "participations_descending",
                                "page_views",
                                "page_views_descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "If set, returns only the specified student.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/users/{student_id}/activity",
            "description": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user-in-a-course-level participation data",
                    "notes": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
                    "nickname": "get_user_in_a_course_level_participation_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "student_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/users/{student_id}/assignments",
            "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user-in-a-course-level assignment data",
                    "notes": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
                    "nickname": "get_user_in_a_course_level_assignment_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "student_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/users/{student_id}/communication",
            "description": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user-in-a-course-level messaging data",
                    "notes": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
                    "nickname": "get_user_in_a_course_level_messaging_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "student_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_feeds",
            "description": "Returns the paginated list of External Feeds this course or group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List external feeds",
                    "notes": "Returns the paginated list of External Feeds this course or group.",
                    "nickname": "list_external_feeds_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ExternalFeed"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/external_feeds",
            "description": "Returns the paginated list of External Feeds this course or group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List external feeds",
                    "notes": "Returns the paginated list of External Feeds this course or group.",
                    "nickname": "list_external_feeds_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ExternalFeed"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_feeds",
            "description": "Create a new external feed for the course or group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an external feed",
                    "notes": "Create a new external feed for the course or group.",
                    "nickname": "create_external_feed_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url to the external rss or atom feed",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "header_match",
                            "description": "If given, only feed entries that contain this string in their title will be imported",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "verbosity",
                            "description": "Defaults to \"full\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "full",
                                "truncate",
                                "link_only"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/external_feeds",
            "description": "Create a new external feed for the course or group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an external feed",
                    "notes": "Create a new external feed for the course or group.",
                    "nickname": "create_external_feed_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url to the external rss or atom feed",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "header_match",
                            "description": "If given, only feed entries that contain this string in their title will be imported",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "verbosity",
                            "description": "Defaults to \"full\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "full",
                                "truncate",
                                "link_only"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_feeds/{external_feed_id}",
            "description": "Deletes the external feed.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an external feed",
                    "notes": "Deletes the external feed.",
                    "nickname": "delete_external_feed_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_feed_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/external_feeds/{external_feed_id}",
            "description": "Deletes the external feed.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an external feed",
                    "notes": "Deletes the external feed.",
                    "nickname": "delete_external_feed_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_feed_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/announcements",
            "description": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List announcements",
                    "notes": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
                    "nickname": "list_announcements",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context_codes to retrieve announcements for (for example, +course_123+). Only courses\nare presently supported. The call will fail unless the caller has View Announcements permission\nin all listed courses.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return announcements posted since the start_date (inclusive).\nDefaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return announcements posted before the end_date (inclusive).\nDefaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nAnnouncements scheduled for future posting will only be returned to course administrators.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "active_only",
                            "description": "Only return active announcements that have been published.\nApplies only to requesting users that have permission to view\nunpublished items.\nDefaults to false for users with access to view unpublished items,\notherwise true and unmodifiable.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "latest_only",
                            "description": "Only return the latest announcement for each associated context.\nThe response will include at most one announcement for each\nspecified context in the context_codes[] parameter.\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Optional list of resources to include with the response. May include\na string of the name of the resource. Possible values are:\n\"sections\", \"sections_user_count\"\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "DiscussionTopic"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/scopes",
            "description": "A list of scopes that can be applied to developer keys and access tokens.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List scopes",
                    "notes": "A list of scopes that can be applied to developer keys and access tokens.",
                    "nickname": "list_scopes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "group_by",
                            "description": "The attribute to group the scopes by. By default no grouping is done.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "resource_name"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Scope"
                    }
                }
            ]
        },
        {
            "path": "/v1/appointment_groups",
            "description": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List appointment groups",
                    "notes": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
                    "nickname": "list_appointment_groups",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "Defaults to \"reservable\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "reservable",
                                "manageable"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "Array of context codes used to limit returned results.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include_past_appointments",
                            "description": "Defaults to false. If true, includes past appointment groups",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"appointments\":: calendar event time slots for this appointment group\n\"child_events\":: reservations of those time slots\n\"participant_count\":: number of reservations\n\"reserved_times\":: the event id, start time and end time of reservations\n                   the current user has made)\n\"all_context_codes\":: all context codes associated with this appointment group",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "appointments",
                                "child_events",
                                "participant_count",
                                "reserved_times",
                                "all_context_codes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups",
            "description": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an appointment group",
                    "notes": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
                    "nickname": "create_appointment_group",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "appointment_group[context_codes]",
                            "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[sub_context_codes]",
                            "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[title]",
                            "description": "Short title for the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[description]",
                            "description": "Longer text description of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_name]",
                            "description": "Location name of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_address]",
                            "description": "Location address.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[publish]",
                            "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participants_per_appointment]",
                            "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[min_appointments_per_participant]",
                            "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[max_appointments_per_participant]",
                            "description": "Maximum number of time slots a user may register for.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[new_appointments][X]",
                            "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participant_visibility]",
                            "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up.  Defaults to\n              \"private\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "private",
                                "protected"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}",
            "description": "Returns information for a single appointment group",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single appointment group",
                    "notes": "Returns information for a single appointment group",
                    "nickname": "get_single_appointment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include. See include[] argument of\n\"List appointment groups\" action.\n\n\"child_events\":: reservations of time slots time slots\n\"appointments\":: will always be returned\n\"all_context_codes\":: all context codes associated with this appointment group",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "child_events",
                                "appointments",
                                "all_context_codes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}",
            "description": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an appointment group",
                    "notes": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
                    "nickname": "update_appointment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[context_codes]",
                            "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[sub_context_codes]",
                            "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[title]",
                            "description": "Short title for the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[description]",
                            "description": "Longer text description of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_name]",
                            "description": "Location name of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_address]",
                            "description": "Location address.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[publish]",
                            "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participants_per_appointment]",
                            "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[min_appointments_per_participant]",
                            "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[max_appointments_per_participant]",
                            "description": "Maximum number of time slots a user may register for.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[new_appointments][X]",
                            "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participant_visibility]",
                            "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up. Defaults to \"private\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "private",
                                "protected"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}",
            "description": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an appointment group",
                    "notes": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
                    "nickname": "delete_appointment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "cancel_reason",
                            "description": "Reason for deleting/canceling the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}/users",
            "description": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List user participants",
                    "notes": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
                    "nickname": "list_user_participants",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "registration_status",
                            "description": "Limits results to the a given participation status, defaults to \"all\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all",
                                "registered",
                                "registered"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}/groups",
            "description": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List student group participants",
                    "notes": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
                    "nickname": "list_student_group_participants",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "registration_status",
                            "description": "Limits results to the a given participation status, defaults to \"all\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all",
                                "registered",
                                "registered"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/next_appointment",
            "description": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get next appointment",
                    "notes": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
                    "nickname": "get_next_appointment",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "appointment_group_ids",
                            "description": "List of ids of appointment groups to search.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/extensions",
            "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend assignments for this course\n* <b>400 Bad Request</b> if any of the extensions are invalid",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Set extensions for student assignment submissions",
                    "notes": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend assignments for this course\n* <b>400 Bad Request</b> if any of the extensions are invalid",
                    "nickname": "set_extensions_for_student_assignment_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_extensions[user_id]",
                            "description": "The ID of the user we want to add assignment extensions for.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_extensions[extra_attempts]",
                            "description": "Number of times the student is allowed to re-take the assignment over the\nlimit.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups",
            "description": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignment groups",
                    "notes": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
                    "nickname": "list_assignment_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group. \"discussion_topic\", \"all_dates\", \"can_edit\",\n\"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included.\n\"score_statistics\" requires that the \"assignments\" and \"submission\" options are included.\nThe \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on.\nIf \"observed_users\" is passed along with \"assignments\" and \"submission\", submissions for observed users will also be included as an array.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assignments",
                                "discussion_topic",
                                "all_dates",
                                "assignment_visibility",
                                "overrides",
                                "submission",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "If \"assignments\" are included, optionally return only assignments having their ID in this array. This argument may also be passed as\na comma separated string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_assignment_submission_types",
                            "description": "If \"assignments\" are included, those with the specified submission types\nwill be excluded from the assignment groups.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "online_quiz",
                                "discussion_topic",
                                "wiki_page",
                                "external_tool"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist.)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "scope_assignments_to_student",
                            "description": "If true, all assignments returned will apply to the current user in the\nspecified grading period. If assignments apply to other students in the\nspecified grading period, but not the current user, they will not be\nreturned. (Requires the grading_period_id argument and grading periods to\nexist. In addition, the current user must be a student.)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentGroup"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
            "description": "Returns the assignment group with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get an Assignment Group",
                    "notes": "Returns the assignment group with the given id.",
                    "nickname": "get_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\"\nare only valid if \"assignments\" is also included. \"score_statistics\" is only valid if \"submission\" and\n\"assignments\" are also included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments\ncourse feature be turned on.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assignments",
                                "discussion_topic",
                                "assignment_visibility",
                                "submission",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist on the account)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups",
            "description": "Create a new assignment group for this course.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an Assignment Group",
                    "notes": "Create a new assignment group for this course.",
                    "nickname": "create_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The assignment group's name",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "The position of this assignment group in relation to the other assignment groups",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_weight",
                            "description": "The percent of the total grade that this assignment group represents",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sis_source_id",
                            "description": "The sis source id of the Assignment Group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "integration_data",
                            "description": "The integration data of the Assignment Group",
                            "type": "Object",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rules",
                            "description": "The grading rules that are applied within this assignment group\nSee the Assignment Group object definition for format",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
            "description": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an Assignment Group",
                    "notes": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
                    "nickname": "edit_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
            "description": "Deletes the assignment group with the given id.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Destroy an Assignment Group",
                    "notes": "Deletes the assignment group with the given id.",
                    "nickname": "destroy_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "move_assignments_to",
                            "description": "The ID of an active Assignment Group to which the assignments that are\ncurrently assigned to the destroyed Assignment Group will be assigned.\nNOTE: If this argument is not provided, any assignments in this Assignment\nGroup will be deleted.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{id}",
            "description": "Delete the given assignment.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an assignment",
                    "notes": "Delete the given assignment.",
                    "nickname": "delete_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments",
            "description": "Returns the paginated list of assignments for the current course or assignment group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignments",
                    "notes": "Returns the paginated list of assignments for the current course or assignment group.",
                    "nickname": "list_assignments_assignments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "assignment_visibility",
                                "all_dates",
                                "overrides",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the assignments to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "needs_grading_count_by_section",
                            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "bucket",
                            "description": "If included, only return certain assignments depending on due date and submission status.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "past",
                                "overdue",
                                "undated",
                                "ungraded",
                                "unsubmitted",
                                "upcoming",
                                "future"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "if set, return only assignments specified",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "order_by",
                            "description": "Determines the order of the assignments. Defaults to \"position\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "position",
                                "name",
                                "due_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "post_to_sis",
                            "description": "Return only assignments that have post_to_sis set or not set.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Assignment"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments",
            "description": "Returns the paginated list of assignments for the current course or assignment group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignments",
                    "notes": "Returns the paginated list of assignments for the current course or assignment group.",
                    "nickname": "list_assignments_assignment_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "assignment_visibility",
                                "all_dates",
                                "overrides",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the assignments to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "needs_grading_count_by_section",
                            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "bucket",
                            "description": "If included, only return certain assignments depending on due date and submission status.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "past",
                                "overdue",
                                "undated",
                                "ungraded",
                                "unsubmitted",
                                "upcoming",
                                "future"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "if set, return only assignments specified",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "order_by",
                            "description": "Determines the order of the assignments. Defaults to \"position\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "position",
                                "name",
                                "due_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "post_to_sis",
                            "description": "Return only assignments that have post_to_sis set or not set.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Assignment"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/courses/{course_id}/assignments",
            "description": "Returns the paginated list of assignments for the specified user if the current user has rights to view.\nSee {api:AssignmentsApiController#index List assignments} for valid arguments.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignments for user",
                    "notes": "Returns the paginated list of assignments for the specified user if the current user has rights to view.\nSee {api:AssignmentsApiController#index List assignments} for valid arguments.",
                    "nickname": "list_assignments_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/duplicate",
            "description": "Duplicate an assignment and return a json based on result_type argument.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Duplicate assignnment",
                    "notes": "Duplicate an assignment and return a json based on result_type argument.",
                    "nickname": "duplicate_assignnment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "result_type",
                            "description": "Optional information:\nWhen the root account has the feature `newquizzes_on_quiz_page` enabled\nand this argument is set to \"Quiz\" the response will be serialized into a\nquiz format({file:doc/api/quizzes.html#Quiz});\nWhen this argument isn't specified the response will be serialized into an\nassignment format;",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Quiz"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{id}",
            "description": "Returns the assignment with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single assignment",
                    "notes": "Returns the assignment with the given id.",
                    "nickname": "get_single_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included.\nFor \"score_statistics\" to be included, the \"submission\" option must also be set.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "assignment_visibility",
                                "overrides",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides to the assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "needs_grading_count_by_section",
                            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "all_dates",
                            "description": "All dates associated with the assignment, if applicable",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments",
            "description": "Create a new assignment for this course. The assignment is created in the\nactive state.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an assignment",
                    "notes": "Create a new assignment for this course. The assignment is created in the\nactive state.",
                    "nickname": "create_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[name]",
                            "description": "The assignment name.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[position]",
                            "description": "The position of this assignment in the group when displaying\nassignment lists.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[submission_types]",
                            "description": "List of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)\n  \"student_annotation\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "online_quiz",
                                "none",
                                "on_paper",
                                "discussion_topic",
                                "external_tool",
                                "online_upload",
                                "online_text_entry",
                                "online_url",
                                "media_recording",
                                "student_annotation"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_extensions]",
                            "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_enabled]",
                            "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[vericite_enabled]",
                            "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_settings]",
                            "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_data]",
                            "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_id]",
                            "description": "Unique ID from third party integrations",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[peer_reviews]",
                            "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[automatic_peer_reviews]",
                            "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[notify_of_update]",
                            "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[group_category_id]",
                            "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grade_group_students_individually]",
                            "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[external_tool_tag_attributes]",
                            "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[points_possible]",
                            "description": "The maximum points possible on the assignment.",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_type]",
                            "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "pass_fail",
                                "percent",
                                "letter_grade",
                                "gpa_scale",
                                "points",
                                "not_graded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[due_at]",
                            "description": "The day/time the assignment is due. Must be between the lock dates if there are lock dates.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[lock_at]",
                            "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[unlock_at]",
                            "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[description]",
                            "description": "The assignment's description, supports HTML.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_group_id]",
                            "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_overrides]",
                            "description": "List of overrides for the assignment.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[only_visible_to_overrides]",
                            "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[published]",
                            "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[omit_from_final_grade]",
                            "description": "Whether this assignment is counted towards a student's final grade.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[quiz_lti]",
                            "description": "Whether this assignment should use the Quizzes 2 LTI tool. Sets the\nsubmission type to 'external_tool' and configures the external tool\nattributes to use the Quizzes 2 LTI tool configured for this course.\nHas no effect if no Quizzes 2 LTI tool is configured.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[moderated_grading]",
                            "description": "Whether this assignment is moderated.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_count]",
                            "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[final_grader_id]",
                            "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_comments_visible_to_graders]",
                            "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_anonymous_to_graders]",
                            "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_names_visible_to_final_grader]",
                            "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[anonymous_grading]",
                            "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_attempts]",
                            "description": "The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[annotatable_attachment_id]",
                            "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{id}",
            "description": "Modify an existing assignment.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an assignment",
                    "notes": "Modify an existing assignment.",
                    "nickname": "edit_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[name]",
                            "description": "The assignment name.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[position]",
                            "description": "The position of this assignment in the group when displaying\nassignment lists.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[submission_types]",
                            "description": "Only applies if the assignment doesn't have student submissions.\n\nList of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)\n  \"student_annotation\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "online_quiz",
                                "none",
                                "on_paper",
                                "discussion_topic",
                                "external_tool",
                                "online_upload",
                                "online_text_entry",
                                "online_url",
                                "media_recording",
                                "student_annotation"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_extensions]",
                            "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_enabled]",
                            "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[vericite_enabled]",
                            "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_settings]",
                            "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[sis_assignment_id]",
                            "description": "The sis id of the Assignment",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_data]",
                            "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_id]",
                            "description": "Unique ID from third party integrations",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[peer_reviews]",
                            "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[automatic_peer_reviews]",
                            "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[notify_of_update]",
                            "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[group_category_id]",
                            "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grade_group_students_individually]",
                            "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[external_tool_tag_attributes]",
                            "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[points_possible]",
                            "description": "The maximum points possible on the assignment.",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_type]",
                            "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "pass_fail",
                                "percent",
                                "letter_grade",
                                "gpa_scale",
                                "points",
                                "not_graded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[due_at]",
                            "description": "The day/time the assignment is due.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[lock_at]",
                            "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[unlock_at]",
                            "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[description]",
                            "description": "The assignment's description, supports HTML.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_group_id]",
                            "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_overrides]",
                            "description": "List of overrides for the assignment.\nIf the +assignment[assignment_overrides]+ key is absent, any existing\noverrides are kept as is. If the +assignment[assignment_overrides]+ key is\npresent, existing overrides are updated or deleted (and new ones created,\nas necessary) to match the provided list.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[only_visible_to_overrides]",
                            "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[published]",
                            "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[omit_from_final_grade]",
                            "description": "Whether this assignment is counted towards a student's final grade.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[moderated_grading]",
                            "description": "Whether this assignment is moderated.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_count]",
                            "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[final_grader_id]",
                            "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_comments_visible_to_graders]",
                            "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_anonymous_to_graders]",
                            "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_names_visible_to_final_grader]",
                            "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[anonymous_grading]",
                            "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_attempts]",
                            "description": "The number of submission attempts allowed for this assignment. Set to -1 or null for\nunlimited attempts.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[annotatable_attachment_id]",
                            "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[force_updated_at]",
                            "description": "If true, updated_at will be set even if no changes were made.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[submission_types]",
                            "description": "Only applies if the assignment doesn't have student submissions.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": true,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/bulk_update",
            "description": "Update due dates and availability dates for multiple assignments in a course.\n\nAccepts a JSON array of objects containing two keys each: +id+, the assignment id,\nand +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override\ndates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments}\nendpoint with +include[]=all_dates+.\n\nThis endpoint cannot create or destroy assignment overrides; any existing assignment overrides\nthat are not referenced in the arguments will be left alone. If an override is given, any dates\nthat are not supplied with it will be defaulted. To clear a date, specify null explicitly.\n\nAll referenced assignments will be validated before any are saved. A list of errors will\nbe returned if any provided dates are invalid, and no changes will be saved.\n\nThe bulk update is performed in a background job, use the {api:ProgressController#show Progress API}\nto check its status.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Bulk update assignment dates",
                    "notes": "Update due dates and availability dates for multiple assignments in a course.\n\nAccepts a JSON array of objects containing two keys each: +id+, the assignment id,\nand +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override\ndates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments}\nendpoint with +include[]=all_dates+.\n\nThis endpoint cannot create or destroy assignment overrides; any existing assignment overrides\nthat are not referenced in the arguments will be left alone. If an override is given, any dates\nthat are not supplied with it will be defaulted. To clear a date, specify null explicitly.\n\nAll referenced assignments will be validated before any are saved. A list of errors will\nbe returned if any provided dates are invalid, and no changes will be saved.\n\nThe bulk update is performed in a background job, use the {api:ProgressController#show Progress API}\nto check its status.",
                    "nickname": "bulk_update_assignment_dates",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
            "description": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignment overrides",
                    "notes": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
                    "nickname": "list_assignment_overrides",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
            "description": "Returns details of the the override with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single assignment override",
                    "notes": "Returns details of the the override with the given id.",
                    "nickname": "get_single_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/assignments/{assignment_id}/override",
            "description": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Redirect to the assignment override for a group",
                    "notes": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
                    "nickname": "redirect_to_assignment_override_for_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{course_section_id}/assignments/{assignment_id}/override",
            "description": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Redirect to the assignment override for a section",
                    "notes": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
                    "nickname": "redirect_to_assignment_override_for_section",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
            "description": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an assignment override",
                    "notes": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
                    "nickname": "create_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[student_ids]",
                            "description": "The IDs of\nthe override's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[title]",
                            "description": "The title of the adhoc\nassignment override. Required if student_ids is present, ignored\notherwise (the title is set to the name of the targetted group or section\ninstead).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[group_id]",
                            "description": "The ID of the\noverride's target group. If present, the following conditions must be met\nfor the override to be successful:\n\n1. the assignment MUST be a group assignment (a group_category_id is assigned to it)\n2. the ID must identify an active group in the group set the assignment is in\n3. the ID must not be targetted by a different override\n\nSee {Appendix: Group assignments} for more info.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[course_section_id]",
                            "description": "The ID\nof the override's target section. If present, must identify an active\nsection of the assignment's course not already targetted by a different\noverride.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[due_at]",
                            "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[unlock_at]",
                            "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[lock_at]",
                            "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
            "description": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an assignment override",
                    "notes": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
                    "nickname": "update_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[student_ids]",
                            "description": "The IDs of the\noverride's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override. Ignored unless the override\nbeing updated is adhoc.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[title]",
                            "description": "The title of an adhoc\nassignment override. Ignored unless the override being updated is adhoc.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[due_at]",
                            "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[unlock_at]",
                            "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[lock_at]",
                            "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
            "description": "Deletes an override and returns its former details.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an assignment override",
                    "notes": "Deletes an override and returns its former details.",
                    "nickname": "delete_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/overrides",
            "description": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Batch retrieve overrides in a course",
                    "notes": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
                    "nickname": "batch_retrieve_overrides_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_overrides[id]",
                            "description": "Ids of overrides to retrieve",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_overrides[assignment_id]",
                            "description": "Ids of assignments for each override",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/overrides",
            "description": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Batch create overrides in a course",
                    "notes": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
                    "nickname": "batch_create_overrides_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_overrides",
                            "description": "Attributes for the new assignment overrides.\nSee {api:AssignmentOverridesController#create Create an assignment override} for available\nattributes",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/overrides",
            "description": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Batch update overrides in a course",
                    "notes": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
                    "nickname": "batch_update_overrides_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_overrides",
                            "description": "Attributes for the updated overrides.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers",
            "description": "Returns a paginated list of authentication providers",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List authentication providers",
                    "notes": "Returns a paginated list of authentication providers",
                    "nickname": "list_authentication_providers",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AuthenticationProvider"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers",
            "description": "Add external authentication provider(s) for the account.\nServices may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook',\n'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect',\n'saml', or 'twitter'. The other recognized parameters depend on this\nauth_type; unrecognized parameters are discarded. Provider specifications\nnot specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any provider. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any provider\nbesides Canvas. You can set 'mfa_required' for any provider.\n\nFor Apple, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The developer’s client identifier, as provided by WWDR. Not available if\n  configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'firstName', 'lastName', and 'sub'.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add authentication provider",
                    "notes": "Add external authentication provider(s) for the account.\nServices may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook',\n'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect',\n'saml', or 'twitter'. The other recognized parameters depend on this\nauth_type; unrecognized parameters are discarded. Provider specifications\nnot specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any provider. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any provider\nbesides Canvas. You can set 'mfa_required' for any provider.\n\nFor Apple, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The developer’s client identifier, as provided by WWDR. Not available if\n  configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'firstName', 'lastName', and 'sub'.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
                    "nickname": "add_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AuthenticationProvider"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
            "description": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update authentication provider",
                    "notes": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
                    "nickname": "update_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AuthenticationProvider"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
            "description": "Get the specified authentication provider",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get authentication provider",
                    "notes": "Get the specified authentication provider",
                    "nickname": "get_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AuthenticationProvider"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
            "description": "Delete the config",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete authentication provider",
                    "notes": "Delete the config",
                    "nickname": "delete_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sso_settings",
            "description": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "show account auth settings",
                    "notes": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
                    "nickname": "show_account_auth_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SSOSettings"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sso_settings",
            "description": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "update account auth settings",
                    "notes": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
                    "nickname": "update_account_auth_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SSOSettings"
                }
            ]
        },
        {
            "path": "/v1/audit/authentication/logins/{login_id}",
            "description": "List authentication events for a given login.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by login.",
                    "notes": "List authentication events for a given login.",
                    "nickname": "query_by_login",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "login_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/audit/authentication/accounts/{account_id}",
            "description": "List authentication events for a given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by account.",
                    "notes": "List authentication events for a given account.",
                    "nickname": "query_by_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/audit/authentication/users/{user_id}",
            "description": "List authentication events for a given user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by user.",
                    "notes": "List authentication events for a given user.",
                    "nickname": "query_by_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates",
            "description": "Returns the list of blackout dates for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blackout dates",
                    "notes": "Returns the list of blackout dates for the current context.",
                    "nickname": "list_blackout_dates_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlackoutDate"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates",
            "description": "Returns the list of blackout dates for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blackout dates",
                    "notes": "Returns the list of blackout dates for the current context.",
                    "nickname": "list_blackout_dates_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlackoutDate"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/{id}",
            "description": "Returns the blackout date with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single blackout date",
                    "notes": "Returns the blackout date with the given id.",
                    "nickname": "get_single_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/{id}",
            "description": "Returns the blackout date with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single blackout date",
                    "notes": "Returns the blackout date with the given id.",
                    "nickname": "get_single_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/new",
            "description": "Initialize an unsaved Blackout Date for the given context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "New Blackout Date",
                    "notes": "Initialize an unsaved Blackout Date for the given context.",
                    "nickname": "new_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/new",
            "description": "Initialize an unsaved Blackout Date for the given context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "New Blackout Date",
                    "notes": "Initialize an unsaved Blackout Date for the given context.",
                    "nickname": "new_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates",
            "description": "Create a blackout date for the given context.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create Blackout Date",
                    "notes": "Create a blackout date for the given context.",
                    "nickname": "create_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates",
            "description": "Create a blackout date for the given context.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create Blackout Date",
                    "notes": "Create a blackout date for the given context.",
                    "nickname": "create_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/{id}",
            "description": "Update a blackout date for the given context.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update Blackout Date",
                    "notes": "Update a blackout date for the given context.",
                    "nickname": "update_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/{id}",
            "description": "Update a blackout date for the given context.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update Blackout Date",
                    "notes": "Update a blackout date for the given context.",
                    "nickname": "update_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/{id}",
            "description": "Delete a blackout date for the given context.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete Blackout Date",
                    "notes": "Delete a blackout date for the given context.",
                    "nickname": "delete_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/{id}",
            "description": "Delete a blackout date for the given context.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete Blackout Date",
                    "notes": "Delete a blackout date for the given context.",
                    "nickname": "delete_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates",
            "description": "Create, update, and delete blackout dates to sync the db with the incoming data.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a list of Blackout Dates",
                    "notes": "Create, update, and delete blackout dates to sync the db with the incoming data.",
                    "nickname": "update_list_of_blackout_dates",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "blackout_dates:",
                            "description": "[blackout_date, ...]\nAn object containing the array of BlackoutDates we want to exist after this operation.\nFor array entries, if it has an id it will be updated, if not created, and if\nan existing BlackoutDate id is missing from the array, it will be deleted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlackoutDate The result (which should match the input with maybe some different IDs)."
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}",
            "description": "Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course).\nHowever, using specific template ids may become necessary in the future",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get blueprint information",
                    "notes": "Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course).\nHowever, using specific template ids may become necessary in the future",
                    "nickname": "get_blueprint_information",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintTemplate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses",
            "description": "Returns a list of courses that are configured to receive updates from this blueprint",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get associated course information",
                    "notes": "Returns a list of courses that are configured to receive updates from this blueprint",
                    "nickname": "get_associated_course_information",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations",
            "description": "Send a list of course ids to add or remove new associations for the template.\nCannot add courses that do not belong to the blueprint course's account. Also cannot add\nother blueprint courses or courses that already have an association with another blueprint course.\n\nAfter associating new courses, {api:MasterCourses::MasterTemplatesController#queue_migration start a sync} to populate their contents from the blueprint.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update associated courses",
                    "notes": "Send a list of course ids to add or remove new associations for the template.\nCannot add courses that do not belong to the blueprint course's account. Also cannot add\nother blueprint courses or courses that already have an association with another blueprint course.\n\nAfter associating new courses, {api:MasterCourses::MasterTemplatesController#queue_migration start a sync} to populate their contents from the blueprint.",
                    "nickname": "update_associated_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_ids_to_add",
                            "description": "Courses to add as associated courses",
                            "type": "Array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_ids_to_remove",
                            "description": "Courses to remove as associated courses",
                            "type": "Array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations",
            "description": "Begins a migration to push recently updated content to all associated courses.\nOnly one migration can be running at a time.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Begin a migration to push to associated courses",
                    "notes": "Begins a migration to push recently updated content to all associated courses.\nOnly one migration can be running at a time.",
                    "nickname": "begin_migration_to_push_to_associated_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment",
                            "description": "An optional comment to be included in the sync history.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "send_notification",
                            "description": "Send a notification to the calling user when the sync completes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "copy_settings",
                            "description": "Whether course settings should be copied over to associated courses.\nDefaults to true for newly associated courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "publish_after_initial_sync",
                            "description": "If set, newly associated courses will be automatically published after the sync completes",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintMigration"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item",
            "description": "If a blueprint course object is restricted, editing will be limited for copies in associated courses.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set or remove restrictions on a blueprint course object",
                    "notes": "If a blueprint course object is restricted, editing will be limited for copies in associated courses.",
                    "nickname": "set_or_remove_restrictions_on_blueprint_course_object",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "content_type",
                            "description": "[String, \"assignment\"|\"attachment\"|\"discussion_topic\"|\"external_tool\"|\"lti-quiz\"|\"quiz\"|\"wiki_page\"]\nThe type of the object.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "content_id",
                            "description": "The ID of the object.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restricted",
                            "description": "Whether to apply restrictions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restrictions",
                            "description": "(Optional) If the object is restricted, this specifies a set of restrictions. If not specified,\nthe course-level restrictions will be used. See {api:CoursesController#update Course API update documentation}",
                            "type": "BlueprintRestriction",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes",
            "description": "Retrieve a list of learning objects that have changed since the last blueprint sync operation.\nIf no syncs have been completed, a ChangeRecord with a change_type of +initial_sync+ is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get unsynced changes",
                    "notes": "Retrieve a list of learning objects that have changed since the last blueprint sync operation.\nIf no syncs have been completed, a ChangeRecord with a change_type of +initial_sync+ is returned.",
                    "nickname": "get_unsynced_changes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ChangeRecord"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations",
            "description": "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blueprint migrations",
                    "notes": "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.",
                    "nickname": "list_blueprint_migrations",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlueprintMigration"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}",
            "description": "Shows the status of a migration. This endpoint can be called on a blueprint course. See also\n{api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a blueprint migration",
                    "notes": "Shows the status of a migration. This endpoint can be called on a blueprint course. See also\n{api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.",
                    "nickname": "show_blueprint_migration",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintMigration"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details",
            "description": "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get migration details",
                    "notes": "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.",
                    "nickname": "get_migration_details",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ChangeRecord"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions",
            "description": "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blueprint subscriptions",
                    "notes": "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)",
                    "nickname": "list_blueprint_subscriptions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlueprintSubscription"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations",
            "description": "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also\n{api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.\n\nUse 'default' as the subscription_id to use the currently active blueprint subscription.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blueprint imports",
                    "notes": "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also\n{api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.\n\nUse 'default' as the subscription_id to use the currently active blueprint subscription.",
                    "nickname": "list_blueprint_imports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "subscription_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlueprintMigration"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}",
            "description": "Shows the status of an import into a course associated with a blueprint. See also\n{api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a blueprint import",
                    "notes": "Shows the status of an import into a course associated with a blueprint. See also\n{api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.",
                    "nickname": "show_blueprint_import",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "subscription_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintMigration"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details",
            "description": "Show the changes that were propagated to a course associated with a blueprint.  See also\n{api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get import details",
                    "notes": "Show the changes that were propagated to a course associated with a blueprint.  See also\n{api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.",
                    "nickname": "get_import_details",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "subscription_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ChangeRecord"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks",
            "description": "Returns the paginated list of bookmarks.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List bookmarks",
                    "notes": "Returns the paginated list of bookmarks.",
                    "nickname": "list_bookmarks",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Bookmark"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks",
            "description": "Creates a bookmark.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create bookmark",
                    "notes": "Creates a bookmark.",
                    "nickname": "create_bookmark",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "The position of the bookmark. Defaults to the bottom.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "data",
                            "description": "The data associated with the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Bookmark"
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks/{id}",
            "description": "Returns the details for a bookmark.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get bookmark",
                    "notes": "Returns the details for a bookmark.",
                    "nickname": "get_bookmark",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Bookmark"
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks/{id}",
            "description": "Updates a bookmark",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update bookmark",
                    "notes": "Updates a bookmark",
                    "nickname": "update_bookmark",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "The position of the bookmark. Defaults to the bottom.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "data",
                            "description": "The data associated with the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks/{id}",
            "description": "Deletes a bookmark",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete bookmark",
                    "notes": "Deletes a bookmark",
                    "nickname": "delete_bookmark",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/brand_variables",
            "description": "Will redirect to a static json file that has all of the brand\nvariables used by this account. Even though this is a redirect,\ndo not store the redirected url since if the account makes any changes\nit will redirect to a new url. Needs no authentication.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the brand config variables that should be used for this domain",
                    "notes": "Will redirect to a static json file that has all of the brand\nvariables used by this account. Even though this is a redirect,\ndo not store the redirected url since if the account makes any changes\nit will redirect to a new url. Needs no authentication.",
                    "nickname": "get_brand_config_variables_that_should_be_used_for_this_domain",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events",
            "description": "Retrieve the paginated list of calendar events or assignments for the current user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List calendar events",
                    "notes": "Retrieve the paginated list of calendar events or assignments for the current user",
                    "nickname": "list_calendar_events",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "Defaults to \"event\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "event",
                                "assignment"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "undated",
                            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "all_events",
                            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "excludes",
                            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "includes",
                            "description": "Array of optional attributes to include. Possible values are \"web_conferenes\" and \"series_natural_language\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "important_dates",
                            "description": "Defaults to false.\nIf true, only events with important dates set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blackout_date",
                            "description": "Defaults to false.\nIf true, only events with blackout date set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/calendar_events",
            "description": "Retrieve the paginated list of calendar events or assignments for the specified user.\nTo view calendar events for a user other than yourself,\nyou must either be an observer of that user or an administrator.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List calendar events for a user",
                    "notes": "Retrieve the paginated list of calendar events or assignments for the specified user.\nTo view calendar events for a user other than yourself,\nyou must either be an observer of that user or an administrator.",
                    "nickname": "list_calendar_events_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "Defaults to \"event\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "event",
                                "assignment"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "undated",
                            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "all_events",
                            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "excludes",
                            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "submission_types",
                            "description": "When type is \"assignment\", specifies the allowable submission types for returned assignments.\nIgnored if type is not \"assignment\" or if exclude_submission_types is provided.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_submission_types",
                            "description": "When type is \"assignment\", specifies the submission types to be excluded from the returned\nassignments. Ignored if type is not \"assignment\".",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "includes",
                            "description": "Array of optional attributes to include. Possible values are \"web_conferenes\" and \"series_natural_language\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "important_dates",
                            "description": "Defaults to false\nIf true, only events with important dates set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blackout_date",
                            "description": "Defaults to false\nIf true, only events with blackout date set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/calendar_events",
            "description": "Create and return a new calendar event",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a calendar event",
                    "notes": "Create and return a new calendar event",
                    "nickname": "create_calendar_event",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "calendar_event[context_code]",
                            "description": "Context code of the course/group/user whose calendar this event should be\nadded to.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[title]",
                            "description": "Short title for the calendar event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[description]",
                            "description": "Longer HTML description of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[start_at]",
                            "description": "Start date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[end_at]",
                            "description": "End date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_name]",
                            "description": "Location name of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_address]",
                            "description": "Location address",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[time_zone_edited]",
                            "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[all_day]",
                            "description": "When true event is considered to span the whole day and times are ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][start_at]",
                            "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][end_at]",
                            "description": "Section-level end time(s) if this is a course event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][context_code]",
                            "description": "Context code(s) corresponding to the section-level start and end time(s).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][count]",
                            "description": "Number of times to copy/duplicate the event.  Count cannot exceed 200.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][interval]",
                            "description": "Defaults to 1 if duplicate `count` is set.  The interval between the duplicated events.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][frequency]",
                            "description": "Defaults to \"weekly\".  The frequency at which to duplicate the event",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "daily",
                                "weekly",
                                "monthly"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][append_iterator]",
                            "description": "Defaults to false.  If set to `true`, an increasing counter number will be appended to the event title\nwhen the event is duplicated.  (e.g. Event 1, Event 2, Event 3, etc)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[rrule]",
                            "description": "If the calendar_series flag is enabled,\nthis parameter replaces the calendar_event's duplicate parameter to\ncreate a series of recurring events.\nIts value is the {https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html iCalendar RRULE}\ndefining how the event repeats, though unending series not supported.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[blackout_date]",
                            "description": "If the blackout_date is true, this event represents a holiday or some\nother special day that does not count in course pacing.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single calendar event or assignment",
                    "notes": "",
                    "nickname": "get_single_calendar_event_or_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CalendarEvent"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}/reservations",
            "description": "Reserves a particular time slot and return the new reservation",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reserve a time slot",
                    "notes": "Reserves a particular time slot and return the new reservation",
                    "nickname": "reserve_time_slot",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "participant_id",
                            "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comments",
                            "description": "Comments to associate with this reservation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "cancel_existing",
                            "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}/reservations/{participant_id}",
            "description": "Reserves a particular time slot and return the new reservation",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reserve a time slot",
                    "notes": "Reserves a particular time slot and return the new reservation",
                    "nickname": "reserve_time_slot_participant_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "participant_id",
                            "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group).",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comments",
                            "description": "Comments to associate with this reservation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "cancel_existing",
                            "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}",
            "description": "Update and return a calendar event",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a calendar event",
                    "notes": "Update and return a calendar event",
                    "nickname": "update_calendar_event",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[context_code]",
                            "description": "Context code of the course/group/user to move this event to.\nScheduler appointments and events with section-specific times cannot be moved between calendars.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[title]",
                            "description": "Short title for the calendar event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[description]",
                            "description": "Longer HTML description of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[start_at]",
                            "description": "Start date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[end_at]",
                            "description": "End date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_name]",
                            "description": "Location name of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_address]",
                            "description": "Location address",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[time_zone_edited]",
                            "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[all_day]",
                            "description": "When true event is considered to span the whole day and times are ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][start_at]",
                            "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][end_at]",
                            "description": "Section-level end time(s) if this is a course event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][context_code]",
                            "description": "Context code(s) corresponding to the section-level start and end time(s).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[rrule]",
                            "description": "Valid if the calendar_series feature is enabled and the event whose\nID is in the URL is part of a series.\nThis defines the shape of the recurring event series after it's updated.\nIts value is the iCalendar RRULE, though unending series not supported.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "which",
                            "description": "Valid if the calendar_series feature is enabled and the event whose\nID is in the URL is part of a series.\nUpdate just the event whose ID is in in the URL, all events\nin the series, or the given event and all those following.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "one",
                                "all",
                                "following"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[blackout_date]",
                            "description": "If the blackout_date is true, this event represents a holiday or some\nother special day that does not count in course pacing.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}",
            "description": "Delete an event from the calendar and return the deleted event",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a calendar event",
                    "notes": "Delete an event from the calendar and return the deleted event",
                    "nickname": "delete_calendar_event",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "cancel_reason",
                            "description": "Reason for deleting/canceling the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "which",
                            "description": "Valid if the calendar_series feature is enabled and the\nevent whose ID is in the URL is part of a series.\nDelete just the event whose ID is in in the URL, all events\nin the series, or the given event and all those following.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "one",
                                "all",
                                "following"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/save_enabled_account_calendars",
            "description": "",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Save enabled account calendars\n\nCreates and updates the enabled_account_calendars and mark_feature_as_seen user preferences\n@argument mark_feature_as_seen [Optional, Boolean]\n  Flag to mark account calendars feature as seen\n@argument enabled_account_calendars[] [Optional, Array]\n  An array of account Ids to remember in the calendars list of the user\n curl 'https://<canvas>/api/v1/calendar_events/save_enabled_account_calendars' \\\n      -X POST \\\n      -F 'mark_feature_as_seen=true' \\\n      -F 'enabled_account_calendars[]=1' \\\n      -F 'enabled_account_calendars[]=2' \\\n      -H \"Authorization: Bearer <token>\"",
                    "notes": "",
                    "nickname": "save_enabled_account_calendars_creates_and_updates_enabled_account_calendars_and_mark_feature_as_seen_user_preferences_argument_mark_feature_as_seen_optional_boolean_flag_to_mark_account_calendars_feature_as_seen_argument_enabled_account_calendars_optional_array_array_of_account_ids_to_remember_in_calendars_list_of_user_curl_https_canvas_api_v_calendar_events_save_enabled_account_calendars_x_post_f_mark_feature_as_seen_true_f_enabled_account_calendars_f_enabled_account_calendars_h_authorization_bearer_token",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/calendar_events/timetable",
            "description": "Creates and updates \"timetable\" events for a course.\nCan automaticaly generate a series of calendar events based on simple schedules\n(e.g. \"Monday and Wednesday at 2:00pm\" )\n\nExisting timetable events for the course and course sections\nwill be updated if they still are part of the timetable.\nOtherwise, they will be deleted.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Set a course timetable",
                    "notes": "Creates and updates \"timetable\" events for a course.\nCan automaticaly generate a series of calendar events based on simple schedules\n(e.g. \"Monday and Wednesday at 2:00pm\" )\n\nExisting timetable events for the course and course sections\nwill be updated if they still are part of the timetable.\nOtherwise, they will be deleted.",
                    "nickname": "set_course_timetable",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id]",
                            "description": "An array of timetable objects for the course section specified by course_section_id.\nIf course_section_id is set to \"all\", events will be created for the entire course.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][weekdays]",
                            "description": "A comma-separated list of abbreviated weekdays\n(Mon-Monday, Tue-Tuesday, Wed-Wednesday, Thu-Thursday, Fri-Friday, Sat-Saturday, Sun-Sunday)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][start_time]",
                            "description": "Time to start each event at (e.g. \"9:00 am\")",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][end_time]",
                            "description": "Time to end each event at (e.g. \"9:00 am\")",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][location_name]",
                            "description": "A location name to set for each event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/calendar_events/timetable",
            "description": "Returns the last timetable set by the\n{api:CalendarEventsApiController#set_course_timetable Set a course timetable} endpoint",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course timetable",
                    "notes": "Returns the last timetable set by the\n{api:CalendarEventsApiController#set_course_timetable Set a course timetable} endpoint",
                    "nickname": "get_course_timetable",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/calendar_events/timetable_events",
            "description": "Creates and updates \"timetable\" events for a course or course section.\nSimilar to {api:CalendarEventsApiController#set_course_timetable setting a course timetable},\nbut instead of generating a list of events based on a timetable schedule,\nthis endpoint expects a complete list of events.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create or update events directly for a course timetable",
                    "notes": "Creates and updates \"timetable\" events for a course or course section.\nSimilar to {api:CalendarEventsApiController#set_course_timetable setting a course timetable},\nbut instead of generating a list of events based on a timetable schedule,\nthis endpoint expects a complete list of events.",
                    "nickname": "create_or_update_events_directly_for_course_timetable",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section_id",
                            "description": "Events will be created for the course section specified by course_section_id.\nIf not present, events will be created for the entire course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "events",
                            "description": "An array of event objects to use.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[start_at]",
                            "description": "Start time for the event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "DateTime"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[end_at]",
                            "description": "End time for the event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "DateTime"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[location_name]",
                            "description": "Location name for the event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[code]",
                            "description": "A unique identifier that can be used to update the event at a later time\nIf one is not specified, an identifier will be generated based on the start and end times",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[title]",
                            "description": "Title for the meeting. If not present, will default to the associated course's name",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/collaborations",
            "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List collaborations",
                    "notes": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
                    "nickname": "list_collaborations_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Collaboration"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/collaborations",
            "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List collaborations",
                    "notes": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
                    "nickname": "list_collaborations_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Collaboration"
                    }
                }
            ]
        },
        {
            "path": "/v1/collaborations/{id}/members",
            "description": "A paginated list of the collaborators of a given collaboration",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List members of a collaboration.",
                    "notes": "A paginated list of the collaborators of a given collaboration",
                    "nickname": "list_members_of_collaboration",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"collaborator_lti_id\": Optional information to include with each member.\n  Represents an identifier to be used for the member in an LTI context.\n- \"avatar_image_url\": Optional information to include with each member.\n  The url for the avatar of a collaborator with type 'user'.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "collaborator_lti_id",
                                "avatar_image_url"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Collaborator"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/potential_collaborators",
            "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List potential members",
                    "notes": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
                    "nickname": "list_potential_members_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/potential_collaborators",
            "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List potential members",
                    "notes": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
                    "nickname": "list_potential_members_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/comm_messages",
            "description": "Retrieve a paginated list of messages sent to a user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List of CommMessages for a user",
                    "notes": "Retrieve a paginated list of messages sent to a user.",
                    "nickname": "list_of_commmessages_for_user",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "The user id for whom you want to retrieve CommMessages",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range you want to retrieve message from.\nUp to a year prior to the current date is available.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range you want to retrieve messages for.\nUp to a year prior to the current date is available.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CommMessage"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels",
            "description": "Returns a paginated list of communication channels for the specified user,\nsorted by position.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List user communication channels",
                    "notes": "Returns a paginated list of communication channels for the specified user,\nsorted by position.",
                    "nickname": "list_user_communication_channels",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CommunicationChannel"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels",
            "description": "Creates a new communication channel for the specified user.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a communication channel",
                    "notes": "Creates a new communication channel for the specified user.",
                    "nickname": "create_communication_channel",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[address]",
                            "description": "An email address or SMS number. Not required for \"push\" type channels.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[type]",
                            "description": "The type of communication channel.\n\nIn order to enable push notification support, the server must be\nproperly configured (via sns.yml) to communicate with Amazon\nSimple Notification Services, and the developer key used to create\nthe access token from this request must have an SNS ARN configured on\nit.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "email",
                                "sms",
                                "push"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[token]",
                            "description": "A registration id, device token, or equivalent token given to an app when\nregistering with a push notification provider. Only valid for \"push\" type channels.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "skip_confirmation",
                            "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CommunicationChannel"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{id}",
            "description": "Delete an existing communication channel.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a communication channel",
                    "notes": "Delete an existing communication channel.",
                    "nickname": "delete_communication_channel_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CommunicationChannel"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{type}/{address}",
            "description": "Delete an existing communication channel.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a communication channel",
                    "notes": "Delete an existing communication channel.",
                    "nickname": "delete_communication_channel_type",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "type",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "address",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CommunicationChannel"
                }
            ]
        },
        {
            "path": "/v1/users/self/communication_channels/push",
            "description": "",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a push notification endpoint",
                    "notes": "",
                    "nickname": "delete_push_notification_endpoint",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "{success: true}"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/conferences",
            "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conferences",
                    "notes": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
                    "nickname": "list_conferences_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conference"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/conferences",
            "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conferences",
                    "notes": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
                    "nickname": "list_conferences_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conference"
                    }
                }
            ]
        },
        {
            "path": "/v1/conferences",
            "description": "Retrieve the paginated list of conferences for all courses and groups\nthe current user belongs to\n\nThis API returns a JSON object containing the list of conferences.\nThe key for the list of conferences is \"conferences\".",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conferences for the current user",
                    "notes": "Retrieve the paginated list of conferences for all courses and groups\nthe current user belongs to\n\nThis API returns a JSON object containing the list of conferences.\nThe key for the list of conferences is \"conferences\".",
                    "nickname": "list_conferences_for_current_user",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set to \"live\", returns only conferences that are live (i.e., have\nstarted and not finished yet). If omitted, returns all conferences for\nthis user's groups and courses.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conference"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_exports",
            "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content exports",
                    "notes": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                    "nickname": "list_content_exports_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentExport"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/content_exports",
            "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content exports",
                    "notes": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                    "nickname": "list_content_exports_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentExport"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_exports",
            "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content exports",
                    "notes": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                    "nickname": "list_content_exports_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentExport"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_exports/{id}",
            "description": "Get information about a single content export.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show content export",
                    "notes": "Get information about a single content export.",
                    "nickname": "show_content_export_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/content_exports/{id}",
            "description": "Get information about a single content export.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show content export",
                    "notes": "Get information about a single content export.",
                    "nickname": "show_content_export_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_exports/{id}",
            "description": "Get information about a single content export.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show content export",
                    "notes": "Get information about a single content export.",
                    "nickname": "show_content_export_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_exports",
            "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Export content",
                    "notes": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                    "nickname": "export_content_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "export_type",
                            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "common_cartridge",
                                "qti",
                                "zip"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "skip_notifications",
                            "description": "Don't send the notifications about the export to the user. Default: false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "select",
                            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "folders",
                                "files",
                                "attachments",
                                "quizzes",
                                "assignments",
                                "announcements",
                                "calendar_events",
                                "discussion_topics",
                                "modules",
                                "module_items",
                                "pages",
                                "rubrics"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/content_exports",
            "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Export content",
                    "notes": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                    "nickname": "export_content_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "export_type",
                            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "common_cartridge",
                                "qti",
                                "zip"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "skip_notifications",
                            "description": "Don't send the notifications about the export to the user. Default: false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "select",
                            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "folders",
                                "files",
                                "attachments",
                                "quizzes",
                                "assignments",
                                "announcements",
                                "calendar_events",
                                "discussion_topics",
                                "modules",
                                "module_items",
                                "pages",
                                "rubrics"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_exports",
            "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Export content",
                    "notes": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                    "nickname": "export_content_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "export_type",
                            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "common_cartridge",
                                "qti",
                                "zip"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "skip_notifications",
                            "description": "Don't send the notifications about the export to the user. Default: false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "select",
                            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "folders",
                                "files",
                                "attachments",
                                "quizzes",
                                "assignments",
                                "announcements",
                                "calendar_events",
                                "discussion_topics",
                                "modules",
                                "module_items",
                                "pages",
                                "rubrics"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/csp_settings",
            "description": "Update multiple modules in an account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get current settings for account or course",
                    "notes": "Update multiple modules in an account.",
                    "nickname": "get_current_settings_for_account_or_course_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "enabled",
                            "description": "Whether CSP is enabled.",
                            "deprecated": false
                        },
                        {
                            "name": "inherited",
                            "description": "Whether the current CSP settings are inherited from a parent account.",
                            "deprecated": false
                        },
                        {
                            "name": "settings_locked",
                            "description": "Whether current CSP settings can be overridden by sub-accounts and courses.",
                            "deprecated": false
                        },
                        {
                            "name": "effective_whitelist",
                            "description": "If enabled, lists the currently allowed domains\n(includes domains automatically allowed through external tools).",
                            "deprecated": false
                        },
                        {
                            "name": "tools_whitelist",
                            "description": "(Account-only) Lists the automatically allowed domains with\ntheir respective external tools",
                            "deprecated": false
                        },
                        {
                            "name": "current_account_whitelist",
                            "description": "(Account-only) Lists the current list of domains\nexplicitly allowed by this account. (Note: this list will not take effect unless\nCSP is explicitly enabled on this account)",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings",
            "description": "Update multiple modules in an account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get current settings for account or course",
                    "notes": "Update multiple modules in an account.",
                    "nickname": "get_current_settings_for_account_or_course_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "enabled",
                            "description": "Whether CSP is enabled.",
                            "deprecated": false
                        },
                        {
                            "name": "inherited",
                            "description": "Whether the current CSP settings are inherited from a parent account.",
                            "deprecated": false
                        },
                        {
                            "name": "settings_locked",
                            "description": "Whether current CSP settings can be overridden by sub-accounts and courses.",
                            "deprecated": false
                        },
                        {
                            "name": "effective_whitelist",
                            "description": "If enabled, lists the currently allowed domains\n(includes domains automatically allowed through external tools).",
                            "deprecated": false
                        },
                        {
                            "name": "tools_whitelist",
                            "description": "(Account-only) Lists the automatically allowed domains with\ntheir respective external tools",
                            "deprecated": false
                        },
                        {
                            "name": "current_account_whitelist",
                            "description": "(Account-only) Lists the current list of domains\nexplicitly allowed by this account. (Note: this list will not take effect unless\nCSP is explicitly enabled on this account)",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/csp_settings",
            "description": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Enable, disable, or clear explicit CSP setting",
                    "notes": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
                    "nickname": "enable_disable_or_clear_explicit_csp_setting_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "status",
                            "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the allowed domains set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "enabled",
                                "disabled",
                                "inherited"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings",
            "description": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Enable, disable, or clear explicit CSP setting",
                    "notes": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
                    "nickname": "enable_disable_or_clear_explicit_csp_setting_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "status",
                            "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the allowed domains set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "enabled",
                                "disabled",
                                "inherited"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/lock",
            "description": "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. \"inherited\" is false).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Lock or unlock current CSP settings for sub-accounts and courses",
                    "notes": "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. \"inherited\" is false).",
                    "nickname": "lock_or_unlock_current_csp_settings_for_sub_accounts_and_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "settings_locked",
                            "description": "Whether sub-accounts and courses will be prevented from overriding settings inherited from this account.",
                            "type": "boolean",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/domains",
            "description": "Adds an allowed domain for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add an allowed domain to account",
                    "notes": "Adds an allowed domain for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
                    "nickname": "add_allowed_domain_to_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "domain",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/domains/batch_create",
            "description": "Adds multiple allowed domains for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add multiple allowed domains to an account",
                    "notes": "Adds multiple allowed domains for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
                    "nickname": "add_multiple_allowed_domains_to_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "domains",
                            "description": "no description",
                            "type": "Array",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_log",
            "description": "Must be called on a root account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve reported CSP Violations for account",
                    "notes": "Must be called on a root account.",
                    "nickname": "retrieve_reported_csp_violations_for_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/domains",
            "description": "Removes an allowed domain from the current account.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove a domain from account",
                    "notes": "Removes an allowed domain from the current account.",
                    "nickname": "remove_domain_from_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "domain",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares",
            "description": "Share content directly between two or more users",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a content share",
                    "notes": "Share content directly between two or more users",
                    "nickname": "create_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "receiver_ids",
                            "description": "IDs of users to share the content with.",
                            "type": "Array",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "content_type",
                            "description": "Type of content you are sharing.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "assignment",
                                "discussion_topic",
                                "page",
                                "quiz",
                                "module",
                                "module_item"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "content_id",
                            "description": "The id of the content that you are sharing",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/sent",
            "description": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content shares",
                    "notes": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
                    "nickname": "list_content_shares_sent",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentShare"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/received",
            "description": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content shares",
                    "notes": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
                    "nickname": "list_content_shares_received",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentShare"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/unread_count",
            "description": "Return the number of content shares a user has received that have not yet been read. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get unread shares count",
                    "notes": "Return the number of content shares a user has received that have not yet been read. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
                    "nickname": "get_unread_shares_count",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "{ \"unread_count\": \"integer\" }"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}",
            "description": "Return information about a single content share. You may use +self+ as the user_id to retrieve your own content share.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get content share",
                    "notes": "Return information about a single content share. You may use +self+ as the user_id to retrieve your own content share.",
                    "nickname": "get_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}",
            "description": "Remove a content share from your list. Use +self+ as the user_id. Note that this endpoint does not delete other users'\ncopies of the content share.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove content share",
                    "notes": "Remove a content share from your list. Use +self+ as the user_id. Note that this endpoint does not delete other users'\ncopies of the content share.",
                    "nickname": "remove_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}/add_users",
            "description": "Send a previously created content share to additional users",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add users to content share",
                    "notes": "Send a previously created content share to additional users",
                    "nickname": "add_users_to_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "receiver_ids",
                            "description": "IDs of users to share the content with.",
                            "type": "Array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}",
            "description": "Mark a content share read or unread",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a content share",
                    "notes": "Mark a content share read or unread",
                    "nickname": "update_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "read_state",
                            "description": "Read state for the content share",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "read",
                                "unread"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/conversations",
            "description": "Returns the paginated list of conversations for the current user, most\nrecent ones first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conversations",
                    "notes": "Returns the paginated list of conversations for the current user, most\nrecent ones first.",
                    "nickname": "list_conversations",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "When set, only return conversations of the specified type. For example,\nset to \"unread\" to return only conversations that haven't been read.\nThe default behavior is to return all non-archived conversations (i.e.\nread and unread).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "When set, only return conversations for the specified courses, groups\nor users. The id should be prefixed with its type, e.g. \"user_123\" or\n\"course_456\". Can be an array (by setting \"filter[]\") or single value\n(by setting \"filter\")",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "filter_mode",
                            "description": "When filter[] contains multiple filters, combine them with this mode,\nfiltering conversations that at have at least all of the contexts (\"and\")\nor at least one of the contexts (\"or\")",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "interleave_submissions",
                            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_all_conversation_ids",
                            "description": "Default is false. If true,\nthe top-level element of the response will be an object rather than\nan array, and will have the keys \"conversations\" which will contain the\npaged conversation data, and \"conversation_ids\" which will contain the\nids of all conversations under this scope/filter in the same order.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "\"participant_avatars\":: Optionally include an \"avatar_url\" key for each user participanting in the conversation",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "participant_avatars"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the conversation.",
                            "deprecated": false
                        },
                        {
                            "name": "subject",
                            "description": "The subject of the conversation.",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current state of the conversation\n(read, unread or archived)",
                            "deprecated": false
                        },
                        {
                            "name": "last_message",
                            "description": "A <=100 character preview from the most\nrecent message",
                            "deprecated": false
                        },
                        {
                            "name": "last_message_at",
                            "description": "The timestamp of the latest message",
                            "deprecated": false
                        },
                        {
                            "name": "message_count",
                            "description": "The number of messages in this conversation",
                            "deprecated": false
                        },
                        {
                            "name": "subscribed",
                            "description": "Indicates whether the user is actively\nsubscribed to the conversation",
                            "deprecated": false
                        },
                        {
                            "name": "private",
                            "description": "Indicates whether this is a private conversation\n(i.e. audience of one)",
                            "deprecated": false
                        },
                        {
                            "name": "starred",
                            "description": "Whether the conversation is starred",
                            "deprecated": false
                        },
                        {
                            "name": "properties",
                            "description": "Additional conversation flags (last_author,\nattachments, media_objects). Each listed property means the flag is\nset to true (i.e. the current user is the most recent author, there\nare attachments, or there are media objects)",
                            "deprecated": false
                        },
                        {
                            "name": "audience",
                            "description": "Array of user ids who are involved in the\nconversation, ordered by participation level, then alphabetical.\nExcludes current user, unless this is a monologue.",
                            "deprecated": false
                        },
                        {
                            "name": "audience_contexts",
                            "description": "Most relevant shared contexts (courses\nand groups) between current user and other participants. If there is\nonly one participant, it will also include that user's enrollment(s)/\nmembership type(s) in each course/group",
                            "deprecated": false
                        },
                        {
                            "name": "avatar_url",
                            "description": "URL to appropriate icon for this conversation\n(custom, individual or group avatar, depending on audience)",
                            "deprecated": false
                        },
                        {
                            "name": "participants",
                            "description": "Array of users (id, name, full_name) participating in\nthe conversation. Includes current user. If `include[]=participant_avatars`\nwas passed as an argument, each user in the array will also have an\n\"avatar_url\" field",
                            "deprecated": false
                        },
                        {
                            "name": "visible",
                            "description": "Boolean, indicates whether the conversation is\nvisible under the current scope and filter. This attribute is always\ntrue in the index API response, and is primarily useful in create/update\nresponses so that you can know if the record should be displayed in\nthe UI. The default scope is assumed, unless a scope or filter is passed\nto the create/update API call.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conversation"
                    }
                }
            ]
        },
        {
            "path": "/v1/conversations",
            "description": "Create a new conversation with one or more recipients. If there is already\nan existing private conversation with the given recipients, it will be\nreused.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a conversation",
                    "notes": "Create a new conversation with one or more recipients. If there is already\nan existing private conversation with the given recipients, it will be\nreused.",
                    "nickname": "create_conversation",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "recipients",
                            "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3. If the course/group\nhas over 100 enrollments, 'bulk_message' and 'group_conversation' must be\nset to true.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "subject",
                            "description": "The subject of the conversation. This is ignored when reusing a\nconversation. Maximum length is 255 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "body",
                            "description": "The message to be sent",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "force_new",
                            "description": "Forces a new message to be created, even if there is an existing private conversation.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_conversation",
                            "description": "Defaults to false.  When false, individual private conversations will be\ncreated with each recipient. If true, this will be a group conversation\n(i.e. all recipients may see all messages and replies). Must be set true if\nthe number of recipients is over the set maximum (default is 100).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment_ids",
                            "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_id",
                            "description": "Media comment id of an audio or video file to be associated with this\nmessage.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_type",
                            "description": "Type of the associated media file",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "user_note",
                            "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mode",
                            "description": "Determines whether the messages will be created/sent synchronously or\nasynchronously. Defaults to sync, and this option is ignored if this is a\ngroup conversation or there is just one recipient (i.e. it must be a bulk\nprivate message). When sent async, the response will be an empty array\n(batch status can be queried via the {api:ConversationsController#batches batches API})",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "sync",
                                "async"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "scope",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "filter",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "filter_mode",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "context_code",
                            "description": "The course or group that is the context for this conversation. Same format\nas courses or groups in the recipients argument.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/batches",
            "description": "Returns any currently running conversation batches for the current user.\nConversation batches are created when a bulk private message is sent\nasynchronously (see the mode argument to the {api:ConversationsController#create create API action}).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get running batches",
                    "notes": "Returns any currently running conversation batches for the current user.\nConversation batches are created when a bulk private message is sent\nasynchronously (see the mode argument to the {api:ConversationsController#create create API action}).",
                    "nickname": "get_running_batches",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}",
            "description": "Returns information for a single conversation for the current user. Response includes all\nfields that are present in the list/index action as well as messages\nand extended participant information.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single conversation",
                    "notes": "Returns information for a single conversation for the current user. Response includes all\nfields that are present in the list/index action as well as messages\nand extended participant information.",
                    "nickname": "get_single_conversation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "interleave_submissions",
                            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "filter_mode",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "auto_mark_as_read",
                            "description": "Default true. If true, unread\nconversations will be automatically marked as read. This will default\nto false in a future API release, so clients should explicitly send\ntrue if that is the desired behavior.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "participants",
                            "description": "Array of relevant users. Includes current\nuser. If there are forwarded messages in this conversation, the authors\nof those messages will also be included, even if they are not\nparticipating in this conversation. Fields include:",
                            "deprecated": false
                        },
                        {
                            "name": "messages",
                            "description": "Array of messages, newest first. Fields include:\nid:: The unique identifier for the message\ncreated_at:: The timestamp of the message\nbody:: The actual message body\nauthor_id:: The id of the user who sent the message (see audience, participants)\ngenerated:: If true, indicates this is a system-generated message (e.g. \"Bob added Alice to the conversation\")\nmedia_comment:: Audio/video comment data for this message (if applicable). Fields include: display_name, content-type, media_id, media_type, url\nforwarded_messages:: If this message contains forwarded messages, they will be included here (same format as this list). Note that those messages may have forwarded messages of their own, etc.\nattachments:: Array of attachments for this message. Fields include: display_name, content-type, filename, url",
                            "deprecated": false
                        },
                        {
                            "name": "submissions",
                            "description": "(Obsolete) Array of assignment submissions having\ncomments relevant to this conversation. Submissions are no longer linked to conversations.\nThis field will always be nil or empty.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}",
            "description": "Updates attributes for a single conversation.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a conversation",
                    "notes": "Updates attributes for a single conversation.",
                    "nickname": "edit_conversation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "conversation[workflow_state]",
                            "description": "Change the state of this conversation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "read",
                                "unread",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "conversation[subscribed]",
                            "description": "Toggle the current user's subscription to the conversation (only valid for\ngroup conversations). If unsubscribed, the user will still have access to\nthe latest messages, but the conversation won't be automatically flagged\nas unread, nor will it jump to the top of the inbox.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "conversation[starred]",
                            "description": "Toggle the starred state of the current user's view of the conversation.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "scope",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "filter",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "filter_mode",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/mark_all_as_read",
            "description": "Mark all conversations as read.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Mark all as read",
                    "notes": "Mark all conversations as read.",
                    "nickname": "mark_all_as_read",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}",
            "description": "Delete this conversation and its messages. Note that this only deletes\nthis user's view of the conversation.\n\nResponse includes same fields as UPDATE action",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a conversation",
                    "notes": "Delete this conversation and its messages. Note that this only deletes\nthis user's view of the conversation.\n\nResponse includes same fields as UPDATE action",
                    "nickname": "delete_conversation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}/add_recipients",
            "description": "Add recipients to an existing group conversation. Response is similar to\nthe GET/show action, except that only includes the\nlatest message (e.g. \"joe was added to the conversation by bob\")",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add recipients",
                    "notes": "Add recipients to an existing group conversation. Response is similar to\nthe GET/show action, except that only includes the\nlatest message (e.g. \"joe was added to the conversation by bob\")",
                    "nickname": "add_recipients",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "recipients",
                            "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}/add_message",
            "description": "Add a message to an existing conversation. Response is similar to the\nGET/show action, except that only includes the\nlatest message (i.e. what we just sent)\n\nAn array of user ids. Defaults to all of the current conversation\nrecipients. To explicitly send a message to no other recipients,\nthis array should consist of the logged-in user id.\n\nAn array of message ids from this conversation to send to recipients\nof the new message. Recipients who already had a copy of included\nmessages will not be affected.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add a message",
                    "notes": "Add a message to an existing conversation. Response is similar to the\nGET/show action, except that only includes the\nlatest message (i.e. what we just sent)\n\nAn array of user ids. Defaults to all of the current conversation\nrecipients. To explicitly send a message to no other recipients,\nthis array should consist of the logged-in user id.\n\nAn array of message ids from this conversation to send to recipients\nof the new message. Recipients who already had a copy of included\nmessages will not be affected.",
                    "nickname": "add_message",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "body",
                            "description": "The message to be sent.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment_ids",
                            "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_id",
                            "description": "Media comment id of an audio of video file to be associated with this\nmessage.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_type",
                            "description": "Type of the associated media file.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "recipients",
                            "description": "no description",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "included_messages",
                            "description": "no description",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "user_note",
                            "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}/remove_messages",
            "description": "Delete messages from this conversation. Note that this only affects this\nuser's view of the conversation. If all messages are deleted, the\nconversation will be as well (equivalent to DELETE)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Delete a message",
                    "notes": "Delete messages from this conversation. Note that this only affects this\nuser's view of the conversation. If all messages are deleted, the\nconversation will be as well (equivalent to DELETE)",
                    "nickname": "delete_message",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "remove",
                            "description": "Array of message ids to be deleted",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations",
            "description": "Perform a change on a set of conversations. Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Batch update conversations",
                    "notes": "Perform a change on a set of conversations. Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
                    "nickname": "batch_update_conversations",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "conversation_ids",
                            "description": "List of conversations to update. Limited to 500 conversations.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "event",
                            "description": "The action to take on each conversation.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "mark_as_read",
                                "mark_as_unread",
                                "star",
                                "unstar",
                                "archive",
                                "destroy"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/conversations/find_recipients",
            "description": "Deprecated, see the {api:SearchController#recipients Find recipients endpoint} in the Search API",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Find recipients",
                    "notes": "Deprecated, see the {api:SearchController#recipients Find recipients endpoint} in the Search API",
                    "nickname": "find_recipients",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/unread_count",
            "description": "Get the number of unread conversations for the current user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Unread count",
                    "notes": "Get the number of unread conversations for the current user",
                    "nickname": "unread_count",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/audit/course/courses/{course_id}",
            "description": "List course change events for a given course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by course.",
                    "notes": "List course change events for a given course.",
                    "nickname": "query_by_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CourseEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/audit/course/accounts/{account_id}",
            "description": "List course change events for a given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by account.",
                    "notes": "List course change events for a given account.",
                    "nickname": "query_by_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CourseEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quiz_extensions",
            "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Set extensions for student quiz submissions",
                    "notes": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
                    "nickname": "set_extensions_for_student_quiz_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_id",
                            "description": "The ID of the user we want to add quiz extensions for.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extra_attempts",
                            "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extra_time",
                            "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "manually_unlocked",
                            "description": "Allow the student to take the quiz even if it's locked for\neveryone else.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extend_from_now",
                            "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extend_from_end_at",
                            "description": "The number of minutes to extend the quiz beyond the quiz's current\nending time. This is mutually exclusive to extend_from_now. This is\nlimited to 1440 minutes (24 hours)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses",
            "description": "Returns the paginated list of active courses for the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List your courses",
                    "notes": "Returns the paginated list of active courses for the current user.",
                    "nickname": "list_your_courses",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "When set, only return courses where the user is enrolled as this type. For\nexample, set to \"teacher\" to return only courses where the user is\nenrolled as a Teacher.  This argument is ignored if enrollment_role is given.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "ta",
                                "observer",
                                "designer"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role",
                            "description": "Deprecated\nWhen set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a base role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role_id",
                            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited_or_pending",
                                "completed"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_blueprint_courses",
                            "description": "When set, only return courses that are not configured as blueprint courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade', as well as (if\n  the user has permission) 'unposted_current_score',\n  'unposted_final_score', 'unposted_current_grade', and\n  'unposted_final_grade' (see Enrollment documentation for more\n  information on these fields). This argument is ignored if the course is\n  configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the total_scores argument is not\n  included. If the course is configured to hide final grades, the\n  following fields are not returned:\n  'totals_for_all_grading_periods_option',\n  'current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade',\n  'current_period_computed_final_grade',\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade'\n- \"grading_periods\": Optional information to include with each Course. When\n  grading_periods is given, a list of the grading periods associated with\n  each course is returned.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional information to include with each Course. Returns course\n  image url if a course image has been set.\n- \"banner_image\": Optional information to include with each Course. Returns course\n  banner image url if the course is a Canvas for Elementary subject and a banner\n  image has been set.\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "grading_periods",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unpublished",
                                "available",
                                "completed",
                                "deleted"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/courses",
            "description": "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List courses for a user",
                    "notes": "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.",
                    "nickname": "list_courses_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade' (see Enrollment\n  documentation for more information on these fields). This argument\n  is ignored if the course is configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the course is configured to hide final\n  grades or if the total_scores argument is not included.\n- \"grading_periods\": Optional information to include with each Course. When\n  grading_periods is given, a list of the grading periods associated with\n  each course is returned.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional information to include with each Course. Returns course\n  image url if a course image has been set.\n- \"banner_image\": Optional information to include with each Course. Returns course\n  banner image url if the course is a Canvas for Elementary subject and a banner\n  image has been set.\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "grading_periods",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unpublished",
                                "available",
                                "completed",
                                "deleted"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited_or_pending",
                                "completed"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "homeroom",
                            "description": "If set, only return homeroom courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/users/{user_id}/progress",
            "description": "Return progress information for the user and course\n\nYou can supply +self+ as the user_id to query your own progress in a course. To query another user's progress,\nyou must be a teacher in the course, an administrator, or a linked observer of the user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user progress",
                    "notes": "Return progress information for the user and course\n\nYou can supply +self+ as the user_id to query your own progress in a course. To query another user's progress,\nyou must be a teacher in the course, an administrator, or a linked observer of the user.",
                    "nickname": "get_user_progress",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CourseProgress"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses",
            "description": "Create a new course",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new course",
                    "notes": "Create a new course",
                    "nickname": "create_new_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[name]",
                            "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_code]",
                            "description": "The course code for the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[start_at]",
                            "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[end_at]",
                            "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[license]",
                            "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public]",
                            "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public_to_auth_users]",
                            "description": "Set to true if course is public only to authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus]",
                            "description": "Set to true to make the course syllabus public.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus_to_auth]",
                            "description": "Set to true to make the course syllabus public for authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_description]",
                            "description": "A publicly visible description of the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_wiki_edits]",
                            "description": "If true, students will be able to modify the course wiki.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_wiki_comments]",
                            "description": "If true, course members will be able to comment on wiki pages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_forum_attachments]",
                            "description": "If true, students can attach files to forum posts.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[open_enrollment]",
                            "description": "Set to true if the course is open enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[self_enrollment]",
                            "description": "Set to true if the course is self enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[restrict_enrollments_to_course_dates]",
                            "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse. This value must be set to true\nin order to specify a course start date and/or end date.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[term_id]",
                            "description": "The unique ID of the term to create to course in.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[sis_course_id]",
                            "description": "The unique SIS identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[integration_id]",
                            "description": "The unique Integration identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[hide_final_grades]",
                            "description": "If this option is set to true, the totals in student grades summary will\nbe hidden.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[apply_assignment_group_weights]",
                            "description": "Set to true to weight final grade based on assignment groups percentages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[time_zone]",
                            "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "offer",
                            "description": "If this option is set to true, the course will be available to students\nimmediately.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enroll_me",
                            "description": "Set to true to enroll the current user as the teacher.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[default_view]",
                            "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "feed",
                                "wiki",
                                "modules",
                                "syllabus",
                                "assignments"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course[syllabus_body]",
                            "description": "The syllabus body for the course",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grade_passback_setting]",
                            "description": "Optional. The grade_passback_setting for the course. Only 'nightly_sync', 'disabled', and '' are allowed",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_format]",
                            "description": "Optional. Specifies the format of the course. (Should be 'on_campus', 'online', or 'blended')",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enable_sis_reactivation",
                            "description": "When true, will first try to re-activate a deleted course with matching sis_course_id if possible.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/files",
            "description": "Upload a file to the course.\n\nThis API endpoint is the first step in uploading a file to a course.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course can upload files\nto the course. By default, this is Teachers, TAs and Designers.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to the course.\n\nThis API endpoint is the first step in uploading a file to a course.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course can upload files\nto the course. By default, this is Teachers, TAs and Designers.",
                    "nickname": "upload_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/students",
            "description": "Returns the paginated list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List students",
                    "notes": "Returns the paginated list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
                    "nickname": "list_students",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/users",
            "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List users in course",
                    "notes": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
                    "nickname": "list_users_in_course_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name or full ID of the users to match and return in the results list.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "When set, sort the results of the search based on the given field.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "username",
                                "last_login",
                                "email",
                                "sis_id"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "student_view",
                                "ta",
                                "observer",
                                "designer"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role",
                            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role_id",
                            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.\n- \"uuid\": Optionally include the users uuid",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "enrollments",
                                "locked",
                                "avatar_url",
                                "test_student",
                                "bio",
                                "custom_links",
                                "current_grading_period_scores",
                                "uuid"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_ids",
                            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "rejected",
                                "completed",
                                "inactive"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/search_users",
            "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List users in course",
                    "notes": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
                    "nickname": "list_users_in_course_search_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name or full ID of the users to match and return in the results list.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "When set, sort the results of the search based on the given field.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "username",
                                "last_login",
                                "email",
                                "sis_id"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "student_view",
                                "ta",
                                "observer",
                                "designer"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role",
                            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role_id",
                            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.\n- \"uuid\": Optionally include the users uuid",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "enrollments",
                                "locked",
                                "avatar_url",
                                "test_student",
                                "bio",
                                "custom_links",
                                "current_grading_period_scores",
                                "uuid"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_ids",
                            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "rejected",
                                "completed",
                                "inactive"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/recent_students",
            "description": "Returns the paginated list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List recently logged in students",
                    "notes": "Returns the paginated list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
                    "nickname": "list_recently_logged_in_students",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/users/{id}",
            "description": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get single user",
                    "notes": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
                    "nickname": "get_single_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_share_users",
            "description": "Returns a paginated list of users you can share content with.  Requires the content share\nfeature and the user must have the manage content permission for the course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Search for content share users",
                    "notes": "Returns a paginated list of users you can share content with.  Requires the content share\nfeature and the user must have the manage content permission for the course.",
                    "nickname": "search_for_content_share_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "Term used to find users.  Will search available share users with the search term in their name.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/preview_html",
            "description": "Preview html content processed for this course",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Preview processed html",
                    "notes": "Preview html content processed for this course",
                    "nickname": "preview_processed_html",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "html",
                            "description": "The html content to process",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/activity_stream",
            "description": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Course activity stream",
                    "notes": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
                    "nickname": "course_activity_stream",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/activity_stream/summary",
            "description": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Course activity stream summary",
                    "notes": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
                    "nickname": "course_activity_stream_summary",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/todo",
            "description": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Course TODO items",
                    "notes": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
                    "nickname": "course_todo_items",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}",
            "description": "Delete or conclude an existing course",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete/Conclude a course",
                    "notes": "Delete or conclude an existing course",
                    "nickname": "delete_conclude_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "event",
                            "description": "The action to take on the course.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "delete",
                                "conclude"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/settings",
            "description": "Returns some of a course's settings.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course settings",
                    "notes": "Returns some of a course's settings.",
                    "nickname": "get_course_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/settings",
            "description": "Can update the following course settings:",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update course settings",
                    "notes": "Can update the following course settings:",
                    "nickname": "update_course_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_discussion_topics",
                            "description": "Let students create discussion topics",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_forum_attachments",
                            "description": "Let students attach files to discussions",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_discussion_editing",
                            "description": "Let students edit or delete their own discussion replies",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_organized_groups",
                            "description": "Let students organize their own groups",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_discussion_reporting",
                            "description": "Let students report offensive discussion content",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_anonymous_discussion_topics",
                            "description": "Let students create anonymous discussion topics",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "filter_speed_grader_by_student_group",
                            "description": "Filter SpeedGrader to only the selected student group",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hide_final_grades",
                            "description": "Hide totals in student grades summary",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hide_distribution_graphs",
                            "description": "Hide grade distribution graphs from students",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hide_sections_on_course_users_page",
                            "description": "Disallow students from viewing students in sections they do not belong to",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_all_announcements",
                            "description": "Disable comments on announcements",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights_required",
                            "description": "Copyright and license information must be provided for files before they are published.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restrict_student_past_view",
                            "description": "Restrict students from viewing courses after end date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restrict_student_future_view",
                            "description": "Restrict students from viewing courses before start date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "show_announcements_on_home_page",
                            "description": "Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit).\nCanvas for Elementary subjects ignore this setting.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "home_page_announcement_limit",
                            "description": "Limit the number of announcements on the home page if enabled via show_announcements_on_home_page",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "syllabus_course_summary",
                            "description": "Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "default_due_time",
                            "description": "Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface\nwhen setting a due date for an assignment. It does not change when any existing assignment is due. It should be\ngiven in 24-hour HH:MM:SS format. The default is \"23:59:59\". Use \"inherit\" to inherit the account setting.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "conditional_release",
                            "description": "Enable or disable individual learning paths for students based on assessment",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/student_view_student",
            "description": "Returns information for a test student in this course. Creates a test\nstudent if one does not already exist for the course. The caller must have\npermission to access the course's student view.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Return test student for course",
                    "notes": "Returns information for a test student in this course. Creates a test\nstudent if one does not already exist for the course. The caller must have\npermission to access the course's student view.",
                    "nickname": "return_test_student_for_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}",
            "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single course",
                    "notes": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
                    "nickname": "get_single_course_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": Include observed users in the enrollments\n- \"course_image\": Include course image url if a course image has been set\n- \"banner_image\": Include course banner image url if the course is a Canvas for\n  Elementary subject and a banner image has been set\n- \"concluded\": Optional information to include with Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "all_courses",
                                "permissions",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "teacher_limit",
                            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses/{id}",
            "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single course",
                    "notes": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
                    "nickname": "get_single_course_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": Include observed users in the enrollments\n- \"course_image\": Include course image url if a course image has been set\n- \"banner_image\": Include course banner image url if the course is a Canvas for\n  Elementary subject and a banner image has been set\n- \"concluded\": Optional information to include with Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "all_courses",
                                "permissions",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "teacher_limit",
                            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}",
            "description": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).\n\nIf a user has content management rights, but not full course editing rights, the only attribute\neditable through this endpoint will be \"syllabus_body\"",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a course",
                    "notes": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).\n\nIf a user has content management rights, but not full course editing rights, the only attribute\neditable through this endpoint will be \"syllabus_body\"",
                    "nickname": "update_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[account_id]",
                            "description": "The unique ID of the account to move the course to.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[name]",
                            "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_code]",
                            "description": "The course code for the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[start_at]",
                            "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true,\nor the course is already published.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[end_at]",
                            "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[license]",
                            "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public]",
                            "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public_to_auth_users]",
                            "description": "Set to true if course is public only to authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus]",
                            "description": "Set to true to make the course syllabus public.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus_to_auth]",
                            "description": "Set to true to make the course syllabus to public for authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_description]",
                            "description": "A publicly visible description of the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_wiki_edits]",
                            "description": "If true, students will be able to modify the course wiki.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_wiki_comments]",
                            "description": "If true, course members will be able to comment on wiki pages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_forum_attachments]",
                            "description": "If true, students can attach files to forum posts.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[open_enrollment]",
                            "description": "Set to true if the course is open enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[self_enrollment]",
                            "description": "Set to true if the course is self enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[restrict_enrollments_to_course_dates]",
                            "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse. Setting this value to false will\nremove the course end date (if it exists), as well as the course start date\n(if the course is unpublished).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[term_id]",
                            "description": "The unique ID of the term to create to course in.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[sis_course_id]",
                            "description": "The unique SIS identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[integration_id]",
                            "description": "The unique Integration identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[hide_final_grades]",
                            "description": "If this option is set to true, the totals in student grades summary will\nbe hidden.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[time_zone]",
                            "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[apply_assignment_group_weights]",
                            "description": "Set to true to weight final grade based on assignment groups percentages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[storage_quota_mb]",
                            "description": "Set the storage quota for the course, in megabytes. The caller must have\nthe \"Manage storage quotas\" account permission.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "offer",
                            "description": "If this option is set to true, the course will be available to students\nimmediately.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[event]",
                            "description": "The action to take on each course.\n* 'claim' makes a course no longer visible to students. This action is also called \"unpublish\" on the web site.\n  A course cannot be unpublished if students have received graded submissions.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. This action requires account administrative rights.\n  (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course\n  will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "claim",
                                "offer",
                                "conclude",
                                "delete",
                                "undelete"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course[default_view]",
                            "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'wiki' Wiki Front Page\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "feed",
                                "wiki",
                                "modules",
                                "syllabus",
                                "assignments"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course[syllabus_body]",
                            "description": "The syllabus body for the course",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[syllabus_course_summary]",
                            "description": "Optional. Indicates whether the Course Summary (consisting of the course's assignments and calendar events) is displayed on the syllabus page. Defaults to +true+.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grade_passback_setting]",
                            "description": "Optional. The grade_passback_setting for the course. Only 'nightly_sync' and '' are allowed",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_format]",
                            "description": "Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[image_id]",
                            "description": "This is a file ID corresponding to an image file in the course that will\nbe used as the course image.\nThis will clear the course's image_url setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[image_url]",
                            "description": "This is a URL to an image to be used as the course image.\nThis will clear the course's image_id setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[remove_image]",
                            "description": "If this option is set to true, the course image url and course image\nID are both set to nil",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[remove_banner_image]",
                            "description": "If this option is set to true, the course banner image url and course\nbanner image ID are both set to nil",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[blueprint]",
                            "description": "Sets the course as a blueprint course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[blueprint_restrictions]",
                            "description": "Sets a default set to apply to blueprint course objects when restricted,\nunless _use_blueprint_restrictions_by_object_type_ is enabled.\nSee the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation",
                            "type": "BlueprintRestriction",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[use_blueprint_restrictions_by_object_type]",
                            "description": "When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of\nthe _blueprint_restrictions_by_object_type_ parameter",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[blueprint_restrictions_by_object_type]",
                            "description": "Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction}\nto apply to blueprint course objects of the matching type when restricted.\nThe possible object types are \"assignment\", \"attachment\", \"discussion_topic\", \"quiz\" and \"wiki_page\".\nExample usage:\n  course[blueprint_restrictions_by_object_type][assignment][content]=1",
                            "type": "multiple BlueprintRestrictions",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[homeroom_course]",
                            "description": "Sets the course as a homeroom course. The setting takes effect only when the course is associated\nwith a Canvas for Elementary-enabled account.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[sync_enrollments_from_homeroom]",
                            "description": "Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the\ncourse is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[homeroom_course_id]",
                            "description": "Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the\ncourse is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[template]",
                            "description": "Enable or disable the course as a template that can be selected by an account",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_color]",
                            "description": "Sets a color in hex code format to be associated with the course. The setting takes effect only when the course\nis associated with a Canvas for Elementary-enabled account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[friendly_name]",
                            "description": "Set a friendly name for the course. If this is provided and the course is associated with a Canvas for\nElementary account, it will be shown instead of the course name. This setting takes priority over\ncourse nicknames defined by individual users.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[enable_course_paces]",
                            "description": "Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is\nenabled for the sub-account. Otherwise, Course Pacing are always disabled.\n  Note: Course Pacing is in active development.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[conditional_release]",
                            "description": "Enable or disable individual learning paths for students based on assessment",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses",
            "description": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update courses",
                    "notes": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
                    "nickname": "update_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_ids",
                            "description": "List of ids of courses to update. At most 500 courses may be updated in one call.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "event",
                            "description": "The action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n  rather than delete a course if there is any possibility the course will be used again.) The recovered course\n  will be unpublished. Deleted enrollments will not be recovered.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "offer",
                                "conclude",
                                "delete",
                                "undelete"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/reset_content",
            "description": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reset a course",
                    "notes": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
                    "nickname": "reset_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/effective_due_dates",
            "description": "For each assignment in the course, returns each assigned student's ID\nand their corresponding due date along with some grading period data.\nReturns a collection with keys representing assignment IDs and values as a\ncollection containing keys representing student IDs and values representing\nthe student's effective due_at, the grading_period_id of which the due_at falls\nin, and whether or not the grading period is closed (in_closed_grading_period)\n\nThe list of assignment IDs for which effective student due dates are\nrequested. If not provided, all assignments in the course will be used.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get effective due dates",
                    "notes": "For each assignment in the course, returns each assigned student's ID\nand their corresponding due date along with some grading period data.\nReturns a collection with keys representing assignment IDs and values as a\ncollection containing keys representing student IDs and values representing\nthe student's effective due_at, the grading_period_id of which the due_at falls\nin, and whether or not the grading period is closed (in_closed_grading_period)\n\nThe list of assignment IDs for which effective student due dates are\nrequested. If not provided, all assignments in the course will be used.",
                    "nickname": "get_effective_due_dates",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "no description",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/permissions",
            "description": "Returns permission information for the calling user in the given course.\nSee also the {api:AccountsController#permissions Account} and\n{api:GroupsController#permissions Group} counterparts.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Permissions",
                    "notes": "Returns permission information for the calling user in the given course.\nSee also the {api:AccountsController#permissions Account} and\n{api:GroupsController#permissions Group} counterparts.",
                    "nickname": "permissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "permissions",
                            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/bulk_user_progress",
            "description": "Returns progress information for all users enrolled in the given course.\n\nYou must be a user who has permission to view all grades in the course (such as a teacher or administrator).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get bulk user progress",
                    "notes": "Returns progress information for all users enrolled in the given course.\n\nYou must be a user who has permission to view all grades in the course (such as a teacher or administrator).",
                    "nickname": "get_bulk_user_progress",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}/dismiss_migration_limitation_message",
            "description": "Remove alert about the limitations of quiz migrations that is displayed\nto a user in a course\n\nyou must be logged in to use this endpoint",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Remove quiz migration alert",
                    "notes": "Remove alert about the limitations of quiz migrations that is displayed\nto a user in a course\n\nyou must be logged in to use this endpoint",
                    "nickname": "remove_quiz_migration_alert",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/course_copy/{id}",
            "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course copy status",
                    "notes": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
                    "nickname": "get_course_copy_status",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the course copy.",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The time that the copy was initiated.",
                            "deprecated": false
                        },
                        {
                            "name": "progress",
                            "description": "The progress of the copy as an integer. It is null before the copying starts, and 100 when finished.",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current status of the course copy. Possible values: \"created\", \"started\", \"completed\", \"failed\"",
                            "deprecated": false
                        },
                        {
                            "name": "status_url",
                            "description": "The url for the course copy status API endpoint.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/course_copy",
            "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Copy course content",
                    "notes": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
                    "nickname": "copy_course_content",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "source_course",
                            "description": "ID or SIS-ID of the course to copy the content from",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "except",
                            "description": "A list of the course content types to exclude, all areas not listed will\nbe copied.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_settings",
                                "assignments",
                                "external_tools",
                                "files",
                                "topics",
                                "calendar_events",
                                "quizzes",
                                "wiki_pages",
                                "modules",
                                "outcomes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "only",
                            "description": "A list of the course content types to copy, all areas not listed will not\nbe copied.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_settings",
                                "assignments",
                                "external_tools",
                                "files",
                                "topics",
                                "calendar_events",
                                "quizzes",
                                "wiki_pages",
                                "modules",
                                "outcomes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns",
            "description": "A paginated list of all custom gradebook columns for a course",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List custom gradebook columns",
                    "notes": "A paginated list of all custom gradebook columns for a course",
                    "nickname": "list_custom_gradebook_columns",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_hidden",
                            "description": "Include hidden parameters (defaults to false)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CustomColumn"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns",
            "description": "Create a custom gradebook column",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a custom gradebook column",
                    "notes": "Create a custom gradebook column",
                    "nickname": "create_custom_gradebook_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[title]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[position]",
                            "description": "The position of the column relative to other custom columns",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[hidden]",
                            "description": "Hidden columns are not displayed in the gradebook",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[teacher_notes]",
                            "description": "Set this if the column is created by a teacher.  The gradebook only\nsupports one teacher_notes column.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[read_only]",
                            "description": "Set this to prevent the column from being editable in the gradebook ui",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CustomColumn"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}",
            "description": "Accepts the same parameters as custom gradebook column creation",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a custom gradebook column",
                    "notes": "Accepts the same parameters as custom gradebook column creation",
                    "nickname": "update_custom_gradebook_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CustomColumn"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}",
            "description": "Permanently deletes a custom column and its associated data",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a custom gradebook column",
                    "notes": "Permanently deletes a custom column and its associated data",
                    "nickname": "delete_custom_gradebook_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CustomColumn"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/reorder",
            "description": "Puts the given columns in the specified order\n\n<b>200 OK</b> is returned if successful",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reorder custom columns",
                    "notes": "Puts the given columns in the specified order\n\n<b>200 OK</b> is returned if successful",
                    "nickname": "reorder_custom_columns",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "order",
                            "description": "no description",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data",
            "description": "This does not list entries for students without associated data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List entries for a column",
                    "notes": "This does not list entries for students without associated data.",
                    "nickname": "list_entries_for_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_hidden",
                            "description": "If true, hidden columns will be included in the\nresult. If false or absent, only visible columns\nwill be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ColumnDatum"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}",
            "description": "Set the content of a custom column",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update column data",
                    "notes": "Set the content of a custom column",
                    "nickname": "update_column_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column_data[content]",
                            "description": "Column content.  Setting this to blank will delete the datum object.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ColumnDatum"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_column_data",
            "description": "Set the content of custom columns\n\n{\n  \"column_data\": [\n    {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content\": example_content\n      },\n      {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content: example_content\n    }\n  ]\n}",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Bulk update column data",
                    "notes": "Set the content of custom columns\n\n{\n  \"column_data\": [\n    {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content\": example_content\n      },\n      {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content: example_content\n    }\n  ]\n}",
                    "nickname": "bulk_update_column_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column_data",
                            "description": "Column content. Setting this to an empty string will delete the data object.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        }
    ],
    "models": {
        "Account": {
            "id": "Account",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the Account object",
                    "example": 2,
                    "type": "integer"
                },
                "name": {
                    "description": "The display name of the account",
                    "example": "Canvas Account",
                    "type": "string"
                },
                "uuid": {
                    "description": "The UUID of the account",
                    "example": "WvAHhY5FINzq5IyRIJybGeiXyFkG3SqHUPb7jZY5",
                    "type": "string"
                },
                "parent_account_id": {
                    "description": "The account's parent ID, or null if this is the root account",
                    "example": 1,
                    "type": "integer"
                },
                "root_account_id": {
                    "description": "The ID of the root account, or null if this is the root account",
                    "example": 1,
                    "type": "integer"
                },
                "default_storage_quota_mb": {
                    "description": "The storage quota for the account in megabytes, if not otherwise specified",
                    "example": 500,
                    "type": "integer"
                },
                "default_user_storage_quota_mb": {
                    "description": "The storage quota for a user in the account in megabytes, if not otherwise specified",
                    "example": 50,
                    "type": "integer"
                },
                "default_group_storage_quota_mb": {
                    "description": "The storage quota for a group in the account in megabytes, if not otherwise specified",
                    "example": 50,
                    "type": "integer"
                },
                "default_time_zone": {
                    "description": "The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                    "example": "America/Denver",
                    "type": "string"
                },
                "sis_account_id": {
                    "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.",
                    "example": "123xyz",
                    "type": "string"
                },
                "integration_id": {
                    "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.",
                    "example": "123xyz",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.",
                    "example": "12",
                    "type": "integer"
                },
                "lti_guid": {
                    "description": "The account's identifier that is sent as context_id in LTI launches.",
                    "example": "123xyz",
                    "type": "string"
                },
                "workflow_state": {
                    "description": "The state of the account. Can be 'active' or 'deleted'.",
                    "example": "active",
                    "type": "string"
                }
            }
        },
        "AccountCalendar": {
            "id": "AccountCalendar",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the account associated with this calendar",
                    "example": 204,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the account associated with this calendar",
                    "example": "Department of Chemistry",
                    "type": "string"
                },
                "parent_account_id": {
                    "description": "the account's parent ID, or null if this is the root account",
                    "example": 1,
                    "type": "integer"
                },
                "root_account_id": {
                    "description": "the ID of the root account, or null if this is the root account",
                    "example": 1,
                    "type": "integer"
                },
                "visible": {
                    "description": "whether this calendar is visible to users",
                    "example": true,
                    "type": "boolean"
                },
                "sub_account_count": {
                    "description": "number of this account's direct sub-accounts",
                    "example": 0,
                    "type": "integer"
                },
                "asset_string": {
                    "description": "Asset string of the account",
                    "example": "account_4",
                    "type": "string"
                },
                "type": {
                    "description": "Object type",
                    "example": "account",
                    "type": "string"
                },
                "calendar_event_url": {
                    "description": "url to get full detailed events",
                    "example": "/accounts/2/calendar_events/%7B%7B%20id%20%7D%7D",
                    "type": "string"
                },
                "can_create_calendar_events": {
                    "description": "whether the user can create calendar events",
                    "example": true,
                    "type": "boolean"
                },
                "create_calendar_event_url": {
                    "description": "API path to create events for the account",
                    "example": "/accounts/2/calendar_events",
                    "type": "string"
                },
                "new_calendar_event_url": {
                    "description": "url to open the more options event editor",
                    "example": "/accounts/6/calendar_events/new",
                    "type": "string"
                }
            }
        },
        "AccountNotification": {
            "id": "AccountNotification",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "subject": {
                    "description": "The subject of the notifications",
                    "example": "Attention Students",
                    "type": "string"
                },
                "message": {
                    "description": "The message to be sent in the notification.",
                    "example": "This is a test of the notification system.",
                    "type": "string"
                },
                "start_at": {
                    "description": "When to send out the notification.",
                    "example": "2013-08-28T23:59:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "When to expire the notification.",
                    "example": "2013-08-29T23:59:00-06:00",
                    "type": "datetime"
                },
                "icon": {
                    "description": "The icon to display with the message.  Defaults to warning.",
                    "example": "information",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "warning",
                            "information",
                            "question",
                            "error",
                            "calendar"
                        ]
                    }
                },
                "roles": {
                    "description": "(Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles",
                    "example": [
                        "StudentEnrollment"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role_ids": {
                    "description": "The roles to send the notification to.  If roles is not passed it defaults to all roles",
                    "example": [
                        1
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "Admin": {
            "id": "Admin",
            "description": "",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the account role/user assignment.",
                    "example": 1023,
                    "type": "integer"
                },
                "role": {
                    "description": "The account role assigned. This can be 'AccountAdmin' or a user-defined role created by the Roles API.",
                    "example": "AccountAdmin",
                    "type": "string"
                },
                "user": {
                    "description": "The user the role is assigned to. See the Users API for details.",
                    "$ref": "User"
                },
                "workflow_state": {
                    "description": "The status of the account role/user assignment.",
                    "type": "string",
                    "example": "deleted"
                }
            }
        },
        "AnonymousUserDisplay": {
            "id": "AnonymousUserDisplay",
            "description": "This mini-object is returned in place of UserDisplay when returning student data for anonymous assignments, and includes an anonymous ID to identify a user within the scope of a single assignment.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "anonymous_id": {
                    "description": "A unique short ID identifying this user within the scope of a particular assignment.",
                    "example": "xn29Q",
                    "type": "string"
                },
                "avatar_image_url": {
                    "description": "A URL to retrieve a generic avatar.",
                    "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                    "type": "string"
                },
                "display_name": {
                    "description": "The anonymized display name for the student.",
                    "example": "Student 2",
                    "type": "string"
                }
            }
        },
        "Answer": {
            "id": "Answer",
            "description": "",
            "required": [
                "answer_text",
                "answer_weight"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the answer.  Do not supply if this answer is part of a new question",
                    "example": 6656,
                    "type": "integer",
                    "format": "int64"
                },
                "answer_text": {
                    "description": "The text of the answer.",
                    "example": "Constantinople",
                    "type": "string"
                },
                "answer_weight": {
                    "description": "An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be 100.",
                    "example": 100,
                    "type": "integer",
                    "format": "int64"
                },
                "answer_comments": {
                    "description": "Specific contextual comments for a particular answer.",
                    "example": "Remember to check your spelling prior to submitting this answer.",
                    "type": "string"
                },
                "text_after_answers": {
                    "description": "Used in missing word questions.  The text to follow the missing word",
                    "example": " is the capital of Utah.",
                    "type": "string"
                },
                "answer_match_left": {
                    "description": "Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.",
                    "example": "Salt Lake City",
                    "type": "string"
                },
                "answer_match_right": {
                    "description": "Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..",
                    "example": "Utah",
                    "type": "string"
                },
                "matching_answer_incorrect_matches": {
                    "description": "Used in matching questions. A list of distractors, delimited by new lines (\n) that will be seeded with all the answer_match_right values.",
                    "example": "Nevada\nCalifornia\nWashington",
                    "type": "string"
                },
                "numerical_answer_type": {
                    "description": "Used in numerical questions.  Values can be 'exact_answer', 'range_answer', or 'precision_answer'.",
                    "example": "exact_answer",
                    "type": "string"
                },
                "exact": {
                    "description": "Used in numerical questions of type 'exact_answer'.  The value the answer should equal.",
                    "example": 42,
                    "type": "integer",
                    "format": "int64"
                },
                "margin": {
                    "description": "Used in numerical questions of type 'exact_answer'. The margin of error allowed for the student's answer.",
                    "example": 4,
                    "type": "integer",
                    "format": "int64"
                },
                "approximate": {
                    "description": "Used in numerical questions of type 'precision_answer'.  The value the answer should equal.",
                    "example": 1234600000,
                    "type": "number",
                    "format": "float64"
                },
                "precision": {
                    "description": "Used in numerical questions of type 'precision_answer'. The numerical precision that will be used when comparing the student's answer.",
                    "example": 4,
                    "type": "integer",
                    "format": "int64"
                },
                "start": {
                    "description": "Used in numerical questions of type 'range_answer'. The start of the allowed range (inclusive).",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "end": {
                    "description": "Used in numerical questions of type 'range_answer'. The end of the allowed range (inclusive).",
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                },
                "blank_id": {
                    "description": "Used in fill in multiple blank and multiple dropdowns questions.",
                    "example": 1170,
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Appointment": {
            "id": "Appointment",
            "description": "Date and time for an appointment",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The appointment identifier.",
                    "example": 987,
                    "type": "integer"
                },
                "start_at": {
                    "description": "Start time for the appointment",
                    "example": "2012-07-20T15:00:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "End time for the appointment",
                    "example": "2012-07-20T15:00:00-06:00",
                    "type": "datetime"
                }
            }
        },
        "AppointmentGroup": {
            "id": "AppointmentGroup",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the appointment group",
                    "example": 543,
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the appointment group",
                    "example": "Final Presentation",
                    "type": "string"
                },
                "start_at": {
                    "description": "The start of the first time slot in the appointment group",
                    "example": "2012-07-20T15:00:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "The end of the last time slot in the appointment group",
                    "example": "2012-07-20T17:00:00-06:00",
                    "type": "datetime"
                },
                "description": {
                    "description": "The text description of the appointment group",
                    "example": "Es muy importante",
                    "type": "string"
                },
                "location_name": {
                    "description": "The location name of the appointment group",
                    "example": "El Tigre Chino's office",
                    "type": "string"
                },
                "location_address": {
                    "description": "The address of the appointment group's location",
                    "example": "Room 234",
                    "type": "string"
                },
                "participant_count": {
                    "description": "The number of participant who have reserved slots (see include[] argument)",
                    "example": 2,
                    "type": "integer"
                },
                "reserved_times": {
                    "description": "The start and end times of slots reserved by the current user as well as the id of the calendar event for the reservation (see include[] argument)",
                    "example": [
                        {
                            "id": 987,
                            "start_at": "2012-07-20T15:00:00-06:00",
                            "end_at": "2012-07-20T15:00:00-06:00"
                        }
                    ],
                    "type": "array",
                    "items": {
                        "$ref": "Appointment"
                    }
                },
                "context_codes": {
                    "description": "The context codes (i.e. courses) this appointment group belongs to. Only people in these courses will be eligible to sign up.",
                    "example": [
                        "course_123"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sub_context_codes": {
                    "description": "The sub-context codes (i.e. course sections and group categories) this appointment group is restricted to",
                    "example": [
                        "course_section_234"
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "workflow_state": {
                    "description": "Current state of the appointment group ('pending', 'active' or 'deleted'). 'pending' indicates that it has not been published yet and is invisible to participants.",
                    "example": "active",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "pending",
                            "active",
                            "deleted"
                        ]
                    }
                },
                "requiring_action": {
                    "description": "Boolean indicating whether the current user needs to sign up for this appointment group (i.e. it's reservable and the min_appointments_per_participant limit has not been met by this user).",
                    "example": true,
                    "type": "boolean"
                },
                "appointments_count": {
                    "description": "Number of time slots in this appointment group",
                    "example": 2,
                    "type": "integer"
                },
                "appointments": {
                    "description": "Calendar Events representing the time slots (see include[] argument) Refer to the Calendar Events API for more information",
                    "example": [],
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                },
                "new_appointments": {
                    "description": "Newly created time slots (same format as appointments above). Only returned in Create/Update responses where new time slots have been added",
                    "example": [],
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                },
                "max_appointments_per_participant": {
                    "description": "Maximum number of time slots a user may register for, or null if no limit",
                    "example": 1,
                    "type": "integer"
                },
                "min_appointments_per_participant": {
                    "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots",
                    "example": 1,
                    "type": "integer"
                },
                "participants_per_appointment": {
                    "description": "Maximum number of participants that may register for each time slot, or null if no limit",
                    "example": 1,
                    "type": "integer"
                },
                "participant_visibility": {
                    "description": "'private' means participants cannot see who has signed up for a particular time slot, 'protected' means that they can",
                    "example": "private",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "private",
                            "protected"
                        ]
                    }
                },
                "participant_type": {
                    "description": "Indicates how participants sign up for the appointment group, either as individuals ('User') or in student groups ('Group'). Related to sub_context_codes (i.e. 'Group' signups always have a single group category)",
                    "example": "User",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "User",
                            "Group"
                        ]
                    }
                },
                "url": {
                    "description": "URL for this appointment group (to update, delete, etc.)",
                    "example": "https://example.com/api/v1/appointment_groups/543",
                    "type": "string"
                },
                "html_url": {
                    "description": "URL for a user to view this appointment group",
                    "example": "http://example.com/appointment_groups/1",
                    "type": "string"
                },
                "created_at": {
                    "description": "When the appointment group was created",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "When the appointment group was last updated",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                }
            }
        },
        "Assessment": {
            "id": "Assessment",
            "description": "A simple assessment that collects pass/fail results for a student",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "type": "string",
                    "example": "42",
                    "description": "A unique identifier for this live assessment"
                },
                "key": {
                    "type": "string",
                    "example": "2014-05-27,outcome_52",
                    "description": "A client specified unique identifier for the assessment"
                },
                "title": {
                    "type": "string",
                    "example": "May 27th Reading Assessment",
                    "description": "A human readable title for the assessment"
                }
            }
        },
        "Assignment": {
            "id": "Assignment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the assignment",
                    "example": 4,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the assignment",
                    "example": "some assignment",
                    "type": "string"
                },
                "description": {
                    "description": "the assignment description, in an HTML fragment",
                    "example": "<p>Do the following:</p>...",
                    "type": "string"
                },
                "created_at": {
                    "description": "The time at which this assignment was originally created",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The time at which this assignment was last modified in any way",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "due_at": {
                    "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "has_overrides": {
                    "description": "whether this assignment has overrides",
                    "example": true,
                    "type": "boolean"
                },
                "all_dates": {
                    "description": "(Optional) all dates associated with the assignment, if applicable",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentDate"
                    }
                },
                "course_id": {
                    "description": "the ID of the course the assignment belongs to",
                    "example": 123,
                    "type": "integer"
                },
                "html_url": {
                    "description": "the URL to the assignment's web page",
                    "example": "https://...",
                    "type": "string"
                },
                "submissions_download_url": {
                    "description": "the URL to download all submissions as a zip",
                    "example": "https://example.com/courses/:course_id/assignments/:id/submissions?zip=1",
                    "type": "string"
                },
                "assignment_group_id": {
                    "description": "the ID of the assignment's group",
                    "example": 2,
                    "type": "integer"
                },
                "due_date_required": {
                    "description": "Boolean flag indicating whether the assignment requires a due date based on the account level setting",
                    "example": true,
                    "type": "boolean"
                },
                "allowed_extensions": {
                    "description": "Allowed file extensions, which take effect if submission_types includes 'online_upload'.",
                    "example": [
                        "docx",
                        "ppt"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_name_length": {
                    "description": "An integer indicating the maximum length an assignment's name may be",
                    "example": 15,
                    "type": "integer"
                },
                "turnitin_enabled": {
                    "description": "Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available",
                    "example": true,
                    "type": "boolean"
                },
                "vericite_enabled": {
                    "description": "Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available",
                    "example": true,
                    "type": "boolean"
                },
                "turnitin_settings": {
                    "description": "Settings to pass along to turnitin to control what kinds of matches should be considered. originality_report_visibility can be 'immediate', 'after_grading', 'after_due_date', or 'never' exclude_small_matches_type can be null, 'percent', 'words' exclude_small_matches_value: - if type is null, this will be null also - if type is 'percent', this will be a number between 0 and 100 representing match size to exclude as a percentage of the document size. - if type is 'words', this will be number > 0 representing how many words a match must contain for it to be considered NOTE: This flag will not appear unless your account has the Turnitin plugin available",
                    "$ref": "TurnitinSettings"
                },
                "grade_group_students_individually": {
                    "description": "If this is a group assignment, boolean flag indicating whether or not students will be graded individually.",
                    "example": false,
                    "type": "boolean"
                },
                "external_tool_tag_attributes": {
                    "description": "(Optional) assignment's settings for external tools if submission_types include 'external_tool'. Only url and new_tab are included (new_tab defaults to false).  Use the 'External Tools' API if you need more information about an external tool.",
                    "$ref": "ExternalToolTagAttributes"
                },
                "peer_reviews": {
                    "description": "Boolean indicating if peer reviews are required for this assignment",
                    "example": false,
                    "type": "boolean"
                },
                "automatic_peer_reviews": {
                    "description": "Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.",
                    "example": false,
                    "type": "boolean"
                },
                "peer_review_count": {
                    "description": "Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
                    "example": 0,
                    "type": "integer"
                },
                "peer_reviews_assign_at": {
                    "description": "String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "intra_group_peer_reviews": {
                    "description": "Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work",
                    "example": "false",
                    "type": "boolean"
                },
                "group_category_id": {
                    "description": "The ID of the assignment’s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.",
                    "example": 1,
                    "type": "integer"
                },
                "needs_grading_count": {
                    "description": "if the requesting user has grading rights, the number of submissions that need grading.",
                    "example": 17,
                    "type": "integer"
                },
                "needs_grading_count_by_section": {
                    "description": "if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)",
                    "example": [
                        {
                            "section_id": "123456",
                            "needs_grading_count": 5
                        },
                        {
                            "section_id": "654321",
                            "needs_grading_count": 0
                        }
                    ],
                    "type": "array",
                    "items": {
                        "$ref": "NeedsGradingCount"
                    }
                },
                "position": {
                    "description": "the sorting order of the assignment in the group",
                    "example": 1,
                    "type": "integer"
                },
                "post_to_sis": {
                    "example": true,
                    "type": "boolean",
                    "description": "(optional, present if Sync Grades to SIS feature is enabled)"
                },
                "integration_id": {
                    "example": "12341234",
                    "type": "string",
                    "description": "(optional, Third Party unique identifier for Assignment)"
                },
                "integration_data": {
                    "example": {
                        "5678": "0954"
                    },
                    "type": "object",
                    "description": "(optional, Third Party integration data for assignment)"
                },
                "points_possible": {
                    "description": "the maximum points possible for the assignment",
                    "example": 12,
                    "type": "number"
                },
                "submission_types": {
                    "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'",
                    "example": [
                        "online_text_entry"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "allowableValues": {
                        "values": [
                            "discussion_topic",
                            "online_quiz",
                            "on_paper",
                            "not_graded",
                            "none",
                            "external_tool",
                            "online_text_entry",
                            "online_url",
                            "online_upload",
                            "media_recording",
                            "student_annotation"
                        ]
                    }
                },
                "has_submitted_submissions": {
                    "description": "If true, the assignment has been submitted to by at least one student",
                    "example": true,
                    "type": "boolean"
                },
                "grading_type": {
                    "description": "The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'",
                    "example": "points",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "pass_fail",
                            "percent",
                            "letter_grade",
                            "gpa_scale",
                            "points"
                        ]
                    }
                },
                "grading_standard_id": {
                    "description": "The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.",
                    "type": "integer"
                },
                "published": {
                    "description": "Whether the assignment is published",
                    "example": true,
                    "type": "boolean"
                },
                "unpublishable": {
                    "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.",
                    "example": false,
                    "type": "boolean"
                },
                "only_visible_to_overrides": {
                    "description": "Whether the assignment is only visible to overrides.",
                    "example": false,
                    "type": "boolean"
                },
                "locked_for_user": {
                    "description": "Whether or not this is locked for the user.",
                    "example": false,
                    "type": "boolean"
                },
                "lock_info": {
                    "description": "(Optional) Information for the user about the lock. Present when locked_for_user is true.",
                    "$ref": "LockInfo"
                },
                "lock_explanation": {
                    "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                    "example": "This assignment is locked until September 1 at 12:00am",
                    "type": "string"
                },
                "quiz_id": {
                    "description": "(Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])",
                    "example": 620,
                    "type": "integer"
                },
                "anonymous_submissions": {
                    "description": "(Optional) whether anonymous submissions are accepted (applies only to quiz assignments)",
                    "example": false,
                    "type": "boolean"
                },
                "discussion_topic": {
                    "description": "(Optional) the DiscussionTopic associated with the assignment, if applicable",
                    "$ref": "DiscussionTopic"
                },
                "freeze_on_copy": {
                    "description": "(Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                    "example": false,
                    "type": "boolean"
                },
                "frozen": {
                    "description": "(Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                    "example": false,
                    "type": "boolean"
                },
                "frozen_attributes": {
                    "description": "(Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                    "example": [
                        "title"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "submission": {
                    "description": "(Optional) If 'submission' is included in the 'include' parameter, includes a Submission object that represents the current user's (user who is requesting information from the api) current submission for the assignment. See the Submissions API for an example response. If the user does not have a submission, this key will be absent.",
                    "$ref": "Submission"
                },
                "use_rubric_for_grading": {
                    "description": "(Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.",
                    "example": true,
                    "type": "boolean"
                },
                "rubric_settings": {
                    "description": "(Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric.",
                    "example": "{\"points_possible\"=>12}",
                    "type": "string"
                },
                "rubric": {
                    "description": "(Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.",
                    "type": "array",
                    "items": {
                        "$ref": "RubricCriteria"
                    }
                },
                "assignment_visibility": {
                    "description": "(Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.",
                    "example": [
                        137,
                        381,
                        572
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "overrides": {
                    "description": "(Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                },
                "omit_from_final_grade": {
                    "description": "(Optional) If true, the assignment will be omitted from the student's final grade",
                    "example": true,
                    "type": "boolean"
                },
                "moderated_grading": {
                    "description": "Boolean indicating if the assignment is moderated.",
                    "example": true,
                    "type": "boolean"
                },
                "grader_count": {
                    "description": "The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.",
                    "example": 3,
                    "type": "integer"
                },
                "final_grader_id": {
                    "description": "The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.",
                    "example": 3,
                    "type": "integer"
                },
                "grader_comments_visible_to_graders": {
                    "description": "Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.",
                    "example": true,
                    "type": "boolean"
                },
                "graders_anonymous_to_graders": {
                    "description": "Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments with grader_comments_visible_to_graders set to true.",
                    "example": true,
                    "type": "boolean"
                },
                "grader_names_visible_to_final_grader": {
                    "description": "Boolean indicating if provisional grader identities are visible to the final grader. Only relevant for moderated assignments.",
                    "example": true,
                    "type": "boolean"
                },
                "anonymous_grading": {
                    "description": "Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.",
                    "example": true,
                    "type": "boolean"
                },
                "allowed_attempts": {
                    "description": "The number of submission attempts a student can make for this assignment. -1 is considered unlimited.",
                    "example": 2,
                    "type": "integer"
                },
                "post_manually": {
                    "description": "Whether the assignment has manual posting enabled. Only relevant for courses using New Gradebook.",
                    "example": true,
                    "type": "boolean"
                },
                "score_statistics": {
                    "description": "(Optional) If 'score_statistics' and 'submission' are included in the 'include' parameter and statistics are available, includes the min, max, and mode for this assignment",
                    "$ref": "ScoreStatistic"
                },
                "can_submit": {
                    "description": "(Optional) If retrieving a single assignment and 'can_submit' is included in the 'include' parameter, flags whether user has the right to submit the assignment (i.e. checks enrollment dates, submission types, locked status, attempts remaining, etc...). Including 'can submit' automatically includes 'submission' in the include parameter. Not available when observed_users are included.",
                    "example": true,
                    "type": "boolean"
                },
                "annotatable_attachment_id": {
                    "description": "The id of the attachment to be annotated by students. Relevant only if submission_types includes 'student_annotation'.",
                    "type": "integer"
                },
                "anonymize_students": {
                    "description": "(Optional) Boolean indicating whether student names are anonymized",
                    "example": false,
                    "type": "boolean"
                },
                "require_lockdown_browser": {
                    "description": "(Optional) Boolean indicating whether the Respondus LockDown Browser® is required for this assignment.",
                    "example": false,
                    "type": "boolean"
                },
                "important_dates": {
                    "description": "(Optional) Boolean indicating whether this assignment has important dates.",
                    "example": false,
                    "type": "boolean"
                },
                "muted": {
                    "description": "(Optional, Deprecated) Boolean indicating whether notifications are muted for this assignment.",
                    "example": false,
                    "type": "boolean"
                }
            }
        },
        "AssignmentDate": {
            "id": "AssignmentDate",
            "description": "Object representing a due date for an assignment or quiz. If the due date came from an assignment override, it will have an 'id' field.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": 1,
                    "type": "integer",
                    "description": "(Optional, missing if 'base' is present) id of the assignment override this date represents"
                },
                "base": {
                    "example": true,
                    "type": "boolean",
                    "description": "(Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date"
                },
                "title": {
                    "example": "Summer Session",
                    "type": "string"
                },
                "due_at": {
                    "description": "The due date for the assignment. Must be between the unlock date and the lock date if there are lock dates",
                    "example": "2013-08-28T23:59:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "The unlock date for the assignment. Must be before the due date if there is a due date.",
                    "example": "2013-08-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "The lock date for the assignment. Must be after the due date if there is a due date.",
                    "example": "2013-08-31T23:59:00-06:00",
                    "type": "datetime"
                }
            }
        },
        "AssignmentEvent": {
            "id": "AssignmentEvent",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "A synthetic ID for the assignment",
                    "example": "assignment_987",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the assignment",
                    "example": "Essay",
                    "type": "string"
                },
                "start_at": {
                    "description": "The due_at timestamp of the assignment",
                    "example": "2012-07-19T23:59:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "The due_at timestamp of the assignment",
                    "example": "2012-07-19T23:59:00-06:00",
                    "type": "datetime"
                },
                "description": {
                    "description": "The HTML description of the assignment",
                    "example": "<b>Write an essay. Whatever you want.</b>",
                    "type": "string"
                },
                "context_code": {
                    "description": "the context code of the (course) calendar this assignment belongs to",
                    "example": "course_123",
                    "type": "string"
                },
                "workflow_state": {
                    "description": "Current state of the assignment ('published' or 'deleted')",
                    "example": "published",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "published",
                            "deleted"
                        ]
                    }
                },
                "url": {
                    "description": "URL for this assignment (note that updating/deleting should be done via the Assignments API)",
                    "example": "https://example.com/api/v1/calendar_events/assignment_987",
                    "type": "string"
                },
                "html_url": {
                    "description": "URL for a user to view this assignment",
                    "example": "http://example.com/courses/123/assignments/987",
                    "type": "string"
                },
                "all_day_date": {
                    "description": "The due date of this assignment",
                    "example": "2012-07-19",
                    "type": "datetime"
                },
                "all_day": {
                    "description": "Boolean indicating whether this is an all-day event (e.g. assignment due at midnight)",
                    "example": true,
                    "type": "boolean"
                },
                "created_at": {
                    "description": "When the assignment was created",
                    "example": "2012-07-12T10:55:20-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "When the assignment was last updated",
                    "example": "2012-07-12T10:55:20-06:00",
                    "type": "datetime"
                },
                "assignment": {
                    "description": "The full assignment JSON data (See the Assignments API)",
                    "$ref": "Assignment"
                },
                "assignment_overrides": {
                    "description": "The list of AssignmentOverrides that apply to this event (See the Assignments API). This information is useful for determining which students or sections this assignment-due event applies to.",
                    "$ref": "AssignmentOverride"
                },
                "important_dates": {
                    "description": "Boolean indicating whether this has important dates.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "AssignmentExtension": {
            "id": "AssignmentExtension",
            "description": "",
            "required": [
                "assignment_id",
                "user_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "assignment_id": {
                    "description": "The ID of the Assignment the extension belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "description": "The ID of the Student that needs the assignment extension.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_attempts": {
                    "description": "Number of times the student is allowed to re-submit the assignment",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "AssignmentGroup": {
            "id": "AssignmentGroup",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the id of the Assignment Group",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the Assignment Group",
                    "example": "group2",
                    "type": "string"
                },
                "position": {
                    "description": "the position of the Assignment Group",
                    "example": 7,
                    "type": "integer"
                },
                "group_weight": {
                    "description": "the weight of the Assignment Group",
                    "example": 20,
                    "type": "integer"
                },
                "sis_source_id": {
                    "description": "the sis source id of the Assignment Group",
                    "example": "1234",
                    "type": "string"
                },
                "integration_data": {
                    "description": "the integration data of the Assignment Group",
                    "example": {
                        "5678": "0954"
                    },
                    "type": "object"
                },
                "assignments": {
                    "description": "the assignments in this Assignment Group (see the Assignment API for a detailed list of fields)",
                    "example": [],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "rules": {
                    "description": "the grading rules that this Assignment Group has",
                    "$ref": "GradingRules"
                }
            }
        },
        "AssignmentGroupAttributes": {
            "id": "AssignmentGroupAttributes",
            "description": "Some of the attributes of an Assignment Group. See Assignments API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the id of the Assignment Group",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the Assignment Group",
                    "example": "group2",
                    "type": "string"
                },
                "group_weight": {
                    "description": "the weight of the Assignment Group",
                    "example": 20,
                    "type": "integer"
                },
                "sis_source_id": {
                    "description": "the sis source id of the Assignment Group",
                    "example": "1234",
                    "type": "string"
                },
                "integration_data": {
                    "description": "the integration data of the Assignment Group",
                    "example": {
                        "5678": "0954"
                    },
                    "type": "object"
                }
            }
        },
        "AssignmentOverride": {
            "id": "AssignmentOverride",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the assignment override",
                    "example": 4,
                    "type": "integer"
                },
                "assignment_id": {
                    "description": "the ID of the assignment the override applies to",
                    "example": 123,
                    "type": "integer"
                },
                "student_ids": {
                    "description": "the IDs of the override's target students (present if the override targets an ad-hoc set of students)",
                    "example": [
                        1,
                        2,
                        3
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "group_id": {
                    "description": "the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)",
                    "example": 2,
                    "type": "integer"
                },
                "course_section_id": {
                    "description": "the ID of the overrides's target section (present if the override targets a section)",
                    "example": 1,
                    "type": "integer"
                },
                "title": {
                    "description": "the title of the override",
                    "example": "an assignment override",
                    "type": "string"
                },
                "due_at": {
                    "description": "the overridden due at (present if due_at is overridden)",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "all_day": {
                    "description": "the overridden all day flag (present if due_at is overridden)",
                    "example": true,
                    "type": "boolean"
                },
                "all_day_date": {
                    "description": "the overridden all day date (present if due_at is overridden)",
                    "example": "2012-07-01",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "the overridden unlock at (present if unlock_at is overridden)",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "the overridden lock at, if any (present if lock_at is overridden)",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                }
            }
        },
        "AuthenticationEvent": {
            "id": "AuthenticationEvent",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "created_at": {
                    "description": "timestamp of the event",
                    "example": "2012-07-19T15:00:00-06:00",
                    "type": "datetime"
                },
                "event_type": {
                    "description": "authentication event type ('login' or 'logout')",
                    "example": "login",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "login",
                            "logout"
                        ]
                    }
                },
                "pseudonym_id": {
                    "description": "ID of the pseudonym (login) associated with the event",
                    "example": 9478,
                    "type": "integer"
                },
                "account_id": {
                    "description": "ID of the account associated with the event. will match the account_id in the associated pseudonym.",
                    "example": 2319,
                    "type": "integer"
                },
                "user_id": {
                    "description": "ID of the user associated with the event will match the user_id in the associated pseudonym.",
                    "example": 362,
                    "type": "integer"
                }
            }
        },
        "AuthenticationProvider": {
            "id": "AuthenticationProvider",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "identifier_format": {
                    "description": "Valid for SAML providers.",
                    "example": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                    "type": "string"
                },
                "auth_type": {
                    "description": "Valid for all providers.",
                    "example": "saml",
                    "type": "string"
                },
                "id": {
                    "description": "Valid for all providers.",
                    "example": 1649,
                    "type": "integer"
                },
                "log_out_url": {
                    "description": "Valid for SAML providers.",
                    "example": "http://example.com/saml1/slo",
                    "type": "string"
                },
                "log_in_url": {
                    "description": "Valid for SAML and CAS providers.",
                    "example": "http://example.com/saml1/sli",
                    "type": "string"
                },
                "certificate_fingerprint": {
                    "description": "Valid for SAML providers.",
                    "example": "111222",
                    "type": "string"
                },
                "requested_authn_context": {
                    "description": "Valid for SAML providers.",
                    "type": "string"
                },
                "auth_host": {
                    "description": "Valid for LDAP providers.",
                    "example": "127.0.0.1",
                    "type": "string"
                },
                "auth_filter": {
                    "description": "Valid for LDAP providers.",
                    "example": "filter1",
                    "type": "string"
                },
                "auth_over_tls": {
                    "description": "Valid for LDAP providers.",
                    "type": "integer"
                },
                "auth_base": {
                    "description": "Valid for LDAP and CAS providers.",
                    "type": "string"
                },
                "auth_username": {
                    "description": "Valid for LDAP providers.",
                    "example": "username1",
                    "type": "string"
                },
                "auth_port": {
                    "description": "Valid for LDAP providers.",
                    "type": "integer"
                },
                "position": {
                    "description": "Valid for all providers.",
                    "example": 1,
                    "type": "integer"
                },
                "idp_entity_id": {
                    "description": "Valid for SAML providers.",
                    "example": "http://example.com/saml1",
                    "type": "string"
                },
                "login_attribute": {
                    "description": "Valid for SAML providers.",
                    "example": "nameid",
                    "type": "string"
                },
                "sig_alg": {
                    "description": "Valid for SAML providers.",
                    "example": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
                    "type": "string"
                },
                "jit_provisioning": {
                    "description": "Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).",
                    "type": "boolean"
                },
                "federated_attributes": {
                    "$ref": "FederatedAttributesConfig"
                },
                "mfa_required": {
                    "description": "If multi-factor authentication is required when logging in with this authentication provider. The account must not have MFA disabled.",
                    "type": "boolean"
                }
            }
        },
        "Avatar": {
            "id": "Avatar",
            "description": "Possible avatar for a user.",
            "required": [
                "type",
                "url",
                "token",
                "display_name"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "type": {
                    "description": "['gravatar'|'attachment'|'no_pic'] The type of avatar record, for categorization purposes.",
                    "example": "gravatar",
                    "type": "string"
                },
                "url": {
                    "description": "The url of the avatar",
                    "example": "https://secure.gravatar.com/avatar/2284...",
                    "type": "string"
                },
                "token": {
                    "description": "A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.",
                    "example": "<opaque_token>",
                    "type": "string"
                },
                "display_name": {
                    "description": "A textual description of the avatar record.",
                    "example": "user, sample",
                    "type": "string"
                },
                "id": {
                    "description": "['attachment' type only] the internal id of the attachment",
                    "example": 12,
                    "type": "integer"
                },
                "content-type": {
                    "description": "['attachment' type only] the content-type of the attachment.",
                    "example": "image/jpeg",
                    "type": "string"
                },
                "filename": {
                    "description": "['attachment' type only] the filename of the attachment",
                    "example": "profile.jpg",
                    "type": "string"
                },
                "size": {
                    "description": "['attachment' type only] the size of the attachment",
                    "example": 32649,
                    "type": "integer"
                }
            }
        },
        "BlackoutDate": {
            "id": "BlackoutDate",
            "description": "Blackout dates are used to prevent scheduling assignments on a given date in course pacing.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the blackout date",
                    "example": 1,
                    "type": "integer"
                },
                "context_id": {
                    "description": "the context owning the blackout date",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "example": "Course",
                    "type": "string"
                },
                "start_date": {
                    "description": "the start date of the blackout date",
                    "example": "2022-01-01",
                    "type": "datetime"
                },
                "end_date": {
                    "description": "the end date of the blackout date",
                    "example": "2022-01-02",
                    "type": "datetime"
                },
                "event_title": {
                    "description": "title of the blackout date",
                    "example": "some title",
                    "type": "string"
                }
            }
        },
        "BlueprintMigration": {
            "id": "BlueprintMigration",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the migration.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "template_id": {
                    "description": "The ID of the template the migration belongs to. Only present when querying a blueprint course.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "subscription_id": {
                    "description": "The ID of the associated course's blueprint subscription. Only present when querying a course associated with a blueprint.",
                    "example": 101,
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "description": "The ID of the user who queued the migration.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "workflow_state": {
                    "description": "Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed",
                    "example": "running",
                    "type": "string"
                },
                "created_at": {
                    "description": "Time when the migration was queued",
                    "example": "2013-08-28T23:59:00-06:00",
                    "type": "datetime"
                },
                "exports_started_at": {
                    "description": "Time when the exports begun",
                    "example": "2013-08-28T23:59:00-06:00",
                    "type": "datetime"
                },
                "imports_queued_at": {
                    "description": "Time when the exports were completed and imports were queued",
                    "example": "2013-08-28T23:59:00-06:00",
                    "type": "datetime"
                },
                "imports_completed_at": {
                    "description": "Time when the imports were completed",
                    "example": "2013-08-28T23:59:00-06:00",
                    "type": "datetime"
                },
                "comment": {
                    "description": "User-specified comment describing changes made in this operation",
                    "example": "Fixed spelling in question 3 of midterm exam",
                    "type": "string"
                }
            }
        },
        "BlueprintRestriction": {
            "id": "BlueprintRestriction",
            "description": "A set of restrictions on editing for copied objects in associated courses",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "content": {
                    "description": "Restriction on main content (e.g. title, description).",
                    "example": true,
                    "type": "boolean"
                },
                "points": {
                    "description": "Restriction on points possible for assignments and graded learning objects",
                    "example": true,
                    "type": "boolean"
                },
                "due_dates": {
                    "description": "Restriction on due dates for assignments and graded learning objects",
                    "example": false,
                    "type": "boolean"
                },
                "availability_dates": {
                    "description": "Restriction on availability dates for an object",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "BlueprintSubscription": {
            "id": "BlueprintSubscription",
            "description": "Associates a course with a blueprint",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the blueprint course subscription",
                    "example": 101,
                    "type": "integer",
                    "format": "int64"
                },
                "template_id": {
                    "description": "The ID of the blueprint template the associated course is subscribed to",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "blueprint_course": {
                    "description": "The blueprint course subscribed to",
                    "type": "object",
                    "example": {
                        "id": 2,
                        "name": "Biology 100 Blueprint",
                        "course_code": "BIOL 100 BP",
                        "term_name": "Default term"
                    }
                }
            }
        },
        "BlueprintTemplate": {
            "id": "BlueprintTemplate",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the template.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "course_id": {
                    "description": "The ID of the Course the template belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "last_export_completed_at": {
                    "description": "Time when the last export was completed",
                    "example": "2013-08-28T23:59:00-06:00",
                    "type": "datetime"
                },
                "associated_course_count": {
                    "description": "Number of associated courses for the template",
                    "example": 3,
                    "type": "integer"
                },
                "latest_migration": {
                    "description": "Details of the latest migration",
                    "$ref": "BlueprintMigration"
                }
            }
        },
        "Bookmark": {
            "id": "Bookmark",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "example": "Biology 101",
                    "type": "string"
                },
                "url": {
                    "example": "/courses/1",
                    "type": "string"
                },
                "position": {
                    "example": 1,
                    "type": "integer"
                },
                "data": {
                    "example": {
                        "active_tab": 1
                    },
                    "type": "object"
                }
            }
        },
        "CalendarEvent": {
            "id": "CalendarEvent",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the calendar event",
                    "example": 234,
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the calendar event",
                    "example": "Paintball Fight!",
                    "type": "string"
                },
                "start_at": {
                    "description": "The start timestamp of the event",
                    "example": "2012-07-19T15:00:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "The end timestamp of the event",
                    "example": "2012-07-19T16:00:00-06:00",
                    "type": "datetime"
                },
                "description": {
                    "description": "The HTML description of the event",
                    "example": "<b>It's that time again!</b>",
                    "type": "string"
                },
                "location_name": {
                    "description": "The location name of the event",
                    "example": "Greendale Community College",
                    "type": "string"
                },
                "location_address": {
                    "description": "The address where the event is taking place",
                    "example": "Greendale, Colorado",
                    "type": "string"
                },
                "context_code": {
                    "description": "the context code of the calendar this event belongs to (course, user or group)",
                    "example": "course_123",
                    "type": "string"
                },
                "effective_context_code": {
                    "description": "if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course's context code here, while the section's context code would be returned above)",
                    "type": "string"
                },
                "context_name": {
                    "description": "the context name of the calendar this event belongs to (course, user or group)",
                    "example": "Chemistry 101",
                    "type": "string"
                },
                "all_context_codes": {
                    "description": "a comma-separated list of all calendar contexts this event is part of",
                    "example": "course_123,course_456",
                    "type": "string"
                },
                "workflow_state": {
                    "description": "Current state of the event ('active', 'locked' or 'deleted') 'locked' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)",
                    "example": "active",
                    "type": "string"
                },
                "hidden": {
                    "description": "Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events.",
                    "example": false,
                    "type": "boolean"
                },
                "parent_event_id": {
                    "description": "Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event.",
                    "type": "integer"
                },
                "child_events_count": {
                    "description": "The number of child_events. See child_events (and parent_event_id)",
                    "example": 0,
                    "type": "integer"
                },
                "child_events": {
                    "description": "Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "url": {
                    "description": "URL for this calendar event (to update, delete, etc.)",
                    "example": "https://example.com/api/v1/calendar_events/234",
                    "type": "string"
                },
                "html_url": {
                    "description": "URL for a user to view this event",
                    "example": "https://example.com/calendar?event_id=234&include_contexts=course_123",
                    "type": "string"
                },
                "all_day_date": {
                    "description": "The date of this event",
                    "example": "2012-07-19",
                    "type": "datetime"
                },
                "all_day": {
                    "description": "Boolean indicating whether this is an all-day event (midnight to midnight)",
                    "example": false,
                    "type": "boolean"
                },
                "created_at": {
                    "description": "When the calendar event was created",
                    "example": "2012-07-12T10:55:20-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "When the calendar event was last updated",
                    "example": "2012-07-12T10:55:20-06:00",
                    "type": "datetime"
                },
                "appointment_group_id": {
                    "description": "Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group",
                    "type": "integer"
                },
                "appointment_group_url": {
                    "description": "The API URL of the appointment group",
                    "type": "string"
                },
                "own_reservation": {
                    "description": "If the event is a reservation, this a boolean indicating whether it is the current user's reservation, or someone else's",
                    "example": false,
                    "type": "boolean"
                },
                "reserve_url": {
                    "description": "If the event is a time slot, the API URL for reserving it",
                    "type": "string"
                },
                "reserved": {
                    "description": "If the event is a time slot, a boolean indicating whether the user has already made a reservation for it",
                    "example": false,
                    "type": "boolean"
                },
                "participant_type": {
                    "description": "The type of participant to sign up for a slot: 'User' or 'Group'",
                    "example": "User",
                    "type": "string"
                },
                "participants_per_appointment": {
                    "description": "If the event is a time slot, this is the participant limit",
                    "type": "integer"
                },
                "available_slots": {
                    "description": "If the event is a time slot and it has a participant limit, an integer indicating how many slots are available",
                    "type": "integer"
                },
                "user": {
                    "description": "If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API).",
                    "type": "string"
                },
                "group": {
                    "description": "If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API).",
                    "type": "string"
                },
                "important_dates": {
                    "description": "Boolean indicating whether this has important dates.",
                    "example": true,
                    "type": "boolean"
                },
                "series_uuid": {
                    "description": "Identifies the recurring event series this event may belong to",
                    "type": "uuid"
                },
                "rrule": {
                    "description": "An iCalendar RRULE for defining how events in a recurring event series repeat.",
                    "type": "string"
                },
                "series_natural_language": {
                    "description": "A natural language expression of how events occur in the series. (e.g. Daily, 2 times)",
                    "type": "string"
                },
                "blackout_date": {
                    "description": "Boolean indicating whether this has blackout date.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "CalendarLink": {
            "id": "CalendarLink",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "ics": {
                    "description": "The URL of the calendar in ICS format",
                    "example": "https://canvas.instructure.com/feeds/calendars/course_abcdef.ics",
                    "type": "string"
                }
            }
        },
        "ChangeRecord": {
            "id": "ChangeRecord",
            "description": "Describes a learning object change propagated to associated courses from a blueprint course",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "asset_id": {
                    "description": "The ID of the learning object that was changed in the blueprint course.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "asset_type": {
                    "description": "The type of the learning object that was changed in the blueprint course.  One of 'assignment', 'attachment', 'discussion_topic', 'external_tool', 'quiz', 'wiki_page', 'syllabus', or 'settings'.  For 'syllabus' or 'settings', the asset_id is the course id.",
                    "example": "assignment",
                    "type": "string"
                },
                "asset_name": {
                    "description": "The name of the learning object that was changed in the blueprint course.",
                    "example": "Some Assignment",
                    "type": "string"
                },
                "change_type": {
                    "description": "The type of change; one of 'created', 'updated', 'deleted'",
                    "example": "created",
                    "type": "string"
                },
                "html_url": {
                    "description": "The URL of the changed object",
                    "example": "https://canvas.example.com/courses/101/assignments/2",
                    "type": "string"
                },
                "locked": {
                    "description": "Whether the object is locked in the blueprint",
                    "example": false,
                    "type": "boolean"
                },
                "exceptions": {
                    "description": "A list of ExceptionRecords for linked courses that did not receive this update.",
                    "example": [
                        {
                            "course_id": 101,
                            "conflicting_changes": [
                                "points"
                            ]
                        }
                    ],
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "ColumnDatum": {
            "id": "ColumnDatum",
            "description": "ColumnDatum objects contain the entry for a column for each user.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "content": {
                    "example": "Nut allergy",
                    "type": "string"
                },
                "user_id": {
                    "example": 2,
                    "type": "integer"
                }
            }
        },
        "Collaboration": {
            "id": "Collaboration",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the collaboration",
                    "example": 43,
                    "type": "integer"
                },
                "collaboration_type": {
                    "description": "A name for the type of collaboration",
                    "example": "Microsoft Office",
                    "type": "string"
                },
                "document_id": {
                    "description": "The collaboration document identifier for the collaboration provider",
                    "example": "oinwoenfe8w8ef_onweufe89fef",
                    "type": "string"
                },
                "user_id": {
                    "description": "The canvas id of the user who created the collaboration",
                    "example": 92,
                    "type": "integer"
                },
                "context_id": {
                    "description": "The canvas id of the course or group to which the collaboration belongs",
                    "example": 77,
                    "type": "integer"
                },
                "context_type": {
                    "description": "The canvas type of the course or group to which the collaboration belongs",
                    "example": "Course",
                    "type": "string"
                },
                "url": {
                    "description": "The LTI launch url to view collaboration.",
                    "type": "string"
                },
                "created_at": {
                    "description": "The timestamp when the collaboration was created",
                    "example": "2012-06-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The timestamp when the collaboration was last modified",
                    "example": "2012-06-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "Another representation of the collaboration type",
                    "example": "ExternalToolCollaboration",
                    "type": "string"
                },
                "update_url": {
                    "description": "The LTI launch url to edit the collaboration",
                    "type": "string"
                },
                "user_name": {
                    "description": "The name of the user who owns the collaboration",
                    "example": "John Danger",
                    "type": "string"
                }
            }
        },
        "Collaborator": {
            "id": "Collaborator",
            "description": "",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique user or group identifier for the collaborator.",
                    "example": 12345,
                    "type": "integer"
                },
                "type": {
                    "description": "The type of collaborator (e.g. 'user' or 'group').",
                    "example": "user",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "user",
                            "group"
                        ]
                    }
                },
                "name": {
                    "description": "The name of the collaborator.",
                    "example": "Don Draper",
                    "type": "string"
                }
            }
        },
        "CommMessage": {
            "id": "CommMessage",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the CommMessage.",
                    "example": 42,
                    "type": "integer"
                },
                "created_at": {
                    "description": "The date and time this message was created",
                    "example": "2013-03-19T21:00:00Z",
                    "type": "datetime"
                },
                "sent_at": {
                    "description": "The date and time this message was sent",
                    "example": "2013-03-20T22:42:00Z",
                    "type": "datetime"
                },
                "workflow_state": {
                    "description": "The workflow state of the message. One of 'created', 'staged', 'sending', 'sent', 'bounced', 'dashboard', 'cancelled', or 'closed'",
                    "example": "sent",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "created",
                            "staged",
                            "sending",
                            "sent",
                            "bounced",
                            "dashboard",
                            "cancelled",
                            "closed"
                        ]
                    }
                },
                "from": {
                    "description": "The address that was put in the 'from' field of the message",
                    "example": "notifications@example.com",
                    "type": "string"
                },
                "from_name": {
                    "description": "The display name for the from address",
                    "example": "Instructure Canvas",
                    "type": "string"
                },
                "to": {
                    "description": "The address the message was sent to:",
                    "example": "someone@example.com",
                    "type": "string"
                },
                "reply_to": {
                    "description": "The reply_to header of the message",
                    "example": "notifications+specialdata@example.com",
                    "type": "string"
                },
                "subject": {
                    "description": "The message subject",
                    "example": "example subject line",
                    "type": "string"
                },
                "body": {
                    "description": "The plain text body of the message",
                    "example": "This is the body of the message",
                    "type": "string"
                },
                "html_body": {
                    "description": "The HTML body of the message.",
                    "example": "<html><body>This is the body of the message</body></html>",
                    "type": "string"
                }
            }
        },
        "CommunicationChannel": {
            "id": "CommunicationChannel",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the communication channel.",
                    "example": 16,
                    "type": "integer"
                },
                "address": {
                    "description": "The address, or path, of the communication channel.",
                    "example": "sheldon@caltech.example.com",
                    "type": "string"
                },
                "type": {
                    "description": "The type of communcation channel being described. Possible values are: 'email', 'push', 'sms', or 'twitter'. This field determines the type of value seen in 'address'.",
                    "example": "email",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "email",
                            "push",
                            "sms",
                            "twitter"
                        ]
                    }
                },
                "position": {
                    "description": "The position of this communication channel relative to the user's other channels when they are ordered.",
                    "example": 1,
                    "type": "integer"
                },
                "user_id": {
                    "description": "The ID of the user that owns this communication channel.",
                    "example": 1,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "The current state of the communication channel. Possible values are: 'unconfirmed' or 'active'.",
                    "example": "active",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "unconfirmed",
                            "active"
                        ]
                    }
                }
            }
        },
        "CompletionRequirement": {
            "id": "CompletionRequirement",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "type": {
                    "description": "one of 'must_view', 'must_submit', 'must_contribute', 'min_score', 'must_mark_done'",
                    "example": "min_score",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "must_view",
                            "must_submit",
                            "must_contribute",
                            "min_score",
                            "must_mark_done"
                        ]
                    }
                },
                "min_score": {
                    "description": "minimum score required to complete (only present when type == 'min_score')",
                    "example": 10,
                    "type": "integer"
                },
                "completed": {
                    "description": "whether the calling user has met this requirement (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "Conference": {
            "id": "Conference",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The id of the conference",
                    "example": 170,
                    "type": "integer"
                },
                "conference_type": {
                    "description": "The type of conference",
                    "example": "AdobeConnect",
                    "type": "string"
                },
                "conference_key": {
                    "description": "The 3rd party's ID for the conference",
                    "example": "abcdjoelisgreatxyz",
                    "type": "string"
                },
                "description": {
                    "description": "The description for the conference",
                    "example": "Conference Description",
                    "type": "string"
                },
                "duration": {
                    "description": "The expected duration the conference is supposed to last",
                    "example": 60,
                    "type": "integer"
                },
                "ended_at": {
                    "description": "The date that the conference ended at, null if it hasn't ended",
                    "example": "2013-12-13T17:23:26Z",
                    "type": "datetime"
                },
                "started_at": {
                    "description": "The date the conference started at, null if it hasn't started",
                    "example": "2013-12-12T23:02:17Z",
                    "type": "datetime"
                },
                "title": {
                    "description": "The title of the conference",
                    "example": "Test conference",
                    "type": "string"
                },
                "users": {
                    "description": "Array of user ids that are participants in the conference",
                    "example": [
                        1,
                        7,
                        8,
                        9,
                        10
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "has_advanced_settings": {
                    "description": "True if the conference type has advanced settings.",
                    "example": false,
                    "type": "boolean"
                },
                "long_running": {
                    "description": "If true the conference is long running and has no expected end time",
                    "example": false,
                    "type": "boolean"
                },
                "user_settings": {
                    "description": "A collection of settings specific to the conference type",
                    "example": {
                        "record": true
                    },
                    "type": "object"
                },
                "recordings": {
                    "description": "A List of recordings for the conference",
                    "type": "array",
                    "items": {
                        "$ref": "ConferenceRecording"
                    }
                },
                "url": {
                    "description": "URL for the conference, may be null if the conference type doesn't set it",
                    "type": "string"
                },
                "join_url": {
                    "description": "URL to join the conference, may be null if the conference type doesn't set it",
                    "type": "string"
                },
                "context_type": {
                    "description": "The type of this conference's context, typically 'Course' or 'Group'.",
                    "type": "string"
                },
                "context_id": {
                    "description": "The ID of this conference's context.",
                    "type": "integer"
                }
            }
        },
        "ConferenceRecording": {
            "id": "ConferenceRecording",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "duration_minutes": {
                    "example": 0,
                    "type": "integer"
                },
                "title": {
                    "example": "course2: Test conference 3 [170]_0",
                    "type": "string"
                },
                "updated_at": {
                    "example": "2013-12-12T16:09:33.903-07:00",
                    "type": "datetime"
                },
                "created_at": {
                    "example": "2013-12-12T16:09:09.960-07:00",
                    "type": "datetime"
                },
                "playback_url": {
                    "example": "http://example.com/recording_url",
                    "type": "string"
                }
            }
        },
        "ContentDetails": {
            "id": "ContentDetails",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "points_possible": {
                    "example": 20,
                    "type": "integer"
                },
                "due_at": {
                    "example": "2012-12-31T06:00:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "example": "2012-12-31T06:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "example": "2012-12-31T06:00:00-06:00",
                    "type": "datetime"
                },
                "locked_for_user": {
                    "example": true,
                    "type": "boolean"
                },
                "lock_explanation": {
                    "example": "This quiz is part of an unpublished module and is not available yet.",
                    "type": "string"
                },
                "lock_info": {
                    "example": {
                        "asset_string": "assignment_4",
                        "unlock_at": "2012-12-31T06:00:00-06:00",
                        "lock_at": "2012-12-31T06:00:00-06:00",
                        "context_module": {}
                    },
                    "$ref": "LockInfo"
                }
            }
        },
        "ContentExport": {
            "id": "ContentExport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the export",
                    "example": 101,
                    "type": "integer"
                },
                "created_at": {
                    "description": "the date and time this export was requested",
                    "example": "2014-01-01T00:00:00Z",
                    "type": "datetime"
                },
                "export_type": {
                    "description": "the type of content migration: 'common_cartridge' or 'qti'",
                    "example": "common_cartridge",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "common_cartridge",
                            "qti"
                        ]
                    }
                },
                "attachment": {
                    "description": "attachment api object for the export package (not present before the export completes or after it becomes unavailable for download.)",
                    "example": {
                        "url": "https://example.com/api/v1/attachments/789?download_frd=1&verifier=bG9sY2F0cyEh"
                    },
                    "$ref": "FileBasic"
                },
                "progress_url": {
                    "description": "The api endpoint for polling the current progress",
                    "example": "https://example.com/api/v1/progress/4",
                    "type": "string"
                },
                "user_id": {
                    "description": "The ID of the user who started the export",
                    "example": 4,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "Current state of the content migration: created exporting exported failed",
                    "example": "exported",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "created",
                            "exporting",
                            "exported",
                            "failed"
                        ]
                    }
                }
            }
        },
        "ContentShare": {
            "id": "ContentShare",
            "description": "Content shared between users",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The id of the content share for the current user",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the shared content",
                    "example": "War of 1812 homework",
                    "type": "string"
                },
                "content_type": {
                    "description": "The type of content that was shared. Can be assignment, discussion_topic, page, quiz, module, or module_item.",
                    "example": "assignment",
                    "type": "string"
                },
                "created_at": {
                    "description": "The datetime the content was shared with this user.",
                    "example": "2017-05-09T10:12:00Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The datetime the content was updated.",
                    "example": "2017-05-09T10:12:00Z",
                    "type": "datetime"
                },
                "user_id": {
                    "description": "The id of the user who sent or received the content share.",
                    "example": 1578941,
                    "type": "integer"
                },
                "sender": {
                    "description": "The user who shared the content. This field is provided only to receivers; it is not populated in the sender's list of sent content shares.",
                    "example": {
                        "id": 1,
                        "display_name": "Matilda Vargas",
                        "avatar_image_url": "http://localhost:3000/image_url",
                        "html_url": "http://localhost:3000/users/1"
                    },
                    "type": "object"
                },
                "receivers": {
                    "description": "An Array of users the content is shared with.  This field is provided only to senders; an empty array will be returned for the receiving users.",
                    "example": [
                        {
                            "id": 1,
                            "display_name": "Jon Snow",
                            "avatar_image_url": "http://localhost:3000/image_url2",
                            "html_url": "http://localhost:3000/users/2"
                        }
                    ],
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "source_course": {
                    "description": "The course the content was originally shared from.",
                    "example": {
                        "id": 787,
                        "name": "History 105"
                    },
                    "type": "object"
                },
                "read_state": {
                    "description": "Whether the recipient has viewed the content share.",
                    "example": "read",
                    "type": "string"
                },
                "content_export": {
                    "description": "The content export record associated with this content share",
                    "example": {
                        "id": 42
                    },
                    "$ref": "ContentExport"
                }
            }
        },
        "Conversation": {
            "id": "Conversation",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the conversation.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "subject": {
                    "description": "the subject of the conversation.",
                    "example": 2,
                    "type": "string"
                },
                "workflow_state": {
                    "description": "The current state of the conversation (read, unread or archived).",
                    "example": "unread",
                    "type": "string"
                },
                "last_message": {
                    "description": "A <=100 character preview from the most recent message.",
                    "example": "sure thing, here's the file",
                    "type": "string"
                },
                "start_at": {
                    "description": "the date and time at which the last message was sent.",
                    "example": "2011-09-02T12:00:00Z",
                    "type": "datetime"
                },
                "message_count": {
                    "description": "the number of messages in the conversation.",
                    "example": 2,
                    "type": "integer"
                },
                "subscribed": {
                    "description": "whether the current user is subscribed to the conversation.",
                    "example": true,
                    "type": "boolean"
                },
                "private": {
                    "description": "whether the conversation is private.",
                    "example": true,
                    "type": "boolean"
                },
                "starred": {
                    "description": "whether the conversation is starred.",
                    "example": true,
                    "type": "boolean"
                },
                "properties": {
                    "description": "Additional conversation flags (last_author, attachments, media_objects). Each listed property means the flag is set to true (i.e. the current user is the most recent author, there are attachments, or there are media objects)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "audience": {
                    "description": "Array of user ids who are involved in the conversation, ordered by participation level, then alphabetical. Excludes current user, unless this is a monologue.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "audience_contexts": {
                    "description": "Most relevant shared contexts (courses and groups) between current user and other participants. If there is only one participant, it will also include that user's enrollment(s)/ membership type(s) in each course/group.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "avatar_url": {
                    "description": "URL to appropriate icon for this conversation (custom, individual or group avatar, depending on audience).",
                    "example": "https://canvas.instructure.com/images/messages/avatar-group-50.png",
                    "type": "string"
                },
                "participants": {
                    "description": "Array of users participating in the conversation. Includes current user.",
                    "type": "array",
                    "items": {
                        "$ref": "ConversationParticipant"
                    }
                },
                "visible": {
                    "description": "indicates whether the conversation is visible under the current scope and filter. This attribute is always true in the index API response, and is primarily useful in create/update responses so that you can know if the record should be displayed in the UI. The default scope is assumed, unless a scope or filter is passed to the create/update API call.",
                    "example": true,
                    "type": "boolean"
                },
                "context_name": {
                    "description": "Name of the course or group in which the conversation is occurring.",
                    "example": "Canvas 101",
                    "type": "string"
                }
            }
        },
        "ConversationParticipant": {
            "id": "ConversationParticipant",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The user ID for the participant.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                    "example": "Shelly",
                    "type": "string"
                },
                "full_name": {
                    "description": "The full name of the user.",
                    "example": "Sheldon Cooper",
                    "type": "string"
                },
                "avatar_url": {
                    "description": "If requested, this field will be included and contain a url to retrieve the user's avatar.",
                    "example": "https://canvas.instructure.com/images/messages/avatar-50.png",
                    "type": "string"
                }
            }
        },
        "Course": {
            "id": "Course",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the course",
                    "example": 370663,
                    "type": "integer"
                },
                "sis_course_id": {
                    "description": "the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
                    "type": "string"
                },
                "uuid": {
                    "description": "the UUID of the course",
                    "example": "WvAHhY5FINzq5IyRIJybGeiXyFkG3SqHUPb7jZY5",
                    "type": "string"
                },
                "integration_id": {
                    "description": "the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                    "example": 34,
                    "type": "integer"
                },
                "name": {
                    "description": "the full name of the course. If the requesting user has set a nickname for the course, the nickname will be shown here.",
                    "example": "InstructureCon 2012",
                    "type": "string"
                },
                "course_code": {
                    "description": "the course code",
                    "example": "INSTCON12",
                    "type": "string"
                },
                "original_name": {
                    "description": "the actual course name. This field is returned only if the requesting user has set a nickname for the course.",
                    "example": "InstructureCon-2012-01",
                    "type": "string"
                },
                "workflow_state": {
                    "description": "the current state of the course one of 'unpublished', 'available', 'completed', or 'deleted'",
                    "example": "available",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "unpublished",
                            "available",
                            "completed",
                            "deleted"
                        ]
                    }
                },
                "account_id": {
                    "description": "the account associated with the course",
                    "example": 81259,
                    "type": "integer"
                },
                "root_account_id": {
                    "description": "the root account associated with the course",
                    "example": 81259,
                    "type": "integer"
                },
                "enrollment_term_id": {
                    "description": "the enrollment term associated with the course",
                    "example": 34,
                    "type": "integer"
                },
                "grading_periods": {
                    "description": "A list of grading periods associated with the course",
                    "type": "array",
                    "items": {
                        "$ref": "GradingPeriod"
                    }
                },
                "grading_standard_id": {
                    "description": "the grading standard associated with the course",
                    "example": 25,
                    "type": "integer"
                },
                "grade_passback_setting": {
                    "description": "the grade_passback_setting set on the course",
                    "example": "nightly_sync",
                    "type": "string"
                },
                "created_at": {
                    "description": "the date the course was created.",
                    "example": "2012-05-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "start_at": {
                    "description": "the start date for the course, if applicable",
                    "example": "2012-06-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "the end date for the course, if applicable",
                    "example": "2012-09-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "locale": {
                    "description": "the course-set locale, if applicable",
                    "example": "en",
                    "type": "string"
                },
                "enrollments": {
                    "description": "A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores",
                    "type": "array",
                    "items": {
                        "$ref": "Enrollment"
                    }
                },
                "total_students": {
                    "description": "optional: the total number of active and invited students in the course",
                    "example": 32,
                    "type": "integer"
                },
                "calendar": {
                    "description": "course calendar",
                    "$ref": "CalendarLink"
                },
                "default_view": {
                    "description": "the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future",
                    "example": "feed",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "feed",
                            "wiki",
                            "modules",
                            "syllabus",
                            "assignments"
                        ]
                    }
                },
                "syllabus_body": {
                    "description": "optional: user-generated HTML for the course syllabus",
                    "example": "<p>syllabus html goes here</p>",
                    "type": "string"
                },
                "needs_grading_count": {
                    "description": "optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count",
                    "example": 17,
                    "type": "integer"
                },
                "term": {
                    "description": "optional: the enrollment term object for the course returned only if include[]=term",
                    "$ref": "Term"
                },
                "course_progress": {
                    "description": "optional: information on progress through the course returned only if include[]=course_progress",
                    "$ref": "CourseProgress"
                },
                "apply_assignment_group_weights": {
                    "description": "weight final grade based on assignment group percentages",
                    "example": true,
                    "type": "boolean"
                },
                "permissions": {
                    "description": "optional: the permissions the user has for the course. returned only for a single course and include[]=permissions",
                    "example": {
                        "create_discussion_topic": true,
                        "create_announcement": true
                    },
                    "type": "object",
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "boolean"
                    }
                },
                "is_public": {
                    "example": true,
                    "type": "boolean"
                },
                "is_public_to_auth_users": {
                    "example": true,
                    "type": "boolean"
                },
                "public_syllabus": {
                    "example": true,
                    "type": "boolean"
                },
                "public_syllabus_to_auth": {
                    "example": true,
                    "type": "boolean"
                },
                "public_description": {
                    "description": "optional: the public description of the course",
                    "example": "Come one, come all to InstructureCon 2012!",
                    "type": "string"
                },
                "storage_quota_mb": {
                    "example": 5,
                    "type": "integer"
                },
                "storage_quota_used_mb": {
                    "example": 5,
                    "type": "number"
                },
                "hide_final_grades": {
                    "example": false,
                    "type": "boolean"
                },
                "license": {
                    "example": "Creative Commons",
                    "type": "string"
                },
                "allow_student_assignment_edits": {
                    "example": false,
                    "type": "boolean"
                },
                "allow_wiki_comments": {
                    "example": false,
                    "type": "boolean"
                },
                "allow_student_forum_attachments": {
                    "example": false,
                    "type": "boolean"
                },
                "open_enrollment": {
                    "example": true,
                    "type": "boolean"
                },
                "self_enrollment": {
                    "example": false,
                    "type": "boolean"
                },
                "restrict_enrollments_to_course_dates": {
                    "example": false,
                    "type": "boolean"
                },
                "course_format": {
                    "example": "online",
                    "type": "string"
                },
                "access_restricted_by_date": {
                    "description": "optional: this will be true if this user is currently prevented from viewing the course because of date restriction settings",
                    "example": false,
                    "type": "boolean"
                },
                "time_zone": {
                    "description": "The course's IANA time zone name.",
                    "example": "America/Denver",
                    "type": "string"
                },
                "blueprint": {
                    "description": "optional: whether the course is set as a Blueprint Course (blueprint fields require the Blueprint Courses feature)",
                    "example": true,
                    "type": "boolean"
                },
                "blueprint_restrictions": {
                    "description": "optional: Set of restrictions applied to all locked course objects",
                    "example": {
                        "content": true,
                        "points": true,
                        "due_dates": false,
                        "availability_dates": false
                    },
                    "type": "object"
                },
                "blueprint_restrictions_by_object_type": {
                    "description": "optional: Sets of restrictions differentiated by object type applied to locked course objects",
                    "example": {
                        "assignment": {
                            "content": true,
                            "points": true
                        },
                        "wiki_page": {
                            "content": true
                        }
                    },
                    "type": "object"
                },
                "template": {
                    "description": "optional: whether the course is set as a template (requires the Course Templates feature)",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "CourseAttributes": {
            "id": "CourseAttributes",
            "description": "Attributes of a course object.  See Courses API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique Canvas identifier for the origin course",
                    "example": 7,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the origin course.",
                    "example": "Section A",
                    "type": "string"
                },
                "sis_id": {
                    "description": "The sis id of the origin_course.",
                    "example": "c34643",
                    "type": "string"
                },
                "integration_id": {
                    "description": "The integration ID of the origin_course.",
                    "example": "I-2",
                    "type": "string"
                }
            }
        },
        "CourseEpubExport": {
            "id": "CourseEpubExport",
            "description": "Combination of a Course & EpubExport.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the course",
                    "example": 101,
                    "type": "integer"
                },
                "name": {
                    "description": "the name for the course",
                    "example": "Maths 101",
                    "type": "string"
                },
                "epub_export": {
                    "description": "ePub export API object",
                    "$ref": "EpubExport"
                }
            }
        },
        "CourseEvent": {
            "id": "CourseEvent",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "ID of the event.",
                    "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                    "type": "string"
                },
                "created_at": {
                    "description": "timestamp of the event",
                    "example": "2012-07-19T15:00:00-06:00",
                    "type": "datetime"
                },
                "event_type": {
                    "description": "Course event type The event type defines the type and schema of the event_data object.",
                    "example": "updated",
                    "type": "string"
                },
                "event_data": {
                    "description": "Course event data depending on the event type.  This will return an object containing the relevant event data.  An updated event type will return an UpdatedEventData object.",
                    "example": "{}",
                    "type": "string"
                },
                "event_source": {
                    "description": "Course event source depending on the event type.  This will return a string containing the source of the event.",
                    "example": "manual|sis|api",
                    "type": "string"
                },
                "links": {
                    "description": "Jsonapi.org links",
                    "example": {
                        "course": "12345",
                        "user": "12345",
                        "page_view": "e2b76430-27a5-0131-3ca1-48e0eb13f29b"
                    },
                    "$ref": "CourseEventLink"
                }
            }
        },
        "CourseEventLink": {
            "id": "CourseEventLink",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "course": {
                    "description": "ID of the course for the event.",
                    "example": 12345,
                    "type": "integer"
                },
                "user": {
                    "description": "ID of the user for the event (who made the change).",
                    "example": 12345,
                    "type": "integer"
                },
                "page_view": {
                    "description": "ID of the page view during the event if it exists.",
                    "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                    "type": "string"
                },
                "copied_from": {
                    "description": "ID of the course that this course was copied from. This is only included if the event_type is copied_from.",
                    "example": 12345,
                    "type": "integer"
                },
                "copied_to": {
                    "description": "ID of the course that this course was copied to. This is only included if the event_type is copied_to.",
                    "example": 12345,
                    "type": "integer"
                },
                "sis_batch": {
                    "description": "ID of the SIS batch that triggered the event.",
                    "example": 12345,
                    "type": "integer"
                }
            }
        },
        "CourseNickname": {
            "id": "CourseNickname",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "course_id": {
                    "description": "the ID of the course",
                    "example": 88,
                    "type": "integer"
                },
                "name": {
                    "description": "the actual name of the course",
                    "example": "S1048576 DPMS1200 Intro to Newtonian Mechanics",
                    "type": "string"
                },
                "nickname": {
                    "description": "the calling user's nickname for the course",
                    "example": "Physics",
                    "type": "string"
                }
            }
        },
        "CourseProgress": {
            "id": "CourseProgress",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "requirement_count": {
                    "description": "total number of requirements from all modules",
                    "example": 10,
                    "type": "integer"
                },
                "requirement_completed_count": {
                    "description": "total number of requirements the user has completed from all modules",
                    "example": 1,
                    "type": "integer"
                },
                "next_requirement_url": {
                    "description": "url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress",
                    "example": "http://localhost/courses/1/modules/items/2",
                    "type": "string"
                },
                "completed_at": {
                    "description": "date the course was completed. null if the course has not been completed by this user",
                    "example": "2013-06-01T00:00:00-06:00",
                    "type": "datetime"
                }
            }
        },
        "CourseQuizExtension": {
            "id": "CourseQuizExtension",
            "description": "",
            "required": [
                "user_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user_id": {
                    "description": "The ID of the Student that needs the quiz extension.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_attempts": {
                    "description": "Number of times the student is allowed to re-take the quiz over the multiple-attempt limit.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_time": {
                    "description": "Amount of extra time allowed for the quiz submission, in minutes.",
                    "example": 60,
                    "type": "integer",
                    "format": "int64"
                },
                "manually_unlocked": {
                    "description": "The student can take the quiz even if it's locked for everyone else",
                    "example": true,
                    "type": "boolean"
                },
                "end_at": {
                    "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "CreatedEventData": {
            "id": "CreatedEventData",
            "description": "The created event data object returns all the fields that were set in the format of the following example.  If a field does not exist it was not set. The value of each field changed is in the format of [:old_value, :new_value].  The created event type also includes a created_source field to specify what triggered the creation of the course.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "name": {
                    "example": [
                        null,
                        "Course 1"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_at": {
                    "example": [
                        null,
                        "2012-01-19T15:00:00-06:00"
                    ],
                    "type": "array",
                    "items": {
                        "type": "datetime"
                    }
                },
                "conclude_at": {
                    "example": [
                        null,
                        "2012-01-19T15:00:00-08:00"
                    ],
                    "type": "array",
                    "items": {
                        "type": "datetime"
                    }
                },
                "is_public": {
                    "example": [
                        null,
                        false
                    ],
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "created_source": {
                    "description": "The type of action that triggered the creation of the course.",
                    "example": "manual|sis|api",
                    "type": "string"
                }
            }
        },
        "CustomColumn": {
            "id": "CustomColumn",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the custom gradebook column",
                    "example": 2,
                    "type": "integer"
                },
                "teacher_notes": {
                    "description": "When true, this column's visibility will be toggled in the Gradebook when a user selects to show or hide notes",
                    "example": false,
                    "type": "boolean"
                },
                "title": {
                    "description": "header text",
                    "example": "Stuff",
                    "type": "string"
                },
                "position": {
                    "description": "column order",
                    "example": 1,
                    "type": "integer"
                },
                "hidden": {
                    "description": "won't be displayed if hidden is true",
                    "example": false,
                    "type": "boolean"
                },
                "read_only": {
                    "description": "won't be editable in the gradebook UI",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "Day": {
            "id": "Day",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "date": {
                    "description": "the date represented by this entry",
                    "example": "1986-08-09",
                    "type": "datetime"
                },
                "graders": {
                    "description": "an array of the graders who were responsible for the submissions in this response. the submissions are grouped according to the person who graded them and the assignment they were submitted for.",
                    "example": "[]",
                    "type": "integer"
                }
            }
        },
        "DeveloperKey": {
            "id": "DeveloperKey",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID should match the Developer Key ID in canvas",
                    "example": "1000000000040",
                    "type": "number"
                },
                "is_lti_key": {
                    "description": "true the tool is a lti key, null is not a lti key",
                    "example": "true",
                    "type": "boolean"
                },
                "visible": {
                    "description": "Controls if the tool is visable",
                    "example": "true",
                    "type": "boolean"
                },
                "account_name": {
                    "description": "The name of the account associated with the tool",
                    "example": "The Academy",
                    "type": "string"
                },
                "public_jwk": {
                    "description": "The public key in jwk format",
                    "example": "{\n\t\"kty\":\"RSA\",\n\t\"e\":\"AQAB\",\n\t\"n\":\"ufmgt156hs168mgdhy168jrsydt168ju816rtahesuvdbmnrtd87t7h8ser\",\n\t\"alg\":\"RS256\",\n\t\"use\":\"sig\",\n\t\"kid\":\"Se68gr16s6tj_87sdr98g489dsfjy-547a6eht1\",\n}",
                    "type": "string"
                },
                "vendor_code": {
                    "description": "The code of the vendor managing the tool",
                    "example": "fi5689s9avewr68",
                    "type": "string"
                },
                "last_used_at": {
                    "description": "The date and time the tool was last used",
                    "example": "2019-06-07T20:34:33Z",
                    "type": "datetime"
                },
                "access_token_count": {
                    "description": "The number of active access tokens associated with the tool",
                    "example": "0",
                    "type": "number"
                },
                "redirect_uris": {
                    "description": "redirect uris description",
                    "example": "https://redirect.to.here.com",
                    "type": "string"
                },
                "redirect_uri": {
                    "description": "redirect uri description",
                    "example": "https://redirect.to.here.com",
                    "type": "string"
                },
                "api_key": {
                    "description": "Api key for api access for the tool",
                    "example": "sd45fg648sr546tgh15S15df5se56r4xdf45asef456",
                    "type": "string"
                },
                "notes": {
                    "description": "Notes for use specifications for the tool",
                    "example": "Used for sorting graded assignments",
                    "type": "string"
                },
                "name": {
                    "description": "Display name of the tool",
                    "example": "Tool 1",
                    "type": "string"
                },
                "user_id": {
                    "description": "ID of the user associated with the tool",
                    "example": "tu816dnrs6zdsg148918dmu",
                    "type": "string"
                },
                "created_at": {
                    "description": "The time the jwk was created",
                    "example": "2019-06-07T20:34:33Z",
                    "type": "datetime"
                },
                "user_name": {
                    "description": "The user name of the tool creator",
                    "example": "johnsmith",
                    "type": "string"
                },
                "email": {
                    "description": "Email associated with the tool owner",
                    "example": "johnsmith@instructure.com",
                    "type": "string"
                },
                "require_scopes": {
                    "description": "True if the tool has required permissions, null if there are no needed permissions",
                    "example": "true",
                    "type": "boolean"
                },
                "icon_url": {
                    "description": "Icon to be displayed with the name of the tool",
                    "example": "null",
                    "type": "string"
                },
                "scopes": {
                    "description": "Specified permissions for the tool",
                    "example": "https://canvas.instructure.com/lti/public_jwk/scope/update",
                    "type": "string"
                },
                "workflow_state": {
                    "description": "The current state of the tool",
                    "example": "active",
                    "type": "string"
                }
            }
        },
        "DiscussionTopic": {
            "id": "DiscussionTopic",
            "description": "A discussion topic",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of this topic.",
                    "example": 1,
                    "type": "integer"
                },
                "title": {
                    "description": "The topic title.",
                    "example": "Topic 1",
                    "type": "string"
                },
                "message": {
                    "description": "The HTML content of the message body.",
                    "example": "<p>content here</p>",
                    "type": "string"
                },
                "html_url": {
                    "description": "The URL to the discussion topic in canvas.",
                    "example": "https://<canvas>/courses/1/discussion_topics/2",
                    "type": "string"
                },
                "posted_at": {
                    "description": "The datetime the topic was posted. If it is null it hasn't been posted yet. (see delayed_post_at)",
                    "example": "2037-07-21T13:29:31Z",
                    "type": "datetime"
                },
                "last_reply_at": {
                    "description": "The datetime for when the last reply was in the topic.",
                    "example": "2037-07-28T19:38:31Z",
                    "type": "datetime"
                },
                "require_initial_post": {
                    "description": "If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.",
                    "example": false,
                    "type": "boolean"
                },
                "user_can_see_posts": {
                    "description": "Whether or not posts in this topic are visible to the user.",
                    "example": true,
                    "type": "boolean"
                },
                "discussion_subentry_count": {
                    "description": "The count of entries in the topic.",
                    "example": 0,
                    "type": "integer"
                },
                "read_state": {
                    "description": "The read_state of the topic for the current user, 'read' or 'unread'.",
                    "example": "read",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "read",
                            "unread"
                        ]
                    }
                },
                "unread_count": {
                    "description": "The count of unread entries of this topic for the current user.",
                    "example": 0,
                    "type": "integer"
                },
                "subscribed": {
                    "description": "Whether or not the current user is subscribed to this topic.",
                    "example": true,
                    "type": "boolean"
                },
                "subscription_hold": {
                    "description": "(Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement",
                    "example": "not_in_group_set",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "initial_post_required",
                            "not_in_group_set",
                            "not_in_group",
                            "topic_is_announcement"
                        ]
                    }
                },
                "assignment_id": {
                    "description": "The unique identifier of the assignment if the topic is for grading, otherwise null.",
                    "type": "integer"
                },
                "delayed_post_at": {
                    "description": "The datetime to publish the topic (if not right away).",
                    "type": "datetime"
                },
                "published": {
                    "description": "Whether this discussion topic is published (true) or draft state (false)",
                    "example": true,
                    "type": "boolean"
                },
                "lock_at": {
                    "description": "The datetime to lock the topic (if ever).",
                    "type": "datetime"
                },
                "locked": {
                    "description": "Whether or not the discussion is 'closed for comments'.",
                    "example": false,
                    "type": "boolean"
                },
                "pinned": {
                    "description": "Whether or not the discussion has been 'pinned' by an instructor",
                    "example": false,
                    "type": "boolean"
                },
                "locked_for_user": {
                    "description": "Whether or not this is locked for the user.",
                    "example": true,
                    "type": "boolean"
                },
                "lock_info": {
                    "description": "(Optional) Information for the user about the lock. Present when locked_for_user is true.",
                    "$ref": "LockInfo"
                },
                "lock_explanation": {
                    "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                    "example": "This discussion is locked until September 1 at 12:00am",
                    "type": "string"
                },
                "user_name": {
                    "description": "The username of the topic creator.",
                    "example": "User Name",
                    "type": "string"
                },
                "topic_children": {
                    "description": "DEPRECATED An array of topic_ids for the group discussions the user is a part of.",
                    "example": [
                        5,
                        7,
                        10
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "group_topic_children": {
                    "description": "An array of group discussions the user is a part of. Fields include: id, group_id",
                    "example": [
                        {
                            "id": 5,
                            "group_id": 1
                        },
                        {
                            "id": 7,
                            "group_id": 5
                        },
                        {
                            "id": 10,
                            "group_id": 4
                        }
                    ],
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "root_topic_id": {
                    "description": "If the topic is for grading and a group assignment this will point to the original topic in the course.",
                    "type": "integer"
                },
                "podcast_url": {
                    "description": "If the topic is a podcast topic this is the feed url for the current user.",
                    "example": "/feeds/topics/1/enrollment_1XAcepje4u228rt4mi7Z1oFbRpn3RAkTzuXIGOPe.rss",
                    "type": "string"
                },
                "discussion_type": {
                    "description": "The type of discussion. Values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                    "example": "side_comment",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "side_comment",
                            "threaded"
                        ]
                    }
                },
                "group_category_id": {
                    "description": "The unique identifier of the group category if the topic is a group discussion, otherwise null.",
                    "type": "integer"
                },
                "attachments": {
                    "description": "Array of file attachments.",
                    "type": "array",
                    "items": {
                        "$ref": "FileAttachment"
                    }
                },
                "permissions": {
                    "description": "The current user's permissions on this topic.",
                    "example": {
                        "attach": true
                    },
                    "type": "object",
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "boolean"
                    }
                },
                "allow_rating": {
                    "description": "Whether or not users can rate entries in this topic.",
                    "example": true,
                    "type": "boolean"
                },
                "only_graders_can_rate": {
                    "description": "Whether or not grade permissions are required to rate entries.",
                    "example": true,
                    "type": "boolean"
                },
                "sort_by_rating": {
                    "description": "Whether or not entries should be sorted by rating.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "Enrollment": {
            "id": "Enrollment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the enrollment.",
                    "example": 1,
                    "type": "integer"
                },
                "course_id": {
                    "description": "The unique id of the course.",
                    "example": 1,
                    "type": "integer"
                },
                "sis_course_id": {
                    "description": "The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "course_integration_id": {
                    "description": "The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "course_section_id": {
                    "description": "The unique id of the user's section.",
                    "example": 1,
                    "type": "integer"
                },
                "section_integration_id": {
                    "description": "The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "sis_account_id": {
                    "description": "The SIS Account ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "sis_section_id": {
                    "description": "The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "sis_user_id": {
                    "description": "The SIS User ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "enrollment_state": {
                    "description": "The state of the user's enrollment in the course.",
                    "example": "active",
                    "type": "string"
                },
                "limit_privileges_to_course_section": {
                    "description": "User can only access his or her own course section.",
                    "example": true,
                    "type": "boolean"
                },
                "sis_import_id": {
                    "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                    "example": 83,
                    "type": "integer"
                },
                "root_account_id": {
                    "description": "The unique id of the user's account.",
                    "example": 1,
                    "type": "integer"
                },
                "type": {
                    "description": "The enrollment type. One of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', 'ObserverEnrollment'.",
                    "example": "StudentEnrollment",
                    "type": "string"
                },
                "user_id": {
                    "description": "The unique id of the user.",
                    "example": 1,
                    "type": "integer"
                },
                "associated_user_id": {
                    "description": "The unique id of the associated user. Will be null unless type is ObserverEnrollment.",
                    "example": null,
                    "type": "integer"
                },
                "role": {
                    "description": "The enrollment role, for course-level permissions. This field will match `type` if the enrollment role has not been customized.",
                    "example": "StudentEnrollment",
                    "type": "string"
                },
                "role_id": {
                    "description": "The id of the enrollment role.",
                    "example": 1,
                    "type": "integer"
                },
                "created_at": {
                    "description": "The created time of the enrollment, in ISO8601 format.",
                    "example": "2012-04-18T23:08:51Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The updated time of the enrollment, in ISO8601 format.",
                    "example": "2012-04-18T23:08:51Z",
                    "type": "datetime"
                },
                "start_at": {
                    "description": "The start time of the enrollment, in ISO8601 format.",
                    "example": "2012-04-18T23:08:51Z",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "The end time of the enrollment, in ISO8601 format.",
                    "example": "2012-04-18T23:08:51Z",
                    "type": "datetime"
                },
                "last_activity_at": {
                    "description": "The last activity time of the user for the enrollment, in ISO8601 format.",
                    "example": "2012-04-18T23:08:51Z",
                    "type": "datetime"
                },
                "last_attended_at": {
                    "description": "The last attended date of the user for the enrollment in a course, in ISO8601 format.",
                    "example": "2012-04-18T23:08:51Z",
                    "type": "datetime"
                },
                "total_activity_time": {
                    "description": "The total activity time of the user for the enrollment, in seconds.",
                    "example": 260,
                    "type": "integer"
                },
                "html_url": {
                    "description": "The URL to the Canvas web UI page for this course enrollment.",
                    "example": "https://...",
                    "type": "string"
                },
                "grades": {
                    "description": "The URL to the Canvas web UI page containing the grades associated with this enrollment.",
                    "example": {
                        "html_url": "https://...",
                        "current_score": 35,
                        "current_grade": null,
                        "final_score": 6.67,
                        "final_grade": null
                    },
                    "$ref": "Grade"
                },
                "user": {
                    "description": "A description of the user.",
                    "example": {
                        "id": 3,
                        "name": "Student 1",
                        "sortable_name": "1, Student",
                        "short_name": "Stud 1"
                    },
                    "$ref": "User"
                },
                "override_grade": {
                    "description": "The user's override grade for the course.",
                    "example": "A",
                    "type": "string"
                },
                "override_score": {
                    "description": "The user's override score for the course.",
                    "example": 99.99,
                    "type": "number"
                },
                "unposted_current_grade": {
                    "description": "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.",
                    "example": "",
                    "type": "string"
                },
                "unposted_final_grade": {
                    "description": "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..",
                    "example": "",
                    "type": "string"
                },
                "unposted_current_score": {
                    "description": "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                    "example": "",
                    "type": "string"
                },
                "unposted_final_score": {
                    "description": "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                    "example": "",
                    "type": "string"
                },
                "has_grading_periods": {
                    "description": "optional: Indicates whether the course the enrollment belongs to has grading periods set up. (applies only to student enrollments, and only available in course endpoints)",
                    "example": true,
                    "type": "boolean"
                },
                "totals_for_all_grading_periods_option": {
                    "description": "optional: Indicates whether the course the enrollment belongs to has the Display Totals for 'All Grading Periods' feature enabled. (applies only to student enrollments, and only available in course endpoints)",
                    "example": true,
                    "type": "boolean"
                },
                "current_grading_period_title": {
                    "description": "optional: The name of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                    "example": "Fall Grading Period",
                    "type": "string"
                },
                "current_grading_period_id": {
                    "description": "optional: The id of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                    "example": 5,
                    "type": "integer"
                },
                "current_period_override_grade": {
                    "description": "The user's override grade for the current grading period.",
                    "example": "A",
                    "type": "string"
                },
                "current_period_override_score": {
                    "description": "The user's override score for the current grading period.",
                    "example": 99.99,
                    "type": "number"
                },
                "current_period_unposted_current_score": {
                    "description": "optional: The student's score in the course for the current grading period, including muted/unposted assignments. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                    "example": 95.8,
                    "type": "number"
                },
                "current_period_unposted_final_score": {
                    "description": "optional: The student's score in the course for the current grading period, including muted/unposted assignments and including ungraded assignments with a score of 0. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                    "example": 85.25,
                    "type": "number"
                },
                "current_period_unposted_current_grade": {
                    "description": "optional: The letter grade equivalent of current_period_unposted_current_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                    "example": "A",
                    "type": "string"
                },
                "current_period_unposted_final_grade": {
                    "description": "optional: The letter grade equivalent of current_period_unposted_final_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                    "example": "B",
                    "type": "string"
                }
            }
        },
        "EnrollmentTerm": {
            "id": "EnrollmentTerm",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the enrollment term.",
                    "example": "1",
                    "type": "integer"
                },
                "sis_term_id": {
                    "description": "The SIS id of the term. Only included if the user has permission to view SIS information.",
                    "example": "Sp2014",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                    "example": 34,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the term.",
                    "example": "Spring 2014",
                    "type": "string"
                },
                "start_at": {
                    "description": "The datetime of the start of the term.",
                    "example": "2014-01-06T08:00:00-05:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "The datetime of the end of the term.",
                    "example": "2014-05-16T05:00:00-04:00",
                    "type": "datetime"
                },
                "workflow_state": {
                    "description": "The state of the term. Can be 'active' or 'deleted'.",
                    "example": "active",
                    "type": "string"
                },
                "overrides": {
                    "description": "Term date overrides for specific enrollment types",
                    "example": {
                        "StudentEnrollment": {
                            "start_at": "2014-01-07T08:00:00-05:00",
                            "end_at": "2014-05-14T05:00:00-04:0"
                        }
                    },
                    "type": "object"
                },
                "course_count": {
                    "description": "The number of courses in the term (available via include)",
                    "example": "80",
                    "type": "integer"
                }
            }
        },
        "EnrollmentTermsList": {
            "id": "EnrollmentTermsList",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "enrollment_terms": {
                    "description": "a paginated list of all terms in the account",
                    "type": "array",
                    "example": [],
                    "items": {
                        "$ref": "EnrollmentTerm"
                    }
                }
            }
        },
        "ePortfolio": {
            "id": "ePortfolio",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The database ID of the ePortfolio",
                    "example": 1,
                    "type": "integer"
                },
                "user_id": {
                    "description": "The user ID to which the ePortfolio belongs",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the ePortfolio",
                    "example": "My Academic Journey",
                    "type": "string"
                },
                "public": {
                    "description": "Whether or not the ePortfolio is visible without authentication",
                    "example": true,
                    "type": "boolean"
                },
                "created_at": {
                    "description": "The creation timestamp for the ePortfolio",
                    "example": "2021-09-20T18:59:37Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The timestamp of the last time any of the ePortfolio attributes changed",
                    "example": "2021-09-20T18:59:37Z",
                    "type": "datetime"
                },
                "workflow_state": {
                    "description": "The state of the ePortfolio. Either 'active' or 'deleted'",
                    "example": "active",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "The timestamp when the ePortfolio was deleted, or else null",
                    "example": "2021-09-20T18:59:37Z",
                    "type": "datetime"
                },
                "spam_status": {
                    "description": "A flag indicating whether the ePortfolio has been\n      flagged or moderated as spam. One of 'flagged_as_possible_spam',\n      'marked_as_safe', 'marked_as_spam', or null",
                    "example": null,
                    "type": "string"
                }
            }
        },
        "ePortfolioPage": {
            "id": "ePortfolioPage",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The database ID of the ePortfolio",
                    "example": 1,
                    "type": "integer"
                },
                "eportfolio_id": {
                    "description": "The ePortfolio ID to which the entry belongs",
                    "example": 1,
                    "type": "integer"
                },
                "position": {
                    "description": "The positional order of the entry in the list",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the ePortfolio",
                    "example": "My Academic Journey",
                    "type": "string"
                },
                "content": {
                    "description": "The user entered content of the entry",
                    "example": "A long time ago...",
                    "type": "string"
                },
                "created_at": {
                    "description": "The creation timestamp for the ePortfolio",
                    "example": "2021-09-20T18:59:37Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The timestamp of the last time any of the ePortfolio attributes changed",
                    "example": "2021-09-20T18:59:37Z",
                    "type": "datetime"
                }
            }
        },
        "EpubExport": {
            "id": "EpubExport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the export",
                    "example": 101,
                    "type": "integer"
                },
                "created_at": {
                    "description": "the date and time this export was requested",
                    "example": "2014-01-01T00:00:00Z",
                    "type": "datetime"
                },
                "attachment": {
                    "description": "attachment api object for the export ePub (not present until the export completes)",
                    "example": {
                        "url": "https://example.com/api/v1/attachments/789?download_frd=1&verifier=bG9sY2F0cyEh"
                    },
                    "$ref": "File"
                },
                "progress_url": {
                    "description": "The api endpoint for polling the current progress",
                    "example": "https://example.com/api/v1/progress/4",
                    "type": "string"
                },
                "user_id": {
                    "description": "The ID of the user who started the export",
                    "example": 4,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "Current state of the ePub export: created exporting exported generating generated failed",
                    "example": "exported",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "created",
                            "exporting",
                            "exported",
                            "generating",
                            "generated",
                            "failed"
                        ]
                    }
                }
            }
        },
        "ErrorReport": {
            "id": "ErrorReport",
            "description": "A collection of information around a specific notification of a problem",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "subject": {
                    "description": "The users problem summary, like an email subject line",
                    "type": "string",
                    "example": "File upload breaking"
                },
                "comments": {
                    "description": "long form documentation of what was witnessed",
                    "type": "string",
                    "example": "When I went to upload a .mov file to my files page, I got an error.  Retrying didn't help, other file types seem ok"
                },
                "user_perceived_severity": {
                    "description": "categorization of how bad the user thinks the problem is.  Should be one of [just_a_comment, not_urgent, workaround_possible, blocks_what_i_need_to_do, extreme_critical_emergency].",
                    "type": "string",
                    "example": "just_a_comment"
                },
                "email": {
                    "description": "the email address of the reporting user",
                    "type": "string",
                    "example": "name@example.com"
                },
                "url": {
                    "description": "URL of the page on which the error was reported",
                    "type": "string",
                    "example": "https://canvas.instructure.com/courses/1"
                },
                "context_asset_string": {
                    "description": "string describing the asset being interacted with at the time of error.  Formatted '[type]_[id]'",
                    "type": "string",
                    "example": "user_1"
                },
                "user_roles": {
                    "description": "comma seperated list of roles the reporting user holds.  Can be one [student], or many [teacher,admin]",
                    "type": "string",
                    "example": "user,teacher,admin"
                }
            }
        },
        "ExceptionRecord": {
            "id": "ExceptionRecord",
            "description": "Lists associated courses that did not receive a change propagated from a blueprint",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "course_id": {
                    "description": "The ID of the associated course",
                    "example": 101,
                    "type": "integer",
                    "format": "int64"
                },
                "conflicting_changes": {
                    "description": "A list of change classes in the associated course's copy of the item that prevented a blueprint change from being applied. One or more of ['content', 'points', 'due_dates', 'availability_dates'].",
                    "example": [
                        "points"
                    ],
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "ExternalFeed": {
            "id": "ExternalFeed",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the feed",
                    "example": 5,
                    "type": "integer"
                },
                "display_name": {
                    "description": "The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL",
                    "example": "My Blog",
                    "type": "string"
                },
                "url": {
                    "description": "The HTTP/HTTPS URL to the feed",
                    "example": "http://example.com/myblog.rss",
                    "type": "string"
                },
                "header_match": {
                    "description": "If not null, only feed entries whose title contains this string will trigger new posts in Canvas",
                    "example": "pattern",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this external feed was added to Canvas",
                    "example": "2012-06-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "verbosity": {
                    "description": "The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used.",
                    "example": "truncate",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "link_only",
                            "truncate",
                            "full"
                        ]
                    }
                }
            }
        },
        "ExternalToolTagAttributes": {
            "id": "ExternalToolTagAttributes",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "url": {
                    "description": "URL to the external tool",
                    "example": "http://instructure.com",
                    "type": "string"
                },
                "new_tab": {
                    "description": "Whether or not there is a new tab for the external tool",
                    "example": false,
                    "type": "boolean"
                },
                "resource_link_id": {
                    "description": "the identifier for this tool_tag",
                    "example": "ab81173af98b8c33e66a",
                    "type": "string"
                }
            }
        },
        "Favorite": {
            "id": "Favorite",
            "description": "",
            "required": [
                ""
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "context_id": {
                    "description": "The ID of the object the Favorite refers to",
                    "example": 1170,
                    "type": "integer"
                },
                "context_type": {
                    "description": "The type of the object the Favorite refers to (currently, only 'Course' is supported)",
                    "example": "Course",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "Course"
                        ]
                    }
                }
            }
        },
        "Feature": {
            "id": "Feature",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "feature": {
                    "description": "The symbolic name of the feature, used in FeatureFlags",
                    "example": "fancy_wickets",
                    "type": "string"
                },
                "display_name": {
                    "description": "The user-visible name of the feature",
                    "example": "Fancy Wickets",
                    "type": "string"
                },
                "applies_to": {
                    "description": "The type of object the feature applies to (RootAccount, Account, Course, or User):\n * RootAccount features may only be controlled by flags on root accounts.\n * Account features may be controlled by flags on accounts and their parent accounts.\n * Course features may be controlled by flags on courses and their parent accounts.\n * User features may be controlled by flags on users and site admin only.",
                    "example": "Course",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "Course",
                            "RootAccount",
                            "Account",
                            "User"
                        ]
                    }
                },
                "feature_flag": {
                    "description": "The FeatureFlag that applies to the caller",
                    "example": {
                        "feature": "fancy_wickets",
                        "state": "allowed"
                    },
                    "$ref": "FeatureFlag"
                },
                "root_opt_in": {
                    "description": "If true, a feature that is 'allowed' globally will be 'off' by default in root accounts. Otherwise, root accounts inherit the global 'allowed' setting, which allows sub-accounts and courses to turn features on with no root account action.",
                    "example": true,
                    "type": "boolean"
                },
                "beta": {
                    "description": "Whether the feature is a feature preview. If true, opting in includes ongoing updates outside the regular release schedule.",
                    "example": true,
                    "type": "boolean"
                },
                "autoexpand": {
                    "description": "Whether the details of the feature are autoexpanded on page load vs. the user clicking to expand.",
                    "example": true,
                    "type": "boolean"
                },
                "release_notes_url": {
                    "description": "A URL to the release notes describing the feature",
                    "example": "http://canvas.example.com/release_notes#fancy_wickets",
                    "type": "string"
                }
            }
        },
        "FeatureFlag": {
            "id": "FeatureFlag",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "context_type": {
                    "description": "The type of object to which this flag applies (Account, Course, or User). (This field is not present if this FeatureFlag represents the global Canvas default)",
                    "example": "Account",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "Course",
                            "Account",
                            "User"
                        ]
                    }
                },
                "context_id": {
                    "description": "The id of the object to which this flag applies (This field is not present if this FeatureFlag represents the global Canvas default)",
                    "example": 1038,
                    "type": "integer"
                },
                "feature": {
                    "description": "The feature this flag controls",
                    "example": "fancy_wickets",
                    "type": "string"
                },
                "state": {
                    "description": "The policy for the feature at this context.  can be 'off', 'allowed', 'allowed_on', or 'on'.",
                    "example": "allowed",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "off",
                            "allowed",
                            "allowed_on",
                            "on"
                        ]
                    }
                },
                "locked": {
                    "description": "If set, this feature flag cannot be changed in the caller's context because the flag is set 'off' or 'on' in a higher context",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "FederatedAttributeConfig": {
            "id": "FederatedAttributeConfig",
            "description": "A single attribute name to be federated when a user logs in",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "attribute": {
                    "description": "The name of the attribute as it will be sent from the authentication provider",
                    "type": "string",
                    "example": "mail"
                },
                "provisioning_only": {
                    "description": "If the attribute should be applied only when provisioning a new user, rather than all logins",
                    "type": "boolean",
                    "default": false,
                    "example": false
                }
            }
        },
        "FederatedAttributesConfig": {
            "id": "FederatedAttributesConfig",
            "description": "A mapping of Canvas attribute names to attribute names that a provider may send, in order to update the value of these attributes when a user logs in. The values can be a FederatedAttributeConfig, or a raw string corresponding to the \"attribute\" property of a FederatedAttributeConfig. In responses, full FederatedAttributeConfig objects are returned if JIT provisioning is enabled, otherwise just the attribute names are returned.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "admin_roles": {
                    "description": "A comma separated list of role names to grant to the user. Note that these only apply at the root account level, and not sub-accounts. If the attribute is not marked for provisioning only, the user will also be removed from any other roles they currently hold that are not still specified by the IdP.",
                    "type": "string"
                },
                "display_name": {
                    "description": "The full display name of the user",
                    "type": "string"
                },
                "email": {
                    "description": "The user's e-mail address",
                    "type": "string"
                },
                "given_name": {
                    "description": "The first, or given, name of the user",
                    "type": "string"
                },
                "integration_id": {
                    "description": "The secondary unique identifier for SIS purposes",
                    "type": "string"
                },
                "locale": {
                    "description": "The user's preferred locale/language",
                    "type": "string"
                },
                "name": {
                    "description": "The full name of the user",
                    "type": "string"
                },
                "sis_user_id": {
                    "description": "The unique SIS identifier",
                    "type": "string"
                },
                "sortable_name": {
                    "description": "The full name of the user for sorting purposes",
                    "type": "string"
                },
                "surname": {
                    "description": "The surname, or last name, of the user",
                    "type": "string"
                },
                "timezone": {
                    "description": "The user's preferred time zone",
                    "type": "string"
                }
            }
        },
        "File": {
            "id": "File",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": 569,
                    "type": "integer"
                },
                "uuid": {
                    "example": "SUj23659sdfASF35h265kf352YTdnC4",
                    "type": "string"
                },
                "folder_id": {
                    "example": 4207,
                    "type": "integer"
                },
                "display_name": {
                    "example": "file.txt",
                    "type": "string"
                },
                "filename": {
                    "example": "file.txt",
                    "type": "string"
                },
                "content-type": {
                    "example": "text/plain",
                    "type": "string"
                },
                "url": {
                    "example": "http://www.example.com/files/569/download?download_frd=1&verifier=c6HdZmxOZa0Fiin2cbvZeI8I5ry7yqD7RChQzb6P",
                    "type": "string"
                },
                "size": {
                    "example": 43451,
                    "type": "integer",
                    "description": "file size in bytes"
                },
                "created_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                },
                "unlock_at": {
                    "example": "2012-07-07T14:58:50Z",
                    "type": "datetime"
                },
                "locked": {
                    "example": false,
                    "type": "boolean"
                },
                "hidden": {
                    "example": false,
                    "type": "boolean"
                },
                "lock_at": {
                    "example": "2012-07-20T14:58:50Z",
                    "type": "datetime"
                },
                "hidden_for_user": {
                    "example": false,
                    "type": "boolean"
                },
                "thumbnail_url": {
                    "type": "string"
                },
                "modified_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                },
                "mime_class": {
                    "type": "string",
                    "example": "html",
                    "description": "simplified content-type mapping"
                },
                "media_entry_id": {
                    "type": "string",
                    "example": "m-3z31gfpPf129dD3sSDF85SwSDFnwe",
                    "description": "identifier for file in third-party transcoding service"
                },
                "locked_for_user": {
                    "example": false,
                    "type": "boolean"
                },
                "lock_info": {
                    "$ref": "LockInfo"
                },
                "lock_explanation": {
                    "example": "This assignment is locked until September 1 at 12:00am",
                    "type": "string"
                },
                "preview_url": {
                    "type": "string",
                    "description": "optional: url to the document preview. This url is specific to the user making the api call. Only included in submission endpoints."
                }
            }
        },
        "FileAttachment": {
            "id": "FileAttachment",
            "description": "A file attachment",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "content-type": {
                    "example": "unknown/unknown",
                    "type": "string"
                },
                "url": {
                    "example": "http://www.example.com/courses/1/files/1/download",
                    "type": "string"
                },
                "filename": {
                    "example": "content.txt",
                    "type": "string"
                },
                "display_name": {
                    "example": "content.txt",
                    "type": "string"
                }
            }
        },
        "FileBasic": {
            "id": "FileBasic",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "size": {
                    "example": 4,
                    "type": "integer"
                },
                "content-type": {
                    "example": "text/plain",
                    "type": "string"
                },
                "url": {
                    "example": "http://www.example.com/files/569/download?download_frd=1&verifier=c6HdZmxOZa0Fiin2cbvZeI8I5ry7yqD7RChQzb6P",
                    "type": "string"
                },
                "id": {
                    "example": 569,
                    "type": "integer"
                },
                "display_name": {
                    "example": "file.txt",
                    "type": "string"
                },
                "created_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                }
            }
        },
        "Folder": {
            "id": "Folder",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "context_type": {
                    "example": "Course",
                    "type": "string"
                },
                "context_id": {
                    "example": 1401,
                    "type": "integer"
                },
                "files_count": {
                    "example": 0,
                    "type": "integer"
                },
                "position": {
                    "example": 3,
                    "type": "integer"
                },
                "updated_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                },
                "folders_url": {
                    "example": "https://www.example.com/api/v1/folders/2937/folders",
                    "type": "string"
                },
                "files_url": {
                    "example": "https://www.example.com/api/v1/folders/2937/files",
                    "type": "string"
                },
                "full_name": {
                    "example": "course files/11folder",
                    "type": "string"
                },
                "lock_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                },
                "id": {
                    "example": 2937,
                    "type": "integer"
                },
                "folders_count": {
                    "example": 0,
                    "type": "integer"
                },
                "name": {
                    "example": "11folder",
                    "type": "string"
                },
                "parent_folder_id": {
                    "example": 2934,
                    "type": "integer"
                },
                "created_at": {
                    "example": "2012-07-06T14:58:50Z",
                    "type": "datetime"
                },
                "unlock_at": {
                    "type": "datetime"
                },
                "hidden": {
                    "example": false,
                    "type": "boolean"
                },
                "hidden_for_user": {
                    "example": false,
                    "type": "boolean"
                },
                "locked": {
                    "example": true,
                    "type": "boolean"
                },
                "locked_for_user": {
                    "example": false,
                    "type": "boolean"
                },
                "for_submissions": {
                    "example": false,
                    "type": "boolean",
                    "description": "If true, indicates this is a read-only folder containing files submitted to assignments"
                }
            }
        },
        "Grade": {
            "id": "Grade",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "html_url": {
                    "description": "The URL to the Canvas web UI page for the user's grades, if this is a student enrollment.",
                    "example": "",
                    "type": "string"
                },
                "current_grade": {
                    "description": "The user's current grade in the class. Only included if user has permissions to view this grade.",
                    "example": "",
                    "type": "string"
                },
                "final_grade": {
                    "description": "The user's final grade for the class. Only included if user has permissions to view this grade.",
                    "example": "",
                    "type": "string"
                },
                "current_score": {
                    "description": "The user's current score in the class. Only included if user has permissions to view this score.",
                    "example": "",
                    "type": "string"
                },
                "final_score": {
                    "description": "The user's final score for the class. Only included if user has permissions to view this score.",
                    "example": "",
                    "type": "string"
                },
                "current_points": {
                    "description": "The total points the user has earned in the class. Only included if user has permissions to view this score and 'current_points' is passed in the request's 'include' parameter.",
                    "example": 150,
                    "type": "integer"
                },
                "unposted_current_grade": {
                    "description": "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.",
                    "example": "",
                    "type": "string"
                },
                "unposted_final_grade": {
                    "description": "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..",
                    "example": "",
                    "type": "string"
                },
                "unposted_current_score": {
                    "description": "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                    "example": "",
                    "type": "string"
                },
                "unposted_final_score": {
                    "description": "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                    "example": "",
                    "type": "string"
                },
                "unposted_current_points": {
                    "description": "The total points the user has earned in the class, including muted/unposted assignments. Only included if user has permissions to view this score (typically teachers, TAs, and admins) and 'current_points' is passed in the request's 'include' parameter.",
                    "example": 150,
                    "type": "integer"
                }
            }
        },
        "GradeChangeEvent": {
            "id": "GradeChangeEvent",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "ID of the event.",
                    "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                    "type": "string"
                },
                "created_at": {
                    "description": "timestamp of the event",
                    "example": "2012-07-19T15:00:00-06:00",
                    "type": "datetime"
                },
                "event_type": {
                    "description": "GradeChange event type",
                    "example": "grade_change",
                    "type": "string"
                },
                "excused_after": {
                    "description": "Boolean indicating whether the submission was excused after the change.",
                    "example": true,
                    "type": "boolean"
                },
                "excused_before": {
                    "description": "Boolean indicating whether the submission was excused before the change.",
                    "example": false,
                    "type": "boolean"
                },
                "grade_after": {
                    "description": "The grade after the change.",
                    "example": "8",
                    "type": "string"
                },
                "grade_before": {
                    "description": "The grade before the change.",
                    "example": "8",
                    "type": "string"
                },
                "graded_anonymously": {
                    "description": "Boolean indicating whether the student name was visible when the grade was given. Could be null if the grade change record was created before this feature existed.",
                    "example": true,
                    "type": "boolean"
                },
                "version_number": {
                    "description": "Version Number of the grade change submission.",
                    "example": "1",
                    "type": "string"
                },
                "request_id": {
                    "description": "The unique request id of the request during the grade change.",
                    "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                    "type": "string"
                },
                "links": {
                    "$ref": "GradeChangeEventLinks"
                }
            }
        },
        "GradeChangeEventLinks": {
            "id": "GradeChangeEventLinks",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "assignment": {
                    "description": "ID of the assignment associated with the event",
                    "example": 2319,
                    "type": "integer"
                },
                "course": {
                    "description": "ID of the course associated with the event. will match the context_id in the associated assignment if the context type for the assignment is a course",
                    "example": 2319,
                    "type": "integer"
                },
                "student": {
                    "description": "ID of the student associated with the event. will match the user_id in the associated submission.",
                    "example": 2319,
                    "type": "integer"
                },
                "grader": {
                    "description": "ID of the grader associated with the event. will match the grader_id in the associated submission.",
                    "example": 2319,
                    "type": "integer"
                },
                "page_view": {
                    "description": "ID of the page view during the event if it exists.",
                    "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                    "type": "string"
                }
            }
        },
        "Grader": {
            "id": "Grader",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the user_id of the user who graded the contained submissions",
                    "example": 27,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the user who graded the contained submissions",
                    "example": "Some User",
                    "type": "string"
                },
                "assignments": {
                    "description": "the assignment groups for all submissions in this response that were graded by this user.  The details are not nested inside here, but the fact that an assignment is present here means that the grader did grade submissions for this assignment on the contextual date. You can use the id of a grader and of an assignment to make another API call to find all submissions for a grader/assignment combination on a given date.",
                    "example": [
                        1,
                        2,
                        3
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "GradingPeriod": {
            "id": "GradingPeriod",
            "description": "",
            "required": [
                "id",
                "start_date",
                "end_date"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the grading period.",
                    "example": 1023,
                    "type": "integer"
                },
                "title": {
                    "description": "The title for the grading period.",
                    "example": "First Block",
                    "type": "string"
                },
                "start_date": {
                    "description": "The start date of the grading period.",
                    "example": "2014-01-07T15:04:00Z",
                    "type": "string",
                    "format": "date-time"
                },
                "end_date": {
                    "description": "The end date of the grading period.",
                    "example": "2014-05-07T17:07:00Z",
                    "type": "string",
                    "format": "date-time"
                },
                "close_date": {
                    "description": "Grades can only be changed before the close date of the grading period.",
                    "example": "2014-06-07T17:07:00Z",
                    "type": "string",
                    "format": "date-time"
                },
                "weight": {
                    "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade",
                    "type": "integer",
                    "example": "33.33"
                },
                "is_closed": {
                    "description": "If true, the grading period's close_date has passed.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "GradingPeriodSets": {
            "id": "GradingPeriodSets",
            "description": "",
            "required": [
                "title"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "title": {
                    "description": "The title of the grading period set.",
                    "example": "Hello World",
                    "type": "string"
                },
                "weighted": {
                    "description": "If true, the grading periods in the set are weighted.",
                    "example": true,
                    "type": "boolean"
                },
                "display_totals_for_all_grading_periods": {
                    "description": "If true, the totals for all grading periods in the set are displayed.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "GradingRules": {
            "id": "GradingRules",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "drop_lowest": {
                    "description": "Number of lowest scores to be dropped for each user.",
                    "example": 1,
                    "type": "integer"
                },
                "drop_highest": {
                    "description": "Number of highest scores to be dropped for each user.",
                    "example": 1,
                    "type": "integer"
                },
                "never_drop": {
                    "description": "Assignment IDs that should never be dropped.",
                    "example": [
                        33,
                        17,
                        24
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "GradingSchemeEntry": {
            "id": "GradingSchemeEntry",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "name": {
                    "description": "The name for an entry value within a GradingStandard that describes the range of the value",
                    "example": "A",
                    "type": "string"
                },
                "value": {
                    "description": "The value for the name of the entry within a GradingStandard.  The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0.",
                    "example": 0.9,
                    "type": "integer"
                }
            }
        },
        "GradingStandard": {
            "id": "GradingStandard",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "title": {
                    "description": "the title of the grading standard",
                    "example": "Account Standard",
                    "type": "string"
                },
                "id": {
                    "description": "the id of the grading standard",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "description": "the context this standard is associated with, either 'Account' or 'Course'",
                    "example": "Account",
                    "type": "string"
                },
                "context_id": {
                    "description": "the id for the context either the Account or Course id",
                    "example": 1,
                    "type": "integer"
                },
                "grading_scheme": {
                    "description": "A list of GradingSchemeEntry that make up the Grading Standard as an array of values with the scheme name and value",
                    "example": [
                        {
                            "name": "A",
                            "value": 0.9
                        },
                        {
                            "name": "B",
                            "value": 0.8
                        },
                        {
                            "name": "C",
                            "value": 0.7
                        },
                        {
                            "name": "D",
                            "value": 0.6
                        }
                    ],
                    "type": "array",
                    "items": {
                        "$ref": "GradingSchemeEntry"
                    }
                }
            }
        },
        "GroupCategory": {
            "id": "GroupCategory",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the group category.",
                    "example": 17,
                    "type": "integer"
                },
                "name": {
                    "description": "The display name of the group category.",
                    "example": "Math Groups",
                    "type": "string"
                },
                "role": {
                    "description": "Certain types of group categories have special role designations. Currently, these include: 'communities', 'student_organized', and 'imported'. Regular course/account group categories have a role of null.",
                    "example": "communities",
                    "type": "string"
                },
                "self_signup": {
                    "description": "If the group category allows users to join a group themselves, thought they may only be a member of one group per group category at a time. Values include 'restricted', 'enabled', and null 'enabled' allows students to assign themselves to a group 'restricted' restricts them to only joining a group in their section null disallows students from joining groups",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "restricted",
                            "enabled"
                        ]
                    }
                },
                "auto_leader": {
                    "description": "Gives instructors the ability to automatically have group leaders assigned.  Values include 'random', 'first', and null; 'random' picks a student from the group at random as the leader, 'first' sets the first student to be assigned to the group as the leader",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "first",
                            "random"
                        ]
                    }
                },
                "context_type": {
                    "description": "The course or account that the category group belongs to. The pattern here is that whatever the context_type is, there will be an _id field named after that type. So if instead context_type was 'Course', the course_id field would be replaced by an course_id field.",
                    "example": "Account",
                    "type": "string"
                },
                "account_id": {
                    "example": 3,
                    "type": "integer"
                },
                "group_limit": {
                    "description": "If self-signup is enabled, group_limit can be set to cap the number of users in each group. If null, there is no limit.",
                    "type": "integer"
                },
                "sis_group_category_id": {
                    "description": "The SIS identifier for the group category. This field is only included if the user has permission to manage or view SIS information.",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                    "type": "integer"
                },
                "progress": {
                    "description": "If the group category has not yet finished a randomly student assignment request, a progress object will be attached, which will contain information related to the progress of the assignment request. Refer to the Progress API for more information",
                    "$ref": "Progress"
                }
            }
        },
        "Group": {
            "id": "Group",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the group.",
                    "example": 17,
                    "type": "integer"
                },
                "name": {
                    "description": "The display name of the group.",
                    "example": "Math Group 1",
                    "type": "string"
                },
                "description": {
                    "description": "A description of the group. This is plain text.",
                    "type": "string"
                },
                "is_public": {
                    "description": "Whether or not the group is public.  Currently only community groups can be made public.  Also, once a group has been set to public, it cannot be changed back to private.",
                    "example": false,
                    "type": "boolean"
                },
                "followed_by_user": {
                    "description": "Whether or not the current user is following this group.",
                    "example": false,
                    "type": "boolean"
                },
                "join_level": {
                    "description": "How people are allowed to join the group.  For all groups except for community groups, the user must share the group's parent course or account.  For student organized or community groups, where a user can be a member of as many or few as they want, the applicable levels are 'parent_context_auto_join', 'parent_context_request', and 'invitation_only'.  For class groups, where students are divided up and should only be part of one group of the category, this value will always be 'invitation_only', and is not relevant. * If 'parent_context_auto_join', anyone can join and will be automatically accepted. * If 'parent_context_request', anyone  can request to join, which must be approved by a group moderator. * If 'invitation_only', only those how have received an invitation my join the group, by accepting that invitation.",
                    "example": "invitation_only",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "parent_context_auto_join",
                            "parent_context_request",
                            "invitation_only"
                        ]
                    }
                },
                "members_count": {
                    "description": "The number of members currently in the group",
                    "example": 0,
                    "type": "integer"
                },
                "avatar_url": {
                    "description": "The url of the group's avatar",
                    "example": "https://<canvas>/files/avatar_image.png",
                    "type": "string"
                },
                "context_type": {
                    "description": "The course or account that the group belongs to. The pattern here is that whatever the context_type is, there will be an _id field named after that type. So if instead context_type was 'account', the course_id field would be replaced by an account_id field.",
                    "example": "Course",
                    "type": "string"
                },
                "course_id": {
                    "example": 3,
                    "type": "integer"
                },
                "role": {
                    "description": "Certain types of groups have special role designations. Currently, these include: 'communities', 'student_organized', and 'imported'. Regular course/account groups have a role of null.",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "communities",
                            "student_organized",
                            "imported"
                        ]
                    }
                },
                "group_category_id": {
                    "description": "The ID of the group's category.",
                    "example": 4,
                    "type": "integer"
                },
                "sis_group_id": {
                    "description": "The SIS ID of the group. Only included if the user has permission to view SIS information.",
                    "example": "group4a",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.",
                    "example": 14,
                    "type": "integer"
                },
                "storage_quota_mb": {
                    "description": "the storage quota for the group, in megabytes",
                    "example": 50,
                    "type": "integer"
                },
                "permissions": {
                    "description": "optional: the permissions the user has for the group. returned only for a single group and include[]=permissions",
                    "example": {
                        "create_discussion_topic": true,
                        "create_announcement": true
                    },
                    "type": "object",
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "boolean"
                    }
                },
                "users": {
                    "description": "optional: A list of users that are members in the group. Returned only if include[]=users. WARNING: this collection's size is capped (if there are an extremely large number of users in the group (thousands) not all of them will be returned).  If you need to capture all the users in a group with certainty consider using the paginated /api/v1/groups/<group_id>/memberships endpoint.",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            }
        },
        "GroupMembership": {
            "id": "GroupMembership",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The id of the membership object",
                    "example": 92,
                    "type": "integer"
                },
                "group_id": {
                    "description": "The id of the group object to which the membership belongs",
                    "example": 17,
                    "type": "integer"
                },
                "user_id": {
                    "description": "The id of the user object to which the membership belongs",
                    "example": 3,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "The current state of the membership. Current possible values are 'accepted', 'invited', and 'requested'",
                    "example": "accepted",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "accepted",
                            "invited",
                            "requested"
                        ]
                    }
                },
                "moderator": {
                    "description": "Whether or not the user is a moderator of the group (the must also be an active member of the group to moderate)",
                    "example": true,
                    "type": "boolean"
                },
                "just_created": {
                    "description": "optional: whether or not the record was just created on a create call (POST), i.e. was the user just added to the group, or was the user already a member",
                    "example": true,
                    "type": "boolean"
                },
                "sis_import_id": {
                    "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.",
                    "example": 4,
                    "type": "integer"
                }
            }
        },
        "HelpLink": {
            "id": "HelpLink",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the help link",
                    "example": "instructor_question",
                    "type": "string"
                },
                "text": {
                    "description": "The name of the help link",
                    "example": "Ask Your Instructor a Question",
                    "type": "string"
                },
                "subtext": {
                    "description": "The description of the help link",
                    "example": "Questions are submitted to your instructor",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the help link",
                    "example": "#teacher_feedback",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the help link",
                    "enum": [
                        "default",
                        "custom"
                    ],
                    "example": "default",
                    "type": "string"
                },
                "available_to": {
                    "description": "The roles that have access to this help link",
                    "example": [
                        "user",
                        "student",
                        "teacher",
                        "admin",
                        "observer",
                        "unenrolled"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "HelpLinks": {
            "id": "HelpLinks",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "help_link_name": {
                    "description": "Help link button title",
                    "example": "Help And Policies",
                    "type": "string"
                },
                "help_link_icon": {
                    "description": "Help link button icon",
                    "example": "help",
                    "type": "string"
                },
                "custom_help_links": {
                    "description": "Help links defined by the account. Could include default help links.",
                    "type": "array",
                    "items": {
                        "$ref": "HelpLink"
                    },
                    "example": [
                        {
                            "id": "link1",
                            "text": "Custom Link!",
                            "subtext": "Something something.",
                            "url": "https://google.com",
                            "type": "custom",
                            "available_to": [
                                "user",
                                "student",
                                "teacher",
                                "admin",
                                "observer",
                                "unenrolled"
                            ],
                            "is_featured": true,
                            "is_new": false,
                            "feature_headline": "Check this out!"
                        }
                    ]
                },
                "default_help_links": {
                    "description": "Default help links provided when account has not set help links of their own.",
                    "type": "array",
                    "items": {
                        "$ref": "HelpLink"
                    },
                    "example": [
                        {
                            "available_to": [
                                "student"
                            ],
                            "text": "Ask Your Instructor a Question",
                            "subtext": "Questions are submitted to your instructor",
                            "url": "#teacher_feedback",
                            "type": "default",
                            "id": "instructor_question",
                            "is_featured": false,
                            "is_new": true,
                            "feature_headline": ""
                        },
                        {
                            "available_to": [
                                "user",
                                "student",
                                "teacher",
                                "admin",
                                "observer",
                                "unenrolled"
                            ],
                            "text": "Search the Canvas Guides",
                            "subtext": "Find answers to common questions",
                            "url": "https://community.canvaslms.com/t5/Guides/ct-p/guides",
                            "type": "default",
                            "id": "search_the_canvas_guides",
                            "is_featured": false,
                            "is_new": false,
                            "feature_headline": ""
                        },
                        {
                            "available_to": [
                                "user",
                                "student",
                                "teacher",
                                "admin",
                                "observer",
                                "unenrolled"
                            ],
                            "text": "Report a Problem",
                            "subtext": "If Canvas misbehaves, tell us about it",
                            "url": "#create_ticket",
                            "type": "default",
                            "id": "report_a_problem",
                            "is_featured": false,
                            "is_new": false,
                            "feature_headline": ""
                        }
                    ]
                }
            }
        },
        "HistoryEntry": {
            "id": "HistoryEntry",
            "description": "Information about a recently visited item or page in Canvas",
            "required": [
                "asset_code",
                "asset_name",
                "visited_url",
                "visited_at"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "asset_code": {
                    "description": "The asset string for the item viewed",
                    "example": "assignment_123",
                    "type": "string"
                },
                "asset_name": {
                    "description": "The name of the item",
                    "example": "Test Assignment",
                    "type": "string"
                },
                "asset_icon": {
                    "description": "The icon type shown for the item. One of 'icon-announcement', 'icon-assignment', 'icon-calendar-month', 'icon-discussion', 'icon-document', 'icon-download', 'icon-gradebook', 'icon-home', 'icon-message', 'icon-module', 'icon-outcomes', 'icon-quiz', 'icon-user', 'icon-syllabus'",
                    "example": "icon-assignment",
                    "type": "string"
                },
                "asset_readable_category": {
                    "description": "The associated category describing the asset_icon",
                    "example": "Assignment",
                    "type": "string"
                },
                "context_type": {
                    "description": "The type of context of the item visited. One of 'Course', 'Group', 'User', or 'Account'",
                    "type": "string",
                    "example": "Course"
                },
                "context_id": {
                    "description": "The id of the context, if applicable",
                    "type": "integer",
                    "format": "int64",
                    "example": 123
                },
                "context_name": {
                    "description": "The name of the context",
                    "type": "string",
                    "example": "Something 101"
                },
                "visited_url": {
                    "description": "The URL of the item",
                    "example": "https://canvas.example.com/courses/123/assignments/456",
                    "type": "string"
                },
                "visited_at": {
                    "description": "When the page was visited",
                    "example": "2019-08-01T19:49:47Z",
                    "type": "datetime",
                    "format": "iso8601"
                },
                "interaction_seconds": {
                    "description": "The estimated time spent on the page in seconds",
                    "type": "integer",
                    "format": "int64",
                    "example": 400
                }
            }
        },
        "InstAccessToken": {
            "id": "InstAccessToken",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "token": {
                    "description": "The InstAccess token itself -- a signed, encrypted JWT",
                    "example": "eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.EstatUwzltksvZn4wbjHYiwleM986vzryrv4R9jqvYDGEY4rt6KPG4Q6lJ3oI0piYbH7h17i8vIWv35cqrgRbb7fzmGQ0Ptj74OEjx-1gGBMZCbZTE4W206XxPHRm9TS4qOAvIq0hsvJroE4xZsVWJFiUIKl_Wd2udbvqwF8bvnMKPAx_ooa-9mWaG1N9kd4EWC3Oxu9wi7j8ZG_TbkLSXAg1KxLaO2zXBcU5_HWrKFRxOjHmWpaOMKWkjUInt-DA6fLRszBZp9BFGoop8S9KDs6f1JebLgyM5gGrP-Gz7kSEAPO9eVXtjpd6N29wMClNI0X-Ppp_40Fp4Z3vocTKQ.c_tcevWI68RuZ0s04fDSEQ.wV8KIPHGfYwxm19MWt3K7VVGm4qqZJruPwAZ8rdUANTzJoqwafqOnYZLCyky8lV7J-m64SMVUmR-BOha_CmJEKVVw7T5x70MTP6-nv4RMVPpcViHsNgE2f1GE9HUauVePw7CrnV0PyVaNq2EZasDgdHdye4iG_-hXXQZRnGYzxl8UceTLBVkpEYHlXKdD7DyQ0IT2BYOcZSpXyW7kEIvAHpNaNbvTPCR2t0SeGbuNf8PpYVjohKDpXhNgQ-Pyl9pxs05TrdjTq1fIctzTLqIN58nfqzoqQld6rSkjcAZZXgr8bOsg8EDFMov5gTv2_Uf-YOm52yD1SbL0lJ-VdpKgXu7XtQ4UmEOj40W4uXF-KmLTjEwQmdbmtKrruhakIeth7EZa3w0Xg6RRyHLqKUheAdTgxAIer8MST8tamZlqW1b9wjMw371zSSjeksF_UjTS9p9i7eTtRPuAbf9geDhKb5e-y29MJaL1eKkhTMiEOPY3O4XGGuqRdRMrbjkNmla_RxiQhFJ3T8Dem-yDRan8gqaJLfRRrvGViz-lty96bQT-Z0hVer1uJhAtkM6RT_DgrnAUP_66LfaupZr6bLCKwnYocF1ICcAzkcYw7l5jHa4DTc2ZLgLi-yfbv2wGXpybAvLfZcO424TxHOuQykCSvbfPPuf06kkjPbYmMg6_GdM3JcQ_50VUXQFZkjH45BH5zX7y-2u0ReM8zxt65RpJAvlivrc8j2_E-u0LhlzCwEgsnd61lG4baaI86IVl4wNXkMDui4CgGvAUAf4AXW7Imw_cF0zI69z0SLfahjaYkdREGIYKStBtPAR04sfsR7o.LHBODYub4W4Vq-SXfdbk1Q",
                    "type": "string"
                }
            }
        },
        "JWT": {
            "id": "JWT",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "token": {
                    "description": "The signed, encrypted, base64 encoded JWT",
                    "example": "ZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1qVTJSME5OSW4wLi5QbnAzS1QzLUJkZ3lQZHgtLm5JT0pOV01iZmdtQ0g3WWtybjhLeHlMbW13cl9yZExXTXF3Y0IwbXkzZDd3V1NDd0JYQkV0UTRtTVNJSVRrX0FJcG0zSU1DeThMcW5NdzA0ckdHVTkweDB3MmNJbjdHeWxOUXdveU5ZZ3UwOEN4TkZteUpCeW5FVktrdU05QlRyZXZ3Y1ZTN2hvaC1WZHRqM19PR3duRm5yUVgwSFhFVFc4R28tUGxoQVUtUnhKT0pNakx1OUxYd2NDUzZsaW9ZMno5NVU3T0hLSGNpaDBmSGVjN2FzekVJT3g4NExUeHlReGxYU3BtbFZ5LVNuYWdfbVJUeU5yNHNsMmlDWFcwSzZCNDhpWHJ1clJVVm1LUkVlVTl4ZVVJcTJPaWNpSHpfemJ0X3FrMjhkdzRyajZXRnBHSlZPNWcwTlUzVHlSWk5qdHg1S2NrTjVSQjZ1X2FzWTBScjhTY2VhNFk3Y2JFX01wcm54cFZTNDFIekVVSVRNdzVMTk1GLVpQZy52LVVDTkVJYk8zQ09EVEhPRnFXLUFR",
                    "type": "string"
                }
            }
        },
        "LatePolicy": {
            "id": "LatePolicy",
            "description": "",
            "required": "course_id",
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the late policy",
                    "example": 123,
                    "type": "integer"
                },
                "course_id": {
                    "description": "the unique identifier for the course",
                    "example": 123,
                    "type": "integer"
                },
                "missing_submission_deduction_enabled": {
                    "description": "whether to enable missing submission deductions",
                    "example": true,
                    "type": "boolean",
                    "default": false
                },
                "missing_submission_deduction": {
                    "description": "amount of percentage points to deduct",
                    "example": 12.34,
                    "type": "number",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100
                },
                "late_submission_deduction_enabled": {
                    "description": "whether to enable late submission deductions",
                    "example": true,
                    "type": "boolean",
                    "default": false
                },
                "late_submission_deduction": {
                    "description": "amount of percentage points to deduct per late_submission_interval",
                    "example": 12.34,
                    "type": "number",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100
                },
                "late_submission_interval": {
                    "description": "time interval for late submission deduction",
                    "example": "hour",
                    "type": "string",
                    "default": "day",
                    "enum": [
                        "hour",
                        "day"
                    ]
                },
                "late_submission_minimum_percent_enabled": {
                    "description": "whether to enable late submission minimum percent",
                    "example": true,
                    "type": "boolean",
                    "default": false
                },
                "late_submission_minimum_percent": {
                    "description": "the minimum score a submission can receive in percentage points",
                    "example": 12.34,
                    "type": "number",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100
                },
                "created_at": {
                    "description": "the time at which this late policy was originally created",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "the time at which this late policy was last modified in any way",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                }
            }
        },
        "License": {
            "id": "License",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "type": "string",
                    "description": "a short string identifying the license",
                    "example": "cc_by_sa"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the license",
                    "example": "CC Attribution ShareAlike"
                },
                "url": {
                    "type": "string",
                    "description": "a link to the license text",
                    "example": "http://creativecommons.org/licenses/by-sa/4.0"
                }
            }
        },
        "LineItem": {
            "id": "LineItem",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The fully qualified URL for showing, updating, and deleting the Line Item",
                    "example": "http://institution.canvas.com/api/lti/courses/5/line_items/2",
                    "type": "string"
                },
                "scoreMaximum": {
                    "description": "The maximum score of the Line Item",
                    "example": "50",
                    "type": "number"
                },
                "label": {
                    "description": "The label of the Line Item.",
                    "example": "50",
                    "type": "string"
                },
                "tag": {
                    "description": "Tag used to qualify a line Item beyond its ids",
                    "example": "50",
                    "type": "string"
                },
                "resourceId": {
                    "description": "A Tool Provider specified id for the Line Item. Multiple line items can share the same resourceId within a given context",
                    "example": "50",
                    "type": "string"
                },
                "resourceLinkId": {
                    "description": "The resource link id the Line Item is attached to",
                    "example": "50",
                    "type": "string"
                },
                "https://canvas.instructure.com/lti/submission_type": {
                    "description": "The extension that defines the submission_type of the line_item. Only returns if set through the line_item create endpoint.",
                    "example": "{\n\t\"type\":\"external_tool\",\n\t\"external_tool_url\":\"https://my.launch.url\",\n}",
                    "type": "string"
                },
                "https://canvas.instructure.com/lti/launch_url": {
                    "description": "The launch url of the Line Item. Only returned if `include=launch_url` query parameter is passed, and only for Show and List actions.",
                    "example": "https://my.tool.url/launch",
                    "type": "string"
                }
            }
        },
        "LockInfo": {
            "id": "LockInfo",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "asset_string": {
                    "description": "Asset string for the object causing the lock",
                    "example": "assignment_4",
                    "type": "string"
                },
                "unlock_at": {
                    "description": "(Optional) Time at which this was/will be unlocked. Must be before the due date.",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "(Optional) Time at which this was/will be locked. Must be after the due date.",
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "context_module": {
                    "description": "(Optional) Context module causing the lock.",
                    "example": "{}",
                    "type": "string"
                },
                "manually_locked": {
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "LtiAssignment": {
            "id": "LtiAssignment",
            "description": "A Canvas assignment",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": 4,
                    "type": "integer"
                },
                "name": {
                    "example": "Midterm Review",
                    "type": "string"
                },
                "description": {
                    "example": "<p>Do the following:</p>...",
                    "type": "string"
                },
                "points_possible": {
                    "example": 10,
                    "type": "integer"
                },
                "due_at": {
                    "description": "The due date for the assignment. If a user id is supplied and an assignment override is in place this field will reflect the due date as it applies to the user.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "lti_id": {
                    "example": "86157096483e6b3a50bfedc6bac902c0b20a824f",
                    "type": "string"
                },
                "course_id": {
                    "example": 10000000000060,
                    "type": "integer"
                },
                "lti_course_id": {
                    "example": "66157096483e6b3a50bfedc6bac902c0b20a8241",
                    "type": "string"
                }
            }
        },
        "MediaComment": {
            "id": "MediaComment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "content-type": {
                    "example": "audio/mp4",
                    "type": "string"
                },
                "display_name": {
                    "example": "something",
                    "type": "string"
                },
                "media_id": {
                    "example": "3232",
                    "type": "string"
                },
                "media_type": {
                    "example": "audio",
                    "type": "string"
                },
                "url": {
                    "example": "http://example.com/media_url",
                    "type": "string"
                }
            }
        },
        "MediaObject": {
            "id": "MediaObject",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": "",
            "properties": {
                "can_add_captions": {
                    "type": "boolean"
                },
                "user_entered_title": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "media_id": {
                    "type": "string"
                },
                "media_type": {
                    "type": "string"
                },
                "media_tracks": {
                    "type": "string"
                },
                "media_sources": {
                    "type": "string"
                }
            }
        },
        "MediaTrack": {
            "id": "MediaTrack",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": "",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "media_object_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "kind": {
                    "type": "string"
                },
                "locale": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "webvtt_content": {
                    "type": "string"
                }
            }
        },
        "Module": {
            "id": "Module",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the module",
                    "example": 123,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "the state of the module: 'active', 'deleted'",
                    "example": "active",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "active",
                            "deleted"
                        ]
                    }
                },
                "position": {
                    "description": "the position of this module in the course (1-based)",
                    "example": 2,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of this module",
                    "example": "Imaginary Numbers and You",
                    "type": "string"
                },
                "unlock_at": {
                    "description": "(Optional) the date this module will unlock",
                    "example": "2012-12-31T06:00:00-06:00",
                    "type": "datetime"
                },
                "require_sequential_progress": {
                    "description": "Whether module items must be unlocked in order",
                    "example": true,
                    "type": "boolean"
                },
                "prerequisite_module_ids": {
                    "description": "IDs of Modules that must be completed before this one is unlocked",
                    "example": [
                        121,
                        122
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "items_count": {
                    "description": "The number of items in the module",
                    "example": 10,
                    "type": "integer"
                },
                "items_url": {
                    "description": "The API URL to retrive this module's items",
                    "example": "https://canvas.example.com/api/v1/modules/123/items",
                    "type": "string"
                },
                "items": {
                    "description": "The contents of this module, as an array of Module Items. (Present only if requested via include[]=items AND the module is not deemed too large by Canvas.)",
                    "type": "array",
                    "items": {
                        "$ref": "ModuleItem"
                    }
                },
                "state": {
                    "description": "The state of this Module for the calling user one of 'locked', 'unlocked', 'started', 'completed' (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)",
                    "example": "started",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "locked",
                            "unlocked",
                            "started",
                            "completed"
                        ]
                    }
                },
                "completed_at": {
                    "description": "the date the calling user completed the module (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)",
                    "type": "datetime"
                },
                "publish_final_grade": {
                    "description": "if the student's final grade for the course should be published to the SIS upon completion of this module",
                    "type": "boolean"
                },
                "published": {
                    "description": "(Optional) Whether this module is published. This field is present only if the caller has permission to view unpublished modules.",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "ModuleItem": {
            "id": "ModuleItem",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the unique identifier for the module item",
                    "example": 768,
                    "type": "integer"
                },
                "module_id": {
                    "description": "the id of the Module this item appears in",
                    "example": 123,
                    "type": "integer"
                },
                "position": {
                    "description": "the position of this item in the module (1-based)",
                    "example": 1,
                    "type": "integer"
                },
                "title": {
                    "description": "the title of this item",
                    "example": "Square Roots: Irrational numbers or boxy vegetables?",
                    "type": "string"
                },
                "indent": {
                    "description": "0-based indent level; module items may be indented to show a hierarchy",
                    "example": 0,
                    "type": "integer"
                },
                "type": {
                    "description": "the type of object referred to one of 'File', 'Page', 'Discussion', 'Assignment', 'Quiz', 'SubHeader', 'ExternalUrl', 'ExternalTool'",
                    "example": "Assignment",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "File",
                            "Page",
                            "Discussion",
                            "Assignment",
                            "Quiz",
                            "SubHeader",
                            "ExternalUrl",
                            "ExternalTool"
                        ]
                    }
                },
                "content_id": {
                    "description": "the id of the object referred to applies to 'File', 'Discussion', 'Assignment', 'Quiz', 'ExternalTool' types",
                    "example": 1337,
                    "type": "integer"
                },
                "html_url": {
                    "description": "link to the item in Canvas",
                    "example": "https://canvas.example.edu/courses/222/modules/items/768",
                    "type": "string"
                },
                "url": {
                    "description": "(Optional) link to the Canvas API object, if applicable",
                    "example": "https://canvas.example.edu/api/v1/courses/222/assignments/987",
                    "type": "string"
                },
                "page_url": {
                    "description": "(only for 'Page' type) unique locator for the linked wiki page",
                    "example": "my-page-title",
                    "type": "string"
                },
                "external_url": {
                    "description": "(only for 'ExternalUrl' and 'ExternalTool' types) external url that the item points to",
                    "example": "https://www.example.com/externalurl",
                    "type": "string"
                },
                "new_tab": {
                    "description": "(only for 'ExternalTool' type) whether the external tool opens in a new tab",
                    "example": false,
                    "type": "boolean"
                },
                "completion_requirement": {
                    "description": "Completion requirement for this module item",
                    "example": {
                        "type": "min_score",
                        "min_score": 10,
                        "completed": true
                    },
                    "$ref": "CompletionRequirement"
                },
                "content_details": {
                    "description": "(Present only if requested through include[]=content_details) If applicable, returns additional details specific to the associated object",
                    "example": {
                        "points_possible": 20,
                        "due_at": "2012-12-31T06:00:00-06:00",
                        "unlock_at": "2012-12-31T06:00:00-06:00",
                        "lock_at": "2012-12-31T06:00:00-06:00"
                    },
                    "$ref": "ContentDetails"
                },
                "published": {
                    "description": "(Optional) Whether this module item is published. This field is present only if the caller has permission to view unpublished items.",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "ModuleItemSequence": {
            "id": "ModuleItemSequence",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "items": {
                    "description": "an array containing one ModuleItemSequenceNode for each appearence of the asset in the module sequence (up to 10 total)",
                    "example": [
                        {
                            "prev": null,
                            "current": {
                                "id": 768,
                                "module_id": 123,
                                "title": "A lonely page",
                                "type": "Page"
                            },
                            "next": {
                                "id": 769,
                                "module_id": 127,
                                "title": "Project 1",
                                "type": "Assignment"
                            },
                            "mastery_path": {
                                "locked": true,
                                "assignment_sets": [],
                                "selected_set_id": null,
                                "awaiting_choice": false,
                                "still_processing": false,
                                "modules_url": "/courses/11/modules",
                                "choose_url": "/courses/11/modules/items/9/choose",
                                "modules_tab_disabled": false
                            }
                        }
                    ],
                    "type": "array",
                    "items": {
                        "$ref": "ModuleItemSequenceNode"
                    }
                },
                "modules": {
                    "description": "an array containing each Module referenced above",
                    "type": "array",
                    "items": {
                        "$ref": "Module"
                    },
                    "example": [
                        {
                            "id": 123,
                            "name": "Overview"
                        },
                        {
                            "id": 127,
                            "name": "Imaginary Numbers"
                        }
                    ]
                }
            }
        },
        "ModuleItemSequenceNode": {
            "id": "ModuleItemSequenceNode",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "prev": {
                    "description": "The previous ModuleItem in the sequence",
                    "$ref": "ModuleItem"
                },
                "current": {
                    "description": "The ModuleItem being queried",
                    "$ref": "ModuleItem",
                    "example": {
                        "id": 768,
                        "module_id": 123,
                        "title": "A lonely page",
                        "type": "Page"
                    }
                },
                "next": {
                    "description": "The next ModuleItem in the sequence",
                    "$ref": "ModuleItem",
                    "example": {
                        "id": 769,
                        "module_id": 127,
                        "title": "Project 1",
                        "type": "Assignment"
                    }
                },
                "mastery_path": {
                    "type": "object",
                    "description": "The conditional release rule for the module item, if applicable",
                    "example": {
                        "locked": true,
                        "assignment_sets": [],
                        "selected_set_id": null,
                        "awaiting_choice": false,
                        "still_processing": false,
                        "modules_url": "/courses/11/modules",
                        "choose_url": "/courses/11/modules/items/9/choose",
                        "modules_tab_disabled": false
                    }
                }
            }
        },
        "NamesAndRoleContext": {
            "id": "NamesAndRoleContext",
            "description": "An abbreviated representation of an LTI Context",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "LTI Context unique identifier",
                    "example": "4dde05e8ca1973bcca9bffc13e1548820eee93a3",
                    "type": "string"
                },
                "label": {
                    "description": "LTI Context short name or code",
                    "example": "CS-101",
                    "type": "string"
                },
                "title": {
                    "description": "LTI Context full name",
                    "example": "Computer Science 101",
                    "type": "string"
                }
            }
        },
        "NamesAndRoleMembership": {
            "id": "NamesAndRoleMembership",
            "description": "A member of a LTI Context in one or more roles",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "status": {
                    "description": "Membership state",
                    "enum": [
                        "Active"
                    ],
                    "example": "Active",
                    "type": "string"
                },
                "name": {
                    "description": "Member's full name. Only included if tool privacy level is `public` or `name_only`.",
                    "example": "Sienna Howell",
                    "type": "string"
                },
                "picture": {
                    "description": "URL to the member's avatar. Only included if tool privacy level is `public`.",
                    "example": "https://example.instructure.com/images/messages/avatar-50.png",
                    "type": "string"
                },
                "given_name": {
                    "description": "Member's 'first' name. Only included if tool privacy level is `public` or `name_only`.",
                    "example": "Sienna",
                    "type": "string"
                },
                "family_name": {
                    "description": "Member's 'last' name. Only included if tool privacy level is `public` or `name_only`.",
                    "example": "Howell",
                    "type": "string"
                },
                "email": {
                    "description": "Member's email address. Only included if tool privacy level is `public` or `email_only`.",
                    "example": "showell@school.edu",
                    "type": "string"
                },
                "lis_person_sourcedid": {
                    "description": "Member's primary SIS identifier. Only included if tool privacy level is `public` or `name_only`.",
                    "example": "1238.8763.00",
                    "type": "string"
                },
                "user_id": {
                    "description": "Member's unique LTI identifier.",
                    "example": "535fa085f22b4655f48cd5a36a9215f64c062838",
                    "type": "string"
                },
                "roles": {
                    "description": "Member's roles in the current Context, expressed as LTI/LIS URNs.",
                    "items": {
                        "type": "string",
                        "enum": [
                            "http://purl.imsglobal.org/vocab/lis/v2/membership/Instructor#TeachingAssistant",
                            "http://purl.imsglobal.org/vocab/lis/v2/membership#Learner",
                            "http://purl.imsglobal.org/vocab/lis/v2/membership#Instructor",
                            "http://purl.imsglobal.org/vocab/lis/v2/membership#ContentDeveloper",
                            "http://purl.imsglobal.org/vocab/lis/v2/membership#Mentor",
                            "http://purl.imsglobal.org/vocab/lis/v2/membership#Member",
                            "http://purl.imsglobal.org/vocab/lis/v2/membership#Manager"
                        ]
                    },
                    "type": "array",
                    "example": [
                        "http://purl.imsglobal.org/vocab/lis/v2/membership#Instructor",
                        "http://purl.imsglobal.org/vocab/lis/v2/membership#ContentDeveloper"
                    ]
                },
                "message": {
                    "description": "Only present when the request specifies a `rlid` query parameter. Contains additional attributes which would appear in the LTI launch message were this member to click the link referenced by the `rlid` query parameter",
                    "type": "array",
                    "items": {
                        "$ref": "NamesAndRoleMessage"
                    },
                    "example": [
                        {
                            "https://purl.imsglobal.org/spec/lti/claim/message_type": "LtiResourceLinkRequest",
                            "locale": "en",
                            "https://www.instructure.com/canvas_user_id": 1,
                            "https://www.instructure.com/canvas_user_login_id": "showell@school.edu",
                            "https://purl.imsglobal.org/spec/lti/claim/custom": {
                                "message_locale": "en",
                                "person_address_timezone": "America/Denver"
                            }
                        }
                    ]
                }
            }
        },
        "NamesAndRoleMemberships": {
            "id": "NamesAndRoleMemberships",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "Invocation URL",
                    "example": "https://example.instructure.com/api/lti/courses/1/names_and_roles?tlid=f91ca4d8-fa84-4a9b-b08e-47d5527416b0",
                    "type": "string"
                },
                "context": {
                    "description": "The LTI Context containing the memberships",
                    "$ref": "NamesAndRoleContext",
                    "example": {
                        "id": "4dde05e8ca1973bcca9bffc13e1548820eee93a3",
                        "label": "CS-101",
                        "title": "Computer Science 101"
                    }
                },
                "members": {
                    "type": "array",
                    "description": "A list of NamesAndRoleMembership",
                    "items": {
                        "$ref": "NamesAndRoleMembership"
                    },
                    "example": [
                        {
                            "status": "Active",
                            "name": "Sienna Howell",
                            "picture": "https://example.instructure.com/images/messages/avatar-50.png",
                            "given_name": "Sienna",
                            "family_name": "Howell",
                            "email": "showell@school.edu",
                            "lis_person_sourcedid": "1238.8763.00",
                            "user_id": "535fa085f22b4655f48cd5a36a9215f64c062838",
                            "roles": [
                                "http://purl.imsglobal.org/vocab/lis/v2/membership#Instructor",
                                "http://purl.imsglobal.org/vocab/lis/v2/membership#ContentDeveloper"
                            ],
                            "message": [
                                {
                                    "https://purl.imsglobal.org/spec/lti/claim/message_type": "LtiResourceLinkRequest",
                                    "locale": "en",
                                    "https://www.instructure.com/canvas_user_id": 1,
                                    "https://www.instructure.com/canvas_user_login_id": "showell@school.edu",
                                    "https://purl.imsglobal.org/spec/lti/claim/custom": {
                                        "message_locale": "en",
                                        "person_address_timezone": "America/Denver"
                                    }
                                }
                            ]
                        },
                        {
                            "status": "Active",
                            "name": "Terrence Walls",
                            "picture": "https://example.instructure.com/images/messages/avatar-51.png",
                            "given_name": "Terrence",
                            "family_name": "Walls",
                            "email": "twalls@school.edu",
                            "lis_person_sourcedid": "5790.3390.11",
                            "user_id": "86157096483e6b3a50bfedc6bac902c0b20a824f",
                            "roles": [
                                "http://purl.imsglobal.org/vocab/lis/v2/membership#Learner"
                            ],
                            "message": [
                                {
                                    "https://purl.imsglobal.org/spec/lti/claim/message_type": "LtiResourceLinkRequest",
                                    "locale": "de",
                                    "https://www.instructure.com/canvas_user_id": 2,
                                    "https://www.instructure.com/canvas_user_login_id": "twalls@school.edu",
                                    "https://purl.imsglobal.org/spec/lti/claim/custom": {
                                        "message_locale": "en",
                                        "person_address_timezone": "Europe/Berlin"
                                    }
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "NamesAndRoleMessage": {
            "id": "NamesAndRoleMessage",
            "description": "Additional attributes which would appear in the LTI launch message were this member to click the specified resource link (`rlid` query parameter)",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "https://purl.imsglobal.org/spec/lti/claim/message_type": {
                    "description": "The type of LTI message being described. Always set to 'LtiResourceLinkRequest'",
                    "enum": [
                        "LtiResourceLinkRequest"
                    ],
                    "type": "string",
                    "example": "LtiResourceLinkRequest"
                },
                "locale": {
                    "description": "The member's preferred locale",
                    "type": "string",
                    "example": "en"
                },
                "https://www.instructure.com/canvas_user_id": {
                    "description": "The member's API ID",
                    "type": "integer",
                    "example": 1
                },
                "https://www.instructure.com/canvas_user_login_id": {
                    "description": "The member's primary login username",
                    "type": "string",
                    "example": "showell@school.edu"
                },
                "https://purl.imsglobal.org/spec/lti/claim/custom": {
                    "description": "Expanded LTI custom parameters that pertain to the member (as opposed to the Context)",
                    "type": "object",
                    "example": {
                        "message_locale": "en",
                        "person_address_timezone": "America/Denver"
                    }
                }
            }
        },
        "NeedsGradingCount": {
            "id": "NeedsGradingCount",
            "description": "Used by Assignment model",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "section_id": {
                    "description": "The section ID",
                    "example": "123456",
                    "type": "string"
                },
                "needs_grading_count": {
                    "description": "Number of submissions that need grading",
                    "example": 5,
                    "type": "integer"
                }
            }
        },
        "NotificationPreference": {
            "id": "NotificationPreference",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "href": {
                    "example": "https://canvas.instructure.com/users/1/communication_channels/email/student@example.edu/notification_preferences/new_announcement",
                    "type": "string"
                },
                "notification": {
                    "description": "The notification this preference belongs to",
                    "example": "new_announcement",
                    "type": "string"
                },
                "category": {
                    "description": "The category of that notification",
                    "example": "announcement",
                    "type": "string"
                },
                "frequency": {
                    "description": "How often to send notifications to this communication channel for the given notification. Possible values are 'immediately', 'daily', 'weekly', and 'never'",
                    "example": "daily",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "immediately",
                            "daily",
                            "weekly",
                            "never"
                        ]
                    }
                }
            }
        },
        "OriginalityReport": {
            "id": "OriginalityReport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The id of the OriginalityReport",
                    "example": "4",
                    "type": "integer"
                },
                "file_id": {
                    "description": "The id of the file receiving the originality score",
                    "example": "8",
                    "type": "integer"
                },
                "originality_score": {
                    "description": "A number between 0 and 100 representing the originality score",
                    "example": "0.16",
                    "type": "number"
                },
                "originality_report_file_id": {
                    "description": "The ID of the file within Canvas containing the originality report document (if provided)",
                    "example": "23",
                    "type": "integer"
                },
                "originality_report_url": {
                    "description": "A non-LTI launch URL where the originality score of the file may be found.",
                    "example": "http://www.example.com/report",
                    "type": "string"
                },
                "tool_setting": {
                    "description": "A ToolSetting object containing optional 'resource_type_code' and 'resource_url'",
                    "$ref": "ToolSetting"
                },
                "error_report": {
                    "description": "A message describing the error. If set, the workflow_state will become 'error.'",
                    "type": "string"
                },
                "submission_time": {
                    "description": "The submitted_at date time of the submission.",
                    "type": "datetime"
                },
                "root_account_id": {
                    "description": "The id of the root Account associated with the OriginalityReport",
                    "example": "1",
                    "type": "integer"
                }
            }
        },
        "Outcome": {
            "id": "Outcome",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the outcome",
                    "example": 1,
                    "type": "integer"
                },
                "url": {
                    "description": "the URL for fetching/updating the outcome. should be treated as opaque",
                    "example": "/api/v1/outcomes/1",
                    "type": "string"
                },
                "context_id": {
                    "description": "the context owning the outcome. may be null for global outcomes",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "example": "Account",
                    "type": "string"
                },
                "title": {
                    "description": "title of the outcome",
                    "example": "Outcome title",
                    "type": "string"
                },
                "display_name": {
                    "description": "Optional friendly name for reporting",
                    "example": "My Favorite Outcome",
                    "type": "string"
                },
                "description": {
                    "description": "description of the outcome. omitted in the abbreviated form.",
                    "example": "Outcome description",
                    "type": "string"
                },
                "vendor_guid": {
                    "description": "A custom GUID for the learning standard.",
                    "example": "customid9000",
                    "type": "string"
                },
                "points_possible": {
                    "description": "maximum points possible. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                    "example": 5,
                    "type": "integer"
                },
                "mastery_points": {
                    "description": "points necessary to demonstrate mastery outcomes. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                    "example": 3,
                    "type": "integer"
                },
                "calculation_method": {
                    "description": "the method used to calculate a students score",
                    "example": "decaying_average",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "decaying_average",
                            "n_mastery",
                            "latest",
                            "highest",
                            "average"
                        ]
                    }
                },
                "calculation_int": {
                    "description": "this defines the variable value used by the calculation_method. included only if calculation_method uses it",
                    "example": 65,
                    "type": "integer"
                },
                "ratings": {
                    "description": "possible ratings for this outcome. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                    "type": "array",
                    "items": {
                        "$ref": "RubricRating"
                    }
                },
                "can_edit": {
                    "description": "whether the current user can update the outcome",
                    "example": true,
                    "type": "boolean"
                },
                "can_unlink": {
                    "description": "whether the outcome can be unlinked",
                    "example": true,
                    "type": "boolean"
                },
                "assessed": {
                    "description": "whether this outcome has been used to assess a student",
                    "example": true,
                    "type": "boolean"
                },
                "has_updateable_rubrics": {
                    "description": "whether updates to this outcome will propagate to unassessed rubrics that have imported it",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "OutcomeAlignment": {
            "id": "OutcomeAlignment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the id of the aligned learning outcome.",
                    "example": 1,
                    "type": "integer"
                },
                "assignment_id": {
                    "description": "the id of the aligned assignment (null for live assessments).",
                    "example": 2,
                    "type": "integer"
                },
                "assessment_id": {
                    "description": "the id of the aligned live assessment (null for assignments).",
                    "example": 3,
                    "type": "integer"
                },
                "submission_types": {
                    "description": "a string representing the different submission types of an aligned assignment.",
                    "example": "online_text_entry,online_url",
                    "type": "string"
                },
                "url": {
                    "description": "the URL for the aligned assignment.",
                    "example": "/courses/1/assignments/5",
                    "type": "string"
                },
                "title": {
                    "description": "the title of the aligned assignment.",
                    "example": "Unit 1 test",
                    "type": "string"
                }
            }
        },
        "OutcomeAlignmentAsset": {
            "id": "OutcomeAlignmentAsset",
            "description": "An asset aligned with this outcome",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "A unique identifier for this alignment",
                    "example": "quiz_3",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this alignment",
                    "example": "Big mid-term test",
                    "type": "string"
                },
                "html_url": {
                    "description": "(Optional) A URL for details about this alignment",
                    "type": "string"
                }
            }
        },
        "OutcomeGroup": {
            "id": "OutcomeGroup",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the outcome group",
                    "example": 1,
                    "type": "integer"
                },
                "url": {
                    "description": "the URL for fetching/updating the outcome group. should be treated as opaque",
                    "example": "/api/v1/accounts/1/outcome_groups/1",
                    "type": "string"
                },
                "parent_outcome_group": {
                    "description": "an abbreviated OutcomeGroup object representing the parent group of this outcome group, if any. omitted in the abbreviated form.",
                    "$ref": "OutcomeGroup"
                },
                "context_id": {
                    "description": "the context owning the outcome group. may be null for global outcome groups. omitted in the abbreviated form.",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "example": "Account",
                    "type": "string"
                },
                "title": {
                    "description": "title of the outcome group",
                    "example": "Outcome group title",
                    "type": "string"
                },
                "description": {
                    "description": "description of the outcome group. omitted in the abbreviated form.",
                    "example": "Outcome group description",
                    "type": "string"
                },
                "vendor_guid": {
                    "description": "A custom GUID for the learning standard.",
                    "example": "customid9000",
                    "type": "string"
                },
                "subgroups_url": {
                    "description": "the URL for listing/creating subgroups under the outcome group. should be treated as opaque",
                    "example": "/api/v1/accounts/1/outcome_groups/1/subgroups",
                    "type": "string"
                },
                "outcomes_url": {
                    "description": "the URL for listing/creating outcome links under the outcome group. should be treated as opaque",
                    "example": "/api/v1/accounts/1/outcome_groups/1/outcomes",
                    "type": "string"
                },
                "import_url": {
                    "description": "the URL for importing another group into this outcome group. should be treated as opaque. omitted in the abbreviated form.",
                    "example": "/api/v1/accounts/1/outcome_groups/1/import",
                    "type": "string"
                },
                "can_edit": {
                    "description": "whether the current user can update the outcome group",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "OutcomeImport": {
            "id": "OutcomeImport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the outcome import.",
                    "example": 1,
                    "type": "integer"
                },
                "learning_outcome_group_id": {
                    "description": "The unique identifier for the group into which the outcomes will be imported to, or NULL.",
                    "example": 1,
                    "type": "integer"
                },
                "created_at": {
                    "description": "The date the outcome import was created.",
                    "example": "2013-12-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "ended_at": {
                    "description": "The date the outcome import finished. Returns null if not finished.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The date the outcome import was last updated.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "workflow_state": {
                    "description": "The current state of the outcome import.\n - 'created': The outcome import has been created.\n - 'importing': The outcome import is currently processing.\n - 'succeeded': The outcome import has completed successfully.\n - 'failed': The outcome import failed.",
                    "example": "imported",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "created",
                            "importing",
                            "succeeded",
                            "failed"
                        ]
                    }
                },
                "data": {
                    "description": "See the OutcomeImportData specification above.",
                    "$ref": "OutcomeImportData"
                },
                "progress": {
                    "description": "The progress of the outcome import.",
                    "example": "100",
                    "type": "string"
                },
                "user": {
                    "description": "The user that initiated the outcome_import. See the Users API for details.",
                    "$ref": "User"
                },
                "processing_errors": {
                    "description": "An array of row number / error message pairs. Returns the first 25 errors.",
                    "example": [
                        [
                            1,
                            "Missing required fields: title"
                        ]
                    ],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "OutcomeImportData": {
            "id": "OutcomeImportData",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "import_type": {
                    "description": "The type of outcome import",
                    "example": "instructure_csv",
                    "type": "string"
                }
            }
        },
        "OutcomeLink": {
            "id": "OutcomeLink",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "url": {
                    "description": "the URL for fetching/updating the outcome link. should be treated as opaque",
                    "example": "/api/v1/accounts/1/outcome_groups/1/outcomes/1",
                    "type": "string"
                },
                "context_id": {
                    "description": "the context owning the outcome link. will match the context owning the outcome group containing the outcome link; included for convenience. may be null for links in global outcome groups.",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "example": "Account",
                    "type": "string"
                },
                "outcome_group": {
                    "description": "an abbreviated OutcomeGroup object representing the group containing the outcome link.",
                    "$ref": "OutcomeGroup"
                },
                "outcome": {
                    "description": "an abbreviated Outcome object representing the outcome linked into the containing outcome group.",
                    "$ref": "Outcome"
                },
                "assessed": {
                    "description": "whether this outcome has been used to assess a student in the context of this outcome link.  In other words, this will be set to true if the context is a course, and a student has been assessed with this outcome in that course.",
                    "example": true,
                    "type": "boolean"
                },
                "can_unlink": {
                    "description": "whether this outcome link is manageable and is not the last link to an aligned outcome",
                    "type": "boolean"
                }
            }
        },
        "OutcomePath": {
            "id": "OutcomePath",
            "description": "The full path to an outcome",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": "42",
                    "type": "integer",
                    "description": "A unique identifier for this outcome"
                },
                "parts": {
                    "description": "an array of OutcomePathPart objects",
                    "$ref": "OutcomePathPart"
                }
            }
        },
        "OutcomePathPart": {
            "id": "OutcomePathPart",
            "description": "An outcome or outcome group",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "name": {
                    "example": "Spelling out numbers",
                    "type": "string",
                    "description": "The title of the outcome or outcome group"
                }
            }
        },
        "OutcomeResult": {
            "id": "OutcomeResult",
            "description": "A student's result for an outcome",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": "42",
                    "type": "integer",
                    "description": "A unique identifier for this result"
                },
                "score": {
                    "example": 6,
                    "type": "integer",
                    "description": "The student's score"
                },
                "submitted_or_assessed_at": {
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime",
                    "description": "The datetime the resulting OutcomeResult was submitted at, or absent that, when it was assessed."
                },
                "links": {
                    "example": {
                        "user": "3",
                        "learning_outcome": "97",
                        "alignment": "53"
                    },
                    "type": "object",
                    "description": "Unique identifiers of objects associated with this result"
                },
                "percent": {
                    "example": "0.65",
                    "type": "number",
                    "description": "score's percent of maximum points possible for outcome, scaled to reflect any custom mastery levels that differ from the learning outcome"
                }
            }
        },
        "OutcomeRollup": {
            "id": "OutcomeRollup",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "scores": {
                    "description": "an array of OutcomeRollupScore objects",
                    "$ref": "OutcomeRollupScore"
                },
                "name": {
                    "description": "The name of the resource for this rollup. For example, the user name.",
                    "example": "John Doe",
                    "type": "string"
                },
                "links": {
                    "example": {
                        "course": 42,
                        "user": 42,
                        "section": 57
                    },
                    "$ref": "OutcomeRollupLinks"
                }
            }
        },
        "OutcomeRollupLinks": {
            "id": "OutcomeRollupLinks",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "course": {
                    "description": "If an aggregate result was requested, the course field will be present. Otherwise, the user and section field will be present (Optional) The id of the course that this rollup applies to",
                    "example": 42,
                    "type": "integer"
                },
                "user": {
                    "description": "(Optional) The id of the user that this rollup applies to",
                    "example": 42,
                    "type": "integer"
                },
                "section": {
                    "description": "(Optional) The id of the section the user is in",
                    "example": 57,
                    "type": "integer"
                }
            }
        },
        "OutcomeRollupScore": {
            "id": "OutcomeRollupScore",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "score": {
                    "description": "The rollup score for the outcome, based on the student alignment scores related to the outcome. This could be null if the student has no related scores.",
                    "example": 3,
                    "type": "integer"
                },
                "count": {
                    "example": 6,
                    "type": "integer",
                    "description": "The number of alignment scores included in this rollup."
                },
                "links": {
                    "example": {
                        "outcome": "42"
                    },
                    "$ref": "OutcomeRollupScoreLinks"
                }
            }
        },
        "OutcomeRollupScoreLinks": {
            "id": "OutcomeRollupScoreLinks",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "outcome": {
                    "description": "The id of the related outcome",
                    "example": 42,
                    "type": "integer"
                }
            }
        },
        "Page": {
            "id": "Page",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "page_id": {
                    "description": "the ID of the page",
                    "example": 1,
                    "type": "integer"
                },
                "url": {
                    "description": "the unique locator for the page",
                    "example": "my-page-title",
                    "type": "string"
                },
                "title": {
                    "description": "the title of the page",
                    "example": "My Page Title",
                    "type": "string"
                },
                "created_at": {
                    "description": "the creation date for the page",
                    "example": "2012-08-06T16:46:33-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "the date the page was last updated",
                    "example": "2012-08-08T14:25:20-06:00",
                    "type": "datetime"
                },
                "hide_from_students": {
                    "description": "(DEPRECATED) whether this page is hidden from students (note: this is always reflected as the inverse of the published value)",
                    "example": false,
                    "type": "boolean"
                },
                "editing_roles": {
                    "description": "roles allowed to edit the page; comma-separated list comprising a combination of 'teachers', 'students', 'members', and/or 'public' if not supplied, course defaults are used",
                    "example": "teachers,students",
                    "type": "string"
                },
                "last_edited_by": {
                    "description": "the User who last edited the page (this may not be present if the page was imported from another system)",
                    "$ref": "User"
                },
                "body": {
                    "description": "the page content, in HTML (present when requesting a single page; omitted when listing pages)",
                    "example": "<p>Page Content</p>",
                    "type": "string"
                },
                "published": {
                    "description": "whether the page is published (true) or draft state (false).",
                    "example": true,
                    "type": "boolean"
                },
                "publish_at": {
                    "description": "scheduled publication date for this page",
                    "example": "2022-09-01T00:00:00",
                    "type": "datetime"
                },
                "front_page": {
                    "description": "whether this page is the front page for the wiki",
                    "example": false,
                    "type": "boolean"
                },
                "locked_for_user": {
                    "description": "Whether or not this is locked for the user.",
                    "example": false,
                    "type": "boolean"
                },
                "lock_info": {
                    "description": "(Optional) Information for the user about the lock. Present when locked_for_user is true.",
                    "$ref": "LockInfo"
                },
                "lock_explanation": {
                    "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                    "example": "This page is locked until September 1 at 12:00am",
                    "type": "string"
                }
            }
        },
        "PageRevision": {
            "id": "PageRevision",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "revision_id": {
                    "description": "an identifier for this revision of the page",
                    "example": 7,
                    "type": "integer"
                },
                "updated_at": {
                    "description": "the time when this revision was saved",
                    "example": "2012-08-07T11:23:58-06:00",
                    "type": "datetime"
                },
                "latest": {
                    "description": "whether this is the latest revision or not",
                    "example": true,
                    "type": "boolean"
                },
                "edited_by": {
                    "description": "the User who saved this revision, if applicable (this may not be present if the page was imported from another system)",
                    "$ref": "User"
                },
                "url": {
                    "description": "the following fields are not included in the index action and may be omitted from the show action via summary=1 the historic url of the page",
                    "example": "old-page-title",
                    "type": "string"
                },
                "title": {
                    "description": "the historic page title",
                    "example": "Old Page Title",
                    "type": "string"
                },
                "body": {
                    "description": "the historic page contents",
                    "example": "<p>Old Page Content</p>",
                    "type": "string"
                }
            }
        },
        "PageView": {
            "id": "PageView",
            "description": "The record of a user page view access in Canvas",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "A UUID representing the page view.  This is also the unique request id",
                    "example": "3e246700-e305-0130-51de-02e33aa501ef",
                    "type": "string",
                    "format": "uuid"
                },
                "app_name": {
                    "description": "If the request is from an API request, the app that generated the access token",
                    "example": "Canvas for iOS",
                    "type": "string"
                },
                "url": {
                    "description": "The URL requested",
                    "example": "https://canvas.instructure.com/conversations",
                    "type": "string"
                },
                "context_type": {
                    "description": "The type of context for the request",
                    "example": "Course",
                    "type": "string"
                },
                "asset_type": {
                    "description": "The type of asset in the context for the request, if any",
                    "example": "Discussion",
                    "type": "string"
                },
                "controller": {
                    "description": "The rails controller that handled the request",
                    "example": "discussions",
                    "type": "string"
                },
                "action": {
                    "description": "The rails action that handled the request",
                    "example": "index",
                    "type": "string"
                },
                "contributed": {
                    "description": "This field is deprecated, and will always be false",
                    "example": "false",
                    "type": "boolean"
                },
                "interaction_seconds": {
                    "description": "An approximation of how long the user spent on the page, in seconds",
                    "example": "7.21",
                    "type": "number"
                },
                "created_at": {
                    "description": "When the request was made",
                    "example": "2013-10-01T19:49:47Z",
                    "type": "datetime",
                    "format": "iso8601"
                },
                "user_request": {
                    "description": "A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)",
                    "example": "true",
                    "type": "boolean"
                },
                "render_time": {
                    "description": "How long the response took to render, in seconds",
                    "example": "0.369",
                    "type": "number"
                },
                "user_agent": {
                    "description": "The user-agent of the browser or program that made the request",
                    "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/536.30.1 (KHTML, like Gecko) Version/6.0.5 Safari/536.30.1",
                    "type": "string"
                },
                "participated": {
                    "description": "True if the request counted as participating, such as submitting homework",
                    "example": "false",
                    "type": "boolean"
                },
                "http_method": {
                    "description": "The HTTP method such as GET or POST",
                    "example": "GET",
                    "type": "string"
                },
                "remote_ip": {
                    "description": "The origin IP address of the request",
                    "example": "173.194.46.71",
                    "type": "string"
                },
                "links": {
                    "description": "The page view links to define the relationships",
                    "$ref": "PageViewLinks",
                    "example": {
                        "user": 1234,
                        "account": 1234
                    }
                }
            }
        },
        "PageViewLinks": {
            "id": "PageViewLinks",
            "description": "The links of a page view access in Canvas",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user": {
                    "description": "The ID of the user for this page view",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "context": {
                    "description": "The ID of the context for the request (course id if context_type is Course, etc)",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "asset": {
                    "description": "The ID of the asset for the request, if any",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "real_user": {
                    "description": "The ID of the actual user who made this request, if the request was made by a user who was masquerading",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "account": {
                    "description": "The ID of the account context for this page view",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "PairingCode": {
            "id": "PairingCode",
            "description": "A code used for linking a user to a student to observe them.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user_id": {
                    "description": "The ID of the user.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "code": {
                    "description": "The actual code to be sent to other APIs",
                    "example": "abc123",
                    "type": "string"
                },
                "expires_at": {
                    "description": "When the code expires",
                    "example": "2012-05-30T17:45:25Z",
                    "type": "string",
                    "format": "date-time"
                },
                "workflow_state": {
                    "description": "The current status of the code",
                    "example": "active",
                    "type": "string"
                }
            }
        },
        "PeerReview": {
            "id": "PeerReview",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "assessor_id": {
                    "description": "The assessors user id",
                    "example": 23,
                    "type": "integer"
                },
                "asset_id": {
                    "description": "The id for the asset associated with this Peer Review",
                    "example": 13,
                    "type": "integer"
                },
                "asset_type": {
                    "description": "The type of the asset",
                    "example": "Submission",
                    "type": "string"
                },
                "id": {
                    "description": "The id of the Peer Review",
                    "example": 1,
                    "type": "integer"
                },
                "user_id": {
                    "description": "The user id for the owner of the asset",
                    "example": 7,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "The state of the Peer Review, either 'assigned' or 'completed'",
                    "example": "assigned",
                    "type": "string"
                },
                "user": {
                    "description": "the User object for the owner of the asset if the user include parameter is provided (see user API) (optional)",
                    "example": "User",
                    "type": "string"
                },
                "assessor": {
                    "description": "The User object for the assessor if the user include parameter is provided (see user API) (optional)",
                    "example": "User",
                    "type": "string"
                },
                "submission_comments": {
                    "description": "The submission comments associated with this Peer Review if the submission_comment include parameter is provided (see submissions API) (optional)",
                    "example": "SubmissionComment",
                    "type": "string"
                }
            }
        },
        "PlannerNote": {
            "id": "PlannerNote",
            "description": "A planner note",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the planner note",
                    "example": 234,
                    "type": "integer"
                },
                "title": {
                    "description": "The title for a planner note",
                    "example": "Bring books tomorrow",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the planner note",
                    "example": "I need to bring books tomorrow for my course on biology",
                    "type": "string"
                },
                "user_id": {
                    "description": "The id of the associated user creating the planner note",
                    "example": 1578941,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "The current published state of the planner note",
                    "example": "active",
                    "type": "string"
                },
                "course_id": {
                    "description": "The course that the note is in relation too, if applicable",
                    "example": 1578941,
                    "type": "integer"
                },
                "todo_date": {
                    "description": "The datetime of when the planner note should show up on their planner",
                    "example": "2017-05-09T10:12:00Z",
                    "type": "datetime"
                },
                "linked_object_type": {
                    "description": "the type of the linked learning object",
                    "example": "assignment",
                    "type": "string"
                },
                "linked_object_id": {
                    "description": "the id of the linked learning object",
                    "example": 131072,
                    "type": "integer"
                },
                "linked_object_html_url": {
                    "description": "the Canvas web URL of the linked learning object",
                    "example": "https://canvas.example.com/courses/1578941/assignments/131072",
                    "type": "string"
                },
                "linked_object_url": {
                    "description": "the API URL of the linked learning object",
                    "example": "https://canvas.example.com/api/v1/courses/1578941/assignments/131072",
                    "type": "string"
                }
            }
        },
        "PlannerOverride": {
            "id": "PlannerOverride",
            "description": "User-controlled setting for whether an item should be displayed on the planner or not",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the planner override",
                    "example": 234,
                    "type": "integer"
                },
                "plannable_type": {
                    "description": "The type of the associated object for the planner override",
                    "example": "Assignment",
                    "type": "string"
                },
                "plannable_id": {
                    "description": "The id of the associated object for the planner override",
                    "example": 1578941,
                    "type": "integer"
                },
                "user_id": {
                    "description": "The id of the associated user for the planner override",
                    "example": 1578941,
                    "type": "integer"
                },
                "assignment_id": {
                    "description": "The id of the plannable's associated assignment, if it has one",
                    "example": 1578941,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "The current published state of the item, synced with the associated object",
                    "example": "published",
                    "type": "string"
                },
                "marked_complete": {
                    "description": "Controls whether or not the associated plannable item is marked complete on the planner",
                    "example": false,
                    "type": "boolean"
                },
                "dismissed": {
                    "description": "Controls whether or not the associated plannable item shows up in the opportunities list",
                    "example": false,
                    "type": "boolean"
                },
                "created_at": {
                    "description": "The datetime of when the planner override was created",
                    "example": "2017-05-09T10:12:00Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The datetime of when the planner override was updated",
                    "example": "2017-05-09T10:12:00Z",
                    "type": "datetime"
                },
                "deleted_at": {
                    "description": "The datetime of when the planner override was deleted, if applicable",
                    "example": "2017-05-15T12:12:00Z",
                    "type": "datetime"
                }
            }
        },
        "Poll": {
            "id": "Poll",
            "description": "",
            "required": [
                "id",
                "question"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the poll.",
                    "example": 1023,
                    "type": "integer"
                },
                "question": {
                    "description": "The question/title of the poll.",
                    "type": "string",
                    "example": "What do you consider most important to your learning in this course?"
                },
                "description": {
                    "description": "A short description of the poll.",
                    "type": "string",
                    "example": "This poll is to determine what priorities the students in the course have."
                },
                "created_at": {
                    "description": "The time at which the poll was created.",
                    "example": "2014-01-07T15:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "user_id": {
                    "description": "The unique identifier for the user that created the poll.",
                    "example": 105,
                    "type": "integer"
                },
                "total_results": {
                    "description": "An aggregate of the results of all associated poll sessions, with the poll choice id as the key, and the aggregated submission count as the value.",
                    "example": {
                        "543": 20,
                        "544": 5,
                        "545": 17
                    },
                    "type": "object"
                }
            }
        },
        "PollChoice": {
            "id": "PollChoice",
            "description": "",
            "required": [
                "id",
                "poll_id",
                "text"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the poll choice.",
                    "example": 1023,
                    "type": "integer"
                },
                "poll_id": {
                    "description": "The id of the poll this poll choice belongs to.",
                    "example": 1779,
                    "type": "integer"
                },
                "is_correct": {
                    "description": "Specifies whether or not this poll choice is a 'correct' choice.",
                    "example": "true",
                    "type": "boolean"
                },
                "text": {
                    "description": "The text of the poll choice.",
                    "type": "string",
                    "example": "Choice A"
                },
                "position": {
                    "description": "The order of the poll choice in relation to it's sibling poll choices.",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "PollSession": {
            "id": "PollSession",
            "description": "",
            "required": [
                "id",
                "poll_id",
                "course_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the poll session.",
                    "example": 1023,
                    "type": "integer"
                },
                "poll_id": {
                    "description": "The id of the Poll this poll session is associated with",
                    "example": 55,
                    "type": "integer"
                },
                "course_id": {
                    "description": "The id of the Course this poll session is associated with",
                    "example": 1111,
                    "type": "integer"
                },
                "course_section_id": {
                    "description": "The id of the Course Section this poll session is associated with",
                    "example": 444,
                    "type": "integer"
                },
                "is_published": {
                    "description": "Specifies whether or not this poll session has been published for students to participate in.",
                    "example": "true",
                    "type": "boolean"
                },
                "has_public_results": {
                    "description": "Specifies whether the results are viewable by students.",
                    "example": "true",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "The time at which the poll session was created.",
                    "example": "2014-01-07T15:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "results": {
                    "description": "The results of the submissions of the poll. Each key is the poll choice id, and the value is the count of submissions.",
                    "example": {
                        "144": 10,
                        "145": 3,
                        "146": 27,
                        "147": 8
                    },
                    "type": "object"
                },
                "poll_submissions": {
                    "description": "If the poll session has public results, this will return an array of all submissions, viewable by both students and teachers. If the results are not public, for students it will return their submission only.",
                    "$ref": "PollSubmission"
                }
            }
        },
        "PollSubmission": {
            "id": "PollSubmission",
            "description": "",
            "required": [
                "id",
                "poll_choice"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the poll submission.",
                    "example": 1023,
                    "type": "integer"
                },
                "poll_choice_id": {
                    "description": "The unique identifier of the poll choice chosen for this submission.",
                    "example": 155,
                    "type": "integer"
                },
                "user_id": {
                    "description": "the unique identifier of the user who submitted this poll submission.",
                    "example": 4555,
                    "type": "integer"
                },
                "created_at": {
                    "description": "The date and time the poll submission was submitted.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "Proficiency": {
            "id": "Proficiency",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "ratings": {
                    "description": "An array of proficiency ratings. See the ProficiencyRating specification above.",
                    "example": [],
                    "type": "array"
                }
            }
        },
        "ProficiencyRating": {
            "id": "ProficiencyRating",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "description": {
                    "description": "The description of the rating",
                    "example": "Exceeds Mastery",
                    "type": "string"
                },
                "points": {
                    "description": "A non-negative number of points for the rating",
                    "example": 4,
                    "type": "number"
                },
                "mastery": {
                    "description": "Indicates the rating where mastery is first achieved",
                    "example": false,
                    "type": "boolean"
                },
                "color": {
                    "description": "The hex color code of the rating",
                    "example": "127A1B",
                    "type": "string"
                }
            }
        },
        "Profile": {
            "id": "Profile",
            "description": "Profile details for a Canvas user.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the user.",
                    "example": 1234,
                    "type": "integer"
                },
                "name": {
                    "description": "Sample User",
                    "example": "Sample User",
                    "type": "string"
                },
                "short_name": {
                    "description": "Sample User",
                    "example": "Sample User",
                    "type": "string"
                },
                "sortable_name": {
                    "description": "user, sample",
                    "example": "user, sample",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "primary_email": {
                    "description": "sample_user@example.com",
                    "example": "sample_user@example.com",
                    "type": "string"
                },
                "login_id": {
                    "description": "sample_user@example.com",
                    "example": "sample_user@example.com",
                    "type": "string"
                },
                "sis_user_id": {
                    "description": "sis1",
                    "example": "sis1",
                    "type": "string"
                },
                "lti_user_id": {
                    "type": "string"
                },
                "avatar_url": {
                    "description": "The avatar_url can change over time, so we recommend not caching it for more than a few hours",
                    "example": "..url..",
                    "type": "string"
                },
                "calendar": {
                    "$ref": "CalendarLink"
                },
                "time_zone": {
                    "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.",
                    "example": "America/Denver",
                    "type": "string"
                },
                "locale": {
                    "description": "The users locale.",
                    "type": "string"
                },
                "k5_user": {
                    "description": "Optional: Whether or not the user is a K5 user. This field is nil if the user settings are not for the user making the request.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "Progress": {
            "id": "Progress",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the Progress object",
                    "example": 1,
                    "type": "integer"
                },
                "context_id": {
                    "description": "the context owning the job.",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "example": "Account",
                    "type": "string"
                },
                "user_id": {
                    "description": "the id of the user who started the job",
                    "example": 123,
                    "type": "integer"
                },
                "tag": {
                    "description": "the type of operation",
                    "example": "course_batch_update",
                    "type": "string"
                },
                "completion": {
                    "description": "percent completed",
                    "example": 100,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "the state of the job one of 'queued', 'running', 'completed', 'failed'",
                    "example": "completed",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "queued",
                            "running",
                            "completed",
                            "failed"
                        ]
                    }
                },
                "created_at": {
                    "description": "the time the job was created",
                    "example": "2013-01-15T15:00:00Z",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "the time the job was last updated",
                    "example": "2013-01-15T15:04:00Z",
                    "type": "datetime"
                },
                "message": {
                    "description": "optional details about the job",
                    "example": "17 courses processed",
                    "type": "string"
                },
                "results": {
                    "description": "optional results of the job. omitted when job is still pending",
                    "example": {
                        "id": "123"
                    },
                    "type": "object"
                },
                "url": {
                    "description": "url where a progress update can be retrieved with an LTI access token",
                    "example": "https://canvas.example.edu/api/lti/courses/1/progress/1",
                    "type": "string"
                }
            }
        },
        "ProvisionalGrade": {
            "id": "ProvisionalGrade",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "provisional_grade_id": {
                    "description": "The identifier for the provisional grade",
                    "example": 23,
                    "type": "integer"
                },
                "score": {
                    "description": "The numeric score",
                    "example": 90,
                    "type": "integer"
                },
                "grade": {
                    "description": "The grade",
                    "example": "A-",
                    "type": "string"
                },
                "grade_matches_current_submission": {
                    "description": "Whether the grade was applied to the most current submission (false if the student resubmitted after grading)",
                    "example": true,
                    "type": "boolean"
                },
                "graded_at": {
                    "description": "When the grade was given",
                    "example": "2015-11-01T00:03:21-06:00",
                    "type": "datetime"
                },
                "final": {
                    "description": "Whether this is the 'final' provisional grade created by the moderator",
                    "example": false,
                    "type": "boolean"
                },
                "speedgrader_url": {
                    "description": "A link to view this provisional grade in SpeedGrader™",
                    "example": "http://www.example.com/courses/123/gradebook/speed_grader?...",
                    "type": "string"
                }
            }
        },
        "Quiz": {
            "id": "Quiz",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the quiz",
                    "example": 5,
                    "type": "integer"
                },
                "title": {
                    "description": "the title of the quiz",
                    "example": "Hamlet Act 3 Quiz",
                    "type": "string"
                },
                "html_url": {
                    "description": "the HTTP/HTTPS URL to the quiz",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2",
                    "type": "string"
                },
                "mobile_url": {
                    "description": "a url suitable for loading the quiz in a mobile webview.  it will persiste the headless session and, for quizzes in public courses, will force the user to login",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2?persist_healdess=1&force_user=1",
                    "type": "string"
                },
                "preview_url": {
                    "description": "A url that can be visited in the browser with a POST request to preview a quiz as the teacher. Only present when the user may grade",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2/take?preview=1",
                    "type": "string"
                },
                "description": {
                    "description": "the description of the quiz",
                    "example": "This is a quiz on Act 3 of Hamlet",
                    "type": "string"
                },
                "quiz_type": {
                    "description": "type of quiz possible values: 'practice_quiz', 'assignment', 'graded_survey', 'survey'",
                    "example": "assignment",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "practice_quiz",
                            "assignment",
                            "graded_survey",
                            "survey"
                        ]
                    }
                },
                "assignment_group_id": {
                    "description": "the ID of the quiz's assignment group:",
                    "example": 3,
                    "type": "integer"
                },
                "time_limit": {
                    "description": "quiz time limit in minutes",
                    "example": 5,
                    "type": "integer"
                },
                "shuffle_answers": {
                    "description": "shuffle answers for students?",
                    "example": false,
                    "type": "boolean"
                },
                "hide_results": {
                    "description": "let students see their quiz responses? possible values: null, 'always', 'until_after_last_attempt'",
                    "example": "always",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "always",
                            "until_after_last_attempt"
                        ]
                    }
                },
                "show_correct_answers": {
                    "description": "show which answers were correct when results are shown? only valid if hide_results=null",
                    "example": true,
                    "type": "boolean"
                },
                "show_correct_answers_last_attempt": {
                    "description": "restrict the show_correct_answers option above to apply only to the last submitted attempt of a quiz that allows multiple attempts. only valid if show_correct_answers=true and allowed_attempts > 1",
                    "example": true,
                    "type": "boolean"
                },
                "show_correct_answers_at": {
                    "description": "when should the correct answers be visible by students? only valid if show_correct_answers=true",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "hide_correct_answers_at": {
                    "description": "prevent the students from seeing correct answers after the specified date has passed. only valid if show_correct_answers=true",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "one_time_results": {
                    "description": "prevent the students from seeing their results more than once (right after they submit the quiz)",
                    "example": true,
                    "type": "boolean"
                },
                "scoring_policy": {
                    "description": "which quiz score to keep (only if allowed_attempts != 1) possible values: 'keep_highest', 'keep_latest'",
                    "example": "keep_highest",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "keep_highest",
                            "keep_latest"
                        ]
                    }
                },
                "allowed_attempts": {
                    "description": "how many times a student can take the quiz -1 = unlimited attempts",
                    "example": 3,
                    "type": "integer"
                },
                "one_question_at_a_time": {
                    "description": "show one question at a time?",
                    "example": false,
                    "type": "boolean"
                },
                "question_count": {
                    "description": "the number of questions in the quiz",
                    "example": 12,
                    "type": "integer"
                },
                "points_possible": {
                    "description": "The total point value given to the quiz",
                    "example": 20,
                    "type": "integer"
                },
                "cant_go_back": {
                    "description": "lock questions after answering? only valid if one_question_at_a_time=true",
                    "example": false,
                    "type": "boolean"
                },
                "access_code": {
                    "description": "access code to restrict quiz access",
                    "example": "2beornot2be",
                    "type": "string"
                },
                "ip_filter": {
                    "description": "IP address or range that quiz access is limited to",
                    "example": "123.123.123.123",
                    "type": "string"
                },
                "due_at": {
                    "description": "when the quiz is due",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "when to lock the quiz",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "when to unlock the quiz",
                    "example": "2013-01-21T23:59:00-07:00",
                    "type": "datetime"
                },
                "published": {
                    "description": "whether the quiz has a published or unpublished draft state.",
                    "example": true,
                    "type": "boolean"
                },
                "unpublishable": {
                    "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the quiz.",
                    "example": true,
                    "type": "boolean"
                },
                "locked_for_user": {
                    "description": "Whether or not this is locked for the user.",
                    "example": false,
                    "type": "boolean"
                },
                "lock_info": {
                    "description": "(Optional) Information for the user about the lock. Present when locked_for_user is true.",
                    "$ref": "LockInfo"
                },
                "lock_explanation": {
                    "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                    "example": "This quiz is locked until September 1 at 12:00am",
                    "type": "string"
                },
                "speedgrader_url": {
                    "description": "Link to Speed Grader for this quiz. Will not be present if quiz is unpublished",
                    "example": "http://canvas.instructure.com/courses/1/speed_grader?assignment_id=1",
                    "type": "string"
                },
                "quiz_extensions_url": {
                    "description": "Link to endpoint to send extensions for this quiz.",
                    "example": "http://canvas.instructure.com/courses/1/quizzes/2/quiz_extensions",
                    "type": "string"
                },
                "permissions": {
                    "$ref": "QuizPermissions",
                    "description": "Permissions the user has for the quiz"
                },
                "all_dates": {
                    "description": "list of due dates for the quiz",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentDate"
                    }
                },
                "version_number": {
                    "description": "Current version number of the quiz",
                    "example": 3,
                    "type": "integer"
                },
                "question_types": {
                    "description": "List of question types in the quiz",
                    "example": [
                        "multiple_choice",
                        "essay"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "anonymous_submissions": {
                    "description": "Whether survey submissions will be kept anonymous (only applicable to 'graded_survey', 'survey' quiz types)",
                    "example": false,
                    "type": "boolean"
                }
            }
        },
        "QuizAssignmentOverride": {
            "id": "QuizAssignmentOverride",
            "description": "Set of assignment-overridden dates for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1,
                    "description": "ID of the assignment override, unless this is the base construct, in which case the 'id' field is omitted."
                },
                "due_at": {
                    "description": "The date after which any quiz submission is considered late.",
                    "example": "2014-02-21T06:59:59Z",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "Date when the quiz becomes available for taking.",
                    "example": null,
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "When the quiz will stop being available for taking. A value of null means it can always be taken.",
                    "example": "2014-02-21T06:59:59Z",
                    "type": "datetime"
                },
                "title": {
                    "description": "Title of the section this assignment override is for, if any.",
                    "example": "Project X",
                    "type": "string"
                },
                "base": {
                    "description": "If this property is present, it means that dates in this structure are not based on an assignment override, but are instead for all students.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "QuizAssignmentOverrideSet": {
            "id": "QuizAssignmentOverrideSet",
            "description": "Set of assignment-overridden dates for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz_id": {
                    "description": "ID of the quiz those dates are for.",
                    "example": "1",
                    "type": "string"
                },
                "due_dates": {
                    "description": "An array of quiz assignment overrides. For students, this array will always contain a single item which is the set of dates that apply to that student. For teachers and staff, it may contain more.",
                    "$ref": "QuizAssignmentOverride"
                },
                "all_dates": {
                    "description": "An array of all assignment overrides active for the quiz. This is visible only to teachers and staff.",
                    "$ref": "QuizAssignmentOverride"
                }
            }
        },
        "QuizAssignmentOverrideSetContainer": {
            "id": "QuizAssignmentOverrideSetContainer",
            "description": "Container for set of assignment-overridden dates for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz_assignment_overrides": {
                    "description": "The QuizAssignmentOverrideSet",
                    "type": "array",
                    "items": {
                        "$ref": "QuizAssignmentOverrideSet"
                    }
                }
            }
        },
        "QuizExtension": {
            "id": "QuizExtension",
            "description": "",
            "required": [
                "quiz_id",
                "user_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz_id": {
                    "description": "The ID of the Quiz the quiz extension belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "description": "The ID of the Student that needs the quiz extension.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_attempts": {
                    "description": "Number of times the student is allowed to re-take the quiz over the multiple-attempt limit.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_time": {
                    "description": "Amount of extra time allowed for the quiz submission, in minutes.",
                    "example": 60,
                    "type": "integer",
                    "format": "int64"
                },
                "manually_unlocked": {
                    "description": "The student can take the quiz even if it's locked for everyone else",
                    "example": true,
                    "type": "boolean"
                },
                "end_at": {
                    "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "QuizGroup": {
            "id": "QuizGroup",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the question group.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the question group belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "description": "The name of the question group.",
                    "example": "Fraction questions",
                    "type": "string"
                },
                "pick_count": {
                    "description": "The number of questions to pick from the group to display to the student.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "question_points": {
                    "description": "The amount of points allotted to each question in the group.",
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                },
                "assessment_question_bank_id": {
                    "description": "The ID of the Assessment question bank to pull questions from.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "position": {
                    "description": "The order in which the question group will be retrieved and displayed.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "QuizIPFilter": {
            "id": "QuizIPFilter",
            "description": "",
            "required": [
                "name",
                "account",
                "filter"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "name": {
                    "description": "A unique name for the filter.",
                    "example": "Current Filter",
                    "type": "string"
                },
                "account": {
                    "description": "Name of the Account (or Quiz) the IP filter is defined in.",
                    "example": "Some Quiz",
                    "type": "string"
                },
                "filter": {
                    "description": "An IP address (or range mask) this filter embodies.",
                    "example": "192.168.1.1/24",
                    "type": "string"
                }
            }
        },
        "QuizPermissions": {
            "id": "QuizPermissions",
            "description": "Permissions the user has for the quiz",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "read": {
                    "description": "whether the user can view the quiz",
                    "example": true,
                    "type": "boolean"
                },
                "submit": {
                    "description": "whether the user may submit a submission for the quiz",
                    "example": true,
                    "type": "boolean"
                },
                "create": {
                    "description": "whether the user may create a new quiz",
                    "example": true,
                    "type": "boolean"
                },
                "manage": {
                    "description": "whether the user may edit, update, or delete the quiz",
                    "example": true,
                    "type": "boolean"
                },
                "read_statistics": {
                    "description": "whether the user may view quiz statistics for this quiz",
                    "example": true,
                    "type": "boolean"
                },
                "review_grades": {
                    "description": "whether the user may review grades for all quiz submissions for this quiz",
                    "example": true,
                    "type": "boolean"
                },
                "update": {
                    "description": "whether the user may update the quiz",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "QuizQuestion": {
            "id": "QuizQuestion",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the quiz question.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the question belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "position": {
                    "description": "The order in which the question will be retrieved and displayed.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "question_name": {
                    "description": "The name of the question.",
                    "example": "Prime Number Identification",
                    "type": "string"
                },
                "question_type": {
                    "description": "The type of the question.",
                    "example": "multiple_choice_question",
                    "type": "string"
                },
                "question_text": {
                    "description": "The text of the question.",
                    "example": "Which of the following is NOT a prime number?",
                    "type": "string"
                },
                "points_possible": {
                    "description": "The maximum amount of points possible received for getting this question correct.",
                    "example": 5,
                    "type": "integer",
                    "format": "int64"
                },
                "correct_comments": {
                    "description": "The comments to display if the student answers the question correctly.",
                    "example": "That's correct!",
                    "type": "string"
                },
                "incorrect_comments": {
                    "description": "The comments to display if the student answers incorrectly.",
                    "example": "Unfortunately, that IS a prime number.",
                    "type": "string"
                },
                "neutral_comments": {
                    "description": "The comments to display regardless of how the student answered.",
                    "example": "Goldbach's conjecture proposes that every even integer greater than 2 can be expressed as the sum of two prime numbers.",
                    "type": "string"
                },
                "answers": {
                    "description": "An array of available answers to display to the student.",
                    "type": "array",
                    "items": {
                        "$ref": "Answer"
                    }
                }
            }
        },
        "QuizReport": {
            "id": "QuizReport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the quiz report",
                    "example": 5,
                    "type": "integer"
                },
                "quiz_id": {
                    "description": "the ID of the quiz",
                    "example": 4,
                    "type": "integer"
                },
                "report_type": {
                    "description": "which type of report this is possible values: 'student_analysis', 'item_analysis'",
                    "example": "student_analysis",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "student_analysis",
                            "item_analysis"
                        ]
                    }
                },
                "readable_type": {
                    "description": "a human-readable (and localized) version of the report_type",
                    "example": "Student Analysis",
                    "type": "string"
                },
                "includes_all_versions": {
                    "description": "boolean indicating whether the report represents all submissions or only the most recent ones for each student",
                    "example": true,
                    "type": "boolean"
                },
                "anonymous": {
                    "description": "boolean indicating whether the report is for an anonymous survey. if true, no student names will be included in the csv",
                    "example": false,
                    "type": "boolean"
                },
                "generatable": {
                    "description": "boolean indicating whether the report can be generated, which is true unless the quiz is a survey one",
                    "example": true,
                    "type": "boolean"
                },
                "created_at": {
                    "description": "when the report was created",
                    "example": "2013-05-01T12:34:56-07:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "when the report was last updated",
                    "example": "2013-05-01T12:34:56-07:00",
                    "type": "datetime"
                },
                "url": {
                    "description": "the API endpoint for this report",
                    "example": "http://canvas.example.com/api/v1/courses/1/quizzes/1/reports/1",
                    "type": "string"
                },
                "file": {
                    "description": "if the report has finished generating, a File object that represents it. refer to the Files API for more information about the format",
                    "$ref": "File"
                },
                "progress_url": {
                    "description": "if the report has not yet finished generating, a URL where information about its progress can be retrieved. refer to the Progress API for more information (Note: not available in JSON-API format)",
                    "type": "string"
                },
                "progress": {
                    "description": "if the report is being generated, a Progress object that represents the operation. Refer to the Progress API for more information about the format. (Note: available only in JSON-API format)",
                    "$ref": "Progress"
                }
            }
        },
        "QuizStatistics": {
            "id": "QuizStatistics",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the quiz statistics report.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the statistics report is for. \nNOTE: AVAILABLE ONLY IN NON-JSON-API REQUESTS.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "multiple_attempts_exist": {
                    "description": "Whether there are any students that have made mutliple submissions for this quiz.",
                    "example": true,
                    "type": "boolean"
                },
                "includes_all_versions": {
                    "description": "In the presence of multiple attempts, this field describes whether the statistics describe all the submission attempts and not only the latest ones.",
                    "example": true,
                    "type": "boolean"
                },
                "generated_at": {
                    "description": "The time at which the statistics were generated, which is usually after the occurrence of a quiz event, like a student submitting it.",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "url": {
                    "description": "The API HTTP/HTTPS URL to this quiz statistics.",
                    "example": "http://canvas.example.edu/api/v1/courses/1/quizzes/2/statistics",
                    "type": "string"
                },
                "html_url": {
                    "description": "The HTTP/HTTPS URL to the page where the statistics can be seen visually.",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2/statistics",
                    "type": "string"
                },
                "question_statistics": {
                    "$ref": "QuizStatisticsQuestionStatistics",
                    "description": "Question-specific statistics for each question and its answers."
                },
                "submission_statistics": {
                    "$ref": "QuizStatisticsSubmissionStatistics",
                    "description": "Question-specific statistics for each question and its answers."
                },
                "links": {
                    "$ref": "QuizStatisticsLinks",
                    "description": "JSON-API construct that contains links to media related to this quiz statistics object. \nNOTE: AVAILABLE ONLY IN JSON-API REQUESTS."
                }
            }
        },
        "QuizStatisticsAnswerPointBiserial": {
            "id": "QuizStatisticsAnswerPointBiserial",
            "description": "A point-biserial construct for a single pre-defined answer in a Multiple-Choice or True/False question.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "answer_id": {
                    "description": "ID of the answer the point biserial is for.",
                    "example": 3866,
                    "type": "integer",
                    "format": "int64"
                },
                "point_biserial": {
                    "description": "The point biserial value for this answer. Value ranges between -1 and 1.",
                    "example": -0.802955068546966,
                    "type": "number"
                },
                "correct": {
                    "description": "Convenience attribute that denotes whether this is the correct answer as opposed to being a distractor. This is mutually exclusive with the `distractor` value",
                    "type": "boolean",
                    "example": true
                },
                "distractor": {
                    "description": "Convenience attribute that denotes whether this is a distractor answer and not the correct one. This is mutually exclusive with the `correct` value",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "QuizStatisticsAnswerStatistics": {
            "id": "QuizStatisticsAnswerStatistics",
            "description": "Statistics for a specific pre-defined answer in a Multiple-Choice or True/False quiz question.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "ID of the answer.",
                    "example": 3866,
                    "type": "integer",
                    "format": "int64"
                },
                "text": {
                    "description": "The text attached to the answer.",
                    "example": "Blue.",
                    "type": "string"
                },
                "weight": {
                    "description": "An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should 100",
                    "example": 100,
                    "type": "integer",
                    "format": "int64"
                },
                "responses": {
                    "description": "Number of students who have chosen this answer.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "QuizStatisticsLinks": {
            "id": "QuizStatisticsLinks",
            "description": "Links to media related to QuizStatistics.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz": {
                    "description": "HTTP/HTTPS API URL to the quiz this statistics describe.",
                    "type": "string",
                    "example": "http://canvas.example.edu/api/v1/courses/1/quizzes/2"
                }
            }
        },
        "QuizStatisticsQuestionStatistics": {
            "id": "QuizStatisticsQuestionStatistics",
            "description": "Statistics for submissions made to a specific quiz question.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "responses": {
                    "description": "Number of students who have provided an answer to this question. Blank or empty responses are not counted.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "answers": {
                    "$ref": "QuizStatisticsAnswerStatistics",
                    "description": "Statistics related to each individual pre-defined answer."
                }
            }
        },
        "QuizStatisticsSubmissionStatistics": {
            "id": "QuizStatisticsSubmissionStatistics",
            "description": "Generic statistics for all submissions for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "unique_count": {
                    "description": "The number of students who have taken the quiz.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "score_average": {
                    "description": "The mean of the student submission scores.",
                    "example": 4.33333333333333,
                    "type": "number"
                },
                "score_high": {
                    "description": "The highest submission score.",
                    "example": 6,
                    "type": "number"
                },
                "score_low": {
                    "description": "The lowest submission score.",
                    "example": 3,
                    "type": "number"
                },
                "score_stdev": {
                    "description": "Standard deviation of the submission scores.",
                    "example": 1.24721912892465,
                    "type": "number"
                },
                "scores": {
                    "description": "A percentile distribution of the student scores, each key is the percentile (ranges between 0 and 100%) while the value is the number of students who received that score.",
                    "example": {
                        "34": 5,
                        "50": 1,
                        "100": 1
                    },
                    "type": "object"
                },
                "correct_count_average": {
                    "description": "The mean of the number of questions answered correctly by each student.",
                    "example": 3.66666666666667,
                    "type": "number"
                },
                "incorrect_count_average": {
                    "description": "The mean of the number of questions answered incorrectly by each student.",
                    "example": 5,
                    "type": "number"
                },
                "duration_average": {
                    "description": "The average time spent by students while taking the quiz.",
                    "example": 42.333333333,
                    "type": "number"
                }
            }
        },
        "QuizSubmission": {
            "id": "QuizSubmission",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the quiz submission.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the quiz submission belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "description": "The ID of the Student that made the quiz submission.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "submission_id": {
                    "description": "The ID of the Submission the quiz submission represents.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "started_at": {
                    "description": "The time at which the student started the quiz submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "finished_at": {
                    "description": "The time at which the student submitted the quiz submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "end_at": {
                    "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "attempt": {
                    "description": "For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_attempts": {
                    "description": "Number of times the student was allowed to re-take the quiz over the multiple-attempt limit.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_time": {
                    "description": "Amount of extra time allowed for the quiz submission, in minutes.",
                    "example": 60,
                    "type": "integer",
                    "format": "int64"
                },
                "manually_unlocked": {
                    "description": "The student can take the quiz even if it's locked for everyone else",
                    "example": true,
                    "type": "boolean"
                },
                "time_spent": {
                    "description": "Amount of time spent, in seconds.",
                    "example": 300,
                    "type": "integer",
                    "format": "int64"
                },
                "score": {
                    "description": "The score of the quiz submission, if graded.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "score_before_regrade": {
                    "description": "The original score of the quiz submission prior to any re-grading.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "kept_score": {
                    "description": "For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission.",
                    "example": 5,
                    "type": "integer",
                    "format": "int64"
                },
                "fudge_points": {
                    "description": "Number of points the quiz submission's score was fudged by.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "has_seen_results": {
                    "description": "Whether the student has viewed their results to the quiz.",
                    "example": true,
                    "type": "boolean"
                },
                "workflow_state": {
                    "description": "The current state of the quiz submission. Possible values: ['untaken'|'pending_review'|'complete'|'settings_only'|'preview'].",
                    "example": "untaken",
                    "type": "string"
                },
                "overdue_and_needs_submission": {
                    "description": "Indicates whether the quiz submission is overdue and needs submission",
                    "example": "false",
                    "type": "boolean"
                }
            }
        },
        "QuizSubmissionEvent": {
            "id": "QuizSubmissionEvent",
            "description": "An event passed from the Quiz Submission take page",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "created_at": {
                    "description": "a timestamp record of creation time",
                    "example": "2014-10-08T19:29:58Z",
                    "type": "datetime"
                },
                "event_type": {
                    "description": "the type of event being sent",
                    "example": "question_answered",
                    "type": "string"
                },
                "event_data": {
                    "description": "custom contextual data for the specific event type",
                    "example": {
                        "answer": "42"
                    },
                    "type": "object"
                }
            }
        },
        "QuizSubmissionQuestion": {
            "id": "QuizSubmissionQuestion",
            "description": "",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the QuizQuestion this answer is for.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "flagged": {
                    "description": "Whether this question is flagged.",
                    "example": true,
                    "type": "boolean"
                },
                "answer": {
                    "description": "The provided answer (if any) for this question. The format of this parameter depends on the type of the question, see the Appendix for more information.",
                    "type": "string"
                },
                "answers": {
                    "description": "The possible answers for this question when those possible answers are necessary.  The presence of this parameter is dependent on permissions.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Report": {
            "id": "Report",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the report.",
                    "example": "1",
                    "type": "integer"
                },
                "report": {
                    "description": "The type of report.",
                    "example": "sis_export_csv",
                    "type": "string"
                },
                "file_url": {
                    "description": "The url to the report download.",
                    "example": "https://example.com/some/path",
                    "type": "string"
                },
                "attachment": {
                    "description": "The attachment api object of the report. Only available after the report has completed.",
                    "$ref": "FileBasic"
                },
                "status": {
                    "description": "The status of the report",
                    "example": "complete",
                    "type": "string"
                },
                "created_at": {
                    "description": "The date and time the report was created.",
                    "example": "2013-12-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "started_at": {
                    "description": "The date and time the report started processing.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "ended_at": {
                    "description": "The date and time the report finished processing.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "parameters": {
                    "description": "The report parameters",
                    "example": {
                        "course_id": 2,
                        "start_at": "2012-07-13T10:55:20-06:00",
                        "end_at": "2012-07-13T10:55:20-06:00"
                    },
                    "$ref": "ReportParameters"
                },
                "progress": {
                    "description": "The progress of the report",
                    "example": "100",
                    "type": "integer"
                },
                "current_line": {
                    "description": "This is the current line count being written to the report. It updates every 1000 records.",
                    "example": "12000",
                    "type": "integer"
                }
            }
        },
        "ReportParameters": {
            "id": "ReportParameters",
            "description": "The parameters returned will vary for each report.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "enrollment_term_id": {
                    "description": "The canvas id of the term to get grades from",
                    "example": 2,
                    "type": "integer"
                },
                "include_deleted": {
                    "description": "If true, deleted objects will be included. If false, deleted objects will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "course_id": {
                    "description": "The id of the course to report on",
                    "example": 2,
                    "type": "integer"
                },
                "order": {
                    "description": "The sort order for the csv, Options: 'users', 'courses', 'outcomes'.",
                    "example": "users",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "users",
                            "courses",
                            "outcomes"
                        ]
                    }
                },
                "users": {
                    "description": "If true, user data will be included. If false, user data will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "accounts": {
                    "description": "If true, account data will be included. If false, account data will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "terms": {
                    "description": "If true, term data will be included. If false, term data will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "courses": {
                    "description": "If true, course data will be included. If false, course data will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "sections": {
                    "description": "If true, section data will be included. If false, section data will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "enrollments": {
                    "description": "If true, enrollment data will be included. If false, enrollment data will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "groups": {
                    "description": "If true, group data will be included. If false, group data will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "xlist": {
                    "description": "If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted.",
                    "example": false,
                    "type": "boolean"
                },
                "sis_terms_csv": {
                    "example": 1,
                    "type": "integer"
                },
                "sis_accounts_csv": {
                    "example": 1,
                    "type": "integer"
                },
                "include_enrollment_state": {
                    "description": "If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false.",
                    "example": false,
                    "type": "boolean"
                },
                "enrollment_state": {
                    "description": "Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']",
                    "example": [
                        "all"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_at": {
                    "description": "The beginning date for submissions. Max time range is 2 weeks.",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "The end date for submissions. Max time range is 2 weeks.",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                }
            }
        },
        "Result": {
            "id": "Result",
            "description": "A pass/fail results for a student",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "type": "string",
                    "example": "42",
                    "description": "A unique identifier for this result"
                },
                "passed": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the user passed or not"
                },
                "assessed_at": {
                    "type": "datetime",
                    "example": "2014-05-13T00:01:57-06:00",
                    "description": "When this result was recorded"
                },
                "links": {
                    "$ref": "ResultLinks",
                    "example": {
                        "user": "42",
                        "assessor": "23",
                        "assessment": "5"
                    },
                    "description": "Unique identifiers of objects associated with this result"
                }
            }
        },
        "ResultLinks": {
            "id": "ResultLinks",
            "description": "Unique identifiers of objects associated with a result",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user": {
                    "type": "string",
                    "example": "42",
                    "description": "A unique identifier for the user to whom this result applies"
                },
                "assessor": {
                    "type": "string",
                    "example": "23",
                    "description": "A unique identifier for the user who created this result"
                },
                "assessment": {
                    "type": "string",
                    "example": "5",
                    "description": "A unique identifier for the assessment that this result is for"
                }
            }
        },
        "Role": {
            "id": "Role",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "label": {
                    "description": "The label of the role.",
                    "example": "New Role",
                    "type": "string"
                },
                "role": {
                    "description": "The label of the role. (Deprecated alias for 'label')",
                    "example": "New Role",
                    "type": "string"
                },
                "base_role_type": {
                    "description": "The role type that is being used as a base for this role. For account-level roles, this is 'AccountMembership'. For course-level roles, it is an enrollment type.",
                    "example": "AccountMembership",
                    "type": "string"
                },
                "account": {
                    "description": "JSON representation of the account the role is in.",
                    "example": {
                        "id": 1019,
                        "name": "CGNU",
                        "parent_account_id": 73,
                        "root_account_id": 1,
                        "sis_account_id": "cgnu"
                    },
                    "type": "object",
                    "$ref": "Account"
                },
                "workflow_state": {
                    "description": "The state of the role: 'active', 'inactive', or 'built_in'",
                    "example": "active",
                    "type": "string"
                },
                "permissions": {
                    "description": "A dictionary of permissions keyed by name (see permissions input parameter in the 'Create a role' API).",
                    "example": {
                        "read_course_content": {
                            "enabled": true,
                            "locked": false,
                            "readonly": false,
                            "explicit": true,
                            "prior_default": false
                        },
                        "read_course_list": {
                            "enabled": true,
                            "locked": true,
                            "readonly": true,
                            "explicit": false
                        },
                        "read_question_banks": {
                            "enabled": false,
                            "locked": true,
                            "readonly": false,
                            "explicit": true,
                            "prior_default": false
                        },
                        "read_reports": {
                            "enabled": true,
                            "locked": false,
                            "readonly": false,
                            "explicit": false
                        }
                    },
                    "type": "object",
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "$ref": "RolePermissions"
                    }
                }
            }
        },
        "RolePermissions": {
            "id": "RolePermissions",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "enabled": {
                    "description": "Whether the role has the permission",
                    "example": true,
                    "type": "boolean"
                },
                "locked": {
                    "description": "Whether the permission is locked by this role",
                    "example": false,
                    "type": "boolean",
                    "default": false
                },
                "applies_to_self": {
                    "description": "Whether the permission applies to the account this role is in. Only present if enabled is true",
                    "example": true,
                    "type": "boolean",
                    "default": true
                },
                "applies_to_descendants": {
                    "description": "Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true",
                    "example": false,
                    "type": "boolean",
                    "default": true
                },
                "readonly": {
                    "description": "Whether the permission can be modified in this role (i.e. whether the permission is locked by an upstream role).",
                    "example": false,
                    "type": "boolean",
                    "default": false
                },
                "explicit": {
                    "description": "Whether the value of enabled is specified explicitly by this role, or inherited from an upstream role.",
                    "example": true,
                    "type": "boolean",
                    "default": false
                },
                "prior_default": {
                    "description": "The value that would have been inherited from upstream if the role had not explicitly set a value. Only present if explicit is true.",
                    "example": false,
                    "type": "boolean"
                }
            }
        },
        "Rubric": {
            "id": "Rubric",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the rubric",
                    "example": 1,
                    "type": "integer"
                },
                "title": {
                    "description": "title of the rubric",
                    "example": "some title",
                    "type": "string"
                },
                "context_id": {
                    "description": "the context owning the rubric",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "example": "Course",
                    "type": "string"
                },
                "points_possible": {
                    "example": "10.0",
                    "type": "integer"
                },
                "reusable": {
                    "example": "false",
                    "type": "boolean"
                },
                "read_only": {
                    "example": "true",
                    "type": "boolean"
                },
                "free_form_criterion_comments": {
                    "description": "whether or not free-form comments are used",
                    "example": "true",
                    "type": "boolean"
                },
                "hide_score_total": {
                    "example": "true",
                    "type": "boolean"
                },
                "data": {
                    "description": "An array with all of this Rubric's grading Criteria",
                    "type": "array",
                    "items": {
                        "$ref": "RubricCriterion"
                    }
                },
                "assessments": {
                    "description": "If an assessment type is included in the 'include' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.",
                    "type": "array",
                    "items": {
                        "$ref": "RubricAssessment"
                    }
                },
                "associations": {
                    "description": "If an association type is included in the 'include' parameter, includes an array of rubric association objects for a given rubric, based on the association type requested. If the user does not request an association type this key will be absent.",
                    "type": "array",
                    "items": {
                        "$ref": "RubricAssociation"
                    }
                }
            }
        },
        "RubricAssessment": {
            "id": "RubricAssessment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the rubric",
                    "example": 1,
                    "type": "integer"
                },
                "rubric_id": {
                    "description": "the rubric the assessment belongs to",
                    "example": 1,
                    "type": "integer"
                },
                "rubric_association_id": {
                    "example": "2",
                    "type": "integer"
                },
                "score": {
                    "example": "5.0",
                    "type": "integer"
                },
                "artifact_type": {
                    "description": "the object of the assessment",
                    "example": "Submission",
                    "type": "string"
                },
                "artifact_id": {
                    "description": "the id of the object of the assessment",
                    "example": "3",
                    "type": "integer"
                },
                "artifact_attempt": {
                    "description": "the current number of attempts made on the object of the assessment",
                    "example": "2",
                    "type": "integer"
                },
                "assessment_type": {
                    "description": "the type of assessment. values will be either 'grading', 'peer_review', or 'provisional_grade'",
                    "example": "grading",
                    "type": "string"
                },
                "assessor_id": {
                    "description": "user id of the person who made the assessment",
                    "example": "6",
                    "type": "integer"
                },
                "data": {
                    "description": "(Optional) If 'full' is included in the 'style' parameter, returned assessments will have their full details contained in their data hash. If the user does not request a style, this key will be absent.",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "comments": {
                    "description": "(Optional) If 'comments_only' is included in the 'style' parameter, returned assessments will include only the comments portion of their data hash. If the user does not request a style, this key will be absent.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RubricAssociation": {
            "id": "RubricAssociation",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the association",
                    "example": 1,
                    "type": "integer"
                },
                "rubric_id": {
                    "description": "the ID of the rubric",
                    "example": "1",
                    "type": "integer"
                },
                "association_id": {
                    "description": "the ID of the object this association links to",
                    "example": 1,
                    "type": "integer"
                },
                "association_type": {
                    "description": "the type of object this association links to",
                    "example": "Course",
                    "type": "string"
                },
                "use_for_grading": {
                    "description": "Whether or not the associated rubric is used for grade calculation",
                    "example": "true",
                    "type": "boolean"
                },
                "summary_data": {
                    "example": "",
                    "type": "string"
                },
                "purpose": {
                    "description": "Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context. Values will be grading or bookmark.",
                    "example": "grading",
                    "type": "string"
                },
                "hide_score_total": {
                    "description": "Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.",
                    "example": "true",
                    "type": "boolean"
                },
                "hide_points": {
                    "example": "true",
                    "type": "boolean"
                },
                "hide_outcome_results": {
                    "example": "true",
                    "type": "boolean"
                }
            }
        },
        "RubricCriteria": {
            "id": "RubricCriteria",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "points": {
                    "example": 10,
                    "type": "integer"
                },
                "id": {
                    "description": "The id of rubric criteria.",
                    "example": "crit1",
                    "type": "string"
                },
                "learning_outcome_id": {
                    "description": "(Optional) The id of the learning outcome this criteria uses, if any.",
                    "example": "1234",
                    "type": "string"
                },
                "vendor_guid": {
                    "description": "(Optional) The 3rd party vendor's GUID for the outcome this criteria references, if any.",
                    "example": "abdsfjasdfne3jsdfn2",
                    "type": "string"
                },
                "description": {
                    "example": "Criterion 1",
                    "type": "string"
                },
                "long_description": {
                    "example": "Criterion 1 more details",
                    "type": "string"
                },
                "criterion_use_range": {
                    "example": true,
                    "type": "boolean"
                },
                "ratings": {
                    "type": "array",
                    "items": {
                        "$ref": "RubricRating"
                    }
                },
                "ignore_for_scoring": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "RubricCriterion": {
            "id": "RubricCriterion",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the criterion",
                    "example": "_10",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "long_description": {
                    "type": "string"
                },
                "points": {
                    "example": "5",
                    "type": "integer"
                },
                "criterion_use_range": {
                    "example": "false",
                    "type": "boolean"
                },
                "ratings": {
                    "description": "the possible ratings for this Criterion",
                    "type": "array",
                    "items": {
                        "$ref": "RubricRating"
                    }
                }
            }
        },
        "RubricRating": {
            "id": "RubricRating",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "points": {
                    "example": 10,
                    "type": "integer"
                },
                "id": {
                    "example": "rat1",
                    "type": "string"
                },
                "description": {
                    "example": "Full marks",
                    "type": "string"
                },
                "long_description": {
                    "example": "Student completed the assignment flawlessly.",
                    "type": "string"
                }
            }
        },
        "Scope": {
            "id": "Scope",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "resource": {
                    "description": "The resource the scope is associated with",
                    "example": "courses",
                    "type": "string"
                },
                "resource_name": {
                    "description": "The localized resource name",
                    "example": "Courses",
                    "type": "string"
                },
                "controller": {
                    "description": "The controller the scope is associated to",
                    "example": "courses",
                    "type": "string"
                },
                "action": {
                    "description": "The controller action the scope is associated to",
                    "example": "index",
                    "type": "string"
                },
                "verb": {
                    "description": "The HTTP verb for the scope",
                    "example": "GET",
                    "type": "string"
                },
                "scope": {
                    "description": "The identifier for the scope",
                    "example": "url:GET|/api/v1/courses",
                    "type": "string"
                }
            }
        },
        "Score": {
            "id": "Score",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "userId": {
                    "description": "The lti_user_id or the Canvas user_id",
                    "example": "50 | 'abcasdf'",
                    "type": "string"
                },
                "scoreGiven": {
                    "description": "The Current score received in the tool for this line item and user, scaled to the scoreMaximum",
                    "example": "50",
                    "type": "number"
                },
                "scoreMaximum": {
                    "description": "Maximum possible score for this result; it must be present if scoreGiven is present.",
                    "example": "50",
                    "type": "number"
                },
                "comment": {
                    "description": "Comment visible to the student about this score.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Date and time when the score was modified in the tool. Should use subsecond precision.",
                    "example": "2017-04-16T18:54:36.736+00:00",
                    "type": "string"
                },
                "activityProgress": {
                    "description": "Indicate to Canvas the status of the user towards the activity's completion. Must be one of Initialized, Started, InProgress, Submitted, Completed",
                    "example": "Completed",
                    "type": "string"
                },
                "gradingProgress": {
                    "description": "Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded",
                    "example": "FullyGraded",
                    "type": "string"
                }
            }
        },
        "ScoreStatistic": {
            "id": "ScoreStatistic",
            "description": "Used by Assignment model",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "min": {
                    "description": "Min score",
                    "example": 1,
                    "type": "integer"
                },
                "max": {
                    "description": "Max score",
                    "example": 10,
                    "type": "integer"
                },
                "mean": {
                    "description": "Mean score",
                    "example": 6,
                    "type": "integer"
                },
                "upper_q": {
                    "description": "Upper quartile score",
                    "example": 10,
                    "type": "integer"
                },
                "median": {
                    "description": "Median score",
                    "example": 6,
                    "type": "integer"
                },
                "lower_q": {
                    "description": "Lower quartile score",
                    "example": 1,
                    "type": "integer"
                }
            }
        },
        "Section": {
            "id": "Section",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the section.",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the section.",
                    "example": "Section A",
                    "type": "string"
                },
                "sis_section_id": {
                    "description": "The sis id of the section. This field is only included if the user has permission to view SIS information.",
                    "example": "s34643",
                    "type": "string"
                },
                "integration_id": {
                    "description": "Optional: The integration ID of the section. This field is only included if the user has permission to view SIS information.",
                    "example": "3452342345",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "The unique identifier for the SIS import if created through SIS. This field is only included if the user has permission to manage SIS information.",
                    "example": 47,
                    "type": "integer"
                },
                "course_id": {
                    "description": "The unique Canvas identifier for the course in which the section belongs",
                    "example": 7,
                    "type": "integer"
                },
                "sis_course_id": {
                    "description": "The unique SIS identifier for the course in which the section belongs. This field is only included if the user has permission to view SIS information.",
                    "example": 7,
                    "type": "string"
                },
                "start_at": {
                    "description": "the start date for the section, if applicable",
                    "example": "2012-06-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "the end date for the section, if applicable",
                    "type": "datetime"
                },
                "restrict_enrollments_to_section_dates": {
                    "description": "Restrict user enrollments to the start and end dates of the section",
                    "type": "boolean"
                },
                "nonxlist_course_id": {
                    "description": "The unique identifier of the original course of a cross-listed section",
                    "type": "integer"
                },
                "total_students": {
                    "description": "optional: the total number of active and invited students in the section",
                    "example": 13,
                    "type": "integer"
                }
            }
        },
        "SectionAssignmentOverrideAttributes": {
            "id": "SectionAssignmentOverrideAttributes",
            "description": "Attributes of an assignment override that apply to the section object.  See Assignments API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "override_title": {
                    "description": "The title for the assignment override",
                    "example": "some section override",
                    "type": "string"
                },
                "due_at": {
                    "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "(Optional) Time at which this was/will be unlocked.",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "(Optional) Time at which this was/will be locked.",
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime"
                }
            }
        },
        "SectionAttributes": {
            "id": "SectionAttributes",
            "description": "Some of the attributes of a section. For more details see Sections API.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the section.",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the section.",
                    "example": "Section A",
                    "type": "string"
                },
                "sis_id": {
                    "description": "The sis id of the section.",
                    "example": "s34643",
                    "type": "string"
                },
                "integration_id": {
                    "description": "Optional: The integration ID of the section.",
                    "example": "3452342345",
                    "type": "string"
                },
                "origin_course": {
                    "description": "The course to which the section belongs or the course from which the section was cross-listed",
                    "$ref": "CourseAttributes"
                },
                "xlist_course": {
                    "description": "Optional: Attributes of the xlist course. Only present when the section has been cross-listed. See Courses API for more details",
                    "$ref": "CourseAttributes"
                },
                "override": {
                    "description": "Optional: Attributes of the assignment override that apply to the section. See Assignment API for more details",
                    "$ref": "SectionAssignmentOverrideAttributes"
                }
            }
        },
        "SharedBrandConfig": {
            "id": "SharedBrandConfig",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The shared_brand_config identifier.",
                    "example": 987,
                    "type": "integer"
                },
                "account_id": {
                    "description": "The id of the account it should be shared within.",
                    "example": "",
                    "type": "string"
                },
                "brand_config_md5": {
                    "description": "The md5 (since BrandConfigs are identified by MD5 and not numeric id) of the BrandConfig to share.",
                    "example": "1d31002c95842f8fe16da7dfcc0d1f39",
                    "type": "string"
                },
                "name": {
                    "description": "The name to share this theme as",
                    "example": "Crimson and Gold Verson 1",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this was created",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "When this was last updated",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                }
            }
        },
        "SisAssignment": {
            "id": "SisAssignment",
            "description": "Assignments that have post_to_sis enabled with other objects for convenience",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the assignment.",
                    "example": 4,
                    "type": "integer"
                },
                "course_id": {
                    "description": "The unique identifier for the course.",
                    "example": 6,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the assignment",
                    "example": "some assignment",
                    "type": "string"
                },
                "created_at": {
                    "description": "The time at which this assignment was originally created",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "due_at": {
                    "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "(Optional) Time at which this was/will be unlocked.",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "(Optional) Time at which this was/will be locked.",
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "points_possible": {
                    "description": "The maximum points possible for the assignment",
                    "example": 12,
                    "type": "integer"
                },
                "submission_types": {
                    "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'",
                    "example": [
                        "online_text_entry"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "allowableValues": {
                        "values": [
                            "discussion_topic",
                            "online_quiz",
                            "on_paper",
                            "not_graded",
                            "none",
                            "external_tool",
                            "online_text_entry",
                            "online_url",
                            "online_upload",
                            "media_recording",
                            "student_annotation"
                        ]
                    }
                },
                "integration_id": {
                    "example": "12341234",
                    "type": "string",
                    "description": "Third Party integration id for assignment"
                },
                "integration_data": {
                    "example": "other_data",
                    "type": "string",
                    "description": "(optional, Third Party integration data for assignment)"
                },
                "include_in_final_grade": {
                    "description": "If false, the assignment will be omitted from the student's final grade",
                    "example": true,
                    "type": "boolean"
                },
                "assignment_group": {
                    "description": "Includes attributes of a assignment_group for convenience. For more details see Assignments API.",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentGroupAttributes"
                    }
                },
                "sections": {
                    "description": "Includes attributes of a section for convenience. For more details see Sections API.",
                    "type": "array",
                    "items": {
                        "$ref": "SectionAttributes"
                    }
                },
                "user_overrides": {
                    "description": "Includes attributes of a user assignment overrides. For more details see Assignments API.",
                    "type": "array",
                    "items": {
                        "$ref": "UserAssignmentOverrideAttributes"
                    }
                }
            }
        },
        "SisImport": {
            "id": "SisImport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the SIS import.",
                    "example": 1,
                    "type": "integer"
                },
                "created_at": {
                    "description": "The date the SIS import was created.",
                    "example": "2013-12-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "ended_at": {
                    "description": "The date the SIS import finished. Returns null if not finished.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The date the SIS import was last updated.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "workflow_state": {
                    "description": "The current state of the SIS import.\n - 'initializing': The SIS import is being created, if this gets stuck in initializing, it will not import and will continue on to next import.\n - 'created': The SIS import has been created.\n - 'importing': The SIS import is currently processing.\n - 'cleanup_batch': The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.\n - 'imported': The SIS import has completed successfully.\n - 'imported_with_messages': The SIS import completed with errors or warnings.\n - 'aborted': The SIS import was aborted.\n - 'failed_with_messages': The SIS import failed with errors.\n - 'failed': The SIS import failed.\n - 'restoring': The SIS import is restoring states of imported items.\n - 'partially_restored': The SIS import is restored some of the states of imported items. This is generally due to passing a param like undelete only.\n - 'restored': The SIS import is restored all of the states of imported items.",
                    "example": "imported",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "initializing",
                            "created",
                            "importing",
                            "cleanup_batch",
                            "imported",
                            "imported_with_messages",
                            "aborted",
                            "failed",
                            "failed_with_messages",
                            "restoring",
                            "partially_restored",
                            "restored"
                        ]
                    }
                },
                "data": {
                    "description": "data",
                    "$ref": "SisImportData"
                },
                "statistics": {
                    "description": "statistics",
                    "$ref": "SisImportStatistics"
                },
                "progress": {
                    "description": "The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage",
                    "example": "100",
                    "type": "string"
                },
                "errors_attachment": {
                    "description": "The errors_attachment api object of the SIS import. Only available if there are errors or warning and import has completed.",
                    "$ref": "File"
                },
                "user": {
                    "description": "The user that initiated the sis_batch. See the Users API for details.",
                    "$ref": "User"
                },
                "processing_warnings": {
                    "description": "Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.",
                    "example": [
                        [
                            "students.csv",
                            "user John Doe has already claimed john_doe's requested login information, skipping"
                        ]
                    ],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "processing_errors": {
                    "description": "An array of CSV_file/error_message pairs.",
                    "example": [
                        [
                            "students.csv",
                            "Error while importing CSV. Please contact support."
                        ]
                    ],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "batch_mode": {
                    "description": "Whether the import was run in batch mode.",
                    "example": "true",
                    "type": "boolean"
                },
                "batch_mode_term_id": {
                    "description": "The term the batch was limited to.",
                    "example": "1234",
                    "type": "string"
                },
                "multi_term_batch_mode": {
                    "description": "Enables batch mode against all terms in term file. Requires change_threshold to be set.",
                    "example": "false",
                    "type": "boolean"
                },
                "skip_deletes": {
                    "description": "When set the import will skip any deletes.",
                    "example": "false",
                    "type": "boolean"
                },
                "override_sis_stickiness": {
                    "description": "Whether UI changes were overridden.",
                    "example": "false",
                    "type": "boolean"
                },
                "add_sis_stickiness": {
                    "description": "Whether stickiness was added to the batch changes.",
                    "example": "false",
                    "type": "boolean"
                },
                "clear_sis_stickiness": {
                    "description": "Whether stickiness was cleared.",
                    "example": "false",
                    "type": "boolean"
                },
                "diffing_threshold_exceeded": {
                    "description": "Whether a diffing job failed because the threshold limit got exceeded.",
                    "example": "true",
                    "type": "boolean"
                },
                "diffing_data_set_identifier": {
                    "description": "The identifier of the data set that this SIS batch diffs against",
                    "example": "account-5-enrollments",
                    "type": "string"
                },
                "diffing_remaster": {
                    "description": "Whether diffing remaster data was enabled.",
                    "example": "false",
                    "type": "boolean"
                },
                "diffed_against_import_id": {
                    "description": "The ID of the SIS Import that this import was diffed against",
                    "example": 1,
                    "type": "integer"
                },
                "csv_attachments": {
                    "description": "An array of CSV files for processing",
                    "example": [],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "File"
                        }
                    }
                }
            }
        },
        "SisImportCounts": {
            "id": "SisImportCounts",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "accounts": {
                    "example": 0,
                    "type": "integer"
                },
                "terms": {
                    "example": 3,
                    "type": "integer"
                },
                "abstract_courses": {
                    "example": 0,
                    "type": "integer"
                },
                "courses": {
                    "example": 121,
                    "type": "integer"
                },
                "sections": {
                    "example": 278,
                    "type": "integer"
                },
                "xlists": {
                    "example": 0,
                    "type": "integer"
                },
                "users": {
                    "example": 346,
                    "type": "integer"
                },
                "enrollments": {
                    "example": 1542,
                    "type": "integer"
                },
                "groups": {
                    "example": 0,
                    "type": "integer"
                },
                "group_memberships": {
                    "example": 0,
                    "type": "integer"
                },
                "grade_publishing_results": {
                    "example": 0,
                    "type": "integer"
                },
                "batch_courses_deleted": {
                    "description": "the number of courses that were removed because they were not included in the batch for batch_mode imports. Only included if courses were deleted",
                    "example": 11,
                    "type": "integer"
                },
                "batch_sections_deleted": {
                    "description": "the number of sections that were removed because they were not included in the batch for batch_mode imports. Only included if sections were deleted",
                    "example": 0,
                    "type": "integer"
                },
                "batch_enrollments_deleted": {
                    "description": "the number of enrollments that were removed because they were not included in the batch for batch_mode imports. Only included if enrollments were deleted",
                    "example": 150,
                    "type": "integer"
                },
                "error_count": {
                    "example": 0,
                    "type": "integer"
                },
                "warning_count": {
                    "example": 0,
                    "type": "integer"
                }
            }
        },
        "SisImportData": {
            "id": "SisImportData",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "import_type": {
                    "description": "The type of SIS import",
                    "example": "instructure_csv",
                    "type": "string"
                },
                "supplied_batches": {
                    "description": "Which files were included in the SIS import",
                    "example": [
                        "term",
                        "course",
                        "section",
                        "user",
                        "enrollment"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "counts": {
                    "description": "The number of rows processed for each type of import",
                    "$ref": "SisImportCounts"
                }
            }
        },
        "SisImportError": {
            "id": "SisImportError",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "sis_import_id": {
                    "description": "The unique identifier for the SIS import.",
                    "example": "1",
                    "type": "integer"
                },
                "file": {
                    "description": "The file where the error message occurred.",
                    "example": "courses.csv",
                    "type": "string"
                },
                "message": {
                    "description": "The error message that from the record.",
                    "example": "No short_name given for course C001",
                    "type": "string"
                },
                "row_info": {
                    "description": "The contents of the line that had the error.",
                    "example": "account_1, Sub account 1,, active ",
                    "type": "string"
                },
                "row": {
                    "description": "The line number where the error occurred. Some Importers do not yet support this. This is a 1 based index starting with the header row.",
                    "example": "34",
                    "type": "integer"
                }
            }
        },
        "SisImportStatistic": {
            "id": "SisImportStatistic",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "created": {
                    "description": "This is the number of items that were created.",
                    "example": 18,
                    "type": "integer"
                },
                "concluded": {
                    "description": "This is the number of items that marked as completed. This only applies to courses and enrollments.",
                    "example": 3,
                    "type": "integer"
                },
                "deactivated": {
                    "description": "This is the number of Enrollments that were marked as 'inactive'. This only applies to enrollments.",
                    "example": 1,
                    "type": "integer"
                },
                "restored": {
                    "description": "This is the number of items that were set to an active state from a completed, inactive, or deleted state.",
                    "example": 2,
                    "type": "integer"
                },
                "deleted": {
                    "description": "This is the number of items that were deleted.",
                    "example": 40,
                    "type": "integer"
                }
            }
        },
        "SisImportStatistics": {
            "id": "SisImportStatistics",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "total_state_changes": {
                    "description": "This is the total number of items that were changed in the sis import. There are a few caveats that can cause this number to not add up to the individual counts. There are some state changes that happen that have no impact to the object. An example would be changing a course from 'created' to 'claimed'. Both of these would be considered an active course, but would increment this counter. In this example the course would not increment the created or restored counters for course statistic.",
                    "example": 382,
                    "type": "integer"
                },
                "Account": {
                    "description": "This contains that statistics for accounts.",
                    "$ref": "SisImportStatistic"
                },
                "EnrollmentTerm": {
                    "description": "This contains that statistics for terms.",
                    "$ref": "SisImportStatistic"
                },
                "CommunicationChannel": {
                    "description": "This contains that statistics for communication channels. This is an indirect effect from creating or deleting a user.",
                    "$ref": "SisImportStatistic"
                },
                "AbstractCourse": {
                    "description": "This contains that statistics for abstract courses.",
                    "$ref": "SisImportStatistic"
                },
                "Course": {
                    "description": "This contains that statistics for courses.",
                    "$ref": "SisImportStatistic"
                },
                "CourseSection": {
                    "description": "This contains that statistics for course sections.",
                    "$ref": "SisImportStatistic"
                },
                "Enrollment": {
                    "description": "This contains that statistics for enrollments.",
                    "$ref": "SisImportStatistic"
                },
                "GroupCategory": {
                    "description": "This contains that statistics for group categories.",
                    "$ref": "SisImportStatistic"
                },
                "Group": {
                    "description": "This contains that statistics for groups.",
                    "$ref": "SisImportStatistic"
                },
                "GroupMembership": {
                    "description": "This contains that statistics for group memberships. This can be a direct impact from the import or indirect from an enrollment being deleted.",
                    "$ref": "SisImportStatistic"
                },
                "Pseudonym": {
                    "description": "This contains that statistics for pseudonyms. Pseudonyms are logins for users, and are the object that ties an enrollment to a user. This would be impacted from the user importer. ",
                    "$ref": "SisImportStatistic"
                },
                "UserObserver": {
                    "description": "This contains that statistics for user observers.",
                    "$ref": "SisImportStatistic"
                },
                "AccountUser": {
                    "description": "This contains that statistics for account users.",
                    "$ref": "SisImportStatistic"
                }
            }
        },
        "SSOSettings": {
            "id": "SSOSettings",
            "description": "Settings that are applicable across an account's authentication configuration, even if there are multiple individual providers",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "login_handle_name": {
                    "description": "The label used for unique login identifiers.",
                    "example": "Username",
                    "type": "string"
                },
                "change_password_url": {
                    "description": "The url to redirect users to for password resets. Leave blank for default Canvas behavior",
                    "example": "https://example.com/reset_password",
                    "type": "string"
                },
                "auth_discovery_url": {
                    "description": "If a discovery url is set, canvas will forward all users to that URL when they need to be authenticated. That page will need to then help the user figure out where they need to go to log in. If no discovery url is configured, the first configuration will be used to attempt to authenticate the user.",
                    "example": "https://example.com/which_account",
                    "type": "string"
                },
                "unknown_user_url": {
                    "description": "If an unknown user url is set, Canvas will forward to that url when a service authenticates a user, but that user does not exist in Canvas. The default behavior is to present an error.",
                    "example": "https://example.com/register_for_canvas",
                    "type": "string"
                }
            }
        },
        "StudentAttributes": {
            "id": "StudentAttributes",
            "description": "Attributes of student.  See Users API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user_id": {
                    "description": "The unique Canvas identifier for the user",
                    "example": 511,
                    "type": "integer"
                },
                "sis_user_id": {
                    "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                }
            }
        },
        "Submission": {
            "id": "Submission",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "lti_course_id": {
                    "example": "66157096483e6b3a50bfedc6bac902c0b20a8241",
                    "type": "string"
                },
                "course_id": {
                    "example": 10000000000060,
                    "type": "integer"
                },
                "assignment_id": {
                    "description": "The submission's assignment id",
                    "example": 23,
                    "type": "integer"
                },
                "attempt": {
                    "description": "This is the submission attempt number.",
                    "example": 1,
                    "type": "integer"
                },
                "body": {
                    "description": "The content of the submission, if it was submitted directly in a text field.",
                    "example": "There are three factors too...",
                    "type": "string"
                },
                "submission_type": {
                    "description": "The types of submission ex: ('online_text_entry'|'online_url'|'online_upload'|'media_recording'|'student_annotation')",
                    "example": "online_text_entry",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "online_text_entry",
                            "online_url",
                            "online_upload",
                            "media_recording",
                            "student_annotation"
                        ]
                    }
                },
                "submitted_at": {
                    "description": "The timestamp when the assignment was submitted",
                    "example": "2012-01-01T01:00:00Z",
                    "type": "datetime"
                },
                "url": {
                    "description": "The URL of the submission (for 'online_url' submissions).",
                    "type": "string"
                },
                "user_id": {
                    "description": "The id of the user who created the submission",
                    "example": 134,
                    "type": "integer"
                },
                "eula_agreement_timestamp": {
                    "description": "UTC timestamp showing when the user agreed to the EULA (if given by the tool provider)",
                    "example": "1508250487578",
                    "type": "string"
                },
                "workflow_state": {
                    "description": "The current state of the submission",
                    "example": "submitted",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "graded",
                            "submitted",
                            "unsubmitted",
                            "pending_review"
                        ]
                    }
                },
                "attachments": {
                    "description": "Files that are attached to the submission",
                    "$ref": "File"
                }
            }
        },
        "SubmissionComment": {
            "id": "SubmissionComment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": 37,
                    "type": "integer"
                },
                "author_id": {
                    "example": 134,
                    "type": "integer"
                },
                "author_name": {
                    "example": "Toph Beifong",
                    "type": "string"
                },
                "author": {
                    "description": "Abbreviated user object UserDisplay (see users API).",
                    "example": "{}",
                    "type": "string"
                },
                "comment": {
                    "example": "Well here's the thing...",
                    "type": "string"
                },
                "created_at": {
                    "example": "2012-01-01T01:00:00Z",
                    "type": "datetime"
                },
                "edited_at": {
                    "example": "2012-01-02T01:00:00Z",
                    "type": "datetime"
                },
                "media_comment": {
                    "$ref": "MediaComment"
                }
            }
        },
        "SubmissionHistory": {
            "id": "SubmissionHistory",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "submission_id": {
                    "description": "the id of the submission",
                    "example": 4,
                    "type": "integer"
                },
                "versions": {
                    "description": "an array of all the versions of this submission",
                    "type": "array",
                    "items": {
                        "$ref": "SubmissionVersion"
                    }
                }
            }
        },
        "SubmissionVersion": {
            "id": "SubmissionVersion",
            "description": "A SubmissionVersion object contains all the fields that a Submission object does, plus additional fields prefixed with current_* new_* and previous_* described below.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "assignment_id": {
                    "description": "the id of the assignment this submissions is for",
                    "example": 22604,
                    "type": "integer"
                },
                "assignment_name": {
                    "description": "the name of the assignment this submission is for",
                    "example": "some assignment",
                    "type": "string"
                },
                "body": {
                    "description": "the body text of the submission",
                    "example": "text from the submission",
                    "type": "string"
                },
                "current_grade": {
                    "description": "the most up to date grade for the current version of this submission",
                    "example": "100",
                    "type": "string"
                },
                "current_graded_at": {
                    "description": "the latest time stamp for the grading of this submission",
                    "example": "2013-01-31T18:16:31Z",
                    "type": "datetime"
                },
                "current_grader": {
                    "description": "the name of the most recent grader for this submission",
                    "example": "Grader Name",
                    "type": "string"
                },
                "grade_matches_current_submission": {
                    "description": "boolean indicating whether the grade is equal to the current submission grade",
                    "example": true,
                    "type": "boolean"
                },
                "graded_at": {
                    "description": "time stamp for the grading of this version of the submission",
                    "example": "2013-01-31T18:16:31Z",
                    "type": "datetime"
                },
                "grader": {
                    "description": "the name of the user who graded this version of the submission",
                    "example": "Grader Name",
                    "type": "string"
                },
                "grader_id": {
                    "description": "the user id of the user who graded this version of the submission",
                    "example": 67379,
                    "type": "integer"
                },
                "id": {
                    "description": "the id of the submission of which this is a version",
                    "example": 11607,
                    "type": "integer"
                },
                "new_grade": {
                    "description": "the updated grade provided in this version of the submission",
                    "example": "100",
                    "type": "string"
                },
                "new_graded_at": {
                    "description": "the timestamp for the grading of this version of the submission (alias for graded_at)",
                    "example": "2013-01-31T18:16:31Z",
                    "type": "datetime"
                },
                "new_grader": {
                    "description": "alias for 'grader'",
                    "example": "Grader Name",
                    "type": "string"
                },
                "previous_grade": {
                    "description": "the grade for the submission version immediately preceding this one",
                    "example": "90",
                    "type": "string"
                },
                "previous_graded_at": {
                    "description": "the timestamp for the grading of the submission version immediately preceding this one",
                    "example": "2013-01-29T12:12:12Z",
                    "type": "datetime"
                },
                "previous_grader": {
                    "description": "the name of the grader who graded the version of this submission immediately preceding this one",
                    "example": "Graded on submission",
                    "type": "string"
                },
                "score": {
                    "description": "the score for this version of the submission",
                    "example": 100,
                    "type": "integer"
                },
                "user_name": {
                    "description": "the name of the student who created this submission",
                    "example": "student@example.com",
                    "type": "string"
                },
                "submission_type": {
                    "description": "the type of submission",
                    "example": "online",
                    "type": "string"
                },
                "url": {
                    "description": "the url of the submission, if there is one",
                    "type": "string"
                },
                "user_id": {
                    "description": "the user ID of the student who created this submission",
                    "example": 67376,
                    "type": "integer"
                },
                "workflow_state": {
                    "description": "the state of the submission at this version",
                    "example": "unsubmitted",
                    "type": "string"
                }
            }
        },
        "Tab": {
            "id": "Tab",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "html_url": {
                    "example": "/courses/1/external_tools/4",
                    "type": "string"
                },
                "id": {
                    "example": "context_external_tool_4",
                    "type": "string"
                },
                "label": {
                    "example": "WordPress",
                    "type": "string"
                },
                "type": {
                    "example": "external",
                    "type": "string"
                },
                "hidden": {
                    "description": "only included if true",
                    "example": true,
                    "type": "boolean"
                },
                "visibility": {
                    "description": "possible values are: public, members, admins, and none",
                    "example": "public",
                    "type": "string"
                },
                "position": {
                    "description": "1 based",
                    "example": 2,
                    "type": "integer"
                }
            }
        },
        "Term": {
            "id": "Term",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "example": "Default Term",
                    "type": "string"
                },
                "start_at": {
                    "example": "2012-06-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "type": "datetime"
                }
            }
        },
        "TermsOfService": {
            "id": "TermsOfService",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "Terms Of Service id",
                    "example": 1,
                    "type": "integer"
                },
                "terms_type": {
                    "description": "The given type for the Terms of Service",
                    "enum": [
                        "default",
                        "custom",
                        "no_terms"
                    ],
                    "example": "default",
                    "type": "string"
                },
                "passive": {
                    "description": "Boolean dictating if the user must accept Terms of Service",
                    "example": false,
                    "type": "boolean"
                },
                "account_id": {
                    "description": "The id of the root account that owns the Terms of Service",
                    "example": 1,
                    "type": "integer"
                },
                "content": {
                    "description": "Content of the Terms of Service",
                    "example": "To be or not to be that is the question",
                    "type": "string"
                },
                "self_registration_type": {
                    "description": "The type of self registration allowed",
                    "example": [
                        "none",
                        "observer",
                        "all"
                    ],
                    "type": "string"
                }
            }
        },
        "ToolSetting": {
            "id": "ToolSetting",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "resource_type_code": {
                    "description": "the resource type code of the resource handler to use to display originality reports",
                    "example": "originality_reports",
                    "type": "string"
                },
                "resource_url": {
                    "description": "a URL that may be used to override the launch URL inferred by the specified resource_type_code. If used a 'resource_type_code' must also be specified.",
                    "example": "http://www.test.com/originality_report",
                    "type": "string"
                }
            }
        },
        "TurnitinSettings": {
            "id": "TurnitinSettings",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "originality_report_visibility": {
                    "example": "after_grading",
                    "type": "string"
                },
                "s_paper_check": {
                    "example": false,
                    "type": "boolean"
                },
                "internet_check": {
                    "example": false,
                    "type": "boolean"
                },
                "journal_check": {
                    "example": false,
                    "type": "boolean"
                },
                "exclude_biblio": {
                    "example": false,
                    "type": "boolean"
                },
                "exclude_quoted": {
                    "example": false,
                    "type": "boolean"
                },
                "exclude_small_matches_type": {
                    "example": "percent",
                    "type": "string"
                },
                "exclude_small_matches_value": {
                    "example": 50,
                    "type": "integer"
                }
            }
        },
        "UpdatedEventData": {
            "id": "UpdatedEventData",
            "description": "The updated event data object returns all the fields that have changed in the format of the following example.  If a field does not exist it was not changed.  The value is an array that contains the before and after values for the change as in [:old_value, :new_value].",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "name": {
                    "example": [
                        "Course 1",
                        "Course 2"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_at": {
                    "example": [
                        "2012-01-19T15:00:00-06:00",
                        "2012-07-19T15:00:00-06:00"
                    ],
                    "type": "array",
                    "items": {
                        "type": "datetime"
                    }
                },
                "conclude_at": {
                    "example": [
                        "2012-01-19T15:00:00-08:00",
                        "2012-07-19T15:00:00-08:00"
                    ],
                    "type": "array",
                    "items": {
                        "type": "datetime"
                    }
                },
                "is_public": {
                    "example": [
                        true,
                        false
                    ],
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            }
        },
        "UsageRights": {
            "id": "UsageRights",
            "description": "Describes the copyright and license information for a File",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "legal_copyright": {
                    "type": "string",
                    "description": "Copyright line for the file",
                    "example": "(C) 2014 Incom Corporation Ltd"
                },
                "use_justification": {
                    "type": "string",
                    "description": "Justification for using the file in a Canvas course. Valid values are 'own_copyright', 'public_domain', 'used_by_permission', 'fair_use', 'creative_commons'",
                    "example": "creative_commons"
                },
                "license": {
                    "type": "string",
                    "description": "License identifier for the file.",
                    "example": "cc_by_sa"
                },
                "license_name": {
                    "type": "string",
                    "description": "Readable license name",
                    "example": "CC Attribution Share-Alike"
                },
                "message": {
                    "type": "string",
                    "description": "Explanation of the action performed",
                    "example": "4 files updated"
                },
                "file_ids": {
                    "description": "List of ids of files that were updated",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                }
            }
        },
        "User": {
            "id": "User",
            "description": "A Canvas user, e.g. a student, teacher, administrator, observer, etc.",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the user.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "description": "The name of the user.",
                    "example": "Sheldon Cooper",
                    "type": "string"
                },
                "sortable_name": {
                    "description": "The name of the user that is should be used for sorting groups of users, such as in the gradebook.",
                    "example": "Cooper, Sheldon",
                    "type": "string"
                },
                "last_name": {
                    "description": "The last name of the user.",
                    "example": "Cooper",
                    "type": "string"
                },
                "first_name": {
                    "description": "The first name of the user.",
                    "example": "Sheldon",
                    "type": "string"
                },
                "short_name": {
                    "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                    "example": "Shelly",
                    "type": "string"
                },
                "sis_user_id": {
                    "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.",
                    "example": "18",
                    "type": "integer",
                    "format": "int64"
                },
                "integration_id": {
                    "description": "The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                    "example": "ABC59802",
                    "type": "string"
                },
                "login_id": {
                    "description": "The unique login id for the user.  This is what the user uses to log in to Canvas.",
                    "example": "sheldon@caltech.example.com",
                    "type": "string"
                },
                "avatar_url": {
                    "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.",
                    "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                    "type": "string"
                },
                "avatar_state": {
                    "description": "Optional: If avatars are enabled and caller is admin, this field can be requested and will contain the current state of the user's avatar.",
                    "example": "approved",
                    "type": "string"
                },
                "enrollments": {
                    "description": "Optional: This field can be requested with certain API calls, and will return a list of the users active enrollments. See the List enrollments API for more details about the format of these records.",
                    "type": "array",
                    "items": {
                        "$ref": "Enrollment"
                    }
                },
                "email": {
                    "description": "Optional: This field can be requested with certain API calls, and will return the users primary email address.",
                    "example": "sheldon@caltech.example.com",
                    "type": "string"
                },
                "locale": {
                    "description": "Optional: This field can be requested with certain API calls, and will return the users locale in RFC 5646 format.",
                    "example": "tlh",
                    "type": "string"
                },
                "last_login": {
                    "description": "Optional: This field is only returned in certain API calls, and will return a timestamp representing the last time the user logged in to canvas.",
                    "example": "2012-05-30T17:45:25Z",
                    "type": "string",
                    "format": "date-time"
                },
                "time_zone": {
                    "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.",
                    "example": "America/Denver",
                    "type": "string"
                },
                "bio": {
                    "description": "Optional: The user's bio.",
                    "example": "I like the Muppets.",
                    "type": "string"
                }
            }
        },
        "UserAssignmentOverrideAttributes": {
            "id": "UserAssignmentOverrideAttributes",
            "description": "Attributes of assignment overrides that apply to users.  See Assignments API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique Canvas identifier for the assignment override",
                    "example": 218,
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the assignment override.",
                    "example": "Override title",
                    "type": "string"
                },
                "due_at": {
                    "description": "The time at which this assignment is due",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "(Optional) Time at which this was/will be unlocked.",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "(Optional) Time at which this was/will be locked.",
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "students": {
                    "description": "Includes attributes of a student for convenience. For more details see Users API.",
                    "type": "array",
                    "items": {
                        "$ref": "StudentAttributes"
                    }
                }
            }
        },
        "UserDisplay": {
            "id": "UserDisplay",
            "description": "This mini-object is used for secondary user responses, when we just want to provide enough information to display a user.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the user.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "short_name": {
                    "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                    "example": "Shelly",
                    "type": "string"
                },
                "avatar_image_url": {
                    "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.",
                    "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                    "type": "string"
                },
                "html_url": {
                    "description": "URL to access user, either nested to a context or directly.",
                    "example": "https://school.instructure.com/courses/:course_id/users/:user_id",
                    "type": "string"
                }
            }
        },
    }           
}