{
    "apiVersion": "1.0",
    "swaggerVersion": "1.2",
    "basePath": "https://canvas.instructure.com/api",
    "resourcePath": "/account_calendars",
    "produces": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/v1/account_calendars",
            "description": "Returns a paginated list of account calendars available to the current user.\nIncludes visible account calendars where the user has an account association.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List available account calendars",
                    "notes": "Returns a paginated list of account calendars available to the current user.\nIncludes visible account calendars where the user has an account association.",
                    "nickname": "list_available_account_calendars",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "When included, searches available account calendars for the term. Returns matching\nresults. Term must be at least 2 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "{ \"account_calendars\": AccountCalendar, \"total_results\": \"integer\"}"
                    }
                }
            ]
        },
        {
            "path": "/v1/account_calendars/{account_id}",
            "description": "Get details about a specific account calendar.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single account calendar",
                    "notes": "Get details about a specific account calendar.",
                    "nickname": "get_single_account_calendar",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountCalendar"
                }
            ]
        },
        {
            "path": "/v1/account_calendars/{account_id}",
            "description": "Set an account calendar as hidden or visible. Requires the\n`manage_account_calendar_visibility` permission on the account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a calendar's visibility",
                    "notes": "Set an account calendar as hidden or visible. Requires the\n`manage_account_calendar_visibility` permission on the account.",
                    "nickname": "update_calendar_s_visibility",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "visible",
                            "description": "Allow administrators with `manage_account_calendar_events` permission\nto create events on this calendar, and allow users to view this\ncalendar and its events.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountCalendar"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_calendars",
            "description": "Set visibility on many calendars simultaneously. Requires the\n`manage_account_calendar_visibility` permission on the account.\n\nAccepts a JSON array of objects containing 2 keys each: `id`\n(the account's id), and `visible` (a boolean indicating whether\nthe account calendar is visible).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update many calendars' visibility",
                    "notes": "Set visibility on many calendars simultaneously. Requires the\n`manage_account_calendar_visibility` permission on the account.\n\nAccepts a JSON array of objects containing 2 keys each: `id`\n(the account's id), and `visible` (a boolean indicating whether\nthe account calendar is visible).",
                    "nickname": "update_many_calendars_visibility",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountCalendar"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_calendars",
            "description": "Returns a paginated list of account calendars for the provided account and\nits first level of sub-accounts. Includes hidden calendars in the response.\nRequires the `manage_account_calendar_visibility` permission.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all account calendars",
                    "notes": "Returns a paginated list of account calendars for the provided account and\nits first level of sub-accounts. Includes hidden calendars in the response.\nRequires the `manage_account_calendar_visibility` permission.",
                    "nickname": "list_all_account_calendars",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "When included, searches all descendent accounts of provided account for the\nterm. Returns matching results. Term must be at least 2 characters. Can be\ncombined with a filter value.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "When included, only returns calendars that are either visible or hidden. Can\nbe combined with a search term.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "visible",
                                "hidden"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AccountCalendar"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/visible_calendars_count",
            "description": "Returns the number of visible account calendars.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Count of all visible account calendars",
                    "notes": "Returns the number of visible account calendars.",
                    "nickname": "count_of_all_visible_account_calendars",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "{ \"count\": \"integer\" }"
                }
            ]
        },
        {
            "path": "/v1/accounts/search",
            "description": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Search account domains",
                    "notes": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
                    "nickname": "search_account_domains",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "name",
                            "description": "campus name",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "domain",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "latitude",
                            "description": "no description",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "longitude",
                            "description": "no description",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports",
            "description": "Returns a paginated list of reports for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Available Reports",
                    "notes": "Returns a paginated list of reports for the current context.",
                    "nickname": "list_available_reports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "name",
                            "description": "The name of the report.",
                            "deprecated": false
                        },
                        {
                            "name": "parameters",
                            "description": "The parameters will vary for each report",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}",
            "description": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Start a Report",
                    "notes": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
                    "nickname": "start_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters",
                            "description": "The parameters will vary for each report. To fetch a list\nof available parameters for each report, see {api:AccountReportsController#available_reports List Available Reports}.\nA few example parameters have been provided below. Note that the example\nparameters provided below may not be valid for every report.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters[skip_message]",
                            "description": "If true, no message will be sent\nto the user upon completion of the report.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters[course_id]",
                            "description": "The id of the course to report on.\nNote: this parameter has been listed to serve as an example and may not be\nvalid for every report.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "parameters[users]",
                            "description": "If true, user data will be included. If\nfalse, user data will be omitted. Note: this parameter has been listed to\nserve as an example and may not be valid for every report.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Report"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}",
            "description": "Shows all reports that have been run for the account of a specific type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Index of Reports",
                    "notes": "Shows all reports that have been run for the account of a specific type.",
                    "nickname": "index_of_reports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Report"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}/{id}",
            "description": "Returns the status of a report.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Status of a Report",
                    "notes": "Returns the status of a report.",
                    "nickname": "status_of_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Report"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/reports/{report}/{id}",
            "description": "Deletes a generated report instance.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a Report",
                    "notes": "Deletes a generated report instance.",
                    "nickname": "delete_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "report",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Report"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications",
            "description": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned, unless\na include_past parameter is passed in as true.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Index of active global notification for the user",
                    "notes": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned, unless\na include_past parameter is passed in as true.",
                    "nickname": "index_of_active_global_notification_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_past",
                            "description": "Include past and dismissed global announcements.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AccountNotification"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications/{id}",
            "description": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a global notification",
                    "notes": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
                    "nickname": "show_global_notification",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountNotification"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications/{id}",
            "description": "If the current user no long wants to see this notification it can be excused with this call",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Close notification for user",
                    "notes": "If the current user no long wants to see this notification it can be excused with this call",
                    "nickname": "close_notification_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AccountNotification"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications",
            "description": "Create and return a new global notification for an account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a global notification",
                    "notes": "Create and return a new global notification for an account.",
                    "nickname": "create_global_notification",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[subject]",
                            "description": "The subject of the notification.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[message]",
                            "description": "The message body of the notification.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[start_at]",
                            "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[end_at]",
                            "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[icon]",
                            "description": "The icon to display with the notification.\nNote: Defaults to warning.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "warning",
                                "information",
                                "question",
                                "error",
                                "calendar"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification_roles",
                            "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/account_notifications/{id}",
            "description": "Update global notification for an account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a global notification",
                    "notes": "Update global notification for an account.",
                    "nickname": "update_global_notification",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[subject]",
                            "description": "The subject of the notification.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[message]",
                            "description": "The message body of the notification.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[start_at]",
                            "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[end_at]",
                            "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification[icon]",
                            "description": "The icon to display with the notification.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "warning",
                                "information",
                                "question",
                                "error",
                                "calendar"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "account_notification_roles",
                            "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts",
            "description": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List accounts",
                    "notes": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
                    "nickname": "list_accounts",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"lti_guid\":: the 'tool_consumer_instance_guid' that will be sent for this account on LTI launches\n\"registration_settings\":: returns info about the privacy policy and terms of use\n\"services\":: returns services and whether they are enabled (requires account management permissions)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "lti_guid",
                                "registration_settings",
                                "services"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/manageable_accounts",
            "description": "A paginated list of accounts where the current user has permission to create\nor manage courses. List will be empty for students and teachers as only admins\ncan view which accounts they are in.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get accounts that admins can manage",
                    "notes": "A paginated list of accounts where the current user has permission to create\nor manage courses. List will be empty for students and teachers as only admins\ncan view which accounts they are in.",
                    "nickname": "get_accounts_that_admins_can_manage",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/course_accounts",
            "description": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List accounts for course admins",
                    "notes": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
                    "nickname": "list_accounts_for_course_admins",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{id}",
            "description": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single account",
                    "notes": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
                    "nickname": "get_single_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/settings",
            "description": "Returns settings for the specified account as a JSON object. The caller must be an Account\nadmin with the manage_account_settings permission.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Settings",
                    "notes": "Returns settings for the specified account as a JSON object. The caller must be an Account\nadmin with the manage_account_settings permission.",
                    "nickname": "settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/permissions",
            "description": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Permissions",
                    "notes": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
                    "nickname": "permissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "permissions",
                            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sub_accounts",
            "description": "List accounts that are sub-accounts of the given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the sub-accounts of an account",
                    "notes": "List accounts that are sub-accounts of the given account.",
                    "nickname": "get_sub_accounts_of_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "recursive",
                            "description": "If true, the entire account tree underneath\nthis account will be returned (though still paginated). If false, only\ndirect sub-accounts of this account will be returned. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Account"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/terms_of_service",
            "description": "Returns the terms of service for that account",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the Terms of Service",
                    "notes": "Returns the terms of service for that account",
                    "nickname": "get_terms_of_service",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "TermsOfService"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/help_links",
            "description": "Returns the help links for that account",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get help links",
                    "notes": "Returns the help links for that account",
                    "nickname": "get_help_links",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "HelpLinks"
                }
            ]
        },
        {
            "path": "/v1/manually_created_courses_account",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the manually-created courses sub-account for the domain root account",
                    "notes": "",
                    "nickname": "get_manually_created_courses_sub_account_for_domain_root_account",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses",
            "description": "Retrieve a paginated list of courses in this account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List active courses in an account",
                    "notes": "Retrieve a paginated list of courses in this account.",
                    "nickname": "list_active_courses_in_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "with_enrollments",
                            "description": "If true, include only courses with at least one enrollment.  If false,\ninclude only courses with no enrollments.  If not present, do not filter\non course enrollment status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "If set, only return courses that have at least one user enrolled in\nin the course with one of the specified enrollment types.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "ta",
                                "observer",
                                "designer"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "published",
                            "description": "If true, include only published courses.  If false, exclude published\ncourses.  If not present, do not filter on published status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "completed",
                            "description": "If true, include only completed courses (these may be in state\n'completed', or their enrollment term may have ended).  If false, exclude\ncompleted courses.  If not present, do not filter on completed status.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blueprint",
                            "description": "If true, include only blueprint courses. If false, exclude them.\nIf not present, do not filter on this basis.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blueprint_associated",
                            "description": "If true, include only courses that inherit content from a blueprint course.\nIf false, exclude them. If not present, do not filter on this basis.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "by_teachers",
                            "description": "List of User IDs of teachers; if supplied, include only courses taught by\none of the referenced users.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "by_subaccounts",
                            "description": "List of Account IDs; if supplied, include only courses associated with one\nof the referenced subaccounts.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "hide_enrollmentless_courses",
                            "description": "If present, only return courses that have at least one enrollment.\nEquivalent to 'with_enrollments=true'; retained for compatibility.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set, only return courses that are in the given state(s). By default,\nall states but \"deleted\" are returned.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "created",
                                "claimed",
                                "available",
                                "completed",
                                "deleted",
                                "all"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_term_id",
                            "description": "If set, only includes courses from the specified term.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- All explanations can be seen in the {api:CoursesController#index Course API index documentation}\n- \"sections\", \"needs_grading_count\" and \"total_scores\" are not valid options at the account level",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "syllabus_body",
                                "term",
                                "course_progress",
                                "storage_quota_used_mb",
                                "total_students",
                                "teachers",
                                "account_name",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "The column to sort results by.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_name",
                                "sis_course_id",
                                "teacher",
                                "account_name"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The order to sort the given column by.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "search_by",
                            "description": "The filter to search by. \"course\" searches for course names, course codes,\nand SIS IDs. \"teacher\" searches for teacher names",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course",
                                "teacher"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "starts_before",
                            "description": "If set, only return courses that start before the value (inclusive)\nor their enrollment term starts before the value (inclusive)\nor both the course's start_at and the enrollment term's start_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ends_after",
                            "description": "If set, only return courses that end after the value (inclusive)\nor their enrollment term ends after the value (inclusive)\nor both the course's end_at and the enrollment term's end_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "homeroom",
                            "description": "If set, only return homeroom courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{id}",
            "description": "Update an existing account.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an account",
                    "notes": "Update an existing account.",
                    "nickname": "update_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[name]",
                            "description": "Updates the account name",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[sis_account_id]",
                            "description": "Updates the account sis_account_id\nMust have manage_sis permission and must not be a root_account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_time_zone]",
                            "description": "The default time zone of the account. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_storage_quota_mb]",
                            "description": "The default course storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_user_storage_quota_mb]",
                            "description": "The default user storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_group_storage_quota_mb]",
                            "description": "The default group storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[course_template_id]",
                            "description": "The ID of a course to be used as a template for all newly created courses.\nEmpty means to inherit the setting from parent account, 0 means to not\nuse a template even if a parent account has one set. The course must be\nmarked as a template.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_past_view][value]",
                            "description": "Restrict students from viewing courses after end date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_past_view][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_view][value]",
                            "description": "Restrict students from viewing courses before start date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_enabled]",
                            "description": "Determines whether this account has Microsoft Teams Sync enabled or not.\n\nNote that if you are altering Microsoft Teams sync settings you must enable\nthe Microsoft Group enrollment syncing feature flag. In addition, if you are enabling\nMicrosoft Teams sync, you must also specify a tenant, login attribute, and a remote attribute.\nSpecifying a suffix to use is optional.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_tenant]",
                            "description": "The tenant this account should use when using Microsoft Teams Sync.\nThis should be an Azure Active Directory domain name.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_login_attribute]",
                            "description": "The attribute this account should use to lookup users when using Microsoft Teams Sync.\nMust be one of \"sub\", \"email\", \"oid\", \"preferred_username\", or \"integration_id\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_login_attribute_suffix]",
                            "description": "A suffix that will be appended to the result of the login attribute when associating\nCanvas users with Microsoft users. Must be under 255 characters and contain no whitespace.\nThis field is optional.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][microsoft_sync_remote_attribute]",
                            "description": "The Active Directory attribute to use when associating Canvas users with Microsoft users.\nMust be one of \"mail\", \"mailNickname\", or \"userPrincipalName\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_view][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_all_announcements][value]",
                            "description": "Disable comments on announcements",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_all_announcements][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][usage_rights_required][value]",
                            "description": "Copyright and license information must be provided for files before they are published.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][usage_rights_required][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_listing][value]",
                            "description": "Restrict students from viewing future enrollments in course list",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][restrict_student_future_listing][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][conditional_release][value]",
                            "description": "Enable or disable individual learning paths for students based on assessment",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][conditional_release][locked]",
                            "description": "Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_outcome_proficiency][value]",
                            "description": "[DEPRECATED] Restrict instructors from changing mastery scale",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[lock_outcome_proficiency][locked]",
                            "description": "[DEPRECATED] Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[settings][lock_proficiency_calculation][value]",
                            "description": "[DEPRECATED] Restrict instructors from changing proficiency calculation method",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[lock_proficiency_calculation][locked]",
                            "description": "[DEPRECATED] Lock this setting for sub-accounts and courses",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[services]",
                            "description": "Give this a set of keys and boolean values to enable or disable services matching the keys",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/users/{user_id}",
            "description": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a user from the root account",
                    "notes": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
                    "nickname": "delete_user_from_root_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sub_accounts",
            "description": "Add a new sub-account to a given account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new sub-account",
                    "notes": "Add a new sub-account to a given account.",
                    "nickname": "create_new_sub_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[name]",
                            "description": "The name of the new sub-account.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[sis_account_id]",
                            "description": "The account's identifier in the Student Information System.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_storage_quota_mb]",
                            "description": "The default course storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_user_storage_quota_mb]",
                            "description": "The default user storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "account[default_group_storage_quota_mb]",
                            "description": "The default group storage quota to be used, if not otherwise specified.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sub_accounts/{id}",
            "description": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a sub-account",
                    "notes": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
                    "nickname": "delete_sub_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/lti/accounts/{account_id}",
            "description": "Retrieve information on an individual account, given by local or global ID.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get account",
                    "notes": "Retrieve information on an individual account, given by local or global ID.",
                    "nickname": "get_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Account"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/admins",
            "description": "Flag an existing user as an admin within the account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Make an account admin",
                    "notes": "Flag an existing user as an admin within the account.",
                    "nickname": "make_account_admin",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_id",
                            "description": "The id of the user to promote.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "role",
                            "description": "[DEPRECATED] The user's admin relationship with the account will be\ncreated with the given role. Defaults to 'AccountAdmin'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "role_id",
                            "description": "The user's admin relationship with the account will be created with the given role. Defaults to the built-in role for 'AccountAdmin'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "send_confirmation",
                            "description": "Send a notification email to\nthe new admin if true. Default is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Admin"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/admins/{user_id}",
            "description": "Remove the rights associated with an account admin role from a user.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove account admin",
                    "notes": "Remove the rights associated with an account admin role from a user.",
                    "nickname": "remove_account_admin",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "[DEPRECATED] Account role to remove from the user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role_id",
                            "description": "The id of the role representing the user's admin relationship with the account.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Admin"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/admins",
            "description": "A paginated list of the admins in the account",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List account admins",
                    "notes": "A paginated list of the admins in the account",
                    "nickname": "list_account_admins",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "Scope the results to those with user IDs equal to any of the IDs specified here.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "[Integer]"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Admin"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/activity",
            "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level participation data",
                    "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                    "nickname": "get_department_level_participation_data_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/activity",
            "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level participation data",
                    "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                    "nickname": "get_department_level_participation_data_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/activity",
            "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level participation data",
                    "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                    "nickname": "get_department_level_participation_data_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/grades",
            "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level grade data",
                    "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_grade_data_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/grades",
            "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level grade data",
                    "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_grade_data_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/grades",
            "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level grade data",
                    "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_grade_data_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics",
            "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics",
                    "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/statistics",
            "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics",
                    "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/statistics",
            "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics",
                    "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics_by_subaccount",
            "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics, broken down by subaccount",
                    "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_broken_down_by_subaccount_terms",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "term_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/current/statistics_by_subaccount",
            "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics, broken down by subaccount",
                    "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_broken_down_by_subaccount_current",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/analytics/completed/statistics_by_subaccount",
            "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get department-level statistics, broken down by subaccount",
                    "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                    "nickname": "get_department_level_statistics_broken_down_by_subaccount_completed",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/activity",
            "description": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course-level participation data",
                    "notes": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
                    "nickname": "get_course_level_participation_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/assignments",
            "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course-level assignment data",
                    "notes": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
                    "nickname": "get_course_level_assignment_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "async",
                            "description": "If async is true, then the course_assignments call can happen asynch-\nronously and MAY return a response containing a progress_url key instead\nof an assignments array. If it does, then it is the caller's\nresponsibility to poll the API again to see if the progress is complete.\nIf the data is ready (possibly even on the first async call) then it\nwill be passed back normally, as documented in the example response.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/student_summaries",
            "description": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course-level student summary data",
                    "notes": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
                    "nickname": "get_course_level_student_summary_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort_column",
                            "description": "The order results in which results are returned.  Defaults to \"name\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "name",
                                "name_descending",
                                "score",
                                "score_descending",
                                "participations",
                                "participations_descending",
                                "page_views",
                                "page_views_descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "student_id",
                            "description": "If set, returns only the specified student.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/users/{student_id}/activity",
            "description": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user-in-a-course-level participation data",
                    "notes": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
                    "nickname": "get_user_in_a_course_level_participation_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "student_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/users/{student_id}/assignments",
            "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user-in-a-course-level assignment data",
                    "notes": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
                    "nickname": "get_user_in_a_course_level_assignment_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "student_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/analytics/users/{student_id}/communication",
            "description": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user-in-a-course-level messaging data",
                    "notes": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
                    "nickname": "get_user_in_a_course_level_messaging_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "student_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_feeds",
            "description": "Returns the paginated list of External Feeds this course or group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List external feeds",
                    "notes": "Returns the paginated list of External Feeds this course or group.",
                    "nickname": "list_external_feeds_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ExternalFeed"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/external_feeds",
            "description": "Returns the paginated list of External Feeds this course or group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List external feeds",
                    "notes": "Returns the paginated list of External Feeds this course or group.",
                    "nickname": "list_external_feeds_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ExternalFeed"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_feeds",
            "description": "Create a new external feed for the course or group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an external feed",
                    "notes": "Create a new external feed for the course or group.",
                    "nickname": "create_external_feed_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url to the external rss or atom feed",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "header_match",
                            "description": "If given, only feed entries that contain this string in their title will be imported",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "verbosity",
                            "description": "Defaults to \"full\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "full",
                                "truncate",
                                "link_only"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/external_feeds",
            "description": "Create a new external feed for the course or group.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an external feed",
                    "notes": "Create a new external feed for the course or group.",
                    "nickname": "create_external_feed_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url to the external rss or atom feed",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "header_match",
                            "description": "If given, only feed entries that contain this string in their title will be imported",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "verbosity",
                            "description": "Defaults to \"full\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "full",
                                "truncate",
                                "link_only"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/external_feeds/{external_feed_id}",
            "description": "Deletes the external feed.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an external feed",
                    "notes": "Deletes the external feed.",
                    "nickname": "delete_external_feed_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_feed_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/external_feeds/{external_feed_id}",
            "description": "Deletes the external feed.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an external feed",
                    "notes": "Deletes the external feed.",
                    "nickname": "delete_external_feed_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "external_feed_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ExternalFeed"
                }
            ]
        },
        {
            "path": "/v1/announcements",
            "description": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List announcements",
                    "notes": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
                    "nickname": "list_announcements",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context_codes to retrieve announcements for (for example, +course_123+). Only courses\nare presently supported. The call will fail unless the caller has View Announcements permission\nin all listed courses.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return announcements posted since the start_date (inclusive).\nDefaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return announcements posted before the end_date (inclusive).\nDefaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nAnnouncements scheduled for future posting will only be returned to course administrators.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "active_only",
                            "description": "Only return active announcements that have been published.\nApplies only to requesting users that have permission to view\nunpublished items.\nDefaults to false for users with access to view unpublished items,\notherwise true and unmodifiable.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "latest_only",
                            "description": "Only return the latest announcement for each associated context.\nThe response will include at most one announcement for each\nspecified context in the context_codes[] parameter.\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Optional list of resources to include with the response. May include\na string of the name of the resource. Possible values are:\n\"sections\", \"sections_user_count\"\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "DiscussionTopic"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/scopes",
            "description": "A list of scopes that can be applied to developer keys and access tokens.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List scopes",
                    "notes": "A list of scopes that can be applied to developer keys and access tokens.",
                    "nickname": "list_scopes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "group_by",
                            "description": "The attribute to group the scopes by. By default no grouping is done.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "resource_name"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Scope"
                    }
                }
            ]
        },
        {
            "path": "/v1/appointment_groups",
            "description": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List appointment groups",
                    "notes": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
                    "nickname": "list_appointment_groups",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "Defaults to \"reservable\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "reservable",
                                "manageable"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "Array of context codes used to limit returned results.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "include_past_appointments",
                            "description": "Defaults to false. If true, includes past appointment groups",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include.\n\n\"appointments\":: calendar event time slots for this appointment group\n\"child_events\":: reservations of those time slots\n\"participant_count\":: number of reservations\n\"reserved_times\":: the event id, start time and end time of reservations\n                   the current user has made)\n\"all_context_codes\":: all context codes associated with this appointment group",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "appointments",
                                "child_events",
                                "participant_count",
                                "reserved_times",
                                "all_context_codes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups",
            "description": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an appointment group",
                    "notes": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
                    "nickname": "create_appointment_group",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "appointment_group[context_codes]",
                            "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[sub_context_codes]",
                            "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[title]",
                            "description": "Short title for the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[description]",
                            "description": "Longer text description of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_name]",
                            "description": "Location name of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_address]",
                            "description": "Location address.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[publish]",
                            "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participants_per_appointment]",
                            "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[min_appointments_per_participant]",
                            "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[max_appointments_per_participant]",
                            "description": "Maximum number of time slots a user may register for.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[new_appointments][X]",
                            "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participant_visibility]",
                            "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up.  Defaults to\n              \"private\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "private",
                                "protected"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}",
            "description": "Returns information for a single appointment group",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single appointment group",
                    "notes": "Returns information for a single appointment group",
                    "nickname": "get_single_appointment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include. See include[] argument of\n\"List appointment groups\" action.\n\n\"child_events\":: reservations of time slots time slots\n\"appointments\":: will always be returned\n\"all_context_codes\":: all context codes associated with this appointment group",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "child_events",
                                "appointments",
                                "all_context_codes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}",
            "description": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an appointment group",
                    "notes": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
                    "nickname": "update_appointment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[context_codes]",
                            "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[sub_context_codes]",
                            "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[title]",
                            "description": "Short title for the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[description]",
                            "description": "Longer text description of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_name]",
                            "description": "Location name of the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[location_address]",
                            "description": "Location address.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[publish]",
                            "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participants_per_appointment]",
                            "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[min_appointments_per_participant]",
                            "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[max_appointments_per_participant]",
                            "description": "Maximum number of time slots a user may register for.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[new_appointments][X]",
                            "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "appointment_group[participant_visibility]",
                            "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up. Defaults to \"private\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "private",
                                "protected"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}",
            "description": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an appointment group",
                    "notes": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
                    "nickname": "delete_appointment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "cancel_reason",
                            "description": "Reason for deleting/canceling the appointment group.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}/users",
            "description": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List user participants",
                    "notes": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
                    "nickname": "list_user_participants",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "registration_status",
                            "description": "Limits results to the a given participation status, defaults to \"all\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all",
                                "registered",
                                "registered"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/{id}/groups",
            "description": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List student group participants",
                    "notes": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
                    "nickname": "list_student_group_participants",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "registration_status",
                            "description": "Limits results to the a given participation status, defaults to \"all\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "all",
                                "registered",
                                "registered"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/appointment_groups/next_appointment",
            "description": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get next appointment",
                    "notes": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
                    "nickname": "get_next_appointment",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "appointment_group_ids",
                            "description": "List of ids of appointment groups to search.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/extensions",
            "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend assignments for this course\n* <b>400 Bad Request</b> if any of the extensions are invalid",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Set extensions for student assignment submissions",
                    "notes": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend assignments for this course\n* <b>400 Bad Request</b> if any of the extensions are invalid",
                    "nickname": "set_extensions_for_student_assignment_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_extensions[user_id]",
                            "description": "The ID of the user we want to add assignment extensions for.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_extensions[extra_attempts]",
                            "description": "Number of times the student is allowed to re-take the assignment over the\nlimit.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups",
            "description": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignment groups",
                    "notes": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
                    "nickname": "list_assignment_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group. \"discussion_topic\", \"all_dates\", \"can_edit\",\n\"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included.\n\"score_statistics\" requires that the \"assignments\" and \"submission\" options are included.\nThe \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on.\nIf \"observed_users\" is passed along with \"assignments\" and \"submission\", submissions for observed users will also be included as an array.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assignments",
                                "discussion_topic",
                                "all_dates",
                                "assignment_visibility",
                                "overrides",
                                "submission",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "If \"assignments\" are included, optionally return only assignments having their ID in this array. This argument may also be passed as\na comma separated string.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_assignment_submission_types",
                            "description": "If \"assignments\" are included, those with the specified submission types\nwill be excluded from the assignment groups.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "online_quiz",
                                "discussion_topic",
                                "wiki_page",
                                "external_tool"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist.)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "scope_assignments_to_student",
                            "description": "If true, all assignments returned will apply to the current user in the\nspecified grading period. If assignments apply to other students in the\nspecified grading period, but not the current user, they will not be\nreturned. (Requires the grading_period_id argument and grading periods to\nexist. In addition, the current user must be a student.)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentGroup"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
            "description": "Returns the assignment group with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get an Assignment Group",
                    "notes": "Returns the assignment group with the given id.",
                    "nickname": "get_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\"\nare only valid if \"assignments\" is also included. \"score_statistics\" is only valid if \"submission\" and\n\"assignments\" are also included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments\ncourse feature be turned on.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assignments",
                                "discussion_topic",
                                "assignment_visibility",
                                "submission",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist on the account)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups",
            "description": "Create a new assignment group for this course.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an Assignment Group",
                    "notes": "Create a new assignment group for this course.",
                    "nickname": "create_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The assignment group's name",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "The position of this assignment group in relation to the other assignment groups",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_weight",
                            "description": "The percent of the total grade that this assignment group represents",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "sis_source_id",
                            "description": "The sis source id of the Assignment Group",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "integration_data",
                            "description": "The integration data of the Assignment Group",
                            "type": "Object",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rules",
                            "description": "The grading rules that are applied within this assignment group\nSee the Assignment Group object definition for format",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
            "description": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an Assignment Group",
                    "notes": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
                    "nickname": "edit_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
            "description": "Deletes the assignment group with the given id.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Destroy an Assignment Group",
                    "notes": "Deletes the assignment group with the given id.",
                    "nickname": "destroy_assignment_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "move_assignments_to",
                            "description": "The ID of an active Assignment Group to which the assignments that are\ncurrently assigned to the destroyed Assignment Group will be assigned.\nNOTE: If this argument is not provided, any assignments in this Assignment\nGroup will be deleted.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{id}",
            "description": "Delete the given assignment.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an assignment",
                    "notes": "Delete the given assignment.",
                    "nickname": "delete_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments",
            "description": "Returns the paginated list of assignments for the current course or assignment group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignments",
                    "notes": "Returns the paginated list of assignments for the current course or assignment group.",
                    "nickname": "list_assignments_assignments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "assignment_visibility",
                                "all_dates",
                                "overrides",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the assignments to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "needs_grading_count_by_section",
                            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "bucket",
                            "description": "If included, only return certain assignments depending on due date and submission status.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "past",
                                "overdue",
                                "undated",
                                "ungraded",
                                "unsubmitted",
                                "upcoming",
                                "future"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "if set, return only assignments specified",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "order_by",
                            "description": "Determines the order of the assignments. Defaults to \"position\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "position",
                                "name",
                                "due_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "post_to_sis",
                            "description": "Return only assignments that have post_to_sis set or not set.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Assignment"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments",
            "description": "Returns the paginated list of assignments for the current course or assignment group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignments",
                    "notes": "Returns the paginated list of assignments for the current course or assignment group.",
                    "nickname": "list_assignments_assignment_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "assignment_visibility",
                                "all_dates",
                                "overrides",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the assignments to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides for each assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "needs_grading_count_by_section",
                            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "bucket",
                            "description": "If included, only return certain assignments depending on due date and submission status.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "past",
                                "overdue",
                                "undated",
                                "ungraded",
                                "unsubmitted",
                                "upcoming",
                                "future"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "if set, return only assignments specified",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "order_by",
                            "description": "Determines the order of the assignments. Defaults to \"position\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "position",
                                "name",
                                "due_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "post_to_sis",
                            "description": "Return only assignments that have post_to_sis set or not set.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Assignment"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/courses/{course_id}/assignments",
            "description": "Returns the paginated list of assignments for the specified user if the current user has rights to view.\nSee {api:AssignmentsApiController#index List assignments} for valid arguments.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignments for user",
                    "notes": "Returns the paginated list of assignments for the specified user if the current user has rights to view.\nSee {api:AssignmentsApiController#index List assignments} for valid arguments.",
                    "nickname": "list_assignments_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/duplicate",
            "description": "Duplicate an assignment and return a json based on result_type argument.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Duplicate assignnment",
                    "notes": "Duplicate an assignment and return a json based on result_type argument.",
                    "nickname": "duplicate_assignnment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "result_type",
                            "description": "Optional information:\nWhen the root account has the feature `newquizzes_on_quiz_page` enabled\nand this argument is set to \"Quiz\" the response will be serialized into a\nquiz format({file:doc/api/quizzes.html#Quiz});\nWhen this argument isn't specified the response will be serialized into an\nassignment format;",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Quiz"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{id}",
            "description": "Returns the assignment with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single assignment",
                    "notes": "Returns the assignment with the given id.",
                    "nickname": "get_single_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included.\nFor \"score_statistics\" to be included, the \"submission\" option must also be set.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "assignment_visibility",
                                "overrides",
                                "observed_users",
                                "can_edit",
                                "score_statistics"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "override_assignment_dates",
                            "description": "Apply assignment overrides to the assignment, defaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "needs_grading_count_by_section",
                            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "all_dates",
                            "description": "All dates associated with the assignment, if applicable",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments",
            "description": "Create a new assignment for this course. The assignment is created in the\nactive state.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an assignment",
                    "notes": "Create a new assignment for this course. The assignment is created in the\nactive state.",
                    "nickname": "create_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[name]",
                            "description": "The assignment name.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[position]",
                            "description": "The position of this assignment in the group when displaying\nassignment lists.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[submission_types]",
                            "description": "List of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)\n  \"student_annotation\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "online_quiz",
                                "none",
                                "on_paper",
                                "discussion_topic",
                                "external_tool",
                                "online_upload",
                                "online_text_entry",
                                "online_url",
                                "media_recording",
                                "student_annotation"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_extensions]",
                            "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_enabled]",
                            "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[vericite_enabled]",
                            "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_settings]",
                            "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_data]",
                            "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_id]",
                            "description": "Unique ID from third party integrations",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[peer_reviews]",
                            "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[automatic_peer_reviews]",
                            "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[notify_of_update]",
                            "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[group_category_id]",
                            "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grade_group_students_individually]",
                            "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[external_tool_tag_attributes]",
                            "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[points_possible]",
                            "description": "The maximum points possible on the assignment.",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_type]",
                            "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "pass_fail",
                                "percent",
                                "letter_grade",
                                "gpa_scale",
                                "points",
                                "not_graded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[due_at]",
                            "description": "The day/time the assignment is due. Must be between the lock dates if there are lock dates.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[lock_at]",
                            "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[unlock_at]",
                            "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[description]",
                            "description": "The assignment's description, supports HTML.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_group_id]",
                            "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_overrides]",
                            "description": "List of overrides for the assignment.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[only_visible_to_overrides]",
                            "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[published]",
                            "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[omit_from_final_grade]",
                            "description": "Whether this assignment is counted towards a student's final grade.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[quiz_lti]",
                            "description": "Whether this assignment should use the Quizzes 2 LTI tool. Sets the\nsubmission type to 'external_tool' and configures the external tool\nattributes to use the Quizzes 2 LTI tool configured for this course.\nHas no effect if no Quizzes 2 LTI tool is configured.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[moderated_grading]",
                            "description": "Whether this assignment is moderated.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_count]",
                            "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[final_grader_id]",
                            "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_comments_visible_to_graders]",
                            "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_anonymous_to_graders]",
                            "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_names_visible_to_final_grader]",
                            "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[anonymous_grading]",
                            "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_attempts]",
                            "description": "The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[annotatable_attachment_id]",
                            "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{id}",
            "description": "Modify an existing assignment.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit an assignment",
                    "notes": "Modify an existing assignment.",
                    "nickname": "edit_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[name]",
                            "description": "The assignment name.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[position]",
                            "description": "The position of this assignment in the group when displaying\nassignment lists.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[submission_types]",
                            "description": "Only applies if the assignment doesn't have student submissions.\n\nList of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)\n  \"student_annotation\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "online_quiz",
                                "none",
                                "on_paper",
                                "discussion_topic",
                                "external_tool",
                                "online_upload",
                                "online_text_entry",
                                "online_url",
                                "media_recording",
                                "student_annotation"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_extensions]",
                            "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_enabled]",
                            "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[vericite_enabled]",
                            "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[turnitin_settings]",
                            "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[sis_assignment_id]",
                            "description": "The sis id of the Assignment",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_data]",
                            "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[integration_id]",
                            "description": "Unique ID from third party integrations",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[peer_reviews]",
                            "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[automatic_peer_reviews]",
                            "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[notify_of_update]",
                            "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[group_category_id]",
                            "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grade_group_students_individually]",
                            "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[external_tool_tag_attributes]",
                            "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[points_possible]",
                            "description": "The maximum points possible on the assignment.",
                            "type": "number",
                            "format": "float",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_type]",
                            "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "pass_fail",
                                "percent",
                                "letter_grade",
                                "gpa_scale",
                                "points",
                                "not_graded"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[due_at]",
                            "description": "The day/time the assignment is due.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[lock_at]",
                            "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[unlock_at]",
                            "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[description]",
                            "description": "The assignment's description, supports HTML.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_group_id]",
                            "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[assignment_overrides]",
                            "description": "List of overrides for the assignment.\nIf the +assignment[assignment_overrides]+ key is absent, any existing\noverrides are kept as is. If the +assignment[assignment_overrides]+ key is\npresent, existing overrides are updated or deleted (and new ones created,\nas necessary) to match the provided list.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[only_visible_to_overrides]",
                            "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[published]",
                            "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[omit_from_final_grade]",
                            "description": "Whether this assignment is counted towards a student's final grade.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[moderated_grading]",
                            "description": "Whether this assignment is moderated.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_count]",
                            "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[final_grader_id]",
                            "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[grader_comments_visible_to_graders]",
                            "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_anonymous_to_graders]",
                            "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[graders_names_visible_to_final_grader]",
                            "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[anonymous_grading]",
                            "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[allowed_attempts]",
                            "description": "The number of submission attempts allowed for this assignment. Set to -1 or null for\nunlimited attempts.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[annotatable_attachment_id]",
                            "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[force_updated_at]",
                            "description": "If true, updated_at will be set even if no changes were made.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment[submission_types]",
                            "description": "Only applies if the assignment doesn't have student submissions.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": true,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Assignment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/bulk_update",
            "description": "Update due dates and availability dates for multiple assignments in a course.\n\nAccepts a JSON array of objects containing two keys each: +id+, the assignment id,\nand +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override\ndates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments}\nendpoint with +include[]=all_dates+.\n\nThis endpoint cannot create or destroy assignment overrides; any existing assignment overrides\nthat are not referenced in the arguments will be left alone. If an override is given, any dates\nthat are not supplied with it will be defaulted. To clear a date, specify null explicitly.\n\nAll referenced assignments will be validated before any are saved. A list of errors will\nbe returned if any provided dates are invalid, and no changes will be saved.\n\nThe bulk update is performed in a background job, use the {api:ProgressController#show Progress API}\nto check its status.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Bulk update assignment dates",
                    "notes": "Update due dates and availability dates for multiple assignments in a course.\n\nAccepts a JSON array of objects containing two keys each: +id+, the assignment id,\nand +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override\ndates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments}\nendpoint with +include[]=all_dates+.\n\nThis endpoint cannot create or destroy assignment overrides; any existing assignment overrides\nthat are not referenced in the arguments will be left alone. If an override is given, any dates\nthat are not supplied with it will be defaulted. To clear a date, specify null explicitly.\n\nAll referenced assignments will be validated before any are saved. A list of errors will\nbe returned if any provided dates are invalid, and no changes will be saved.\n\nThe bulk update is performed in a background job, use the {api:ProgressController#show Progress API}\nto check its status.",
                    "nickname": "bulk_update_assignment_dates",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
            "description": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignment overrides",
                    "notes": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
                    "nickname": "list_assignment_overrides",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
            "description": "Returns details of the the override with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single assignment override",
                    "notes": "Returns details of the the override with the given id.",
                    "nickname": "get_single_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/assignments/{assignment_id}/override",
            "description": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Redirect to the assignment override for a group",
                    "notes": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
                    "nickname": "redirect_to_assignment_override_for_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{course_section_id}/assignments/{assignment_id}/override",
            "description": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Redirect to the assignment override for a section",
                    "notes": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
                    "nickname": "redirect_to_assignment_override_for_section",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
            "description": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create an assignment override",
                    "notes": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
                    "nickname": "create_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[student_ids]",
                            "description": "The IDs of\nthe override's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[title]",
                            "description": "The title of the adhoc\nassignment override. Required if student_ids is present, ignored\notherwise (the title is set to the name of the targetted group or section\ninstead).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[group_id]",
                            "description": "The ID of the\noverride's target group. If present, the following conditions must be met\nfor the override to be successful:\n\n1. the assignment MUST be a group assignment (a group_category_id is assigned to it)\n2. the ID must identify an active group in the group set the assignment is in\n3. the ID must not be targetted by a different override\n\nSee {Appendix: Group assignments} for more info.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[course_section_id]",
                            "description": "The ID\nof the override's target section. If present, must identify an active\nsection of the assignment's course not already targetted by a different\noverride.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[due_at]",
                            "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[unlock_at]",
                            "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[lock_at]",
                            "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
            "description": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an assignment override",
                    "notes": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
                    "nickname": "update_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[student_ids]",
                            "description": "The IDs of the\noverride's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override. Ignored unless the override\nbeing updated is adhoc.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[title]",
                            "description": "The title of an adhoc\nassignment override. Ignored unless the override being updated is adhoc.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[due_at]",
                            "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[unlock_at]",
                            "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_override[lock_at]",
                            "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
            "description": "Deletes an override and returns its former details.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete an assignment override",
                    "notes": "Deletes an override and returns its former details.",
                    "nickname": "delete_assignment_override",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AssignmentOverride"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/overrides",
            "description": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Batch retrieve overrides in a course",
                    "notes": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
                    "nickname": "batch_retrieve_overrides_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_overrides[id]",
                            "description": "Ids of overrides to retrieve",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_overrides[assignment_id]",
                            "description": "Ids of assignments for each override",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/overrides",
            "description": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Batch create overrides in a course",
                    "notes": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
                    "nickname": "batch_create_overrides_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_overrides",
                            "description": "Attributes for the new assignment overrides.\nSee {api:AssignmentOverridesController#create Create an assignment override} for available\nattributes",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/overrides",
            "description": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Batch update overrides in a course",
                    "notes": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
                    "nickname": "batch_update_overrides_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "assignment_overrides",
                            "description": "Attributes for the updated overrides.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "AssignmentOverride"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentOverride"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers",
            "description": "Returns a paginated list of authentication providers",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List authentication providers",
                    "notes": "Returns a paginated list of authentication providers",
                    "nickname": "list_authentication_providers",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "AuthenticationProvider"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers",
            "description": "Add external authentication provider(s) for the account.\nServices may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook',\n'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect',\n'saml', or 'twitter'. The other recognized parameters depend on this\nauth_type; unrecognized parameters are discarded. Provider specifications\nnot specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any provider. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any provider\nbesides Canvas. You can set 'mfa_required' for any provider.\n\nFor Apple, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The developer’s client identifier, as provided by WWDR. Not available if\n  configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'firstName', 'lastName', and 'sub'.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add authentication provider",
                    "notes": "Add external authentication provider(s) for the account.\nServices may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook',\n'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect',\n'saml', or 'twitter'. The other recognized parameters depend on this\nauth_type; unrecognized parameters are discarded. Provider specifications\nnot specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any provider. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any provider\nbesides Canvas. You can set 'mfa_required' for any provider.\n\nFor Apple, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The developer’s client identifier, as provided by WWDR. Not available if\n  configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'firstName', 'lastName', and 'sub'.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
                    "nickname": "add_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AuthenticationProvider"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
            "description": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update authentication provider",
                    "notes": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
                    "nickname": "update_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AuthenticationProvider"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
            "description": "Get the specified authentication provider",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get authentication provider",
                    "notes": "Get the specified authentication provider",
                    "nickname": "get_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "AuthenticationProvider"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
            "description": "Delete the config",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete authentication provider",
                    "notes": "Delete the config",
                    "nickname": "delete_authentication_provider",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sso_settings",
            "description": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "show account auth settings",
                    "notes": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
                    "nickname": "show_account_auth_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SSOSettings"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sso_settings",
            "description": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "update account auth settings",
                    "notes": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
                    "nickname": "update_account_auth_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SSOSettings"
                }
            ]
        },
        {
            "path": "/v1/audit/authentication/logins/{login_id}",
            "description": "List authentication events for a given login.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by login.",
                    "notes": "List authentication events for a given login.",
                    "nickname": "query_by_login",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "login_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/audit/authentication/accounts/{account_id}",
            "description": "List authentication events for a given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by account.",
                    "notes": "List authentication events for a given account.",
                    "nickname": "query_by_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/audit/authentication/users/{user_id}",
            "description": "List authentication events for a given user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by user.",
                    "notes": "List authentication events for a given user.",
                    "nickname": "query_by_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates",
            "description": "Returns the list of blackout dates for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blackout dates",
                    "notes": "Returns the list of blackout dates for the current context.",
                    "nickname": "list_blackout_dates_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlackoutDate"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates",
            "description": "Returns the list of blackout dates for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blackout dates",
                    "notes": "Returns the list of blackout dates for the current context.",
                    "nickname": "list_blackout_dates_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlackoutDate"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/{id}",
            "description": "Returns the blackout date with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single blackout date",
                    "notes": "Returns the blackout date with the given id.",
                    "nickname": "get_single_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/{id}",
            "description": "Returns the blackout date with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single blackout date",
                    "notes": "Returns the blackout date with the given id.",
                    "nickname": "get_single_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/new",
            "description": "Initialize an unsaved Blackout Date for the given context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "New Blackout Date",
                    "notes": "Initialize an unsaved Blackout Date for the given context.",
                    "nickname": "new_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/new",
            "description": "Initialize an unsaved Blackout Date for the given context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "New Blackout Date",
                    "notes": "Initialize an unsaved Blackout Date for the given context.",
                    "nickname": "new_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates",
            "description": "Create a blackout date for the given context.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create Blackout Date",
                    "notes": "Create a blackout date for the given context.",
                    "nickname": "create_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates",
            "description": "Create a blackout date for the given context.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create Blackout Date",
                    "notes": "Create a blackout date for the given context.",
                    "nickname": "create_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/{id}",
            "description": "Update a blackout date for the given context.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update Blackout Date",
                    "notes": "Update a blackout date for the given context.",
                    "nickname": "update_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/{id}",
            "description": "Update a blackout date for the given context.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update Blackout Date",
                    "notes": "Update a blackout date for the given context.",
                    "nickname": "update_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "start_date",
                            "description": "The start date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "end_date",
                            "description": "The end date of the blackout date.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "event_title",
                            "description": "The title of the blackout date.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates/{id}",
            "description": "Delete a blackout date for the given context.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete Blackout Date",
                    "notes": "Delete a blackout date for the given context.",
                    "nickname": "delete_blackout_date_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/blackout_dates/{id}",
            "description": "Delete a blackout date for the given context.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete Blackout Date",
                    "notes": "Delete a blackout date for the given context.",
                    "nickname": "delete_blackout_date_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlackoutDate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blackout_dates",
            "description": "Create, update, and delete blackout dates to sync the db with the incoming data.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a list of Blackout Dates",
                    "notes": "Create, update, and delete blackout dates to sync the db with the incoming data.",
                    "nickname": "update_list_of_blackout_dates",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "blackout_dates:",
                            "description": "[blackout_date, ...]\nAn object containing the array of BlackoutDates we want to exist after this operation.\nFor array entries, if it has an id it will be updated, if not created, and if\nan existing BlackoutDate id is missing from the array, it will be deleted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlackoutDate The result (which should match the input with maybe some different IDs)."
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}",
            "description": "Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course).\nHowever, using specific template ids may become necessary in the future",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get blueprint information",
                    "notes": "Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course).\nHowever, using specific template ids may become necessary in the future",
                    "nickname": "get_blueprint_information",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintTemplate"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses",
            "description": "Returns a list of courses that are configured to receive updates from this blueprint",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get associated course information",
                    "notes": "Returns a list of courses that are configured to receive updates from this blueprint",
                    "nickname": "get_associated_course_information",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations",
            "description": "Send a list of course ids to add or remove new associations for the template.\nCannot add courses that do not belong to the blueprint course's account. Also cannot add\nother blueprint courses or courses that already have an association with another blueprint course.\n\nAfter associating new courses, {api:MasterCourses::MasterTemplatesController#queue_migration start a sync} to populate their contents from the blueprint.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update associated courses",
                    "notes": "Send a list of course ids to add or remove new associations for the template.\nCannot add courses that do not belong to the blueprint course's account. Also cannot add\nother blueprint courses or courses that already have an association with another blueprint course.\n\nAfter associating new courses, {api:MasterCourses::MasterTemplatesController#queue_migration start a sync} to populate their contents from the blueprint.",
                    "nickname": "update_associated_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_ids_to_add",
                            "description": "Courses to add as associated courses",
                            "type": "Array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_ids_to_remove",
                            "description": "Courses to remove as associated courses",
                            "type": "Array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations",
            "description": "Begins a migration to push recently updated content to all associated courses.\nOnly one migration can be running at a time.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Begin a migration to push to associated courses",
                    "notes": "Begins a migration to push recently updated content to all associated courses.\nOnly one migration can be running at a time.",
                    "nickname": "begin_migration_to_push_to_associated_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment",
                            "description": "An optional comment to be included in the sync history.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "send_notification",
                            "description": "Send a notification to the calling user when the sync completes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "copy_settings",
                            "description": "Whether course settings should be copied over to associated courses.\nDefaults to true for newly associated courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "publish_after_initial_sync",
                            "description": "If set, newly associated courses will be automatically published after the sync completes",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintMigration"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item",
            "description": "If a blueprint course object is restricted, editing will be limited for copies in associated courses.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set or remove restrictions on a blueprint course object",
                    "notes": "If a blueprint course object is restricted, editing will be limited for copies in associated courses.",
                    "nickname": "set_or_remove_restrictions_on_blueprint_course_object",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "content_type",
                            "description": "[String, \"assignment\"|\"attachment\"|\"discussion_topic\"|\"external_tool\"|\"lti-quiz\"|\"quiz\"|\"wiki_page\"]\nThe type of the object.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "content_id",
                            "description": "The ID of the object.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restricted",
                            "description": "Whether to apply restrictions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restrictions",
                            "description": "(Optional) If the object is restricted, this specifies a set of restrictions. If not specified,\nthe course-level restrictions will be used. See {api:CoursesController#update Course API update documentation}",
                            "type": "BlueprintRestriction",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes",
            "description": "Retrieve a list of learning objects that have changed since the last blueprint sync operation.\nIf no syncs have been completed, a ChangeRecord with a change_type of +initial_sync+ is returned.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get unsynced changes",
                    "notes": "Retrieve a list of learning objects that have changed since the last blueprint sync operation.\nIf no syncs have been completed, a ChangeRecord with a change_type of +initial_sync+ is returned.",
                    "nickname": "get_unsynced_changes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ChangeRecord"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations",
            "description": "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blueprint migrations",
                    "notes": "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.",
                    "nickname": "list_blueprint_migrations",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlueprintMigration"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}",
            "description": "Shows the status of a migration. This endpoint can be called on a blueprint course. See also\n{api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a blueprint migration",
                    "notes": "Shows the status of a migration. This endpoint can be called on a blueprint course. See also\n{api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.",
                    "nickname": "show_blueprint_migration",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintMigration"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details",
            "description": "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get migration details",
                    "notes": "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.",
                    "nickname": "get_migration_details",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "template_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ChangeRecord"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions",
            "description": "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blueprint subscriptions",
                    "notes": "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)",
                    "nickname": "list_blueprint_subscriptions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlueprintSubscription"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations",
            "description": "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also\n{api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.\n\nUse 'default' as the subscription_id to use the currently active blueprint subscription.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List blueprint imports",
                    "notes": "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also\n{api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.\n\nUse 'default' as the subscription_id to use the currently active blueprint subscription.",
                    "nickname": "list_blueprint_imports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "subscription_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "BlueprintMigration"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}",
            "description": "Shows the status of an import into a course associated with a blueprint. See also\n{api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a blueprint import",
                    "notes": "Shows the status of an import into a course associated with a blueprint. See also\n{api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.",
                    "nickname": "show_blueprint_import",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "subscription_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "BlueprintMigration"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details",
            "description": "Show the changes that were propagated to a course associated with a blueprint.  See also\n{api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get import details",
                    "notes": "Show the changes that were propagated to a course associated with a blueprint.  See also\n{api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.",
                    "nickname": "get_import_details",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "subscription_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ChangeRecord"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks",
            "description": "Returns the paginated list of bookmarks.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List bookmarks",
                    "notes": "Returns the paginated list of bookmarks.",
                    "nickname": "list_bookmarks",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Bookmark"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks",
            "description": "Creates a bookmark.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create bookmark",
                    "notes": "Creates a bookmark.",
                    "nickname": "create_bookmark",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "The position of the bookmark. Defaults to the bottom.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "data",
                            "description": "The data associated with the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Bookmark"
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks/{id}",
            "description": "Returns the details for a bookmark.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get bookmark",
                    "notes": "Returns the details for a bookmark.",
                    "nickname": "get_bookmark",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Bookmark"
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks/{id}",
            "description": "Updates a bookmark",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update bookmark",
                    "notes": "Updates a bookmark",
                    "nickname": "update_bookmark",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "url",
                            "description": "The url of the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "The position of the bookmark. Defaults to the bottom.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "data",
                            "description": "The data associated with the bookmark",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Folder"
                }
            ]
        },
        {
            "path": "/v1/users/self/bookmarks/{id}",
            "description": "Deletes a bookmark",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete bookmark",
                    "notes": "Deletes a bookmark",
                    "nickname": "delete_bookmark",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/brand_variables",
            "description": "Will redirect to a static json file that has all of the brand\nvariables used by this account. Even though this is a redirect,\ndo not store the redirected url since if the account makes any changes\nit will redirect to a new url. Needs no authentication.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the brand config variables that should be used for this domain",
                    "notes": "Will redirect to a static json file that has all of the brand\nvariables used by this account. Even though this is a redirect,\ndo not store the redirected url since if the account makes any changes\nit will redirect to a new url. Needs no authentication.",
                    "nickname": "get_brand_config_variables_that_should_be_used_for_this_domain",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events",
            "description": "Retrieve the paginated list of calendar events or assignments for the current user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List calendar events",
                    "notes": "Retrieve the paginated list of calendar events or assignments for the current user",
                    "nickname": "list_calendar_events",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "Defaults to \"event\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "event",
                                "assignment"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "undated",
                            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "all_events",
                            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "excludes",
                            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "includes",
                            "description": "Array of optional attributes to include. Possible values are \"web_conferenes\" and \"series_natural_language\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "important_dates",
                            "description": "Defaults to false.\nIf true, only events with important dates set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blackout_date",
                            "description": "Defaults to false.\nIf true, only events with blackout date set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/calendar_events",
            "description": "Retrieve the paginated list of calendar events or assignments for the specified user.\nTo view calendar events for a user other than yourself,\nyou must either be an observer of that user or an administrator.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List calendar events for a user",
                    "notes": "Retrieve the paginated list of calendar events or assignments for the specified user.\nTo view calendar events for a user other than yourself,\nyou must either be an observer of that user or an administrator.",
                    "nickname": "list_calendar_events_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "Defaults to \"event\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "event",
                                "assignment"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "start_date",
                            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_date",
                            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
                            "type": "Date",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "undated",
                            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "all_events",
                            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context_codes",
                            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "excludes",
                            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "submission_types",
                            "description": "When type is \"assignment\", specifies the allowable submission types for returned assignments.\nIgnored if type is not \"assignment\" or if exclude_submission_types is provided.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_submission_types",
                            "description": "When type is \"assignment\", specifies the submission types to be excluded from the returned\nassignments. Ignored if type is not \"assignment\".",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "includes",
                            "description": "Array of optional attributes to include. Possible values are \"web_conferenes\" and \"series_natural_language\"",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "important_dates",
                            "description": "Defaults to false\nIf true, only events with important dates set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "blackout_date",
                            "description": "Defaults to false\nIf true, only events with blackout date set to true will be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CalendarEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/calendar_events",
            "description": "Create and return a new calendar event",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a calendar event",
                    "notes": "Create and return a new calendar event",
                    "nickname": "create_calendar_event",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "calendar_event[context_code]",
                            "description": "Context code of the course/group/user whose calendar this event should be\nadded to.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[title]",
                            "description": "Short title for the calendar event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[description]",
                            "description": "Longer HTML description of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[start_at]",
                            "description": "Start date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[end_at]",
                            "description": "End date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_name]",
                            "description": "Location name of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_address]",
                            "description": "Location address",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[time_zone_edited]",
                            "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[all_day]",
                            "description": "When true event is considered to span the whole day and times are ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][start_at]",
                            "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][end_at]",
                            "description": "Section-level end time(s) if this is a course event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][context_code]",
                            "description": "Context code(s) corresponding to the section-level start and end time(s).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][count]",
                            "description": "Number of times to copy/duplicate the event.  Count cannot exceed 200.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][interval]",
                            "description": "Defaults to 1 if duplicate `count` is set.  The interval between the duplicated events.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][frequency]",
                            "description": "Defaults to \"weekly\".  The frequency at which to duplicate the event",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "daily",
                                "weekly",
                                "monthly"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[duplicate][append_iterator]",
                            "description": "Defaults to false.  If set to `true`, an increasing counter number will be appended to the event title\nwhen the event is duplicated.  (e.g. Event 1, Event 2, Event 3, etc)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[rrule]",
                            "description": "If the calendar_series flag is enabled,\nthis parameter replaces the calendar_event's duplicate parameter to\ncreate a series of recurring events.\nIts value is the {https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html iCalendar RRULE}\ndefining how the event repeats, though unending series not supported.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[blackout_date]",
                            "description": "If the blackout_date is true, this event represents a holiday or some\nother special day that does not count in course pacing.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single calendar event or assignment",
                    "notes": "",
                    "nickname": "get_single_calendar_event_or_assignment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CalendarEvent"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}/reservations",
            "description": "Reserves a particular time slot and return the new reservation",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reserve a time slot",
                    "notes": "Reserves a particular time slot and return the new reservation",
                    "nickname": "reserve_time_slot",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "participant_id",
                            "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comments",
                            "description": "Comments to associate with this reservation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "cancel_existing",
                            "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}/reservations/{participant_id}",
            "description": "Reserves a particular time slot and return the new reservation",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reserve a time slot",
                    "notes": "Reserves a particular time slot and return the new reservation",
                    "nickname": "reserve_time_slot_participant_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "participant_id",
                            "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group).",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comments",
                            "description": "Comments to associate with this reservation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "cancel_existing",
                            "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}",
            "description": "Update and return a calendar event",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a calendar event",
                    "notes": "Update and return a calendar event",
                    "nickname": "update_calendar_event",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[context_code]",
                            "description": "Context code of the course/group/user to move this event to.\nScheduler appointments and events with section-specific times cannot be moved between calendars.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[title]",
                            "description": "Short title for the calendar event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[description]",
                            "description": "Longer HTML description of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[start_at]",
                            "description": "Start date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[end_at]",
                            "description": "End date/time of the event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_name]",
                            "description": "Location name of the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[location_address]",
                            "description": "Location address",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[time_zone_edited]",
                            "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[all_day]",
                            "description": "When true event is considered to span the whole day and times are ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][start_at]",
                            "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][end_at]",
                            "description": "Section-level end time(s) if this is a course event.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[child_event_data][X][context_code]",
                            "description": "Context code(s) corresponding to the section-level start and end time(s).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[rrule]",
                            "description": "Valid if the calendar_series feature is enabled and the event whose\nID is in the URL is part of a series.\nThis defines the shape of the recurring event series after it's updated.\nIts value is the iCalendar RRULE, though unending series not supported.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "which",
                            "description": "Valid if the calendar_series feature is enabled and the event whose\nID is in the URL is part of a series.\nUpdate just the event whose ID is in in the URL, all events\nin the series, or the given event and all those following.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "one",
                                "all",
                                "following"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "calendar_event[blackout_date]",
                            "description": "If the blackout_date is true, this event represents a holiday or some\nother special day that does not count in course pacing.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/{id}",
            "description": "Delete an event from the calendar and return the deleted event",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a calendar event",
                    "notes": "Delete an event from the calendar and return the deleted event",
                    "nickname": "delete_calendar_event",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "cancel_reason",
                            "description": "Reason for deleting/canceling the event.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "which",
                            "description": "Valid if the calendar_series feature is enabled and the\nevent whose ID is in the URL is part of a series.\nDelete just the event whose ID is in in the URL, all events\nin the series, or the given event and all those following.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "one",
                                "all",
                                "following"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/calendar_events/save_enabled_account_calendars",
            "description": "",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Save enabled account calendars\n\nCreates and updates the enabled_account_calendars and mark_feature_as_seen user preferences\n@argument mark_feature_as_seen [Optional, Boolean]\n  Flag to mark account calendars feature as seen\n@argument enabled_account_calendars[] [Optional, Array]\n  An array of account Ids to remember in the calendars list of the user\n curl 'https://<canvas>/api/v1/calendar_events/save_enabled_account_calendars' \\\n      -X POST \\\n      -F 'mark_feature_as_seen=true' \\\n      -F 'enabled_account_calendars[]=1' \\\n      -F 'enabled_account_calendars[]=2' \\\n      -H \"Authorization: Bearer <token>\"",
                    "notes": "",
                    "nickname": "save_enabled_account_calendars_creates_and_updates_enabled_account_calendars_and_mark_feature_as_seen_user_preferences_argument_mark_feature_as_seen_optional_boolean_flag_to_mark_account_calendars_feature_as_seen_argument_enabled_account_calendars_optional_array_array_of_account_ids_to_remember_in_calendars_list_of_user_curl_https_canvas_api_v_calendar_events_save_enabled_account_calendars_x_post_f_mark_feature_as_seen_true_f_enabled_account_calendars_f_enabled_account_calendars_h_authorization_bearer_token",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/calendar_events/timetable",
            "description": "Creates and updates \"timetable\" events for a course.\nCan automaticaly generate a series of calendar events based on simple schedules\n(e.g. \"Monday and Wednesday at 2:00pm\" )\n\nExisting timetable events for the course and course sections\nwill be updated if they still are part of the timetable.\nOtherwise, they will be deleted.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Set a course timetable",
                    "notes": "Creates and updates \"timetable\" events for a course.\nCan automaticaly generate a series of calendar events based on simple schedules\n(e.g. \"Monday and Wednesday at 2:00pm\" )\n\nExisting timetable events for the course and course sections\nwill be updated if they still are part of the timetable.\nOtherwise, they will be deleted.",
                    "nickname": "set_course_timetable",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id]",
                            "description": "An array of timetable objects for the course section specified by course_section_id.\nIf course_section_id is set to \"all\", events will be created for the entire course.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][weekdays]",
                            "description": "A comma-separated list of abbreviated weekdays\n(Mon-Monday, Tue-Tuesday, Wed-Wednesday, Thu-Thursday, Fri-Friday, Sat-Saturday, Sun-Sunday)",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][start_time]",
                            "description": "Time to start each event at (e.g. \"9:00 am\")",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][end_time]",
                            "description": "Time to end each event at (e.g. \"9:00 am\")",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "timetables[course_section_id][location_name]",
                            "description": "A location name to set for each event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/calendar_events/timetable",
            "description": "Returns the last timetable set by the\n{api:CalendarEventsApiController#set_course_timetable Set a course timetable} endpoint",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course timetable",
                    "notes": "Returns the last timetable set by the\n{api:CalendarEventsApiController#set_course_timetable Set a course timetable} endpoint",
                    "nickname": "get_course_timetable",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/calendar_events/timetable_events",
            "description": "Creates and updates \"timetable\" events for a course or course section.\nSimilar to {api:CalendarEventsApiController#set_course_timetable setting a course timetable},\nbut instead of generating a list of events based on a timetable schedule,\nthis endpoint expects a complete list of events.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create or update events directly for a course timetable",
                    "notes": "Creates and updates \"timetable\" events for a course or course section.\nSimilar to {api:CalendarEventsApiController#set_course_timetable setting a course timetable},\nbut instead of generating a list of events based on a timetable schedule,\nthis endpoint expects a complete list of events.",
                    "nickname": "create_or_update_events_directly_for_course_timetable",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section_id",
                            "description": "Events will be created for the course section specified by course_section_id.\nIf not present, events will be created for the entire course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "events",
                            "description": "An array of event objects to use.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[start_at]",
                            "description": "Start time for the event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "DateTime"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[end_at]",
                            "description": "End time for the event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "DateTime"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[location_name]",
                            "description": "Location name for the event",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[code]",
                            "description": "A unique identifier that can be used to update the event at a later time\nIf one is not specified, an identifier will be generated based on the start and end times",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "events[title]",
                            "description": "Title for the meeting. If not present, will default to the associated course's name",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/collaborations",
            "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List collaborations",
                    "notes": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
                    "nickname": "list_collaborations_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Collaboration"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/collaborations",
            "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List collaborations",
                    "notes": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
                    "nickname": "list_collaborations_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Collaboration"
                    }
                }
            ]
        },
        {
            "path": "/v1/collaborations/{id}/members",
            "description": "A paginated list of the collaborators of a given collaboration",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List members of a collaboration.",
                    "notes": "A paginated list of the collaborators of a given collaboration",
                    "nickname": "list_members_of_collaboration",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"collaborator_lti_id\": Optional information to include with each member.\n  Represents an identifier to be used for the member in an LTI context.\n- \"avatar_image_url\": Optional information to include with each member.\n  The url for the avatar of a collaborator with type 'user'.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "collaborator_lti_id",
                                "avatar_image_url"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Collaborator"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/potential_collaborators",
            "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List potential members",
                    "notes": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
                    "nickname": "list_potential_members_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/potential_collaborators",
            "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List potential members",
                    "notes": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
                    "nickname": "list_potential_members_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/comm_messages",
            "description": "Retrieve a paginated list of messages sent to a user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List of CommMessages for a user",
                    "notes": "Retrieve a paginated list of messages sent to a user.",
                    "nickname": "list_of_commmessages_for_user",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "The user id for whom you want to retrieve CommMessages",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range you want to retrieve message from.\nUp to a year prior to the current date is available.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range you want to retrieve messages for.\nUp to a year prior to the current date is available.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CommMessage"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels",
            "description": "Returns a paginated list of communication channels for the specified user,\nsorted by position.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List user communication channels",
                    "notes": "Returns a paginated list of communication channels for the specified user,\nsorted by position.",
                    "nickname": "list_user_communication_channels",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CommunicationChannel"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels",
            "description": "Creates a new communication channel for the specified user.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a communication channel",
                    "notes": "Creates a new communication channel for the specified user.",
                    "nickname": "create_communication_channel",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[address]",
                            "description": "An email address or SMS number. Not required for \"push\" type channels.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[type]",
                            "description": "The type of communication channel.\n\nIn order to enable push notification support, the server must be\nproperly configured (via sns.yml) to communicate with Amazon\nSimple Notification Services, and the developer key used to create\nthe access token from this request must have an SNS ARN configured on\nit.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "email",
                                "sms",
                                "push"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[token]",
                            "description": "A registration id, device token, or equivalent token given to an app when\nregistering with a push notification provider. Only valid for \"push\" type channels.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "skip_confirmation",
                            "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CommunicationChannel"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{id}",
            "description": "Delete an existing communication channel.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a communication channel",
                    "notes": "Delete an existing communication channel.",
                    "nickname": "delete_communication_channel_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CommunicationChannel"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/communication_channels/{type}/{address}",
            "description": "Delete an existing communication channel.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a communication channel",
                    "notes": "Delete an existing communication channel.",
                    "nickname": "delete_communication_channel_type",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "type",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "address",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CommunicationChannel"
                }
            ]
        },
        {
            "path": "/v1/users/self/communication_channels/push",
            "description": "",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a push notification endpoint",
                    "notes": "",
                    "nickname": "delete_push_notification_endpoint",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "{success: true}"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/conferences",
            "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conferences",
                    "notes": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
                    "nickname": "list_conferences_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conference"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/conferences",
            "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conferences",
                    "notes": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
                    "nickname": "list_conferences_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conference"
                    }
                }
            ]
        },
        {
            "path": "/v1/conferences",
            "description": "Retrieve the paginated list of conferences for all courses and groups\nthe current user belongs to\n\nThis API returns a JSON object containing the list of conferences.\nThe key for the list of conferences is \"conferences\".",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conferences for the current user",
                    "notes": "Retrieve the paginated list of conferences for all courses and groups\nthe current user belongs to\n\nThis API returns a JSON object containing the list of conferences.\nThe key for the list of conferences is \"conferences\".",
                    "nickname": "list_conferences_for_current_user",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set to \"live\", returns only conferences that are live (i.e., have\nstarted and not finished yet). If omitted, returns all conferences for\nthis user's groups and courses.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conference"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_exports",
            "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content exports",
                    "notes": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                    "nickname": "list_content_exports_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentExport"
                    }
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/content_exports",
            "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content exports",
                    "notes": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                    "nickname": "list_content_exports_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentExport"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_exports",
            "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content exports",
                    "notes": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                    "nickname": "list_content_exports_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentExport"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_exports/{id}",
            "description": "Get information about a single content export.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show content export",
                    "notes": "Get information about a single content export.",
                    "nickname": "show_content_export_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/content_exports/{id}",
            "description": "Get information about a single content export.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show content export",
                    "notes": "Get information about a single content export.",
                    "nickname": "show_content_export_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_exports/{id}",
            "description": "Get information about a single content export.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show content export",
                    "notes": "Get information about a single content export.",
                    "nickname": "show_content_export_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_exports",
            "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Export content",
                    "notes": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                    "nickname": "export_content_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "export_type",
                            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "common_cartridge",
                                "qti",
                                "zip"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "skip_notifications",
                            "description": "Don't send the notifications about the export to the user. Default: false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "select",
                            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "folders",
                                "files",
                                "attachments",
                                "quizzes",
                                "assignments",
                                "announcements",
                                "calendar_events",
                                "discussion_topics",
                                "modules",
                                "module_items",
                                "pages",
                                "rubrics"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/content_exports",
            "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Export content",
                    "notes": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                    "nickname": "export_content_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "export_type",
                            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "common_cartridge",
                                "qti",
                                "zip"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "skip_notifications",
                            "description": "Don't send the notifications about the export to the user. Default: false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "select",
                            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "folders",
                                "files",
                                "attachments",
                                "quizzes",
                                "assignments",
                                "announcements",
                                "calendar_events",
                                "discussion_topics",
                                "modules",
                                "module_items",
                                "pages",
                                "rubrics"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_exports",
            "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Export content",
                    "notes": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                    "nickname": "export_content_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "export_type",
                            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "common_cartridge",
                                "qti",
                                "zip"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "skip_notifications",
                            "description": "Don't send the notifications about the export to the user. Default: false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "select",
                            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "folders",
                                "files",
                                "attachments",
                                "quizzes",
                                "assignments",
                                "announcements",
                                "calendar_events",
                                "discussion_topics",
                                "modules",
                                "module_items",
                                "pages",
                                "rubrics"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentExport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/csp_settings",
            "description": "Update multiple modules in an account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get current settings for account or course",
                    "notes": "Update multiple modules in an account.",
                    "nickname": "get_current_settings_for_account_or_course_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "enabled",
                            "description": "Whether CSP is enabled.",
                            "deprecated": false
                        },
                        {
                            "name": "inherited",
                            "description": "Whether the current CSP settings are inherited from a parent account.",
                            "deprecated": false
                        },
                        {
                            "name": "settings_locked",
                            "description": "Whether current CSP settings can be overridden by sub-accounts and courses.",
                            "deprecated": false
                        },
                        {
                            "name": "effective_whitelist",
                            "description": "If enabled, lists the currently allowed domains\n(includes domains automatically allowed through external tools).",
                            "deprecated": false
                        },
                        {
                            "name": "tools_whitelist",
                            "description": "(Account-only) Lists the automatically allowed domains with\ntheir respective external tools",
                            "deprecated": false
                        },
                        {
                            "name": "current_account_whitelist",
                            "description": "(Account-only) Lists the current list of domains\nexplicitly allowed by this account. (Note: this list will not take effect unless\nCSP is explicitly enabled on this account)",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings",
            "description": "Update multiple modules in an account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get current settings for account or course",
                    "notes": "Update multiple modules in an account.",
                    "nickname": "get_current_settings_for_account_or_course_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "enabled",
                            "description": "Whether CSP is enabled.",
                            "deprecated": false
                        },
                        {
                            "name": "inherited",
                            "description": "Whether the current CSP settings are inherited from a parent account.",
                            "deprecated": false
                        },
                        {
                            "name": "settings_locked",
                            "description": "Whether current CSP settings can be overridden by sub-accounts and courses.",
                            "deprecated": false
                        },
                        {
                            "name": "effective_whitelist",
                            "description": "If enabled, lists the currently allowed domains\n(includes domains automatically allowed through external tools).",
                            "deprecated": false
                        },
                        {
                            "name": "tools_whitelist",
                            "description": "(Account-only) Lists the automatically allowed domains with\ntheir respective external tools",
                            "deprecated": false
                        },
                        {
                            "name": "current_account_whitelist",
                            "description": "(Account-only) Lists the current list of domains\nexplicitly allowed by this account. (Note: this list will not take effect unless\nCSP is explicitly enabled on this account)",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/csp_settings",
            "description": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Enable, disable, or clear explicit CSP setting",
                    "notes": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
                    "nickname": "enable_disable_or_clear_explicit_csp_setting_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "status",
                            "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the allowed domains set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "enabled",
                                "disabled",
                                "inherited"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings",
            "description": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Enable, disable, or clear explicit CSP setting",
                    "notes": "Either explicitly sets CSP to be on or off for courses and sub-accounts,\nor clear the explicit settings to default to those set by a parent account\n\nNote: If \"inherited\" and \"settings_locked\" are both true for this account or course,\nthen the CSP setting cannot be modified.",
                    "nickname": "enable_disable_or_clear_explicit_csp_setting_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "status",
                            "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the allowed domains set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "enabled",
                                "disabled",
                                "inherited"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/lock",
            "description": "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. \"inherited\" is false).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Lock or unlock current CSP settings for sub-accounts and courses",
                    "notes": "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. \"inherited\" is false).",
                    "nickname": "lock_or_unlock_current_csp_settings_for_sub_accounts_and_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "settings_locked",
                            "description": "Whether sub-accounts and courses will be prevented from overriding settings inherited from this account.",
                            "type": "boolean",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/domains",
            "description": "Adds an allowed domain for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add an allowed domain to account",
                    "notes": "Adds an allowed domain for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
                    "nickname": "add_allowed_domain_to_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "domain",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/domains/batch_create",
            "description": "Adds multiple allowed domains for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add multiple allowed domains to an account",
                    "notes": "Adds multiple allowed domains for the current account. Note: this will not take effect\nunless CSP is explicitly enabled on this account.",
                    "nickname": "add_multiple_allowed_domains_to_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "domains",
                            "description": "no description",
                            "type": "Array",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_log",
            "description": "Must be called on a root account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve reported CSP Violations for account",
                    "notes": "Must be called on a root account.",
                    "nickname": "retrieve_reported_csp_violations_for_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/csp_settings/domains",
            "description": "Removes an allowed domain from the current account.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove a domain from account",
                    "notes": "Removes an allowed domain from the current account.",
                    "nickname": "remove_domain_from_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "domain",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares",
            "description": "Share content directly between two or more users",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a content share",
                    "notes": "Share content directly between two or more users",
                    "nickname": "create_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "receiver_ids",
                            "description": "IDs of users to share the content with.",
                            "type": "Array",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "content_type",
                            "description": "Type of content you are sharing.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "assignment",
                                "discussion_topic",
                                "page",
                                "quiz",
                                "module",
                                "module_item"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "content_id",
                            "description": "The id of the content that you are sharing",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/sent",
            "description": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content shares",
                    "notes": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
                    "nickname": "list_content_shares_sent",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentShare"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/received",
            "description": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List content shares",
                    "notes": "Return a paginated list of content shares a user has sent or received. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
                    "nickname": "list_content_shares_received",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ContentShare"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/unread_count",
            "description": "Return the number of content shares a user has received that have not yet been read. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get unread shares count",
                    "notes": "Return the number of content shares a user has received that have not yet been read. Use +self+ as the user_id\nto retrieve your own content shares. Only linked observers and administrators may view other users'\ncontent shares.",
                    "nickname": "get_unread_shares_count",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "{ \"unread_count\": \"integer\" }"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}",
            "description": "Return information about a single content share. You may use +self+ as the user_id to retrieve your own content share.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get content share",
                    "notes": "Return information about a single content share. You may use +self+ as the user_id to retrieve your own content share.",
                    "nickname": "get_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}",
            "description": "Remove a content share from your list. Use +self+ as the user_id. Note that this endpoint does not delete other users'\ncopies of the content share.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove content share",
                    "notes": "Remove a content share from your list. Use +self+ as the user_id. Note that this endpoint does not delete other users'\ncopies of the content share.",
                    "nickname": "remove_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}/add_users",
            "description": "Send a previously created content share to additional users",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add users to content share",
                    "notes": "Send a previously created content share to additional users",
                    "nickname": "add_users_to_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "receiver_ids",
                            "description": "IDs of users to share the content with.",
                            "type": "Array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/content_shares/{id}",
            "description": "Mark a content share read or unread",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a content share",
                    "notes": "Mark a content share read or unread",
                    "nickname": "update_content_share",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "read_state",
                            "description": "Read state for the content share",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "read",
                                "unread"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ContentShare"
                }
            ]
        },
        {
            "path": "/v1/conversations",
            "description": "Returns the paginated list of conversations for the current user, most\nrecent ones first.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List conversations",
                    "notes": "Returns the paginated list of conversations for the current user, most\nrecent ones first.",
                    "nickname": "list_conversations",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "When set, only return conversations of the specified type. For example,\nset to \"unread\" to return only conversations that haven't been read.\nThe default behavior is to return all non-archived conversations (i.e.\nread and unread).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "When set, only return conversations for the specified courses, groups\nor users. The id should be prefixed with its type, e.g. \"user_123\" or\n\"course_456\". Can be an array (by setting \"filter[]\") or single value\n(by setting \"filter\")",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "filter_mode",
                            "description": "When filter[] contains multiple filters, combine them with this mode,\nfiltering conversations that at have at least all of the contexts (\"and\")\nor at least one of the contexts (\"or\")",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "interleave_submissions",
                            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_all_conversation_ids",
                            "description": "Default is false. If true,\nthe top-level element of the response will be an object rather than\nan array, and will have the keys \"conversations\" which will contain the\npaged conversation data, and \"conversation_ids\" which will contain the\nids of all conversations under this scope/filter in the same order.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "\"participant_avatars\":: Optionally include an \"avatar_url\" key for each user participanting in the conversation",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "participant_avatars"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the conversation.",
                            "deprecated": false
                        },
                        {
                            "name": "subject",
                            "description": "The subject of the conversation.",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current state of the conversation\n(read, unread or archived)",
                            "deprecated": false
                        },
                        {
                            "name": "last_message",
                            "description": "A <=100 character preview from the most\nrecent message",
                            "deprecated": false
                        },
                        {
                            "name": "last_message_at",
                            "description": "The timestamp of the latest message",
                            "deprecated": false
                        },
                        {
                            "name": "message_count",
                            "description": "The number of messages in this conversation",
                            "deprecated": false
                        },
                        {
                            "name": "subscribed",
                            "description": "Indicates whether the user is actively\nsubscribed to the conversation",
                            "deprecated": false
                        },
                        {
                            "name": "private",
                            "description": "Indicates whether this is a private conversation\n(i.e. audience of one)",
                            "deprecated": false
                        },
                        {
                            "name": "starred",
                            "description": "Whether the conversation is starred",
                            "deprecated": false
                        },
                        {
                            "name": "properties",
                            "description": "Additional conversation flags (last_author,\nattachments, media_objects). Each listed property means the flag is\nset to true (i.e. the current user is the most recent author, there\nare attachments, or there are media objects)",
                            "deprecated": false
                        },
                        {
                            "name": "audience",
                            "description": "Array of user ids who are involved in the\nconversation, ordered by participation level, then alphabetical.\nExcludes current user, unless this is a monologue.",
                            "deprecated": false
                        },
                        {
                            "name": "audience_contexts",
                            "description": "Most relevant shared contexts (courses\nand groups) between current user and other participants. If there is\nonly one participant, it will also include that user's enrollment(s)/\nmembership type(s) in each course/group",
                            "deprecated": false
                        },
                        {
                            "name": "avatar_url",
                            "description": "URL to appropriate icon for this conversation\n(custom, individual or group avatar, depending on audience)",
                            "deprecated": false
                        },
                        {
                            "name": "participants",
                            "description": "Array of users (id, name, full_name) participating in\nthe conversation. Includes current user. If `include[]=participant_avatars`\nwas passed as an argument, each user in the array will also have an\n\"avatar_url\" field",
                            "deprecated": false
                        },
                        {
                            "name": "visible",
                            "description": "Boolean, indicates whether the conversation is\nvisible under the current scope and filter. This attribute is always\ntrue in the index API response, and is primarily useful in create/update\nresponses so that you can know if the record should be displayed in\nthe UI. The default scope is assumed, unless a scope or filter is passed\nto the create/update API call.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Conversation"
                    }
                }
            ]
        },
        {
            "path": "/v1/conversations",
            "description": "Create a new conversation with one or more recipients. If there is already\nan existing private conversation with the given recipients, it will be\nreused.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a conversation",
                    "notes": "Create a new conversation with one or more recipients. If there is already\nan existing private conversation with the given recipients, it will be\nreused.",
                    "nickname": "create_conversation",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "recipients",
                            "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3. If the course/group\nhas over 100 enrollments, 'bulk_message' and 'group_conversation' must be\nset to true.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "subject",
                            "description": "The subject of the conversation. This is ignored when reusing a\nconversation. Maximum length is 255 characters.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "body",
                            "description": "The message to be sent",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "force_new",
                            "description": "Forces a new message to be created, even if there is an existing private conversation.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "group_conversation",
                            "description": "Defaults to false.  When false, individual private conversations will be\ncreated with each recipient. If true, this will be a group conversation\n(i.e. all recipients may see all messages and replies). Must be set true if\nthe number of recipients is over the set maximum (default is 100).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment_ids",
                            "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_id",
                            "description": "Media comment id of an audio or video file to be associated with this\nmessage.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_type",
                            "description": "Type of the associated media file",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "user_note",
                            "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "mode",
                            "description": "Determines whether the messages will be created/sent synchronously or\nasynchronously. Defaults to sync, and this option is ignored if this is a\ngroup conversation or there is just one recipient (i.e. it must be a bulk\nprivate message). When sent async, the response will be an empty array\n(batch status can be queried via the {api:ConversationsController#batches batches API})",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "sync",
                                "async"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "scope",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "filter",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "filter_mode",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "context_code",
                            "description": "The course or group that is the context for this conversation. Same format\nas courses or groups in the recipients argument.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/batches",
            "description": "Returns any currently running conversation batches for the current user.\nConversation batches are created when a bulk private message is sent\nasynchronously (see the mode argument to the {api:ConversationsController#create create API action}).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get running batches",
                    "notes": "Returns any currently running conversation batches for the current user.\nConversation batches are created when a bulk private message is sent\nasynchronously (see the mode argument to the {api:ConversationsController#create create API action}).",
                    "nickname": "get_running_batches",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}",
            "description": "Returns information for a single conversation for the current user. Response includes all\nfields that are present in the list/index action as well as messages\nand extended participant information.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single conversation",
                    "notes": "Returns information for a single conversation for the current user. Response includes all\nfields that are present in the list/index action as well as messages\nand extended participant information.",
                    "nickname": "get_single_conversation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "interleave_submissions",
                            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "scope",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "filter_mode",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "auto_mark_as_read",
                            "description": "Default true. If true, unread\nconversations will be automatically marked as read. This will default\nto false in a future API release, so clients should explicitly send\ntrue if that is the desired behavior.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "participants",
                            "description": "Array of relevant users. Includes current\nuser. If there are forwarded messages in this conversation, the authors\nof those messages will also be included, even if they are not\nparticipating in this conversation. Fields include:",
                            "deprecated": false
                        },
                        {
                            "name": "messages",
                            "description": "Array of messages, newest first. Fields include:\nid:: The unique identifier for the message\ncreated_at:: The timestamp of the message\nbody:: The actual message body\nauthor_id:: The id of the user who sent the message (see audience, participants)\ngenerated:: If true, indicates this is a system-generated message (e.g. \"Bob added Alice to the conversation\")\nmedia_comment:: Audio/video comment data for this message (if applicable). Fields include: display_name, content-type, media_id, media_type, url\nforwarded_messages:: If this message contains forwarded messages, they will be included here (same format as this list). Note that those messages may have forwarded messages of their own, etc.\nattachments:: Array of attachments for this message. Fields include: display_name, content-type, filename, url",
                            "deprecated": false
                        },
                        {
                            "name": "submissions",
                            "description": "(Obsolete) Array of assignment submissions having\ncomments relevant to this conversation. Submissions are no longer linked to conversations.\nThis field will always be nil or empty.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}",
            "description": "Updates attributes for a single conversation.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a conversation",
                    "notes": "Updates attributes for a single conversation.",
                    "nickname": "edit_conversation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "conversation[workflow_state]",
                            "description": "Change the state of this conversation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "read",
                                "unread",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "conversation[subscribed]",
                            "description": "Toggle the current user's subscription to the conversation (only valid for\ngroup conversations). If unsubscribed, the user will still have access to\nthe latest messages, but the conversation won't be automatically flagged\nas unread, nor will it jump to the top of the inbox.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "conversation[starred]",
                            "description": "Toggle the starred state of the current user's view of the conversation.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "scope",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "filter",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "filter_mode",
                            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/mark_all_as_read",
            "description": "Mark all conversations as read.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Mark all as read",
                    "notes": "Mark all conversations as read.",
                    "nickname": "mark_all_as_read",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}",
            "description": "Delete this conversation and its messages. Note that this only deletes\nthis user's view of the conversation.\n\nResponse includes same fields as UPDATE action",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a conversation",
                    "notes": "Delete this conversation and its messages. Note that this only deletes\nthis user's view of the conversation.\n\nResponse includes same fields as UPDATE action",
                    "nickname": "delete_conversation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}/add_recipients",
            "description": "Add recipients to an existing group conversation. Response is similar to\nthe GET/show action, except that only includes the\nlatest message (e.g. \"joe was added to the conversation by bob\")",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add recipients",
                    "notes": "Add recipients to an existing group conversation. Response is similar to\nthe GET/show action, except that only includes the\nlatest message (e.g. \"joe was added to the conversation by bob\")",
                    "nickname": "add_recipients",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "recipients",
                            "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}/add_message",
            "description": "Add a message to an existing conversation. Response is similar to the\nGET/show action, except that only includes the\nlatest message (i.e. what we just sent)\n\nAn array of user ids. Defaults to all of the current conversation\nrecipients. To explicitly send a message to no other recipients,\nthis array should consist of the logged-in user id.\n\nAn array of message ids from this conversation to send to recipients\nof the new message. Recipients who already had a copy of included\nmessages will not be affected.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add a message",
                    "notes": "Add a message to an existing conversation. Response is similar to the\nGET/show action, except that only includes the\nlatest message (i.e. what we just sent)\n\nAn array of user ids. Defaults to all of the current conversation\nrecipients. To explicitly send a message to no other recipients,\nthis array should consist of the logged-in user id.\n\nAn array of message ids from this conversation to send to recipients\nof the new message. Recipients who already had a copy of included\nmessages will not be affected.",
                    "nickname": "add_message",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "body",
                            "description": "The message to be sent.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment_ids",
                            "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_id",
                            "description": "Media comment id of an audio of video file to be associated with this\nmessage.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "media_comment_type",
                            "description": "Type of the associated media file.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "recipients",
                            "description": "no description",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "included_messages",
                            "description": "no description",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "user_note",
                            "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/{id}/remove_messages",
            "description": "Delete messages from this conversation. Note that this only affects this\nuser's view of the conversation. If all messages are deleted, the\nconversation will be as well (equivalent to DELETE)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Delete a message",
                    "notes": "Delete messages from this conversation. Note that this only affects this\nuser's view of the conversation. If all messages are deleted, the\nconversation will be as well (equivalent to DELETE)",
                    "nickname": "delete_message",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "remove",
                            "description": "Array of message ids to be deleted",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations",
            "description": "Perform a change on a set of conversations. Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Batch update conversations",
                    "notes": "Perform a change on a set of conversations. Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
                    "nickname": "batch_update_conversations",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "conversation_ids",
                            "description": "List of conversations to update. Limited to 500 conversations.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "event",
                            "description": "The action to take on each conversation.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "mark_as_read",
                                "mark_as_unread",
                                "star",
                                "unstar",
                                "archive",
                                "destroy"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/conversations/find_recipients",
            "description": "Deprecated, see the {api:SearchController#recipients Find recipients endpoint} in the Search API",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Find recipients",
                    "notes": "Deprecated, see the {api:SearchController#recipients Find recipients endpoint} in the Search API",
                    "nickname": "find_recipients",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/conversations/unread_count",
            "description": "Get the number of unread conversations for the current user",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Unread count",
                    "notes": "Get the number of unread conversations for the current user",
                    "nickname": "unread_count",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/audit/course/courses/{course_id}",
            "description": "List course change events for a given course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by course.",
                    "notes": "List course change events for a given course.",
                    "nickname": "query_by_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CourseEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/audit/course/accounts/{account_id}",
            "description": "List course change events for a given account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Query by account.",
                    "notes": "List course change events for a given account.",
                    "nickname": "query_by_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want events.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CourseEvent"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quiz_extensions",
            "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Set extensions for student quiz submissions",
                    "notes": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
                    "nickname": "set_extensions_for_student_quiz_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user_id",
                            "description": "The ID of the user we want to add quiz extensions for.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extra_attempts",
                            "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extra_time",
                            "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "manually_unlocked",
                            "description": "Allow the student to take the quiz even if it's locked for\neveryone else.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extend_from_now",
                            "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extend_from_end_at",
                            "description": "The number of minutes to extend the quiz beyond the quiz's current\nending time. This is mutually exclusive to extend_from_now. This is\nlimited to 1440 minutes (24 hours)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses",
            "description": "Returns the paginated list of active courses for the current user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List your courses",
                    "notes": "Returns the paginated list of active courses for the current user.",
                    "nickname": "list_your_courses",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "When set, only return courses where the user is enrolled as this type. For\nexample, set to \"teacher\" to return only courses where the user is\nenrolled as a Teacher.  This argument is ignored if enrollment_role is given.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "ta",
                                "observer",
                                "designer"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role",
                            "description": "Deprecated\nWhen set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a base role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role_id",
                            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited_or_pending",
                                "completed"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "exclude_blueprint_courses",
                            "description": "When set, only return courses that are not configured as blueprint courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade', as well as (if\n  the user has permission) 'unposted_current_score',\n  'unposted_final_score', 'unposted_current_grade', and\n  'unposted_final_grade' (see Enrollment documentation for more\n  information on these fields). This argument is ignored if the course is\n  configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the total_scores argument is not\n  included. If the course is configured to hide final grades, the\n  following fields are not returned:\n  'totals_for_all_grading_periods_option',\n  'current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade',\n  'current_period_computed_final_grade',\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade'\n- \"grading_periods\": Optional information to include with each Course. When\n  grading_periods is given, a list of the grading periods associated with\n  each course is returned.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional information to include with each Course. Returns course\n  image url if a course image has been set.\n- \"banner_image\": Optional information to include with each Course. Returns course\n  banner image url if the course is a Canvas for Elementary subject and a banner\n  image has been set.\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "grading_periods",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unpublished",
                                "available",
                                "completed",
                                "deleted"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/courses",
            "description": "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List courses for a user",
                    "notes": "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.",
                    "nickname": "list_courses_for_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade' (see Enrollment\n  documentation for more information on these fields). This argument\n  is ignored if the course is configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the course is configured to hide final\n  grades or if the total_scores argument is not included.\n- \"grading_periods\": Optional information to include with each Course. When\n  grading_periods is given, a list of the grading periods associated with\n  each course is returned.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional information to include with each Course. Returns course\n  image url if a course image has been set.\n- \"banner_image\": Optional information to include with each Course. Returns course\n  banner image url if the course is a Canvas for Elementary subject and a banner\n  image has been set.\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "grading_periods",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "unpublished",
                                "available",
                                "completed",
                                "deleted"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited_or_pending",
                                "completed"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "homeroom",
                            "description": "If set, only return homeroom courses.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Course"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/users/{user_id}/progress",
            "description": "Return progress information for the user and course\n\nYou can supply +self+ as the user_id to query your own progress in a course. To query another user's progress,\nyou must be a teacher in the course, an administrator, or a linked observer of the user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user progress",
                    "notes": "Return progress information for the user and course\n\nYou can supply +self+ as the user_id to query your own progress in a course. To query another user's progress,\nyou must be a teacher in the course, an administrator, or a linked observer of the user.",
                    "nickname": "get_user_progress",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CourseProgress"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses",
            "description": "Create a new course",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new course",
                    "notes": "Create a new course",
                    "nickname": "create_new_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[name]",
                            "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_code]",
                            "description": "The course code for the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[start_at]",
                            "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[end_at]",
                            "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[license]",
                            "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public]",
                            "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public_to_auth_users]",
                            "description": "Set to true if course is public only to authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus]",
                            "description": "Set to true to make the course syllabus public.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus_to_auth]",
                            "description": "Set to true to make the course syllabus public for authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_description]",
                            "description": "A publicly visible description of the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_wiki_edits]",
                            "description": "If true, students will be able to modify the course wiki.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_wiki_comments]",
                            "description": "If true, course members will be able to comment on wiki pages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_forum_attachments]",
                            "description": "If true, students can attach files to forum posts.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[open_enrollment]",
                            "description": "Set to true if the course is open enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[self_enrollment]",
                            "description": "Set to true if the course is self enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[restrict_enrollments_to_course_dates]",
                            "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse. This value must be set to true\nin order to specify a course start date and/or end date.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[term_id]",
                            "description": "The unique ID of the term to create to course in.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[sis_course_id]",
                            "description": "The unique SIS identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[integration_id]",
                            "description": "The unique Integration identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[hide_final_grades]",
                            "description": "If this option is set to true, the totals in student grades summary will\nbe hidden.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[apply_assignment_group_weights]",
                            "description": "Set to true to weight final grade based on assignment groups percentages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[time_zone]",
                            "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "offer",
                            "description": "If this option is set to true, the course will be available to students\nimmediately.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enroll_me",
                            "description": "Set to true to enroll the current user as the teacher.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[default_view]",
                            "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "feed",
                                "wiki",
                                "modules",
                                "syllabus",
                                "assignments"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course[syllabus_body]",
                            "description": "The syllabus body for the course",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grade_passback_setting]",
                            "description": "Optional. The grade_passback_setting for the course. Only 'nightly_sync', 'disabled', and '' are allowed",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_format]",
                            "description": "Optional. Specifies the format of the course. (Should be 'on_campus', 'online', or 'blended')",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enable_sis_reactivation",
                            "description": "When true, will first try to re-activate a deleted course with matching sis_course_id if possible.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/files",
            "description": "Upload a file to the course.\n\nThis API endpoint is the first step in uploading a file to a course.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course can upload files\nto the course. By default, this is Teachers, TAs and Designers.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to the course.\n\nThis API endpoint is the first step in uploading a file to a course.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course can upload files\nto the course. By default, this is Teachers, TAs and Designers.",
                    "nickname": "upload_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/students",
            "description": "Returns the paginated list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List students",
                    "notes": "Returns the paginated list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
                    "nickname": "list_students",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/users",
            "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List users in course",
                    "notes": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
                    "nickname": "list_users_in_course_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name or full ID of the users to match and return in the results list.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "When set, sort the results of the search based on the given field.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "username",
                                "last_login",
                                "email",
                                "sis_id"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "student_view",
                                "ta",
                                "observer",
                                "designer"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role",
                            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role_id",
                            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.\n- \"uuid\": Optionally include the users uuid",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "enrollments",
                                "locked",
                                "avatar_url",
                                "test_student",
                                "bio",
                                "custom_links",
                                "current_grading_period_scores",
                                "uuid"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_ids",
                            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "rejected",
                                "completed",
                                "inactive"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/search_users",
            "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List users in course",
                    "notes": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
                    "nickname": "list_users_in_course_search_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name or full ID of the users to match and return in the results list.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "When set, sort the results of the search based on the given field.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "username",
                                "last_login",
                                "email",
                                "sis_id"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "teacher",
                                "student",
                                "student_view",
                                "ta",
                                "observer",
                                "designer"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role",
                            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_role_id",
                            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.\n- \"uuid\": Optionally include the users uuid",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "enrollments",
                                "locked",
                                "avatar_url",
                                "test_student",
                                "bio",
                                "custom_links",
                                "current_grading_period_scores",
                                "uuid"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "user_ids",
                            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "invited",
                                "rejected",
                                "completed",
                                "inactive"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/recent_students",
            "description": "Returns the paginated list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List recently logged in students",
                    "notes": "Returns the paginated list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
                    "nickname": "list_recently_logged_in_students",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/users/{id}",
            "description": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get single user",
                    "notes": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
                    "nickname": "get_single_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/content_share_users",
            "description": "Returns a paginated list of users you can share content with.  Requires the content share\nfeature and the user must have the manage content permission for the course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Search for content share users",
                    "notes": "Returns a paginated list of users you can share content with.  Requires the content share\nfeature and the user must have the manage content permission for the course.",
                    "nickname": "search_for_content_share_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "Term used to find users.  Will search available share users with the search term in their name.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/preview_html",
            "description": "Preview html content processed for this course",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Preview processed html",
                    "notes": "Preview html content processed for this course",
                    "nickname": "preview_processed_html",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "html",
                            "description": "The html content to process",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/activity_stream",
            "description": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Course activity stream",
                    "notes": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
                    "nickname": "course_activity_stream",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/activity_stream/summary",
            "description": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Course activity stream summary",
                    "notes": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
                    "nickname": "course_activity_stream_summary",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/todo",
            "description": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Course TODO items",
                    "notes": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
                    "nickname": "course_todo_items",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}",
            "description": "Delete or conclude an existing course",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete/Conclude a course",
                    "notes": "Delete or conclude an existing course",
                    "nickname": "delete_conclude_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "event",
                            "description": "The action to take on the course.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "delete",
                                "conclude"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/settings",
            "description": "Returns some of a course's settings.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course settings",
                    "notes": "Returns some of a course's settings.",
                    "nickname": "get_course_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/settings",
            "description": "Can update the following course settings:",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update course settings",
                    "notes": "Can update the following course settings:",
                    "nickname": "update_course_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_discussion_topics",
                            "description": "Let students create discussion topics",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_forum_attachments",
                            "description": "Let students attach files to discussions",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_discussion_editing",
                            "description": "Let students edit or delete their own discussion replies",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_organized_groups",
                            "description": "Let students organize their own groups",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_discussion_reporting",
                            "description": "Let students report offensive discussion content",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "allow_student_anonymous_discussion_topics",
                            "description": "Let students create anonymous discussion topics",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "filter_speed_grader_by_student_group",
                            "description": "Filter SpeedGrader to only the selected student group",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hide_final_grades",
                            "description": "Hide totals in student grades summary",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hide_distribution_graphs",
                            "description": "Hide grade distribution graphs from students",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hide_sections_on_course_users_page",
                            "description": "Disallow students from viewing students in sections they do not belong to",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "lock_all_announcements",
                            "description": "Disable comments on announcements",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "usage_rights_required",
                            "description": "Copyright and license information must be provided for files before they are published.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restrict_student_past_view",
                            "description": "Restrict students from viewing courses after end date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "restrict_student_future_view",
                            "description": "Restrict students from viewing courses before start date",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "show_announcements_on_home_page",
                            "description": "Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit).\nCanvas for Elementary subjects ignore this setting.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "home_page_announcement_limit",
                            "description": "Limit the number of announcements on the home page if enabled via show_announcements_on_home_page",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "syllabus_course_summary",
                            "description": "Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "default_due_time",
                            "description": "Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface\nwhen setting a due date for an assignment. It does not change when any existing assignment is due. It should be\ngiven in 24-hour HH:MM:SS format. The default is \"23:59:59\". Use \"inherit\" to inherit the account setting.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "conditional_release",
                            "description": "Enable or disable individual learning paths for students based on assessment",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/student_view_student",
            "description": "Returns information for a test student in this course. Creates a test\nstudent if one does not already exist for the course. The caller must have\npermission to access the course's student view.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Return test student for course",
                    "notes": "Returns information for a test student in this course. Creates a test\nstudent if one does not already exist for the course. The caller must have\npermission to access the course's student view.",
                    "nickname": "return_test_student_for_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}",
            "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single course",
                    "notes": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
                    "nickname": "get_single_course_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": Include observed users in the enrollments\n- \"course_image\": Include course image url if a course image has been set\n- \"banner_image\": Include course banner image url if the course is a Canvas for\n  Elementary subject and a banner image has been set\n- \"concluded\": Optional information to include with Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "all_courses",
                                "permissions",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "teacher_limit",
                            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses/{id}",
            "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single course",
                    "notes": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
                    "nickname": "get_single_course_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": Include observed users in the enrollments\n- \"course_image\": Include course image url if a course image has been set\n- \"banner_image\": Include course banner image url if the course is a Canvas for\n  Elementary subject and a banner image has been set\n- \"concluded\": Optional information to include with Course. Indicates whether\n  the course has been concluded, taking course and term dates into account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "needs_grading_count",
                                "syllabus_body",
                                "public_description",
                                "total_scores",
                                "current_grading_period_scores",
                                "term",
                                "account",
                                "course_progress",
                                "sections",
                                "storage_quota_used_mb",
                                "total_students",
                                "passback_status",
                                "favorites",
                                "teachers",
                                "observed_users",
                                "all_courses",
                                "permissions",
                                "course_image",
                                "banner_image",
                                "concluded"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "teacher_limit",
                            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}",
            "description": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).\n\nIf a user has content management rights, but not full course editing rights, the only attribute\neditable through this endpoint will be \"syllabus_body\"",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a course",
                    "notes": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).\n\nIf a user has content management rights, but not full course editing rights, the only attribute\neditable through this endpoint will be \"syllabus_body\"",
                    "nickname": "update_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[account_id]",
                            "description": "The unique ID of the account to move the course to.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[name]",
                            "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\"",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_code]",
                            "description": "The course code for the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[start_at]",
                            "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true,\nor the course is already published.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[end_at]",
                            "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z\nThis value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[license]",
                            "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public]",
                            "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[is_public_to_auth_users]",
                            "description": "Set to true if course is public only to authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus]",
                            "description": "Set to true to make the course syllabus public.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_syllabus_to_auth]",
                            "description": "Set to true to make the course syllabus to public for authenticated users.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[public_description]",
                            "description": "A publicly visible description of the course.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_wiki_edits]",
                            "description": "If true, students will be able to modify the course wiki.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_wiki_comments]",
                            "description": "If true, course members will be able to comment on wiki pages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[allow_student_forum_attachments]",
                            "description": "If true, students can attach files to forum posts.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[open_enrollment]",
                            "description": "Set to true if the course is open enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[self_enrollment]",
                            "description": "Set to true if the course is self enrollment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[restrict_enrollments_to_course_dates]",
                            "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse. Setting this value to false will\nremove the course end date (if it exists), as well as the course start date\n(if the course is unpublished).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[term_id]",
                            "description": "The unique ID of the term to create to course in.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[sis_course_id]",
                            "description": "The unique SIS identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[integration_id]",
                            "description": "The unique Integration identifier.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[hide_final_grades]",
                            "description": "If this option is set to true, the totals in student grades summary will\nbe hidden.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[time_zone]",
                            "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[apply_assignment_group_weights]",
                            "description": "Set to true to weight final grade based on assignment groups percentages.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[storage_quota_mb]",
                            "description": "Set the storage quota for the course, in megabytes. The caller must have\nthe \"Manage storage quotas\" account permission.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "offer",
                            "description": "If this option is set to true, the course will be available to students\nimmediately.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[event]",
                            "description": "The action to take on each course.\n* 'claim' makes a course no longer visible to students. This action is also called \"unpublish\" on the web site.\n  A course cannot be unpublished if students have received graded submissions.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. This action requires account administrative rights.\n  (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course\n  will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "claim",
                                "offer",
                                "conclude",
                                "delete",
                                "undelete"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course[default_view]",
                            "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'wiki' Wiki Front Page\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "feed",
                                "wiki",
                                "modules",
                                "syllabus",
                                "assignments"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "course[syllabus_body]",
                            "description": "The syllabus body for the course",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[syllabus_course_summary]",
                            "description": "Optional. Indicates whether the Course Summary (consisting of the course's assignments and calendar events) is displayed on the syllabus page. Defaults to +true+.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grading_standard_id]",
                            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[grade_passback_setting]",
                            "description": "Optional. The grade_passback_setting for the course. Only 'nightly_sync' and '' are allowed",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_format]",
                            "description": "Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[image_id]",
                            "description": "This is a file ID corresponding to an image file in the course that will\nbe used as the course image.\nThis will clear the course's image_url setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[image_url]",
                            "description": "This is a URL to an image to be used as the course image.\nThis will clear the course's image_id setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[remove_image]",
                            "description": "If this option is set to true, the course image url and course image\nID are both set to nil",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[remove_banner_image]",
                            "description": "If this option is set to true, the course banner image url and course\nbanner image ID are both set to nil",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[blueprint]",
                            "description": "Sets the course as a blueprint course.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[blueprint_restrictions]",
                            "description": "Sets a default set to apply to blueprint course objects when restricted,\nunless _use_blueprint_restrictions_by_object_type_ is enabled.\nSee the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation",
                            "type": "BlueprintRestriction",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[use_blueprint_restrictions_by_object_type]",
                            "description": "When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of\nthe _blueprint_restrictions_by_object_type_ parameter",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[blueprint_restrictions_by_object_type]",
                            "description": "Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction}\nto apply to blueprint course objects of the matching type when restricted.\nThe possible object types are \"assignment\", \"attachment\", \"discussion_topic\", \"quiz\" and \"wiki_page\".\nExample usage:\n  course[blueprint_restrictions_by_object_type][assignment][content]=1",
                            "type": "multiple BlueprintRestrictions",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[homeroom_course]",
                            "description": "Sets the course as a homeroom course. The setting takes effect only when the course is associated\nwith a Canvas for Elementary-enabled account.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[sync_enrollments_from_homeroom]",
                            "description": "Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the\ncourse is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[homeroom_course_id]",
                            "description": "Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the\ncourse is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[template]",
                            "description": "Enable or disable the course as a template that can be selected by an account",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[course_color]",
                            "description": "Sets a color in hex code format to be associated with the course. The setting takes effect only when the course\nis associated with a Canvas for Elementary-enabled account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[friendly_name]",
                            "description": "Set a friendly name for the course. If this is provided and the course is associated with a Canvas for\nElementary account, it will be shown instead of the course name. This setting takes priority over\ncourse nicknames defined by individual users.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[enable_course_paces]",
                            "description": "Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is\nenabled for the sub-account. Otherwise, Course Pacing are always disabled.\n  Note: Course Pacing is in active development.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course[conditional_release]",
                            "description": "Enable or disable individual learning paths for students based on assessment",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/courses",
            "description": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update courses",
                    "notes": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
                    "nickname": "update_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_ids",
                            "description": "List of ids of courses to update. At most 500 courses may be updated in one call.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "event",
                            "description": "The action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n  rather than delete a course if there is any possibility the course will be used again.) The recovered course\n  will be unpublished. Deleted enrollments will not be recovered.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "offer",
                                "conclude",
                                "delete",
                                "undelete"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/reset_content",
            "description": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reset a course",
                    "notes": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
                    "nickname": "reset_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Course"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/effective_due_dates",
            "description": "For each assignment in the course, returns each assigned student's ID\nand their corresponding due date along with some grading period data.\nReturns a collection with keys representing assignment IDs and values as a\ncollection containing keys representing student IDs and values representing\nthe student's effective due_at, the grading_period_id of which the due_at falls\nin, and whether or not the grading period is closed (in_closed_grading_period)\n\nThe list of assignment IDs for which effective student due dates are\nrequested. If not provided, all assignments in the course will be used.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get effective due dates",
                    "notes": "For each assignment in the course, returns each assigned student's ID\nand their corresponding due date along with some grading period data.\nReturns a collection with keys representing assignment IDs and values as a\ncollection containing keys representing student IDs and values representing\nthe student's effective due_at, the grading_period_id of which the due_at falls\nin, and whether or not the grading period is closed (in_closed_grading_period)\n\nThe list of assignment IDs for which effective student due dates are\nrequested. If not provided, all assignments in the course will be used.",
                    "nickname": "get_effective_due_dates",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "no description",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/permissions",
            "description": "Returns permission information for the calling user in the given course.\nSee also the {api:AccountsController#permissions Account} and\n{api:GroupsController#permissions Group} counterparts.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Permissions",
                    "notes": "Returns permission information for the calling user in the given course.\nSee also the {api:AccountsController#permissions Account} and\n{api:GroupsController#permissions Group} counterparts.",
                    "nickname": "permissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "permissions",
                            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/bulk_user_progress",
            "description": "Returns progress information for all users enrolled in the given course.\n\nYou must be a user who has permission to view all grades in the course (such as a teacher or administrator).",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get bulk user progress",
                    "notes": "Returns progress information for all users enrolled in the given course.\n\nYou must be a user who has permission to view all grades in the course (such as a teacher or administrator).",
                    "nickname": "get_bulk_user_progress",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{id}/dismiss_migration_limitation_message",
            "description": "Remove alert about the limitations of quiz migrations that is displayed\nto a user in a course\n\nyou must be logged in to use this endpoint",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Remove quiz migration alert",
                    "notes": "Remove alert about the limitations of quiz migrations that is displayed\nto a user in a course\n\nyou must be logged in to use this endpoint",
                    "nickname": "remove_quiz_migration_alert",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/course_copy/{id}",
            "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course copy status",
                    "notes": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
                    "nickname": "get_course_copy_status",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the course copy.",
                            "deprecated": false
                        },
                        {
                            "name": "created_at",
                            "description": "The time that the copy was initiated.",
                            "deprecated": false
                        },
                        {
                            "name": "progress",
                            "description": "The progress of the copy as an integer. It is null before the copying starts, and 100 when finished.",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current status of the course copy. Possible values: \"created\", \"started\", \"completed\", \"failed\"",
                            "deprecated": false
                        },
                        {
                            "name": "status_url",
                            "description": "The url for the course copy status API endpoint.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/course_copy",
            "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Copy course content",
                    "notes": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
                    "nickname": "copy_course_content",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "source_course",
                            "description": "ID or SIS-ID of the course to copy the content from",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "except",
                            "description": "A list of the course content types to exclude, all areas not listed will\nbe copied.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_settings",
                                "assignments",
                                "external_tools",
                                "files",
                                "topics",
                                "calendar_events",
                                "quizzes",
                                "wiki_pages",
                                "modules",
                                "outcomes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "only",
                            "description": "A list of the course content types to copy, all areas not listed will not\nbe copied.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_settings",
                                "assignments",
                                "external_tools",
                                "files",
                                "topics",
                                "calendar_events",
                                "quizzes",
                                "wiki_pages",
                                "modules",
                                "outcomes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns",
            "description": "A paginated list of all custom gradebook columns for a course",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List custom gradebook columns",
                    "notes": "A paginated list of all custom gradebook columns for a course",
                    "nickname": "list_custom_gradebook_columns",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_hidden",
                            "description": "Include hidden parameters (defaults to false)",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CustomColumn"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns",
            "description": "Create a custom gradebook column",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a custom gradebook column",
                    "notes": "Create a custom gradebook column",
                    "nickname": "create_custom_gradebook_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[title]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[position]",
                            "description": "The position of the column relative to other custom columns",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[hidden]",
                            "description": "Hidden columns are not displayed in the gradebook",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[teacher_notes]",
                            "description": "Set this if the column is created by a teacher.  The gradebook only\nsupports one teacher_notes column.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column[read_only]",
                            "description": "Set this to prevent the column from being editable in the gradebook ui",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CustomColumn"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}",
            "description": "Accepts the same parameters as custom gradebook column creation",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a custom gradebook column",
                    "notes": "Accepts the same parameters as custom gradebook column creation",
                    "nickname": "update_custom_gradebook_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CustomColumn"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}",
            "description": "Permanently deletes a custom column and its associated data",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a custom gradebook column",
                    "notes": "Permanently deletes a custom column and its associated data",
                    "nickname": "delete_custom_gradebook_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CustomColumn"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/reorder",
            "description": "Puts the given columns in the specified order\n\n<b>200 OK</b> is returned if successful",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reorder custom columns",
                    "notes": "Puts the given columns in the specified order\n\n<b>200 OK</b> is returned if successful",
                    "nickname": "reorder_custom_columns",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "order",
                            "description": "no description",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data",
            "description": "This does not list entries for students without associated data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List entries for a column",
                    "notes": "This does not list entries for students without associated data.",
                    "nickname": "list_entries_for_column",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include_hidden",
                            "description": "If true, hidden columns will be included in the\nresult. If false or absent, only visible columns\nwill be returned.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "ColumnDatum"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}",
            "description": "Set the content of a custom column",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update column data",
                    "notes": "Set the content of a custom column",
                    "nickname": "update_column_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column_data[content]",
                            "description": "Column content.  Setting this to blank will delete the datum object.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "ColumnDatum"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/custom_gradebook_column_data",
            "description": "Set the content of custom columns\n\n{\n  \"column_data\": [\n    {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content\": example_content\n      },\n      {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content: example_content\n    }\n  ]\n}",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Bulk update column data",
                    "notes": "Set the content of custom columns\n\n{\n  \"column_data\": [\n    {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content\": example_content\n      },\n      {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content: example_content\n    }\n  ]\n}",
                    "nickname": "bulk_update_column_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "column_data",
                            "description": "Column content. Setting this to an empty string will delete the data object.",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        }
    ]
}