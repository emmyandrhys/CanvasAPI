{
    "apiVersion": "1.0",
    "swaggerVersion": "1.2",
    "basePath": "https://canvas.instructure.com/api",
    "produces": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/lti/subscriptions",
            "description": "Creates a webook subscription for the specified event type and\ncontext.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a Webhook Subscription",
                    "notes": "Creates a webook subscription for the specified event type and\ncontext.",
                    "nickname": "create_webhook_subscription",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "subscription[ContextId]",
                            "description": "The id of the context for the subscription.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "subscription[ContextType]",
                            "description": "The type of context for the subscription. Must be 'assignment',\n'account', or 'course'.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "subscription[EventTypes]",
                            "description": "Array of strings representing the event types for\nthe subscription.",
                            "type": "Array",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "subscription[Format]",
                            "description": "Format to deliver the live events. Must be 'live-event' or 'caliper'.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "subscription[TransportMetadata]",
                            "description": "An object with a single key: 'Url'. Example: { \"Url\": \"sqs.example\" }",
                            "type": "Object",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "subscription[TransportType]",
                            "description": "Must be either 'sqs' or 'https'.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/subscriptions/{id}",
            "description": "",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a Webhook Subscription",
                    "notes": "",
                    "nickname": "delete_webhook_subscription",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/subscriptions/{id}",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a single Webhook Subscription",
                    "notes": "",
                    "nickname": "show_single_webhook_subscription",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/subscriptions/{id}",
            "description": "This endpoint uses the same parameters as the create endpoint",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a Webhook Subscription",
                    "notes": "This endpoint uses the same parameters as the create endpoint",
                    "nickname": "update_webhook_subscription",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/subscriptions",
            "description": "This endpoint returns a paginated list with a default limit of 100 items per result set.\nYou can retrieve the next result set by setting a 'StartKey' header in your next request\nwith the value of the 'EndKey' header in the response.\n\nExample use of a 'StartKey' header object:\n  { \"Id\":\"71d6dfba-0547-477d-b41d-db8cb528c6d1\",\"DeveloperKey\":\"10000000000001\" }",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all Webhook Subscription for a tool proxy",
                    "notes": "This endpoint returns a paginated list with a default limit of 100 items per result set.\nYou can retrieve the next result set by setting a 'StartKey' header in your next request\nwith the value of the 'EndKey' header in the response.\n\nExample use of a 'StartKey' header object:\n  { \"Id\":\"71d6dfba-0547-477d-b41d-db8cb528c6d1\",\"DeveloperKey\":\"10000000000001\" }",
                    "nickname": "list_all_webhook_subscription_for_tool_proxy",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/users",
            "description": "A paginated list of of users associated with this account.\n\n @example_request\n   curl https://<canvas>/api/v1/accounts/self/users?search_term=<search value> \\\n      -X GET \\\n      -H 'Authorization: Bearer <token>'",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List users in account",
                    "notes": "A paginated list of of users associated with this account.\n\n @example_request\n   curl https://<canvas>/api/v1/accounts/self/users?search_term=<search value> \\\n      -X GET \\\n      -H 'Authorization: Bearer <token>'",
                    "nickname": "list_users_in_account",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial name or full ID of the users to match and return in the\nresults list. Must be at least 3 characters.\n\nNote that the API will prefer matching on canonical user ID if the ID has\na numeric form. It will only search against other fields if non-numeric\nin form, or if the numeric value doesn't yield any matches. Queries by\nadministrative users will search on SIS ID, login ID, name, or email\naddress",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_type",
                            "description": "When set, only return users enrolled with the specified course-level base role.\nThis can be a base role type of 'student', 'teacher',\n'ta', 'observer', or 'designer'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "sort",
                            "description": "The column to sort results by.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "username",
                                "email",
                                "sis_id",
                                "last_login"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The order to sort the given column by.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/activity_stream",
            "description": "Returns the current user's global activity stream, paginated.\n\nThere are many types of objects that can be returned in the activity\nstream. All object types have the same basic set of shared attributes:\n  !!!javascript\n  {\n    'created_at': '2011-07-13T09:12:00Z',\n    'updated_at': '2011-07-25T08:52:41Z',\n    'id': 1234,\n    'title': 'Stream Item Subject',\n    'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',\n    'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',\n    'read_state': false,\n    'context_type': 'course', // course|group\n    'course_id': 1,\n    'group_id': null,\n    'html_url': \"http://...\" // URL to the Canvas web UI for this stream item\n  }\n\nIn addition, each item type has its own set of attributes available.\n\nDiscussionTopic:\n\n  !!!javascript\n  {\n    'type': 'DiscussionTopic',\n    'discussion_topic_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': true,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor DiscussionTopic, the message is truncated at 4kb.\n\nAnnouncement:\n\n  !!!javascript\n  {\n    'type': 'Announcement',\n    'announcement_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': null,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor Announcement, the message is truncated at 4kb.\n\nConversation:\n\n  !!!javascript\n  {\n    'type': 'Conversation',\n    'conversation_id': 1234,\n    'private': false,\n    'participant_count': 3,\n  }\n\nMessage:\n\n  !!!javascript\n  {\n    'type': 'Message',\n    'message_id': 1234,\n    'notification_category': 'Assignment Graded'\n  }\n\nSubmission:\n\nReturns an {api:Submissions:Submission Submission} with its Course and Assignment data.\n\nConference:\n\n  !!!javascript\n  {\n    'type': 'Conference',\n    'web_conference_id': 1234\n  }\n\nCollaboration:\n\n  !!!javascript\n  {\n    'type': 'Collaboration',\n    'collaboration_id': 1234\n  }\n\nAssessmentRequest:\n\n  !!!javascript\n  {\n    'type': 'AssessmentRequest',\n    'assessment_request_id': 1234\n  }",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List the activity stream",
                    "notes": "Returns the current user's global activity stream, paginated.\n\nThere are many types of objects that can be returned in the activity\nstream. All object types have the same basic set of shared attributes:\n  !!!javascript\n  {\n    'created_at': '2011-07-13T09:12:00Z',\n    'updated_at': '2011-07-25T08:52:41Z',\n    'id': 1234,\n    'title': 'Stream Item Subject',\n    'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',\n    'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',\n    'read_state': false,\n    'context_type': 'course', // course|group\n    'course_id': 1,\n    'group_id': null,\n    'html_url': \"http://...\" // URL to the Canvas web UI for this stream item\n  }\n\nIn addition, each item type has its own set of attributes available.\n\nDiscussionTopic:\n\n  !!!javascript\n  {\n    'type': 'DiscussionTopic',\n    'discussion_topic_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': true,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor DiscussionTopic, the message is truncated at 4kb.\n\nAnnouncement:\n\n  !!!javascript\n  {\n    'type': 'Announcement',\n    'announcement_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': null,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor Announcement, the message is truncated at 4kb.\n\nConversation:\n\n  !!!javascript\n  {\n    'type': 'Conversation',\n    'conversation_id': 1234,\n    'private': false,\n    'participant_count': 3,\n  }\n\nMessage:\n\n  !!!javascript\n  {\n    'type': 'Message',\n    'message_id': 1234,\n    'notification_category': 'Assignment Graded'\n  }\n\nSubmission:\n\nReturns an {api:Submissions:Submission Submission} with its Course and Assignment data.\n\nConference:\n\n  !!!javascript\n  {\n    'type': 'Conference',\n    'web_conference_id': 1234\n  }\n\nCollaboration:\n\n  !!!javascript\n  {\n    'type': 'Collaboration',\n    'collaboration_id': 1234\n  }\n\nAssessmentRequest:\n\n  !!!javascript\n  {\n    'type': 'AssessmentRequest',\n    'assessment_request_id': 1234\n  }",
                    "nickname": "list_activity_stream_self",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "only_active_courses",
                            "description": "If true, will only return objects for courses the user is actively participating in",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/activity_stream",
            "description": "Returns the current user's global activity stream, paginated.\n\nThere are many types of objects that can be returned in the activity\nstream. All object types have the same basic set of shared attributes:\n  !!!javascript\n  {\n    'created_at': '2011-07-13T09:12:00Z',\n    'updated_at': '2011-07-25T08:52:41Z',\n    'id': 1234,\n    'title': 'Stream Item Subject',\n    'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',\n    'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',\n    'read_state': false,\n    'context_type': 'course', // course|group\n    'course_id': 1,\n    'group_id': null,\n    'html_url': \"http://...\" // URL to the Canvas web UI for this stream item\n  }\n\nIn addition, each item type has its own set of attributes available.\n\nDiscussionTopic:\n\n  !!!javascript\n  {\n    'type': 'DiscussionTopic',\n    'discussion_topic_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': true,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor DiscussionTopic, the message is truncated at 4kb.\n\nAnnouncement:\n\n  !!!javascript\n  {\n    'type': 'Announcement',\n    'announcement_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': null,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor Announcement, the message is truncated at 4kb.\n\nConversation:\n\n  !!!javascript\n  {\n    'type': 'Conversation',\n    'conversation_id': 1234,\n    'private': false,\n    'participant_count': 3,\n  }\n\nMessage:\n\n  !!!javascript\n  {\n    'type': 'Message',\n    'message_id': 1234,\n    'notification_category': 'Assignment Graded'\n  }\n\nSubmission:\n\nReturns an {api:Submissions:Submission Submission} with its Course and Assignment data.\n\nConference:\n\n  !!!javascript\n  {\n    'type': 'Conference',\n    'web_conference_id': 1234\n  }\n\nCollaboration:\n\n  !!!javascript\n  {\n    'type': 'Collaboration',\n    'collaboration_id': 1234\n  }\n\nAssessmentRequest:\n\n  !!!javascript\n  {\n    'type': 'AssessmentRequest',\n    'assessment_request_id': 1234\n  }",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List the activity stream",
                    "notes": "Returns the current user's global activity stream, paginated.\n\nThere are many types of objects that can be returned in the activity\nstream. All object types have the same basic set of shared attributes:\n  !!!javascript\n  {\n    'created_at': '2011-07-13T09:12:00Z',\n    'updated_at': '2011-07-25T08:52:41Z',\n    'id': 1234,\n    'title': 'Stream Item Subject',\n    'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',\n    'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',\n    'read_state': false,\n    'context_type': 'course', // course|group\n    'course_id': 1,\n    'group_id': null,\n    'html_url': \"http://...\" // URL to the Canvas web UI for this stream item\n  }\n\nIn addition, each item type has its own set of attributes available.\n\nDiscussionTopic:\n\n  !!!javascript\n  {\n    'type': 'DiscussionTopic',\n    'discussion_topic_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': true,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor DiscussionTopic, the message is truncated at 4kb.\n\nAnnouncement:\n\n  !!!javascript\n  {\n    'type': 'Announcement',\n    'announcement_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': null,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor Announcement, the message is truncated at 4kb.\n\nConversation:\n\n  !!!javascript\n  {\n    'type': 'Conversation',\n    'conversation_id': 1234,\n    'private': false,\n    'participant_count': 3,\n  }\n\nMessage:\n\n  !!!javascript\n  {\n    'type': 'Message',\n    'message_id': 1234,\n    'notification_category': 'Assignment Graded'\n  }\n\nSubmission:\n\nReturns an {api:Submissions:Submission Submission} with its Course and Assignment data.\n\nConference:\n\n  !!!javascript\n  {\n    'type': 'Conference',\n    'web_conference_id': 1234\n  }\n\nCollaboration:\n\n  !!!javascript\n  {\n    'type': 'Collaboration',\n    'collaboration_id': 1234\n  }\n\nAssessmentRequest:\n\n  !!!javascript\n  {\n    'type': 'AssessmentRequest',\n    'assessment_request_id': 1234\n  }",
                    "nickname": "list_activity_stream_activity_stream",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "only_active_courses",
                            "description": "If true, will only return objects for courses the user is actively participating in",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/activity_stream/summary",
            "description": "Returns a summary of the current user's global activity stream.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Activity stream summary",
                    "notes": "Returns a summary of the current user's global activity stream.",
                    "nickname": "activity_stream_summary",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/todo",
            "description": "A paginated list of the current user's list of todo items.\n\nThere is a limit to the number of items returned.\n\nThe `ignore` and `ignore_permanently` URLs can be used to update the user's\npreferences on what items will be displayed.\nPerforming a DELETE request against the `ignore` URL will hide that item\nfrom future todo item requests, until the item changes.\nPerforming a DELETE request against the `ignore_permanently` URL will hide\nthat item forever.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List the TODO items",
                    "notes": "A paginated list of the current user's list of todo items.\n\nThere is a limit to the number of items returned.\n\nThe `ignore` and `ignore_permanently` URLs can be used to update the user's\npreferences on what items will be displayed.\nPerforming a DELETE request against the `ignore` URL will hide that item\nfrom future todo item requests, until the item changes.\nPerforming a DELETE request against the `ignore_permanently` URL will hide\nthat item forever.",
                    "nickname": "list_todo_items",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "\"ungraded_quizzes\":: Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list.\n                     These will be returned under a +quiz+ key instead of an +assignment+ key in response elements.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "ungraded_quizzes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/todo_item_count",
            "description": "Counts of different todo items such as the number of assignments needing grading as well as the number of assignments needing submitting.\n\nThere is a limit to the number of todo items this endpoint will count.\nIt will only look at the first 100 todo items for the user. If the user has more than 100 todo items this count may not be reliable.\nThe largest reliable number for both counts is 100.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List counts for todo items",
                    "notes": "Counts of different todo items such as the number of assignments needing grading as well as the number of assignments needing submitting.\n\nThere is a limit to the number of todo items this endpoint will count.\nIt will only look at the first 100 todo items for the user. If the user has more than 100 todo items this count may not be reliable.\nThe largest reliable number for both counts is 100.",
                    "nickname": "list_counts_for_todo_items",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "\"ungraded_quizzes\":: Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list.\n                     These will be returned under a +quiz+ key instead of an +assignment+ key in response elements.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "ungraded_quizzes"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/upcoming_events",
            "description": "A paginated list of the current user's upcoming events.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List upcoming assignments, calendar events",
                    "notes": "A paginated list of the current user's upcoming events.",
                    "nickname": "list_upcoming_assignments_calendar_events",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/missing_submissions",
            "description": "A paginated list of past-due assignments for which the student does not have a submission.\nThe user sending the request must either be the student, an admin or a parent observer using the parent app",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List Missing Submissions",
                    "notes": "A paginated list of past-due assignments for which the student does not have a submission.\nThe user sending the request must either be the student, an admin or a parent observer using the parent app",
                    "nickname": "list_missing_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "the student's ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "observed_user_id",
                            "description": "Return missing submissions for the given observed user. Must be accompanied by course_ids[].\nThe user making the request must be observing the observed user in all the courses specified by\ncourse_ids[].",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "\"planner_overrides\":: Optionally include the assignment's associated planner override, if it exists, for the current user.\n                      These will be returned under a +planner_override+ key\n\"course\":: Optionally include the assignments' courses",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "planner_overrides",
                                "course"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "\"submittable\":: Only return assignments that the current user can submit (i.e. filter out locked assignments)\n\"current_grading_period\":: Only return missing assignments that are in the current grading period",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submittable",
                                "current_grading_period"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "course_ids",
                            "description": "Optionally restricts the list of past-due assignments to only those associated with the specified\ncourse IDs. Required if observed_user_id is passed.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Assignment"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/activity_stream/{id}",
            "description": "Hide the given stream item.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Hide a stream item",
                    "notes": "Hide the given stream item.",
                    "nickname": "hide_stream_item",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/activity_stream",
            "description": "Hide all stream items for the user",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Hide all stream items",
                    "notes": "Hide all stream items for the user",
                    "nickname": "hide_all_stream_items",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/files",
            "description": "Upload a file to the user's personal files section.\n\nThis API endpoint is the first step in uploading a file to a user's files.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nNote that typically users will only be able to upload files to their\nown files section. Passing a user_id of +self+ is an easy shortcut\nto specify the current user.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to the user's personal files section.\n\nThis API endpoint is the first step in uploading a file to a user's files.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nNote that typically users will only be able to upload files to their\nown files section. Passing a user_id of +self+ is an easy shortcut\nto specify the current user.",
                    "nickname": "upload_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}",
            "description": "Shows details for user.\n\nAlso includes an attribute \"permissions\", a non-comprehensive list of permissions for the user.\nExample:\n  !!!javascript\n  \"permissions\": {\n   \"can_update_name\": true, // Whether the user can update their name.\n   \"can_update_avatar\": false, // Whether the user can update their avatar.\n   \"limit_parent_app_web_access\": false // Whether the user can interact with Canvas web from the Canvas Parent app.\n  }",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show user details",
                    "notes": "Shows details for user.\n\nAlso includes an attribute \"permissions\", a non-comprehensive list of permissions for the user.\nExample:\n  !!!javascript\n  \"permissions\": {\n   \"can_update_name\": true, // Whether the user can update their name.\n   \"can_update_avatar\": false, // Whether the user can update their avatar.\n   \"limit_parent_app_web_access\": false // Whether the user can interact with Canvas web from the Canvas Parent app.\n  }",
                    "nickname": "show_user_details",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional information to include on the user record.\n\"locale\", \"avatar_url\", \"permissions\", \"email\", and \"effective_locale\"\nwill always be returned",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "uuid",
                                "last_login"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/users",
            "description": "Create and return a new user and pseudonym for an account.\n\n[DEPRECATED (for self-registration only)] If you don't have the \"Modify\nlogin details for users\" permission, but self-registration is enabled\non the account, you can still use this endpoint to register new users.\nCertain fields will be required, and others will be ignored (see below).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a user",
                    "notes": "Create and return a new user and pseudonym for an account.\n\n[DEPRECATED (for self-registration only)] If you don't have the \"Modify\nlogin details for users\" permission, but self-registration is enabled\non the account, you can still use this endpoint to register new users.\nCertain fields will be required, and others will be ignored (see below).",
                    "nickname": "create_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[name]",
                            "description": "The full name of the user. This name will be used by teacher for grading.\nRequired if this is a self-registration.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[short_name]",
                            "description": "User's name as it will be displayed in discussions, messages, and comments.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[sortable_name]",
                            "description": "User's name as used to sort alphabetically in lists.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[time_zone]",
                            "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[locale]",
                            "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[terms_of_use]",
                            "description": "Whether the user accepts the terms of use. Required if this is a\nself-registration and this canvas instance requires users to accept\nthe terms (on by default).\n\nIf this is true, it will mark the user as having accepted the terms of use.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[skip_registration]",
                            "description": "Automatically mark the user as registered.\n\nIf this is true, it is recommended to set <tt>\"pseudonym[send_confirmation]\"</tt> to true as well.\nOtherwise, the user will not receive any messages about their account creation.\n\nThe users communication channel confirmation can be skipped by setting\n<tt>\"communication_channel[skip_confirmation]\"</tt> to true as well.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[unique_id]",
                            "description": "User's login ID. If this is a self-registration, it must be a valid\nemail address.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[password]",
                            "description": "User's password. Cannot be set during self-registration.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[sis_user_id]",
                            "description": "SIS ID for the user's account. To set this parameter, the caller must be\nable to manage SIS permissions.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[integration_id]",
                            "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[send_confirmation]",
                            "description": "Send user notification of account creation if true.\nAutomatically set to true during self-registration.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[force_self_registration]",
                            "description": "Send user a self-registration style email if true.\nSetting it means the users will get a notification asking them\nto \"complete the registration process\" by clicking it, setting\na password, and letting them in.  Will only be executed on\nif the user does not need admin approval.\nDefaults to false unless explicitly provided.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[authentication_provider_id]",
                            "description": "The authentication provider this login is associated with. Logins\nassociated with a specific provider can only be used with that provider.\nLegacy providers (LDAP, CAS, SAML) will search for logins associated with\nthem, or unassociated logins. New providers will only search for logins\nexplicitly associated with them. This can be the integer ID of the\nprovider, or the type of the provider (in which case, it will find the\nfirst matching provider).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[type]",
                            "description": "The communication channel type, e.g. 'email' or 'sms'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[address]",
                            "description": "The communication channel address, e.g. the user's email address.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[confirmation_url]",
                            "description": "Only valid for account admins. If true, returns the new user account\nconfirmation URL in the response.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[skip_confirmation]",
                            "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel.\n\nIf this is true, it is recommended to set <tt>\"pseudonym[send_confirmation]\"</tt> to true as well.\nOtherwise, the user will not receive any messages about their account creation.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "force_validations",
                            "description": "If true, validations are performed on the newly created user (and their associated pseudonym)\neven if the request is made by a privileged user like an admin. When set to false,\nor not included in the request parameters, any newly created users are subject to\nvalidations unless the request is made by a user with a 'manage_user_logins' right.\nIn which case, certain validations such as 'require_acceptance_of_terms' and\n'require_presence_of_name' are not enforced. Use this parameter to return helpful json\nerrors while building users with an admin request.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enable_sis_reactivation",
                            "description": "When true, will first try to re-activate a deleted user with matching sis_user_id if possible.\nThis is commonly done with user[skip_registration] and communication_channel[skip_confirmation]\nso that the default communication_channel is also restored.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "destination",
                            "description": "If you're setting the password for the newly created user, you can provide this param\nwith a valid URL pointing into this Canvas installation, and the response will include\na destination field that's a URL that you can redirect a browser to and have the newly\ncreated user automatically logged in. The URL is only valid for a short time, and must\nmatch the domain this request is directed to, and be for a well-formed path that Canvas\ncan recognize.",
                            "type": "URL",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "initial_enrollment_type",
                            "description": "`observer` if doing a self-registration with a pairing code. This allows setting the\npassword during user creation.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pairing_code[code]",
                            "description": "If provided and valid, will link the new user as an observer to the student's whose\npairing code is given.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/self_registration",
            "description": "Self register and return a new user and pseudonym for an account.\n\nIf self-registration is enabled on the account, you can use this\nendpoint to self register new users.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "[DEPRECATED] Self register a user",
                    "notes": "Self register and return a new user and pseudonym for an account.\n\nIf self-registration is enabled on the account, you can use this\nendpoint to self register new users.",
                    "nickname": "deprecated_self_register_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[name]",
                            "description": "The full name of the user. This name will be used by teacher for grading.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[short_name]",
                            "description": "User's name as it will be displayed in discussions, messages, and comments.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[sortable_name]",
                            "description": "User's name as used to sort alphabetically in lists.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[time_zone]",
                            "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[locale]",
                            "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[terms_of_use]",
                            "description": "Whether the user accepts the terms of use.",
                            "type": "boolean",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pseudonym[unique_id]",
                            "description": "User's login ID. Must be a valid email address.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[type]",
                            "description": "The communication channel type, e.g. 'email' or 'sms'.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "communication_channel[address]",
                            "description": "The communication channel address, e.g. the user's email address.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/settings",
            "description": "Update an existing user's settings.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Update user settings.",
                    "notes": "Update an existing user's settings.",
                    "nickname": "update_user_settings",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "manual_mark_as_read",
                            "description": "If true, require user to manually mark discussion posts as read (don't\nauto-mark as read).",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "release_notes_badge_disabled",
                            "description": "If true, hide the badge for new release notes.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "collapse_global_nav",
                            "description": "If true, the user's page loads with the global navigation collapsed",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "collapse_course_nav",
                            "description": "If true, the user's course pages will load with the course navigation\ncollapsed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "hide_dashcard_color_overlays",
                            "description": "If true, images on course cards will be presented without being tinted\nto match the course color.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "comment_library_suggestions_enabled",
                            "description": "If true, suggestions within the comment library will be shown.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "elementary_dashboard_disabled",
                            "description": "If true, will display the user's preferred class Canvas dashboard\nview instead of the canvas for elementary view.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/colors",
            "description": "Returns all custom colors that have been saved for a user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get custom colors",
                    "notes": "Returns all custom colors that have been saved for a user.",
                    "nickname": "get_custom_colors",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/colors/{asset_string}",
            "description": "Returns the custom colors that have been saved for a user for a given context.\n\nThe asset_string parameter should be in the format 'context_id', for example\n'course_42'.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get custom color",
                    "notes": "Returns the custom colors that have been saved for a user for a given context.\n\nThe asset_string parameter should be in the format 'context_id', for example\n'course_42'.",
                    "nickname": "get_custom_color",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "asset_string",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/colors/{asset_string}",
            "description": "Updates a custom color for a user for a given context.  This allows\ncolors for the calendar and elsewhere to be customized on a user basis.\n\nThe asset string parameter should be in the format 'context_id', for example\n'course_42'",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update custom color",
                    "notes": "Updates a custom color for a user for a given context.  This allows\ncolors for the calendar and elsewhere to be customized on a user basis.\n\nThe asset string parameter should be in the format 'context_id', for example\n'course_42'",
                    "nickname": "update_custom_color",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "asset_string",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hexcode",
                            "description": "The hexcode of the color to set for the context, if you choose to pass the\nhexcode as a query parameter rather than in the request body you should\nNOT include the '#' unless you escape it first.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/dashboard_positions",
            "description": "Returns all dashboard positions that have been saved for a user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get dashboard positions",
                    "notes": "Returns all dashboard positions that have been saved for a user.",
                    "nickname": "get_dashboard_positions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/dashboard_positions",
            "description": "Updates the dashboard positions for a user for a given context.  This allows\npositions for the dashboard cards and elsewhere to be customized on a per\nuser basis.\n\nThe asset string parameter should be in the format 'context_id', for example\n'course_42'",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update dashboard positions",
                    "notes": "Updates the dashboard positions for a user for a given context.  This allows\npositions for the dashboard cards and elsewhere to be customized on a per\nuser basis.\n\nThe asset string parameter should be in the format 'context_id', for example\n'course_42'",
                    "nickname": "update_dashboard_positions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}",
            "description": "Modify an existing user. To modify a user's login, see the documentation for logins.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a user",
                    "notes": "Modify an existing user. To modify a user's login, see the documentation for logins.",
                    "nickname": "edit_user",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[name]",
                            "description": "The full name of the user. This name will be used by teacher for grading.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[short_name]",
                            "description": "User's name as it will be displayed in discussions, messages, and comments.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[sortable_name]",
                            "description": "User's name as used to sort alphabetically in lists.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[time_zone]",
                            "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[email]",
                            "description": "The default email address of the user.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[locale]",
                            "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[avatar][token]",
                            "description": "A unique representation of the avatar record to assign as the user's\ncurrent avatar. This token can be obtained from the user avatars endpoint.\nThis supersedes the user [avatar] [url] argument, and if both are included\nthe url will be ignored. Note: this is an internal representation and is\nsubject to change without notice. It should be consumed with this api\nendpoint and used in the user update endpoint, and should not be\nconstructed by the client.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[avatar][url]",
                            "description": "To set the user's avatar to point to an external url, do not include a\ntoken and instead pass the url here. Warning: For maximum compatibility,\nplease use 128 px square images.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[avatar][state]",
                            "description": "To set the state of user's avatar. Only valid for account administrator.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "none",
                                "submitted",
                                "approved",
                                "locked",
                                "reported",
                                "re_reported"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "user[title]",
                            "description": "Sets a title on the user profile. (See {api:ProfileController#settings Get user profile}.)\nProfiles must be enabled on the root account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[bio]",
                            "description": "Sets a bio on the user profile. (See {api:ProfileController#settings Get user profile}.)\nProfiles must be enabled on the root account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[pronouns]",
                            "description": "Sets pronouns on the user profile.\nPassing an empty string will empty the user's pronouns\nOnly Available Pronouns set on the root account are allowed\nAdding and changing pronouns must be enabled on the root account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "user[event]",
                            "description": "Suspends or unsuspends all logins for this user that the calling user\nhas permission to",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "suspend",
                                "unsuspend"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/sessions",
            "description": "Terminates all sessions for a user. This includes all browser-based\nsessions and all access tokens, including manually generated ones.\nThe user can immediately re-authenticate to access Canvas again if\nthey have the current credentials. All integrations will need to\nbe re-authorized.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Terminate all user sessions",
                    "notes": "Terminates all sessions for a user. This includes all browser-based\nsessions and all access tokens, including manually generated ones.\nThe user can immediately re-authenticate to access Canvas again if\nthey have the current credentials. All integrations will need to\nbe re-authorized.",
                    "nickname": "terminate_all_user_sessions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/merge_into/{destination_user_id}",
            "description": "Merge a user into another user.\nTo merge users, the caller must have permissions to manage both users. This\nshould be considered irreversible. This will delete the user and move all\nthe data into the destination user.\n\nUser merge details and caveats:\nThe from_user is the user that was deleted in the user_merge process.\nThe destination_user is the user that remains, that is being split.\n\nAvatars:\nWhen both users have avatars, only the destination_users avatar will remain.\nWhen one user has an avatar, will it will end up on the destination_user.\n\nTerms of Use:\nIf either user has accepted terms of use, it will be be left as accepted.\n\nCommunication Channels:\nAll unique communication channels moved to the destination_user.\nAll notification preferences are moved to the destination_user.\n\nEnrollments:\nAll unique enrollments are moved to the destination_user.\nWhen there is an enrollment that would end up making it so that a user would\nbe observing themselves, the enrollment is not moved over.\nEverything that is tied to the from_user at the course level relating to the\nenrollment is also moved to the destination_user.\n\nSubmissions:\nAll submissions are moved to the destination_user. If there are enrollments\nfor both users in the same course, we prefer submissions that have grades\nthen submissions that have work in them, and if there are no grades or no\nwork, they are not moved.\n\nOther notes:\nAccess Tokens are moved on merge.\nConversations are moved on merge.\nFavorites are moved on merge.\nCourses will commonly use LTI tools. LTI tools reference the user with IDs\nthat are stored on a user object. Merging users deletes one user and moves\nall records from the deleted user to the destination_user. These IDs are\nkept for all enrollments, group_membership, and account_users for the\nfrom_user at the time of the merge. When the destination_user launches an\nLTI tool from a course that used to be the from_user's, it doesn't appear as\na new user to the tool provider. Instead it will send the stored ids. The\ndestination_user's LTI IDs remain as they were for the courses that they\noriginally had. Future enrollments for the destination_user will use the IDs\nthat are on the destination_user object. LTI IDs that are kept and tracked\nper context include lti_context_id, lti_id and uuid. APIs that return the\nLTI ids will return the one for the context that it is called for, except\nfor the user uuid. The user UUID will display the destination_users uuid,\nand when getting the uuid from an api that is in a context that was\nrecorded from a merge event, an additional attribute is added as past_uuid.\n\nWhen finding users by SIS ids in different accounts the\ndestination_account_id is required.\n\nThe account can also be identified by passing the domain in destination_account_id.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Merge user into another user",
                    "notes": "Merge a user into another user.\nTo merge users, the caller must have permissions to manage both users. This\nshould be considered irreversible. This will delete the user and move all\nthe data into the destination user.\n\nUser merge details and caveats:\nThe from_user is the user that was deleted in the user_merge process.\nThe destination_user is the user that remains, that is being split.\n\nAvatars:\nWhen both users have avatars, only the destination_users avatar will remain.\nWhen one user has an avatar, will it will end up on the destination_user.\n\nTerms of Use:\nIf either user has accepted terms of use, it will be be left as accepted.\n\nCommunication Channels:\nAll unique communication channels moved to the destination_user.\nAll notification preferences are moved to the destination_user.\n\nEnrollments:\nAll unique enrollments are moved to the destination_user.\nWhen there is an enrollment that would end up making it so that a user would\nbe observing themselves, the enrollment is not moved over.\nEverything that is tied to the from_user at the course level relating to the\nenrollment is also moved to the destination_user.\n\nSubmissions:\nAll submissions are moved to the destination_user. If there are enrollments\nfor both users in the same course, we prefer submissions that have grades\nthen submissions that have work in them, and if there are no grades or no\nwork, they are not moved.\n\nOther notes:\nAccess Tokens are moved on merge.\nConversations are moved on merge.\nFavorites are moved on merge.\nCourses will commonly use LTI tools. LTI tools reference the user with IDs\nthat are stored on a user object. Merging users deletes one user and moves\nall records from the deleted user to the destination_user. These IDs are\nkept for all enrollments, group_membership, and account_users for the\nfrom_user at the time of the merge. When the destination_user launches an\nLTI tool from a course that used to be the from_user's, it doesn't appear as\na new user to the tool provider. Instead it will send the stored ids. The\ndestination_user's LTI IDs remain as they were for the courses that they\noriginally had. Future enrollments for the destination_user will use the IDs\nthat are on the destination_user object. LTI IDs that are kept and tracked\nper context include lti_context_id, lti_id and uuid. APIs that return the\nLTI ids will return the one for the context that it is called for, except\nfor the user uuid. The user UUID will display the destination_users uuid,\nand when getting the uuid from an api that is in a context that was\nrecorded from a merge event, an additional attribute is added as past_uuid.\n\nWhen finding users by SIS ids in different accounts the\ndestination_account_id is required.\n\nThe account can also be identified by passing the domain in destination_account_id.",
                    "nickname": "merge_user_into_another_user_destination_user_id",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "destination_user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}",
            "description": "Merge a user into another user.\nTo merge users, the caller must have permissions to manage both users. This\nshould be considered irreversible. This will delete the user and move all\nthe data into the destination user.\n\nUser merge details and caveats:\nThe from_user is the user that was deleted in the user_merge process.\nThe destination_user is the user that remains, that is being split.\n\nAvatars:\nWhen both users have avatars, only the destination_users avatar will remain.\nWhen one user has an avatar, will it will end up on the destination_user.\n\nTerms of Use:\nIf either user has accepted terms of use, it will be be left as accepted.\n\nCommunication Channels:\nAll unique communication channels moved to the destination_user.\nAll notification preferences are moved to the destination_user.\n\nEnrollments:\nAll unique enrollments are moved to the destination_user.\nWhen there is an enrollment that would end up making it so that a user would\nbe observing themselves, the enrollment is not moved over.\nEverything that is tied to the from_user at the course level relating to the\nenrollment is also moved to the destination_user.\n\nSubmissions:\nAll submissions are moved to the destination_user. If there are enrollments\nfor both users in the same course, we prefer submissions that have grades\nthen submissions that have work in them, and if there are no grades or no\nwork, they are not moved.\n\nOther notes:\nAccess Tokens are moved on merge.\nConversations are moved on merge.\nFavorites are moved on merge.\nCourses will commonly use LTI tools. LTI tools reference the user with IDs\nthat are stored on a user object. Merging users deletes one user and moves\nall records from the deleted user to the destination_user. These IDs are\nkept for all enrollments, group_membership, and account_users for the\nfrom_user at the time of the merge. When the destination_user launches an\nLTI tool from a course that used to be the from_user's, it doesn't appear as\na new user to the tool provider. Instead it will send the stored ids. The\ndestination_user's LTI IDs remain as they were for the courses that they\noriginally had. Future enrollments for the destination_user will use the IDs\nthat are on the destination_user object. LTI IDs that are kept and tracked\nper context include lti_context_id, lti_id and uuid. APIs that return the\nLTI ids will return the one for the context that it is called for, except\nfor the user uuid. The user UUID will display the destination_users uuid,\nand when getting the uuid from an api that is in a context that was\nrecorded from a merge event, an additional attribute is added as past_uuid.\n\nWhen finding users by SIS ids in different accounts the\ndestination_account_id is required.\n\nThe account can also be identified by passing the domain in destination_account_id.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Merge user into another user",
                    "notes": "Merge a user into another user.\nTo merge users, the caller must have permissions to manage both users. This\nshould be considered irreversible. This will delete the user and move all\nthe data into the destination user.\n\nUser merge details and caveats:\nThe from_user is the user that was deleted in the user_merge process.\nThe destination_user is the user that remains, that is being split.\n\nAvatars:\nWhen both users have avatars, only the destination_users avatar will remain.\nWhen one user has an avatar, will it will end up on the destination_user.\n\nTerms of Use:\nIf either user has accepted terms of use, it will be be left as accepted.\n\nCommunication Channels:\nAll unique communication channels moved to the destination_user.\nAll notification preferences are moved to the destination_user.\n\nEnrollments:\nAll unique enrollments are moved to the destination_user.\nWhen there is an enrollment that would end up making it so that a user would\nbe observing themselves, the enrollment is not moved over.\nEverything that is tied to the from_user at the course level relating to the\nenrollment is also moved to the destination_user.\n\nSubmissions:\nAll submissions are moved to the destination_user. If there are enrollments\nfor both users in the same course, we prefer submissions that have grades\nthen submissions that have work in them, and if there are no grades or no\nwork, they are not moved.\n\nOther notes:\nAccess Tokens are moved on merge.\nConversations are moved on merge.\nFavorites are moved on merge.\nCourses will commonly use LTI tools. LTI tools reference the user with IDs\nthat are stored on a user object. Merging users deletes one user and moves\nall records from the deleted user to the destination_user. These IDs are\nkept for all enrollments, group_membership, and account_users for the\nfrom_user at the time of the merge. When the destination_user launches an\nLTI tool from a course that used to be the from_user's, it doesn't appear as\na new user to the tool provider. Instead it will send the stored ids. The\ndestination_user's LTI IDs remain as they were for the courses that they\noriginally had. Future enrollments for the destination_user will use the IDs\nthat are on the destination_user object. LTI IDs that are kept and tracked\nper context include lti_context_id, lti_id and uuid. APIs that return the\nLTI ids will return the one for the context that it is called for, except\nfor the user uuid. The user UUID will display the destination_users uuid,\nand when getting the uuid from an api that is in a context that was\nrecorded from a merge event, an additional attribute is added as past_uuid.\n\nWhen finding users by SIS ids in different accounts the\ndestination_account_id is required.\n\nThe account can also be identified by passing the domain in destination_account_id.",
                    "nickname": "merge_user_into_another_user_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "destination_account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "destination_user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/split",
            "description": "Merged users cannot be fully restored to their previous state, but this will\nattempt to split as much as possible to the previous state.\nTo split a merged user, the caller must have permissions to manage all of\nthe users logins. If there are multiple users that have been merged into one\nuser it will split each merge into a separate user.\nA split can only happen within 180 days of a user merge. A user merge deletes\nthe previous user and may be permanently deleted. In this scenario we create\na new user object and proceed to move as much as possible to the new user.\nThe user object will not have preserved the name or settings from the\nprevious user. Some items may have been deleted during a user_merge that\ncannot be restored, and/or the data has become stale because of other\nchanges to the objects since the time of the user_merge.\n\nSplit users details and caveats:\n\nThe from_user is the user that was deleted in the user_merge process.\nThe destination_user is the user that remains, that is being split.\n\nAvatars:\nWhen both users had avatars, both will be remain.\nWhen from_user had an avatar and destination_user did not have an avatar,\nthe destination_user's avatar will be deleted if it still matches what was\nthere are the time of the merge.\nIf the destination_user's avatar was changed at anytime after the merge, it\nwill remain on the destination user.\nIf the from_user had an avatar it will be there after split.\n\nTerms of Use:\nIf from_user had not accepted terms of use, they will be prompted again\nto accept terms of use after the split.\nIf the destination_user had not accepted terms of use, hey will be prompted\nagain to accept terms of use after the split.\nIf neither user had accepted the terms of use, but since the time of the\nmerge had accepted, both will be prompted to accept terms of use.\nIf both had accepted terms of use, this will remain.\n\nCommunication Channels:\nAll communication channels are restored to what they were prior to the\nmerge. If a communication channel was added after the merge, it will remain\non the destination_user.\nNotification preferences remain with the communication channels.\n\nEnrollments:\nAll enrollments from the time of the merge will be moved back to where they\nwere. Enrollments created since the time of the merge that were created by\nsis_import will go to the user that owns that sis_id used for the import.\nOther new enrollments will remain on the destination_user.\nEverything that is tied to the destination_user at the course level relating\nto an enrollment is moved to the from_user. When both users are in the same\ncourse prior to merge this can cause some unexpected items to move.\n\nSubmissions:\nUnlike other items tied to a course, submissions are explicitly recorded to\navoid problems with grades.\nAll submissions were moved are restored to the spot prior to merge.\nAll submission that were created in a course that was moved in enrollments\nare moved over to the from_user.\n\nOther notes:\nAccess Tokens are moved back on split.\nConversations are moved back on split.\nFavorites that existing at the time of merge are moved back on split.\nLTI ids are restored to how they were prior to merge.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Split merged users into separate users",
                    "notes": "Merged users cannot be fully restored to their previous state, but this will\nattempt to split as much as possible to the previous state.\nTo split a merged user, the caller must have permissions to manage all of\nthe users logins. If there are multiple users that have been merged into one\nuser it will split each merge into a separate user.\nA split can only happen within 180 days of a user merge. A user merge deletes\nthe previous user and may be permanently deleted. In this scenario we create\na new user object and proceed to move as much as possible to the new user.\nThe user object will not have preserved the name or settings from the\nprevious user. Some items may have been deleted during a user_merge that\ncannot be restored, and/or the data has become stale because of other\nchanges to the objects since the time of the user_merge.\n\nSplit users details and caveats:\n\nThe from_user is the user that was deleted in the user_merge process.\nThe destination_user is the user that remains, that is being split.\n\nAvatars:\nWhen both users had avatars, both will be remain.\nWhen from_user had an avatar and destination_user did not have an avatar,\nthe destination_user's avatar will be deleted if it still matches what was\nthere are the time of the merge.\nIf the destination_user's avatar was changed at anytime after the merge, it\nwill remain on the destination user.\nIf the from_user had an avatar it will be there after split.\n\nTerms of Use:\nIf from_user had not accepted terms of use, they will be prompted again\nto accept terms of use after the split.\nIf the destination_user had not accepted terms of use, hey will be prompted\nagain to accept terms of use after the split.\nIf neither user had accepted the terms of use, but since the time of the\nmerge had accepted, both will be prompted to accept terms of use.\nIf both had accepted terms of use, this will remain.\n\nCommunication Channels:\nAll communication channels are restored to what they were prior to the\nmerge. If a communication channel was added after the merge, it will remain\non the destination_user.\nNotification preferences remain with the communication channels.\n\nEnrollments:\nAll enrollments from the time of the merge will be moved back to where they\nwere. Enrollments created since the time of the merge that were created by\nsis_import will go to the user that owns that sis_id used for the import.\nOther new enrollments will remain on the destination_user.\nEverything that is tied to the destination_user at the course level relating\nto an enrollment is moved to the from_user. When both users are in the same\ncourse prior to merge this can cause some unexpected items to move.\n\nSubmissions:\nUnlike other items tied to a course, submissions are explicitly recorded to\navoid problems with grades.\nAll submissions were moved are restored to the spot prior to merge.\nAll submission that were created in a course that was moved in enrollments\nare moved over to the from_user.\n\nOther notes:\nAccess Tokens are moved back on split.\nConversations are moved back on split.\nFavorites that existing at the time of merge are moved back on split.\nLTI ids are restored to how they were prior to merge.",
                    "nickname": "split_merged_users_into_separate_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/pandata_events_token",
            "description": "Returns a jwt auth and props token that can be used to send events to\nPandata.\n\nNOTE: This is currently only available to the mobile developer keys.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Get a Pandata Events jwt token and its expiration date",
                    "notes": "Returns a jwt auth and props token that can be used to send events to\nPandata.\n\nNOTE: This is currently only available to the mobile developer keys.",
                    "nickname": "get_pandata_events_jwt_token_and_its_expiration_date",
                    "parameters": [
                        {
                            "paramType": "form",
                            "name": "app_key",
                            "description": "The pandata events appKey for this mobile app",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{id}/graded_submissions",
            "description": "",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a users most recently graded submissions",
                    "notes": "",
                    "nickname": "get_users_most_recently_graded_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assignment"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "only_current_enrollments",
                            "description": "Returns submissions for only currently active enrollments",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "only_published_assignments",
                            "description": "Returns submissions for only published assignments",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Submission"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/profile",
            "description": "Returns user profile data, including user id, name, and profile pic.\n\nWhen requesting the profile for the user accessing the API, the user's\ncalendar feed URL and LTI user id will be returned as well.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get user profile",
                    "notes": "Returns user profile data, including user id, name, and profile pic.\n\nWhen requesting the profile for the user accessing the API, the user's\ncalendar feed URL and LTI user id will be returned as well.",
                    "nickname": "get_user_profile",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Profile"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/avatars",
            "description": "A paginated list of the possible user avatar options that can be set with the user update endpoint. The response will be an array of avatar records. If the 'type' field is 'attachment', the record will include all the normal attachment json fields; otherwise it will include only the 'url' and 'display_name' fields. Additionally, all records will include a 'type' field and a 'token' field. The following explains each field in more detail\ntype:: [\"gravatar\"|\"attachment\"|\"no_pic\"] The type of avatar record, for categorization purposes.\nurl:: The url of the avatar\ntoken:: A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.\ndisplay_name:: A textual description of the avatar record\nid:: ['attachment' type only] the internal id of the attachment\ncontent-type:: ['attachment' type only] the content-type of the attachment\nfilename:: ['attachment' type only] the filename of the attachment\nsize:: ['attachment' type only] the size of the attachment",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List avatar options",
                    "notes": "A paginated list of the possible user avatar options that can be set with the user update endpoint. The response will be an array of avatar records. If the 'type' field is 'attachment', the record will include all the normal attachment json fields; otherwise it will include only the 'url' and 'display_name' fields. Additionally, all records will include a 'type' field and a 'token' field. The following explains each field in more detail\ntype:: [\"gravatar\"|\"attachment\"|\"no_pic\"] The type of avatar record, for categorization purposes.\nurl:: The url of the avatar\ntoken:: A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.\ndisplay_name:: A textual description of the avatar record\nid:: ['attachment' type only] the internal id of the attachment\ncontent-type:: ['attachment' type only] the content-type of the attachment\nfilename:: ['attachment' type only] the filename of the attachment\nsize:: ['attachment' type only] the size of the attachment",
                    "nickname": "list_avatar_options",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Avatar"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/page_views",
            "description": "Return a paginated list of the user's page view history in json format,\nsimilar to the available CSV download. Page views are returned in\ndescending order, newest to oldest.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List user page views",
                    "notes": "Return a paginated list of the user's page view history in json format,\nsimilar to the available CSV download. Page views are returned in\ndescending order, newest to oldest.",
                    "nickname": "list_user_page_views",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "start_time",
                            "description": "The beginning of the time range from which you want page views.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "end_time",
                            "description": "The end of the time range from which you want page views.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "PageView"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/custom_data",
            "description": "Store arbitrary user data as JSON.\n\nArbitrary JSON data can be stored for a User.\nA typical scenario would be an external site/service that registers users in Canvas\nand wants to capture additional info about them.  The part of the URL that follows\n+/custom_data/+ defines the scope of the request, and it reflects the structure of\nthe JSON data to be stored or retrieved.\n\nThe value +self+ may be used for +user_id+ to store data associated with the calling user.\nIn order to access another user's custom data, you must be an account administrator with\npermission to manage users.\n\nA namespace parameter, +ns+, is used to prevent custom_data collisions between\ndifferent apps.  This parameter is required for all custom_data requests.\n\nA request with Content-Type multipart/form-data or Content-Type\napplication/x-www-form-urlencoded can only be used to store strings.\n\nExample PUT with multipart/form-data data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/telephone' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data=555-1234' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"555-1234\"\n  }\n\nSubscopes (or, generated scopes) can also be specified by passing values to\n+data+[+subscope+].\n\nExample PUT specifying subscopes:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data[waist]=32in' \\\n    -F 'data[inseam]=34in' \\\n    -F 'data[chest]=40in' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"chest\": \"40in\",\n      \"waist\": \"32in\",\n      \"inseam\": \"34in\"\n    }\n  }\n\nFollowing such a request, subsets of the stored data to be retrieved directly from a subscope.\n\nExample {api:UsersController#get_custom_data GET} from a generated scope\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements/chest' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"40in\"\n  }\n\nIf you want to store more than just strings (i.e. numbers, arrays, hashes, true, false,\nand/or null), you must make a request with Content-Type application/json as in the following\nexample.\n\nExample PUT with JSON data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -H 'Content-Type: application/json' \\\n    -X PUT \\\n    -d '{\n          \"ns\": \"com.my-organization.canvas-app\",\n          \"data\": {\n            \"a-number\": 6.02e23,\n            \"a-bool\": true,\n            \"a-string\": \"true\",\n            \"a-hash\": {\"a\": {\"b\": \"ohai\"}},\n            \"an-array\": [1, \"two\", null, false]\n          }\n        }' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"a-number\": 6.02e+23,\n      \"a-bool\": true,\n      \"a-string\": \"true\",\n      \"a-hash\": {\n        \"a\": {\n          \"b\": \"ohai\"\n        }\n      },\n      \"an-array\": [1, \"two\", null, false]\n    }\n  }\n\nIf the data is an Object (as it is in the above example), then subsets of the data can\nbe accessed by including the object's (possibly nested) keys in the scope of a GET request.\n\nExample {api:UsersController#get_custom_data GET} with a generated scope:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/a-hash/a/b' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"ohai\"\n  }\n\n\nOn success, this endpoint returns an object containing the data that was stored.\n\nResponds with status code 200 if the scope already contained data, and it was overwritten\nby the data specified in the request.\n\nResponds with status code 201 if the scope was previously empty, and the data specified\nin the request was successfully stored there.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid, or if\nthe +data+ parameter is missing.\n\nResponds with status code 409 if the requested scope caused a conflict and data was not stored.\nThis happens when storing data at the requested scope would cause data at an outer scope\nto be lost.  e.g., if +/custom_data+ was +{\"fashion_app\": {\"hair\": \"blonde\"}}+, but\nyou tried to +`PUT /custom_data/fashion_app/hair/style -F data=buzz`+, then for the request\nto succeed,the value of +/custom_data/fashion_app/hair+ would have to become a hash, and its\nold string value would be lost.  In this situation, an error object is returned with the\nfollowing format:\n\n  !!!javascript\n  {\n    \"message\": \"write conflict for custom_data hash\",\n    \"conflict_scope\": \"fashion_app/hair\",\n    \"type_at_conflict\": \"String\",\n    \"value_at_conflict\": \"blonde\"\n  }",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Store custom data",
                    "notes": "Store arbitrary user data as JSON.\n\nArbitrary JSON data can be stored for a User.\nA typical scenario would be an external site/service that registers users in Canvas\nand wants to capture additional info about them.  The part of the URL that follows\n+/custom_data/+ defines the scope of the request, and it reflects the structure of\nthe JSON data to be stored or retrieved.\n\nThe value +self+ may be used for +user_id+ to store data associated with the calling user.\nIn order to access another user's custom data, you must be an account administrator with\npermission to manage users.\n\nA namespace parameter, +ns+, is used to prevent custom_data collisions between\ndifferent apps.  This parameter is required for all custom_data requests.\n\nA request with Content-Type multipart/form-data or Content-Type\napplication/x-www-form-urlencoded can only be used to store strings.\n\nExample PUT with multipart/form-data data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/telephone' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data=555-1234' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"555-1234\"\n  }\n\nSubscopes (or, generated scopes) can also be specified by passing values to\n+data+[+subscope+].\n\nExample PUT specifying subscopes:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data[waist]=32in' \\\n    -F 'data[inseam]=34in' \\\n    -F 'data[chest]=40in' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"chest\": \"40in\",\n      \"waist\": \"32in\",\n      \"inseam\": \"34in\"\n    }\n  }\n\nFollowing such a request, subsets of the stored data to be retrieved directly from a subscope.\n\nExample {api:UsersController#get_custom_data GET} from a generated scope\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements/chest' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"40in\"\n  }\n\nIf you want to store more than just strings (i.e. numbers, arrays, hashes, true, false,\nand/or null), you must make a request with Content-Type application/json as in the following\nexample.\n\nExample PUT with JSON data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -H 'Content-Type: application/json' \\\n    -X PUT \\\n    -d '{\n          \"ns\": \"com.my-organization.canvas-app\",\n          \"data\": {\n            \"a-number\": 6.02e23,\n            \"a-bool\": true,\n            \"a-string\": \"true\",\n            \"a-hash\": {\"a\": {\"b\": \"ohai\"}},\n            \"an-array\": [1, \"two\", null, false]\n          }\n        }' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"a-number\": 6.02e+23,\n      \"a-bool\": true,\n      \"a-string\": \"true\",\n      \"a-hash\": {\n        \"a\": {\n          \"b\": \"ohai\"\n        }\n      },\n      \"an-array\": [1, \"two\", null, false]\n    }\n  }\n\nIf the data is an Object (as it is in the above example), then subsets of the data can\nbe accessed by including the object's (possibly nested) keys in the scope of a GET request.\n\nExample {api:UsersController#get_custom_data GET} with a generated scope:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/a-hash/a/b' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"ohai\"\n  }\n\n\nOn success, this endpoint returns an object containing the data that was stored.\n\nResponds with status code 200 if the scope already contained data, and it was overwritten\nby the data specified in the request.\n\nResponds with status code 201 if the scope was previously empty, and the data specified\nin the request was successfully stored there.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid, or if\nthe +data+ parameter is missing.\n\nResponds with status code 409 if the requested scope caused a conflict and data was not stored.\nThis happens when storing data at the requested scope would cause data at an outer scope\nto be lost.  e.g., if +/custom_data+ was +{\"fashion_app\": {\"hair\": \"blonde\"}}+, but\nyou tried to +`PUT /custom_data/fashion_app/hair/style -F data=buzz`+, then for the request\nto succeed,the value of +/custom_data/fashion_app/hair+ would have to become a hash, and its\nold string value would be lost.  In this situation, an error object is returned with the\nfollowing format:\n\n  !!!javascript\n  {\n    \"message\": \"write conflict for custom_data hash\",\n    \"conflict_scope\": \"fashion_app/hair\",\n    \"type_at_conflict\": \"String\",\n    \"value_at_conflict\": \"blonde\"\n  }",
                    "nickname": "store_custom_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "ns",
                            "description": "The namespace under which to store the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "data",
                            "description": "The data you want to store for the user, at the specified scope.  If the data is\ncomposed of (possibly nested) JSON objects, scopes will be generated for the (nested)\nkeys (see examples).",
                            "type": "JSON",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/custom_data",
            "description": "Load custom user data.\n\nArbitrary JSON data can be stored for a User.  This API call\nretrieves that data for a (optional) given scope.\nSee {api:UsersController#set_custom_data Store Custom Data} for details and\nexamples.\n\nOn success, this endpoint returns an object containing the data that was requested.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid,\nor if the specified scope does not contain any data.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Load custom data",
                    "notes": "Load custom user data.\n\nArbitrary JSON data can be stored for a User.  This API call\nretrieves that data for a (optional) given scope.\nSee {api:UsersController#set_custom_data Store Custom Data} for details and\nexamples.\n\nOn success, this endpoint returns an object containing the data that was requested.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid,\nor if the specified scope does not contain any data.",
                    "nickname": "load_custom_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ns",
                            "description": "The namespace from which to retrieve the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/custom_data",
            "description": "Delete custom user data.\n\nArbitrary JSON data can be stored for a User.  This API call\ndeletes that data for a given scope.  Without a scope, all custom_data is deleted.\nSee {api:UsersController#set_custom_data Store Custom Data} for details and\nexamples of storage and retrieval.\n\nAs an example, we'll store some data, then delete a subset of it.\n\nExample {api:UsersController#set_custom_data PUT} with valid JSON data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data[fruit][apple]=so tasty' \\\n    -F 'data[fruit][kiwi]=a bit sour' \\\n    -F 'data[veggies][root][onion]=tear-jerking' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\",\n        \"kiwi\": \"a bit sour\"\n      },\n      \"veggies\": {\n        \"root\": {\n          \"onion\": \"tear-jerking\"\n        }\n      }\n    }\n  }\n\nExample DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/fruit/kiwi' \\\n    -X DELETE \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"a bit sour\"\n  }\n\nExample {api:UsersController#get_custom_data GET} following the above DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\"\n      },\n      \"veggies\": {\n        \"root\": {\n          \"onion\": \"tear-jerking\"\n        }\n      }\n    }\n  }\n\nNote that hashes left empty after a DELETE will get removed from the custom_data store.\nFor example, following the previous commands, if we delete /custom_data/veggies/root/onion,\nthen the entire /custom_data/veggies scope will be removed.\n\nExample DELETE that empties a parent scope:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/veggies/root/onion' \\\n    -X DELETE \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"tear-jerking\"\n  }\n\nExample {api:UsersController#get_custom_data GET} following the above DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\"\n      }\n    }\n  }\n\nOn success, this endpoint returns an object containing the data that was deleted.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid,\nor if the specified scope does not contain any data.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete custom data",
                    "notes": "Delete custom user data.\n\nArbitrary JSON data can be stored for a User.  This API call\ndeletes that data for a given scope.  Without a scope, all custom_data is deleted.\nSee {api:UsersController#set_custom_data Store Custom Data} for details and\nexamples of storage and retrieval.\n\nAs an example, we'll store some data, then delete a subset of it.\n\nExample {api:UsersController#set_custom_data PUT} with valid JSON data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data[fruit][apple]=so tasty' \\\n    -F 'data[fruit][kiwi]=a bit sour' \\\n    -F 'data[veggies][root][onion]=tear-jerking' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\",\n        \"kiwi\": \"a bit sour\"\n      },\n      \"veggies\": {\n        \"root\": {\n          \"onion\": \"tear-jerking\"\n        }\n      }\n    }\n  }\n\nExample DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/fruit/kiwi' \\\n    -X DELETE \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"a bit sour\"\n  }\n\nExample {api:UsersController#get_custom_data GET} following the above DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\"\n      },\n      \"veggies\": {\n        \"root\": {\n          \"onion\": \"tear-jerking\"\n        }\n      }\n    }\n  }\n\nNote that hashes left empty after a DELETE will get removed from the custom_data store.\nFor example, following the previous commands, if we delete /custom_data/veggies/root/onion,\nthen the entire /custom_data/veggies scope will be removed.\n\nExample DELETE that empties a parent scope:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/veggies/root/onion' \\\n    -X DELETE \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"tear-jerking\"\n  }\n\nExample {api:UsersController#get_custom_data GET} following the above DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\"\n      }\n    }\n  }\n\nOn success, this endpoint returns an object containing the data that was deleted.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid,\nor if the specified scope does not contain any data.",
                    "nickname": "delete_custom_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ns",
                            "description": "The namespace from which to delete the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/self/course_nicknames",
            "description": "Returns all course nicknames you have set.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List course nicknames",
                    "notes": "Returns all course nicknames you have set.",
                    "nickname": "list_course_nicknames",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "CourseNickname"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/self/course_nicknames/{course_id}",
            "description": "Returns the nickname for a specific course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get course nickname",
                    "notes": "Returns the nickname for a specific course.",
                    "nickname": "get_course_nickname",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CourseNickname"
                }
            ]
        },
        {
            "path": "/v1/users/self/course_nicknames/{course_id}",
            "description": "Set a nickname for the given course. This will replace the course's name\nin output of API calls you make subsequently, as well as in selected\nplaces in the Canvas web user interface.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Set course nickname",
                    "notes": "Set a nickname for the given course. This will replace the course's name\nin output of API calls you make subsequently, as well as in selected\nplaces in the Canvas web user interface.",
                    "nickname": "set_course_nickname",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "nickname",
                            "description": "The nickname to set.  It must be non-empty and shorter than 60 characters.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CourseNickname"
                }
            ]
        },
        {
            "path": "/v1/users/self/course_nicknames/{course_id}",
            "description": "Remove the nickname for the given course.\nSubsequent course API calls will return the actual name for the course.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove course nickname",
                    "notes": "Remove the nickname for the given course.\nSubsequent course API calls will return the actual name for the course.",
                    "nickname": "remove_course_nickname",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "CourseNickname"
                }
            ]
        },
        {
            "path": "/v1/users/self/course_nicknames",
            "description": "Remove all stored course nicknames.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Clear course nicknames",
                    "notes": "Remove all stored course nicknames.",
                    "nickname": "clear_course_nicknames",
                    "parameters": [],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observees",
            "description": "A paginated list of the users that the given user is observing.\n\n*Note:* all users are allowed to list their own observees. Administrators can list\nother users' observees.\n\nThe returned observees will include an attribute \"observation_link_root_account_ids\", a list\nof ids for the root accounts the observer and observee are linked on. The observer will only be able to\nobserve in courses associated with these root accounts.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List observees",
                    "notes": "A paginated list of the users that the given user is observing.\n\n*Note:* all users are allowed to list their own observees. Administrators can list\nother users' observees.\n\nThe returned observees will include an attribute \"observation_link_root_account_ids\", a list\nof ids for the root accounts the observer and observee are linked on. The observer will only be able to\nobserve in courses associated with these root accounts.",
                    "nickname": "list_observees",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"avatar_url\": Optionally include avatar_url.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "avatar_url"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observers",
            "description": "A paginated list of the observers of a given user.\n\n*Note:* all users are allowed to list their own observers. Administrators can list\nother users' observers.\n\nThe returned observers will include an attribute \"observation_link_root_account_ids\", a list\nof ids for the root accounts the observer and observee are linked on. The observer will only be able to\nobserve in courses associated with these root accounts.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List observers",
                    "notes": "A paginated list of the observers of a given user.\n\n*Note:* all users are allowed to list their own observers. Administrators can list\nother users' observers.\n\nThe returned observers will include an attribute \"observation_link_root_account_ids\", a list\nof ids for the root accounts the observer and observee are linked on. The observer will only be able to\nobserve in courses associated with these root accounts.",
                    "nickname": "list_observers",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"avatar_url\": Optionally include avatar_url.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "avatar_url"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "User"
                    }
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observees",
            "description": "Register the given user to observe another user, given the observee's credentials.\n\n*Note:* all users are allowed to add their own observees, given the observee's\ncredentials or access token are provided. Administrators can add observees given credentials, access token or\nthe {api:UserObserveesController#update observee's id}.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Add an observee with credentials",
                    "notes": "Register the given user to observe another user, given the observee's credentials.\n\n*Note:* all users are allowed to add their own observees, given the observee's\ncredentials or access token are provided. Administrators can add observees given credentials, access token or\nthe {api:UserObserveesController#update observee's id}.",
                    "nickname": "add_observee_with_credentials",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "observee[unique_id]",
                            "description": "The login id for the user to observe.  Required if access_token is omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "observee[password]",
                            "description": "The password for the user to observe. Required if access_token is omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "access_token",
                            "description": "The access token for the user to observe.  Required if <tt>observee[unique_id]</tt> or <tt>observee[password]</tt> are omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "pairing_code",
                            "description": "A generated pairing code for the user to observe. Required if the Observer pairing code feature flag is enabled",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "root_account_id",
                            "description": "The ID for the root account to associate with the observation link.\nDefaults to the current domain account.\nIf 'all' is specified, a link will be created for each root account associated\nto both the observer and observee.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observees/{observee_id}",
            "description": "Gets information about an observed user.\n\n*Note:* all users are allowed to view their own observees.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an observee",
                    "notes": "Gets information about an observed user.\n\n*Note:* all users are allowed to view their own observees.",
                    "nickname": "show_observee",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "observee_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observers/{observer_id}",
            "description": "Gets information about an observer.\n\n*Note:* all users are allowed to view their own observers.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show an observer",
                    "notes": "Gets information about an observer.\n\n*Note:* all users are allowed to view their own observers.",
                    "nickname": "show_observer",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "observer_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observees/{observee_id}",
            "description": "Registers a user as being observed by the given user.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Add an observee",
                    "notes": "Registers a user as being observed by the given user.",
                    "nickname": "add_observee",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "observee_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "root_account_id",
                            "description": "The ID for the root account to associate with the observation link.\nIf not specified, a link will be created for each root account associated\nto both the observer and observee.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observees/{observee_id}",
            "description": "Unregisters a user as being observed by the given user.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Remove an observee",
                    "notes": "Unregisters a user as being observed by the given user.",
                    "nickname": "remove_observee",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "observee_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "root_account_id",
                            "description": "If specified, only removes the link for the given root account",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "User"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/observer_pairing_codes",
            "description": "If the user is a student, will generate a code to be used with self registration\nor observees APIs to link another user to this student.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create observer pairing code",
                    "notes": "If the user is a student, will generate a code to be used with self registration\nor observees APIs to link another user to this student.",
                    "nickname": "create_observer_pairing_code",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "PairingCode"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/tabs",
            "description": "Returns a paginated list of navigation tabs available in the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List available tabs for a course or group",
                    "notes": "Returns a paginated list of navigation tabs available in the current context.",
                    "nickname": "list_available_tabs_for_course_or_group_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's\n  home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context\n  in a canvas_for_elementary-enabled account or sub-account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_subject_tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/tabs",
            "description": "Returns a paginated list of navigation tabs available in the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List available tabs for a course or group",
                    "notes": "Returns a paginated list of navigation tabs available in the current context.",
                    "nickname": "list_available_tabs_for_course_or_group_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's\n  home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context\n  in a canvas_for_elementary-enabled account or sub-account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_subject_tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/groups/{group_id}/tabs",
            "description": "Returns a paginated list of navigation tabs available in the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List available tabs for a course or group",
                    "notes": "Returns a paginated list of navigation tabs available in the current context.",
                    "nickname": "list_available_tabs_for_course_or_group_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "group_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's\n  home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context\n  in a canvas_for_elementary-enabled account or sub-account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_subject_tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/users/{user_id}/tabs",
            "description": "Returns a paginated list of navigation tabs available in the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List available tabs for a course or group",
                    "notes": "Returns a paginated list of navigation tabs available in the current context.",
                    "nickname": "list_available_tabs_for_course_or_group_users",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's\n  home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context\n  in a canvas_for_elementary-enabled account or sub-account.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "course_subject_tabs"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/tabs/{tab_id}",
            "description": "Home and Settings tabs are not manageable, and can't be hidden or moved\n\nReturns a tab object",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a tab for a course",
                    "notes": "Home and Settings tabs are not manageable, and can't be hidden or moved\n\nReturns a tab object",
                    "nickname": "update_tab_for_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "tab_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "position",
                            "description": "The new position of the tab, 1-based",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "hidden",
                            "description": "no description",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Tab"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
            "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Submit an assignment",
                    "notes": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
                    "nickname": "submit_assignment_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[text_comment]",
                            "description": "Include a textual comment with the submission.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[submission_type]",
                            "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored.\n\n\"basic_lti_launch\" requires the assignment submission_type \"online\" or \"external_tool\"",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "online_text_entry",
                                "online_url",
                                "online_upload",
                                "media_recording",
                                "basic_lti_launch",
                                "student_annotation"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "submission[body]",
                            "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[url]",
                            "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\" or \"basic_lti_launch\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[file_ids]",
                            "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\".",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "submission[media_comment_id]",
                            "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[media_comment_type]",
                            "description": "The type of media comment being submitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "submission[user_id]",
                            "description": "Submit on behalf of the given user. Requires grading permission.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[annotatable_attachment_id]",
                            "description": "The Attachment ID of the document being annotated. This should match\nthe annotatable_attachment_id on the assignment.\n\nRequires a submission_type of \"student_annotation\".",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[submitted_at]",
                            "description": "Choose the time the submission is listed as submitted at.  Requires grading permission.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
            "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Submit an assignment",
                    "notes": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
                    "nickname": "submit_assignment_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[text_comment]",
                            "description": "Include a textual comment with the submission.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[submission_type]",
                            "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored.\n\n\"basic_lti_launch\" requires the assignment submission_type \"online\" or \"external_tool\"",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "online_text_entry",
                                "online_url",
                                "online_upload",
                                "media_recording",
                                "basic_lti_launch",
                                "student_annotation"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "submission[body]",
                            "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[url]",
                            "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\" or \"basic_lti_launch\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[file_ids]",
                            "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\".",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "submission[media_comment_id]",
                            "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[media_comment_type]",
                            "description": "The type of media comment being submitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "submission[user_id]",
                            "description": "Submit on behalf of the given user. Requires grading permission.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[annotatable_attachment_id]",
                            "description": "The Attachment ID of the document being annotated. This should match\nthe annotatable_attachment_id on the assignment.\n\nRequires a submission_type of \"student_annotation\".",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[submitted_at]",
                            "description": "Choose the time the submission is listed as submitted at.  Requires grading permission.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
            "description": "A paginated list of all existing submissions for an assignment.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignment submissions",
                    "notes": "A paginated list of all existing submissions for an assignment.",
                    "nickname": "list_assignment_submissions_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group.  \"group\" will add group_id and group_name.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "assignment",
                                "visibility",
                                "course",
                                "user",
                                "group",
                                "read_status"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "grouped",
                            "description": "If this argument is true, the response will be grouped by student groups.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "assignment_id",
                            "description": "The unique identifier for the assignment.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The id of the user who submitted the assignment.",
                            "deprecated": false
                        },
                        {
                            "name": "grader_id",
                            "description": "The id of the user who graded the submission. This will be null for submissions that haven't been graded yet. It will be a positive number if a real user has graded the submission and a negative number if the submission was graded by a process (e.g. Quiz autograder and autograding LTI tools).  Specifically autograded quizzes set grader_id to the negative of the quiz id.  Submissions autograded by LTI tools set grader_id to the negative of the tool id.",
                            "deprecated": false
                        },
                        {
                            "name": "canvadoc_document_id",
                            "description": "The id for the canvadoc document associated with this submission, if it was a file upload.",
                            "deprecated": false
                        },
                        {
                            "name": "submitted_at",
                            "description": "The timestamp when the assignment was submitted, if an actual submission has been made.",
                            "deprecated": false
                        },
                        {
                            "name": "score",
                            "description": "The raw score for the assignment submission.",
                            "deprecated": false
                        },
                        {
                            "name": "attempt",
                            "description": "If multiple submissions have been made, this is the attempt number.",
                            "deprecated": false
                        },
                        {
                            "name": "body",
                            "description": "The content of the submission, if it was submitted directly in a text field.",
                            "deprecated": false
                        },
                        {
                            "name": "grade",
                            "description": "The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).",
                            "deprecated": false
                        },
                        {
                            "name": "grade_matches_current_submission",
                            "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded.",
                            "deprecated": false
                        },
                        {
                            "name": "preview_url",
                            "description": "Link to the URL in canvas where the submission can be previewed. This will require the user to log in.",
                            "deprecated": false
                        },
                        {
                            "name": "redo_request",
                            "description": "If the submission was reassigned",
                            "deprecated": false
                        },
                        {
                            "name": "url",
                            "description": "If the submission was made as a URL.",
                            "deprecated": false
                        },
                        {
                            "name": "late",
                            "description": "Whether the submission was made after the applicable due date.",
                            "deprecated": false
                        },
                        {
                            "name": "assignment_visible",
                            "description": "Whether this assignment is visible to the user who submitted the assignment.",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current status of the submission. Possible values: “submitted”, “unsubmitted”, “graded”, “pending_review”",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Submission"
                    }
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
            "description": "A paginated list of all existing submissions for an assignment.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List assignment submissions",
                    "notes": "A paginated list of all existing submissions for an assignment.",
                    "nickname": "list_assignment_submissions_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group.  \"group\" will add group_id and group_name.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "assignment",
                                "visibility",
                                "course",
                                "user",
                                "group",
                                "read_status"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "grouped",
                            "description": "If this argument is true, the response will be grouped by student groups.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "assignment_id",
                            "description": "The unique identifier for the assignment.",
                            "deprecated": false
                        },
                        {
                            "name": "user_id",
                            "description": "The id of the user who submitted the assignment.",
                            "deprecated": false
                        },
                        {
                            "name": "grader_id",
                            "description": "The id of the user who graded the submission. This will be null for submissions that haven't been graded yet. It will be a positive number if a real user has graded the submission and a negative number if the submission was graded by a process (e.g. Quiz autograder and autograding LTI tools).  Specifically autograded quizzes set grader_id to the negative of the quiz id.  Submissions autograded by LTI tools set grader_id to the negative of the tool id.",
                            "deprecated": false
                        },
                        {
                            "name": "canvadoc_document_id",
                            "description": "The id for the canvadoc document associated with this submission, if it was a file upload.",
                            "deprecated": false
                        },
                        {
                            "name": "submitted_at",
                            "description": "The timestamp when the assignment was submitted, if an actual submission has been made.",
                            "deprecated": false
                        },
                        {
                            "name": "score",
                            "description": "The raw score for the assignment submission.",
                            "deprecated": false
                        },
                        {
                            "name": "attempt",
                            "description": "If multiple submissions have been made, this is the attempt number.",
                            "deprecated": false
                        },
                        {
                            "name": "body",
                            "description": "The content of the submission, if it was submitted directly in a text field.",
                            "deprecated": false
                        },
                        {
                            "name": "grade",
                            "description": "The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).",
                            "deprecated": false
                        },
                        {
                            "name": "grade_matches_current_submission",
                            "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded.",
                            "deprecated": false
                        },
                        {
                            "name": "preview_url",
                            "description": "Link to the URL in canvas where the submission can be previewed. This will require the user to log in.",
                            "deprecated": false
                        },
                        {
                            "name": "redo_request",
                            "description": "If the submission was reassigned",
                            "deprecated": false
                        },
                        {
                            "name": "url",
                            "description": "If the submission was made as a URL.",
                            "deprecated": false
                        },
                        {
                            "name": "late",
                            "description": "Whether the submission was made after the applicable due date.",
                            "deprecated": false
                        },
                        {
                            "name": "assignment_visible",
                            "description": "Whether this assignment is visible to the user who submitted the assignment.",
                            "deprecated": false
                        },
                        {
                            "name": "workflow_state",
                            "description": "The current status of the submission. Possible values: “submitted”, “unsubmitted”, “graded”, “pending_review”",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Submission"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/students/submissions",
            "description": "A paginated list of all existing submissions for a given set of students and assignments.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List submissions for multiple assignments",
                    "notes": "A paginated list of all existing submissions for a given set of students and assignments.",
                    "nickname": "list_submissions_for_multiple_assignments_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "student_ids",
                            "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "grouped",
                            "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "post_to_sis",
                            "description": "If this argument is set to true, the response will only include\nsubmissions for assignments that have the post_to_sis flag set to true and\nuser enrollments that were added through sis.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "submitted_since",
                            "description": "If this argument is set, the response will only include submissions that\nwere submitted after the specified date_time. This will exclude\nsubmissions that do not have a submitted_at which will exclude unsubmitted\nsubmissions.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "graded_since",
                            "description": "If this argument is set, the response will only include submissions that\nwere graded after the specified date_time. This will exclude\nsubmissions that have not been graded.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "The id of the grading period in which submissions are being requested\n(Requires grading periods to exist on the account)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "workflow_state",
                            "description": "The current status of the submission",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submitted",
                                "unsubmitted",
                                "graded",
                                "pending_review"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "The current state of the enrollments. If omitted will include all\nenrollments that are not deleted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "concluded"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "state_based_on_date",
                            "description": "If omitted it is set to true. When set to false it will ignore the effective\nstate of the student enrollments and use the workflow_state for the\nenrollments. The argument is ignored unless enrollment_state argument is\nalso passed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The order submissions will be returned in.  Defaults to \"id\".  Doesn't\naffect results for \"grouped\" mode.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "id",
                                "graded_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order_direction",
                            "description": "Determines whether ordered results are returned in ascending or descending\norder.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "assignment",
                                "total_scores",
                                "visibility",
                                "course",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/students/submissions",
            "description": "A paginated list of all existing submissions for a given set of students and assignments.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List submissions for multiple assignments",
                    "notes": "A paginated list of all existing submissions for a given set of students and assignments.",
                    "nickname": "list_submissions_for_multiple_assignments_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "student_ids",
                            "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "grouped",
                            "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "post_to_sis",
                            "description": "If this argument is set to true, the response will only include\nsubmissions for assignments that have the post_to_sis flag set to true and\nuser enrollments that were added through sis.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "submitted_since",
                            "description": "If this argument is set, the response will only include submissions that\nwere submitted after the specified date_time. This will exclude\nsubmissions that do not have a submitted_at which will exclude unsubmitted\nsubmissions.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "graded_since",
                            "description": "If this argument is set, the response will only include submissions that\nwere graded after the specified date_time. This will exclude\nsubmissions that have not been graded.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grading_period_id",
                            "description": "The id of the grading period in which submissions are being requested\n(Requires grading periods to exist on the account)",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "workflow_state",
                            "description": "The current status of the submission",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submitted",
                                "unsubmitted",
                                "graded",
                                "pending_review"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "enrollment_state",
                            "description": "The current state of the enrollments. If omitted will include all\nenrollments that are not deleted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "concluded"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "state_based_on_date",
                            "description": "If omitted it is set to true. When set to false it will ignore the effective\nstate of the student enrollments and use the workflow_state for the\nenrollments. The argument is ignored unless enrollment_state argument is\nalso passed.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "order",
                            "description": "The order submissions will be returned in.  Defaults to \"id\".  Doesn't\naffect results for \"grouped\" mode.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "id",
                                "graded_at"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "order_direction",
                            "description": "Determines whether ordered results are returned in ascending or descending\norder.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "assignment",
                                "total_scores",
                                "visibility",
                                "course",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
            "description": "Get a single submission, based on user id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single submission",
                    "notes": "Get a single submission, based on user id.",
                    "nickname": "get_single_submission_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "full_rubric_assessment",
                                "visibility",
                                "course",
                                "user",
                                "read_status"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
            "description": "Get a single submission, based on user id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single submission",
                    "notes": "Get a single submission, based on user id.",
                    "nickname": "get_single_submission_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "full_rubric_assessment",
                                "visibility",
                                "course",
                                "user",
                                "read_status"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}",
            "description": "Get a single submission, based on the submission's anonymous id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single submission by anonymous id",
                    "notes": "Get a single submission, based on the submission's anonymous id.",
                    "nickname": "get_single_submission_by_anonymous_id_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "anonymous_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "full_rubric_assessment",
                                "visibility",
                                "course",
                                "user",
                                "read_status"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}",
            "description": "Get a single submission, based on the submission's anonymous id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single submission by anonymous id",
                    "notes": "Get a single submission, based on the submission's anonymous id.",
                    "nickname": "get_single_submission_by_anonymous_id_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "anonymous_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the group.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission_history",
                                "submission_comments",
                                "rubric_assessment",
                                "full_rubric_assessment",
                                "visibility",
                                "course",
                                "user",
                                "read_status"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files",
            "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
                    "nickname": "upload_file_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files",
            "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
                    "nickname": "upload_file_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
            "description": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Grade or comment on a submission",
                    "notes": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
                    "nickname": "grade_or_comment_on_submission_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[text_comment]",
                            "description": "Add a textual comment to the submission.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[attempt]",
                            "description": "The attempt number (starts at 1) to associate the comment with.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[group_comment]",
                            "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_id]",
                            "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_type]",
                            "description": "The type of media comment being added.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "comment[file_ids]",
                            "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "include[visibility]",
                            "description": "Whether this assignment is visible to the owner of the submission",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "prefer_points_over_scheme",
                            "description": "Treat posted_grade as points if the value matches a grading scheme value",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[posted_grade]",
                            "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[excuse]",
                            "description": "Sets the \"excused\" status of an assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[late_policy_status]",
                            "description": "Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.\n  NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[seconds_late_override]",
                            "description": "Sets the seconds late if late policy status is \"late\"",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_assessment",
                            "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nThe rating id for the row.\n  rubric_assessment[criterion_id][rating_id]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n        { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n        { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n        { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
            "description": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Grade or comment on a submission",
                    "notes": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
                    "nickname": "grade_or_comment_on_submission_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[text_comment]",
                            "description": "Add a textual comment to the submission.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[attempt]",
                            "description": "The attempt number (starts at 1) to associate the comment with.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[group_comment]",
                            "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_id]",
                            "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_type]",
                            "description": "The type of media comment being added.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "comment[file_ids]",
                            "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "include[visibility]",
                            "description": "Whether this assignment is visible to the owner of the submission",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "prefer_points_over_scheme",
                            "description": "Treat posted_grade as points if the value matches a grading scheme value",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[posted_grade]",
                            "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[excuse]",
                            "description": "Sets the \"excused\" status of an assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[late_policy_status]",
                            "description": "Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.\n  NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[seconds_late_override]",
                            "description": "Sets the seconds late if late policy status is \"late\"",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_assessment",
                            "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nThe rating id for the row.\n  rubric_assessment[criterion_id][rating_id]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n        { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n        { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n        { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}",
            "description": "Comment on and/or update the grading for a student's assignment submission,\nfetching the submission by anonymous id (instead of user id). If any\nsubmission or rubric_assessment arguments are provided, the user must\nhave permission to manage grades in the appropriate context (course or\nsection).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Grade or comment on a submission by anonymous id",
                    "notes": "Comment on and/or update the grading for a student's assignment submission,\nfetching the submission by anonymous id (instead of user id). If any\nsubmission or rubric_assessment arguments are provided, the user must\nhave permission to manage grades in the appropriate context (course or\nsection).",
                    "nickname": "grade_or_comment_on_submission_by_anonymous_id_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "anonymous_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[text_comment]",
                            "description": "Add a textual comment to the submission.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[group_comment]",
                            "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_id]",
                            "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_type]",
                            "description": "The type of media comment being added.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "comment[file_ids]",
                            "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "include[visibility]",
                            "description": "Whether this assignment is visible to the owner of the submission",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[posted_grade]",
                            "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[excuse]",
                            "description": "Sets the \"excused\" status of an assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[late_policy_status]",
                            "description": "Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.\n  NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[seconds_late_override]",
                            "description": "Sets the seconds late if late policy status is \"late\"",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_assessment",
                            "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nThe rating id for the row.\n  rubric_assessment[criterion_id][rating_id]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n        { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n        { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n        { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}",
            "description": "Comment on and/or update the grading for a student's assignment submission,\nfetching the submission by anonymous id (instead of user id). If any\nsubmission or rubric_assessment arguments are provided, the user must\nhave permission to manage grades in the appropriate context (course or\nsection).",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Grade or comment on a submission by anonymous id",
                    "notes": "Comment on and/or update the grading for a student's assignment submission,\nfetching the submission by anonymous id (instead of user id). If any\nsubmission or rubric_assessment arguments are provided, the user must\nhave permission to manage grades in the appropriate context (course or\nsection).",
                    "nickname": "grade_or_comment_on_submission_by_anonymous_id_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "anonymous_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[text_comment]",
                            "description": "Add a textual comment to the submission.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[group_comment]",
                            "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_id]",
                            "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment[media_comment_type]",
                            "description": "The type of media comment being added.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "comment[file_ids]",
                            "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "include[visibility]",
                            "description": "Whether this assignment is visible to the owner of the submission",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[posted_grade]",
                            "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[excuse]",
                            "description": "Sets the \"excused\" status of an assignment.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[late_policy_status]",
                            "description": "Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.\n  NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "submission[seconds_late_override]",
                            "description": "Sets the seconds late if late policy status is \"late\"",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_assessment",
                            "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nThe rating id for the row.\n  rubric_assessment[criterion_id][rating_id]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n        { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n        { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n        { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students",
            "description": "A paginated list of students eligible to submit the assignment. The caller must have permission to view grades.\n\nIf anonymous grading is enabled for the current assignment and the allow_new_anonymous_id parameter is passed,\nthe returned data will not include any values identifying the student, but will instead include an\nassignment-specific anonymous ID for each student.\n\nSection-limited instructors will only see students in their own sections.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List gradeable students",
                    "notes": "A paginated list of students eligible to submit the assignment. The caller must have permission to view grades.\n\nIf anonymous grading is enabled for the current assignment and the allow_new_anonymous_id parameter is passed,\nthe returned data will not include any values identifying the student, but will instead include an\nassignment-specific anonymous ID for each student.\n\nSection-limited instructors will only see students in their own sections.",
                    "nickname": "list_gradeable_students",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "UserDisplay if anonymous grading is not enabled for the assignment or if the allow_new_anonymous_id parameter is not true"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/gradeable_students",
            "description": "A paginated list of students eligible to submit a list of assignments. The caller must have\npermission to view grades for the requested course.\n\nSection-limited instructors will only see students in their own sections.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List multiple assignments gradeable students",
                    "notes": "A paginated list of students eligible to submit a list of assignments. The caller must have\npermission to view grades for the requested course.\n\nSection-limited instructors will only see students in their own sections.",
                    "nickname": "list_multiple_assignments_gradeable_students",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "assignment_ids",
                            "description": "Assignments being requested",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/submissions/update_grades",
            "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Grade or comment on multiple submissions",
                    "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                    "nickname": "grade_or_comment_on_multiple_submissions_courses_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][posted_grade]",
                            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][excuse]",
                            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][rubric_assessment]",
                            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][text_comment]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][group_comment]",
                            "description": "no description",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_id]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_type]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][file_ids]",
                            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<assignment_id>][<student_id>]",
                            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades",
            "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Grade or comment on multiple submissions",
                    "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                    "nickname": "grade_or_comment_on_multiple_submissions_courses_assignments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][posted_grade]",
                            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][excuse]",
                            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][rubric_assessment]",
                            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][text_comment]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][group_comment]",
                            "description": "no description",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_id]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_type]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][file_ids]",
                            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<assignment_id>][<student_id>]",
                            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/submissions/update_grades",
            "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Grade or comment on multiple submissions",
                    "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                    "nickname": "grade_or_comment_on_multiple_submissions_sections_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][posted_grade]",
                            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][excuse]",
                            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][rubric_assessment]",
                            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][text_comment]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][group_comment]",
                            "description": "no description",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_id]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_type]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][file_ids]",
                            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<assignment_id>][<student_id>]",
                            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades",
            "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Grade or comment on multiple submissions",
                    "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                    "nickname": "grade_or_comment_on_multiple_submissions_sections_assignments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][posted_grade]",
                            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][excuse]",
                            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][rubric_assessment]",
                            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "RubricAssessment",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][text_comment]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][group_comment]",
                            "description": "no description",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_id]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][media_comment_type]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "audio",
                                "video"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<student_id>][file_ids]",
                            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "grade_data[<assignment_id>][<student_id>]",
                            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read",
            "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark submission as read",
                    "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_submission_as_read_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read",
            "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark submission as read",
                    "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_submission_as_read_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read",
            "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark submission as unread",
                    "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_submission_as_unread_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read",
            "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Mark submission as unread",
                    "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "mark_submission_as_unread_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read",
            "description": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get rubric assessments read state",
                    "notes": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
                    "nickname": "get_rubric_assessments_read_state_courses_rubric_comments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read",
            "description": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get rubric assessments read state",
                    "notes": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
                    "nickname": "get_rubric_assessments_read_state_courses_rubric_assessments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read",
            "description": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get rubric assessments read state",
                    "notes": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
                    "nickname": "get_rubric_assessments_read_state_sections_rubric_comments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read",
            "description": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get rubric assessments read state",
                    "notes": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.",
                    "nickname": "get_rubric_assessments_read_state_sections_rubric_assessments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read",
            "description": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark rubric assessments as read",
                    "notes": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
                    "nickname": "mark_rubric_assessments_as_read_courses_rubric_comments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read",
            "description": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark rubric assessments as read",
                    "notes": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
                    "nickname": "mark_rubric_assessments_as_read_courses_rubric_assessments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read",
            "description": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark rubric assessments as read",
                    "notes": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
                    "nickname": "mark_rubric_assessments_as_read_sections_rubric_comments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read",
            "description": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark rubric assessments as read",
                    "notes": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.",
                    "nickname": "mark_rubric_assessments_as_read_sections_rubric_assessments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read",
            "description": "Return whether annotations made on a submitted document have been read by the student",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get document annotations read state",
                    "notes": "Return whether annotations made on a submitted document have been read by the student",
                    "nickname": "get_document_annotations_read_state_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read",
            "description": "Return whether annotations made on a submitted document have been read by the student",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get document annotations read state",
                    "notes": "Return whether annotations made on a submitted document have been read by the student",
                    "nickname": "get_document_annotations_read_state_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read",
            "description": "Indicate that annotations made on a submitted document have been read by the student.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark document annotations as read",
                    "notes": "Indicate that annotations made on a submitted document have been read by the student.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.",
                    "nickname": "mark_document_annotations_as_read_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read",
            "description": "Indicate that annotations made on a submitted document have been read by the student.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Mark document annotations as read",
                    "notes": "Indicate that annotations made on a submitted document have been read by the student.\nOnly the student who owns the submission can use this endpoint.\n\nNOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.",
                    "nickname": "mark_document_annotations_as_read_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary",
            "description": "Returns the number of submissions for the given assignment based on gradeable students\nthat fall into three categories: graded, ungraded, not submitted.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Submission Summary",
                    "notes": "Returns the number of submissions for the given assignment based on gradeable students\nthat fall into three categories: graded, ungraded, not submitted.",
                    "nickname": "submission_summary_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grouped",
                            "description": "If this argument is true, the response will take into account student groups.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary",
            "description": "Returns the number of submissions for the given assignment based on gradeable students\nthat fall into three categories: graded, ungraded, not submitted.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Submission Summary",
                    "notes": "Returns the number of submissions for the given assignment based on gradeable students\nthat fall into three categories: graded, ungraded, not submitted.",
                    "nickname": "submission_summary_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "section_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "grouped",
                            "description": "If this argument is true, the response will take into account student groups.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/{id}",
            "description": "Edit the given submission comment.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a submission comment",
                    "notes": "Edit the given submission comment.",
                    "nickname": "edit_submission_comment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment",
                            "description": "If this argument is present, edit the text of a comment.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SubmissionComment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/{id}",
            "description": "Delete the given submission comment.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a submission comment",
                    "notes": "Delete the given submission comment.",
                    "nickname": "delete_submission_comment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SubmissionComment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files",
            "description": "Upload a file to attach to a submission comment\n\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then PUT the file_id to the\nsubmission API to attach it to a comment",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Upload a file to attach to a submission comment\n\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then PUT the file_id to the\nsubmission API to attach it to a comment",
                    "nickname": "upload_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "assignment_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "user_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/sis/accounts/{account_id}/assignments",
            "description": "Retrieve a list of published assignments flagged as \"post_to_sis\".\nSee the Assignments API for more details on assignments.\nAssignment group and section information are included for convenience.\n\nEach section includes course information for the origin course and the\ncross-listed course, if applicable. The `origin_course` is the course to\nwhich the section belongs or the course from which the section was\ncross-listed. Generally, the `origin_course` should be preferred when\nperforming integration work. The `xlist_course` is provided for consistency\nand is only present when the section has been cross-listed.\nSee Sections API and Courses Api for me details.\n\nThe `override` is only provided if the Differentiated Assignments course\nfeature is turned on and the assignment has an override for that section.\nWhen there is an override for the assignment the override object's\nkeys/values can be merged with the top level assignment object to create a\nview of the assignment object specific to that section.\nSee Assignments api for more information on assignment overrides.\n\nrestricts to courses that start before this date (if they have a start date)\nrestricts to courses that end after this date (if they have an end date)\ninformation to include.\n\n  \"student_overrides\":: returns individual student override information",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve assignments enabled for grade export to SIS",
                    "notes": "Retrieve a list of published assignments flagged as \"post_to_sis\".\nSee the Assignments API for more details on assignments.\nAssignment group and section information are included for convenience.\n\nEach section includes course information for the origin course and the\ncross-listed course, if applicable. The `origin_course` is the course to\nwhich the section belongs or the course from which the section was\ncross-listed. Generally, the `origin_course` should be preferred when\nperforming integration work. The `xlist_course` is provided for consistency\nand is only present when the section has been cross-listed.\nSee Sections API and Courses Api for me details.\n\nThe `override` is only provided if the Differentiated Assignments course\nfeature is turned on and the assignment has an override for that section.\nWhen there is an override for the assignment the override object's\nkeys/values can be merged with the top level assignment object to create a\nview of the assignment object specific to that section.\nSee Assignments api for more information on assignment overrides.\n\nrestricts to courses that start before this date (if they have a start date)\nrestricts to courses that end after this date (if they have an end date)\ninformation to include.\n\n  \"student_overrides\":: returns individual student override information",
                    "nickname": "retrieve_assignments_enabled_for_grade_export_to_sis_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "The ID of the account to query.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "course_id",
                            "description": "The ID of the course to query.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "starts_before",
                            "description": "When searching on an account,",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ends_after",
                            "description": "When searching on an account,",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "student_overrides"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/sis/courses/{course_id}/assignments",
            "description": "Retrieve a list of published assignments flagged as \"post_to_sis\".\nSee the Assignments API for more details on assignments.\nAssignment group and section information are included for convenience.\n\nEach section includes course information for the origin course and the\ncross-listed course, if applicable. The `origin_course` is the course to\nwhich the section belongs or the course from which the section was\ncross-listed. Generally, the `origin_course` should be preferred when\nperforming integration work. The `xlist_course` is provided for consistency\nand is only present when the section has been cross-listed.\nSee Sections API and Courses Api for me details.\n\nThe `override` is only provided if the Differentiated Assignments course\nfeature is turned on and the assignment has an override for that section.\nWhen there is an override for the assignment the override object's\nkeys/values can be merged with the top level assignment object to create a\nview of the assignment object specific to that section.\nSee Assignments api for more information on assignment overrides.\n\nrestricts to courses that start before this date (if they have a start date)\nrestricts to courses that end after this date (if they have an end date)\ninformation to include.\n\n  \"student_overrides\":: returns individual student override information",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve assignments enabled for grade export to SIS",
                    "notes": "Retrieve a list of published assignments flagged as \"post_to_sis\".\nSee the Assignments API for more details on assignments.\nAssignment group and section information are included for convenience.\n\nEach section includes course information for the origin course and the\ncross-listed course, if applicable. The `origin_course` is the course to\nwhich the section belongs or the course from which the section was\ncross-listed. Generally, the `origin_course` should be preferred when\nperforming integration work. The `xlist_course` is provided for consistency\nand is only present when the section has been cross-listed.\nSee Sections API and Courses Api for me details.\n\nThe `override` is only provided if the Differentiated Assignments course\nfeature is turned on and the assignment has an override for that section.\nWhen there is an override for the assignment the override object's\nkeys/values can be merged with the top level assignment object to create a\nview of the assignment object specific to that section.\nSee Assignments api for more information on assignment overrides.\n\nrestricts to courses that start before this date (if they have a start date)\nrestricts to courses that end after this date (if they have an end date)\ninformation to include.\n\n  \"student_overrides\":: returns individual student override information",
                    "nickname": "retrieve_assignments_enabled_for_grade_export_to_sis_courses",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "account_id",
                            "description": "The ID of the account to query.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The ID of the course to query.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "starts_before",
                            "description": "When searching on an account,",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "ends_after",
                            "description": "When searching on an account,",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Array of additional",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "student_overrides"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/sis/courses/{course_id}/disable_post_to_sis",
            "description": "Disable all assignments flagged as \"post_to_sis\", with the option of making it\nspecific to a grading period, in a course.\n\nOn success, the response will be 204 No Content with an empty body.\n\nOn failure, the response will be 400 Bad Request with a body of a specific\nmessage.\n\nFor disabling assignments in a specific grading period",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Disable assignments currently enabled for grade export to SIS",
                    "notes": "Disable all assignments flagged as \"post_to_sis\", with the option of making it\nspecific to a grading period, in a course.\n\nOn success, the response will be 204 No Content with an empty body.\n\nOn failure, the response will be 400 Bad Request with a body of a specific\nmessage.\n\nFor disabling assignments in a specific grading period",
                    "nickname": "disable_assignments_currently_enabled_for_grade_export_to_sis",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The ID of the course.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "grading_period_id",
                            "description": "The ID of the grading period.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports",
            "description": "Returns the list of SIS imports for an account\n\nExample:\n  curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports \\\n    -H 'Authorization: Bearer <token>'",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get SIS import list",
                    "notes": "Returns the list of SIS imports for an account\n\nExample:\n  curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports \\\n    -H 'Authorization: Bearer <token>'",
                    "nickname": "get_sis_import_list",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "created_since",
                            "description": "If set, only shows imports created after the specified date (use ISO8601 format)",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "created_before",
                            "description": "If set, only shows imports created before the specified date (use ISO8601 format)",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "workflow_state",
                            "description": "If set, only returns imports that are in the given state.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "initializing",
                                "created",
                                "importing",
                                "cleanup_batch",
                                "imported",
                                "imported_with_messages",
                                "aborted",
                                "failed",
                                "failed_with_messages",
                                "restoring",
                                "partially_restored",
                                "restored"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "SisImport"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports/importing",
            "description": "Returns the SIS imports that are currently processing for an account. If no\nimports are running, will return an empty array.\n\nExample:\n  curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/importing \\\n    -H 'Authorization: Bearer <token>'",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the current importing SIS import",
                    "notes": "Returns the SIS imports that are currently processing for an account. If no\nimports are running, will return an empty array.\n\nExample:\n  curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/importing \\\n    -H 'Authorization: Bearer <token>'",
                    "nickname": "get_current_importing_sis_import",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SisImport"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports",
            "description": "Import SIS data into Canvas. Must be on a root account with SIS imports\nenabled.\n\nFor more information on the format that's expected here, please see the\n\"SIS CSV\" section in the API docs.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Import SIS data",
                    "notes": "Import SIS data into Canvas. Must be on a root account with SIS imports\nenabled.\n\nFor more information on the format that's expected here, please see the\n\"SIS CSV\" section in the API docs.",
                    "nickname": "import_sis_data",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "import_type",
                            "description": "Choose the data format for reading SIS data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attachment",
                            "description": "There are two ways to post SIS import data - either via a\nmultipart/form-data form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for multipart/form-data style posts. Assumed to\nbe SIS data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: application/octet-stream' --data-binary @<filename>.zip \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&extension=zip\n\n  curl -H 'Content-Type: application/zip' --data-binary @<filename>.zip \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&batch_mode=1&batch_mode_term_id=15\n\nIf the attachment is a zip file, the uncompressed file(s) cannot be 100x larger than the zip, or the import will fail.\nFor example, if the zip file is 1KB but the total size of the uncompressed file(s) is 100KB or greater the import will\nfail. There is a hard cap of 50 GB.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "extension",
                            "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between zip, xml, csv, and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to zip-file format if all else fails.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "batch_mode",
                            "description": "If set, this SIS import will be run in batch mode, deleting any data\npreviously imported via SIS that is not present in this latest import.\nSee the SIS CSV Format page for details.\nBatch mode cannot be used with diffing.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "batch_mode_term_id",
                            "description": "Limit deletions to only this term. Required if batch mode is enabled.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "multi_term_batch_mode",
                            "description": "Runs batch mode against all terms in terms file. Requires change_threshold.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "skip_deletes",
                            "description": "When set the import will skip any deletes. This does not account for\nobjects that are deleted during the batch mode cleanup process.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "add_sis_stickiness",
                            "description": "This option, if present, will process all changes as if they were UI\nchanges. This means that \"stickiness\" will be added to changed fields.\nThis option is only processed if 'override_sis_stickiness' is also provided.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "clear_sis_stickiness",
                            "description": "This option, if present, will clear \"stickiness\" from all fields touched\nby this import. Requires that 'override_sis_stickiness' is also provided.\nIf 'add_sis_stickiness' is also provided, 'clear_sis_stickiness' will\noverrule the behavior of 'add_sis_stickiness'",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "update_sis_id_if_login_claimed",
                            "description": "This option, if present, will override the old (or non-existent)\nnon-matching SIS ID with the new SIS ID in the upload,\nif a pseudonym is found from the login field and the SIS ID doesn't match.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "diffing_data_set_identifier",
                            "description": "If set on a CSV import, Canvas will attempt to optimize the SIS import by\ncomparing this set of CSVs to the previous set that has the same data set\nidentifier, and only applying the difference between the two. See the\nSIS CSV Format documentation for more details.\nDiffing cannot be used with batch_mode",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "diffing_remaster_data_set",
                            "description": "If true, and diffing_data_set_identifier is sent, this SIS import will be\npart of the data set, but diffing will not be performed. See the SIS CSV\nFormat documentation for details.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "diffing_drop_status",
                            "description": "If diffing_drop_status is passed, this SIS import will use this status for\nenrollments that are not included in the sis_batch. Defaults to 'deleted'",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "deleted",
                                "completed",
                                "inactive"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "batch_mode_enrollment_drop_status",
                            "description": "If batch_mode_enrollment_drop_status is passed, this SIS import will use\nthis status for enrollments that are not included in the sis_batch. This\nwill have an effect if multi_term_batch_mode is set. Defaults to 'deleted'\nThis will still mark courses and sections that are not included in the\nsis_batch as deleted, and subsequently enrollments in the deleted courses\nand sections as deleted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "deleted",
                                "completed",
                                "inactive"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "change_threshold",
                            "description": "If set with batch_mode, the batch cleanup process will not run if the\nnumber of items deleted is higher than the percentage set. If set to 10\nand a term has 200 enrollments, and batch would delete more than 20 of\nthe enrollments the batch will abort before the enrollments are deleted.\nThe change_threshold will be evaluated for course, sections, and\nenrollments independently.\nIf set with diffing, diffing will not be performed if the files are\ngreater than the threshold as a percent. If set to 5 and the file is more\nthan 5% smaller or more than 5% larger than the file that is being\ncompared to, diffing will not be performed. If the files are less than 5%,\ndiffing will be performed. The way the percent is calculated is by taking\nthe size of the current import and dividing it by the size of the previous\nimport. The formula used is:\n|(1 - current_file_size / previous_file_size)| * 100\nSee the SIS CSV Format documentation for more details.\nRequired for multi_term_batch_mode.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "diff_row_count_threshold",
                            "description": "If set with diffing, diffing will not be performed if the number of rows\nto be run in the fully calculated diff import exceeds the threshold.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SisImport"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports/{id}",
            "description": "Get the status of an already created SIS import.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<sis_import_id> \\\n        -H 'Authorization: Bearer <token>'",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get SIS import status",
                    "notes": "Get the status of an already created SIS import.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<sis_import_id> \\\n        -H 'Authorization: Bearer <token>'",
                    "nickname": "get_sis_import_status",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SisImport"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports/{id}/restore_states",
            "description": "This will restore the the workflow_state for all the items that changed\ntheir workflow_state during the import being restored.\nThis will restore states for items imported with the following importers:\naccounts.csv terms.csv courses.csv sections.csv group_categories.csv\ngroups.csv users.csv admins.csv\nThis also restores states for other items that changed during the import.\nAn example would be if an enrollment was deleted from a sis import and the\ngroup_membership was also deleted as a result of the enrollment deletion,\nboth items would be restored when the sis batch is restored.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Restore workflow_states of SIS imported items",
                    "notes": "This will restore the the workflow_state for all the items that changed\ntheir workflow_state during the import being restored.\nThis will restore states for items imported with the following importers:\naccounts.csv terms.csv courses.csv sections.csv group_categories.csv\ngroups.csv users.csv admins.csv\nThis also restores states for other items that changed during the import.\nAn example would be if an enrollment was deleted from a sis import and the\ngroup_membership was also deleted as a result of the enrollment deletion,\nboth items would be restored when the sis batch is restored.",
                    "nickname": "restore_workflow_states_of_sis_imported_items",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "batch_mode",
                            "description": "If set, will only restore items that were deleted from batch_mode.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "undelete_only",
                            "description": "If set, will only restore items that were deleted. This will ignore any\nitems that were created or modified.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "unconclude_only",
                            "description": "If set, will only restore enrollments that were concluded. This will\nignore any items that were created or deleted.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Progress"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports/{id}/abort",
            "description": "Abort a SIS import that has not completed.\n\nAborting a sis batch that is running can take some time for every process to\nsee the abort event. Subsequent sis batches begin to process 10 minutes\nafter the abort to allow each process to clean up properly.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Abort SIS import",
                    "notes": "Abort a SIS import that has not completed.\n\nAborting a sis batch that is running can take some time for every process to\nsee the abort event. Subsequent sis batches begin to process 10 minutes\nafter the abort to allow each process to clean up properly.",
                    "nickname": "abort_sis_import",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SisImport"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports/abort_all_pending",
            "description": "Abort already created but not processed or processing SIS imports.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Abort all pending SIS imports",
                    "notes": "Abort already created but not processed or processing SIS imports.",
                    "nickname": "abort_all_pending_sis_imports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "boolean"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_imports/{id}/errors",
            "description": "Returns the list of SIS import errors for an account or a SIS import. Import\nerrors are only stored for 30 days.\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get SIS import error list",
                    "notes": "Returns the list of SIS import errors for an account or a SIS import. Import\nerrors are only stored for 30 days.\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"",
                    "nickname": "get_sis_import_error_list_sis_imports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "failure",
                            "description": "If set, only shows errors on a sis import that would cause a failure.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "SisImportError"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/sis_import_errors",
            "description": "Returns the list of SIS import errors for an account or a SIS import. Import\nerrors are only stored for 30 days.\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get SIS import error list",
                    "notes": "Returns the list of SIS import errors for an account or a SIS import. Import\nerrors are only stored for 30 days.\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"",
                    "nickname": "get_sis_import_error_list_sis_import_errors",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "failure",
                            "description": "If set, only shows errors on a sis import that would cause a failure.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "SisImportError"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/shared_brand_configs",
            "description": "Create a SharedBrandConfig, which will give the given brand_config a name\nand make it available to other users of this account.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Share a BrandConfig (Theme)",
                    "notes": "Create a SharedBrandConfig, which will give the given brand_config a name\nand make it available to other users of this account.",
                    "nickname": "share_brandconfig_theme",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "shared_brand_config[name]",
                            "description": "Name to share this BrandConfig (theme) as.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "shared_brand_config[brand_config_md5]",
                            "description": "MD5 of brand_config to share",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SharedBrandConfig"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/shared_brand_configs/{id}",
            "description": "Update the specified shared_brand_config with a new name or to point to a new brand_config.\nUses same parameters as create.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a shared theme",
                    "notes": "Update the specified shared_brand_config with a new name or to point to a new brand_config.\nUses same parameters as create.",
                    "nickname": "update_shared_theme",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SharedBrandConfig"
                }
            ]
        },
        {
            "path": "/v1/shared_brand_configs/{id}",
            "description": "Delete a SharedBrandConfig, which will unshare it so you nor anyone else in\nyour account will see it as an option to pick from.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Un-share a BrandConfig (Theme)",
                    "notes": "Delete a SharedBrandConfig, which will unshare it so you nor anyone else in\nyour account will see it as an option to pick from.",
                    "nickname": "un_share_brandconfig_theme",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "SharedBrandConfig"
                }
            ]
        },
        {
            "path": "/v1/services/kaltura",
            "description": "Return the config information for the Kaltura plugin in json format.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get Kaltura config",
                    "notes": "Return the config information for the Kaltura plugin in json format.",
                    "nickname": "get_kaltura_config",
                    "parameters": [],
                    "response_fields": [
                        {
                            "name": "enabled",
                            "description": "Enabled state of the Kaltura plugin",
                            "deprecated": false
                        },
                        {
                            "name": "domain",
                            "description": "Main domain of the Kaltura instance (This is the URL where the Kaltura API resides)",
                            "deprecated": false
                        },
                        {
                            "name": "resources_domain",
                            "description": "Kaltura URL for grabbing thumbnails and other resources",
                            "deprecated": false
                        },
                        {
                            "name": "rtmp_domain",
                            "description": "Hostname to be used for RTMP recording",
                            "deprecated": false
                        },
                        {
                            "name": "partner_id",
                            "description": "Partner ID used for communicating with the Kaltura instance",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/services/kaltura_session",
            "description": "Start a new Kaltura session, so that new media can be recorded and uploaded\nto this Canvas instance's Kaltura instance.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Start Kaltura session",
                    "notes": "Start a new Kaltura session, so that new media can be recorded and uploaded\nto this Canvas instance's Kaltura instance.",
                    "nickname": "start_kaltura_session",
                    "parameters": [],
                    "response_fields": [
                        {
                            "name": "ks",
                            "description": "The kaltura session id, for use in the kaltura v3 API.\nThis can be used in the uploadtoken service, for instance, to upload a new\nmedia file into kaltura.",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/sections",
            "description": "A paginated list of the list of sections for this course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List course sections",
                    "notes": "A paginated list of the list of sections for this course.",
                    "nickname": "list_course_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status.\n- \"permissions\": Include whether section grants :manage_calendar permission\n  to the caller",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "students",
                                "avatar_url",
                                "enrollments",
                                "total_students",
                                "passback_status",
                                "permissions"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Section"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/sections",
            "description": "Creates a new section for this course.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create course section",
                    "notes": "Creates a new section for this course.",
                    "nickname": "create_course_section",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[name]",
                            "description": "The name of the section",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[sis_section_id]",
                            "description": "The sis ID of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[integration_id]",
                            "description": "The integration_id of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[start_at]",
                            "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[end_at]",
                            "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[restrict_enrollments_to_section_dates]",
                            "description": "Set to true to restrict user enrollments to the start and end dates of the section.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "enable_sis_reactivation",
                            "description": "When true, will first try to re-activate a deleted section with matching sis_section_id if possible.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Section"
                }
            ]
        },
        {
            "path": "/v1/sections/{id}/crosslist/{new_course_id}",
            "description": "Move the Section to another course.  The new course may be in a different account (department),\nbut must belong to the same root account (institution).",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Cross-list a Section",
                    "notes": "Move the Section to another course.  The new course may be in a different account (department),\nbut must belong to the same root account (institution).",
                    "nickname": "cross_list_section",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "new_course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Section"
                }
            ]
        },
        {
            "path": "/v1/sections/{id}/crosslist",
            "description": "Undo cross-listing of a Section, returning it to its original course.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "De-cross-list a Section",
                    "notes": "Undo cross-listing of a Section, returning it to its original course.",
                    "nickname": "de_cross_list_section",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Section"
                }
            ]
        },
        {
            "path": "/v1/sections/{id}",
            "description": "Modify an existing section.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a section",
                    "notes": "Modify an existing section.",
                    "nickname": "edit_section",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[name]",
                            "description": "The name of the section",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[sis_section_id]",
                            "description": "The sis ID of the section. Must have manage_sis permission to set.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[integration_id]",
                            "description": "The integration_id of the section. Must have manage_sis permission to set.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[start_at]",
                            "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[end_at]",
                            "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "course_section[restrict_enrollments_to_section_dates]",
                            "description": "Set to true to restrict user enrollments to the start and end dates of the section.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "override_sis_stickiness",
                            "description": "Default is true. If false, any fields containing “sticky” changes will not be updated.\nSee SIS CSV Format documentation for information on which fields can have SIS stickiness",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Section"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/sections/{id}",
            "description": "Gets details about a specific section",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get section information",
                    "notes": "Gets details about a specific section",
                    "nickname": "get_section_information_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status.\n- \"permissions\": Include whether section grants :manage_calendar permission\n  to the caller",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "students",
                                "avatar_url",
                                "enrollments",
                                "total_students",
                                "passback_status",
                                "permissions"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Section"
                }
            ]
        },
        {
            "path": "/v1/sections/{id}",
            "description": "Gets details about a specific section",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get section information",
                    "notes": "Gets details about a specific section",
                    "nickname": "get_section_information_sections",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status.\n- \"permissions\": Include whether section grants :manage_calendar permission\n  to the caller",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "students",
                                "avatar_url",
                                "enrollments",
                                "total_students",
                                "passback_status",
                                "permissions"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Section"
                }
            ]
        },
        {
            "path": "/v1/sections/{id}",
            "description": "Delete an existing section.  Returns the former Section.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a section",
                    "notes": "Delete an existing section.  Returns the former Section.",
                    "nickname": "delete_section",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Section"
                }
            ]
        },
        {
            "path": "/v1/conversations/find_recipients",
            "description": "Find valid recipients (users, courses and groups) that the current user\ncan send messages to. The /api/v1/search/recipients path is the preferred\nendpoint, /api/v1/conversations/find_recipients is deprecated.\n\nPagination is supported.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Find recipients",
                    "notes": "Find valid recipients (users, courses and groups) that the current user\ncan send messages to. The /api/v1/search/recipients path is the preferred\nendpoint, /api/v1/conversations/find_recipients is deprecated.\n\nPagination is supported.",
                    "nickname": "find_recipients_conversations",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "search",
                            "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context",
                            "description": "Limit the search to a particular course/group (e.g. \"course_3\" or \"group_4\").",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "exclude",
                            "description": "Array of ids to exclude from the search. These may be user ids or\ncourse/group ids prefixed with \"course_\" or \"group_\" respectively,\ne.g. exclude[]=1&exclude[]=2&exclude[]=course_3",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "Limit the search just to users or contexts (groups/courses).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user",
                                "context"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "Search for a specific user id. This ignores the other above parameters,\nand will never return more than one result.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "from_conversation_id",
                            "description": "When searching by user_id, only users that could be normally messaged by\nthis user will be returned. This parameter allows you to specify a\nconversation that will be referenced for a shared context -- if both the\ncurrent user and the searched user are in the conversation, the user will\nbe returned. This is used to start new side conversations.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "permissions",
                            "description": "Array of permission strings to be checked for each matched context (e.g.\n\"send_messages\"). This argument determines which permissions may be\nreturned in the response; it won't prevent contexts from being returned if\nthey don't grant the permission(s).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the user/context. For\ngroups/courses, the id is prefixed by \"group_\"/\"course_\" respectively.",
                            "deprecated": false
                        },
                        {
                            "name": "name",
                            "description": "The name of the context or short name of the user",
                            "deprecated": false
                        },
                        {
                            "name": "full_name",
                            "description": "Only set for users. The full name of the user",
                            "deprecated": false
                        },
                        {
                            "name": "avatar_url",
                            "description": "Avatar image url for the user/context",
                            "deprecated": false
                        },
                        {
                            "name": "type",
                            "description": "[\"context\"|\"course\"|\"section\"|\"group\"|\"user\"|null]\nType of recipients to return, defaults to null (all). \"context\"\nencompasses \"course\", \"section\" and \"group\"",
                            "deprecated": false
                        },
                        {
                            "name": "types[]",
                            "description": "Array of recipient types to return (see type\nabove), e.g. types[]=user&types[]=course",
                            "deprecated": false
                        },
                        {
                            "name": "user_count",
                            "description": "Only set for contexts, indicates number of\nmessageable users",
                            "deprecated": false
                        },
                        {
                            "name": "common_courses",
                            "description": "Only set for users. Hash of course ids and\nenrollment types for each course to show what they share with this user",
                            "deprecated": false
                        },
                        {
                            "name": "common_groups",
                            "description": "Only set for users. Hash of group ids and\nenrollment types for each group to show what they share with this user",
                            "deprecated": false
                        },
                        {
                            "name": "permissions[]",
                            "description": "Only set for contexts. Mapping of requested\npermissions that the context grants the current user, e.g.\n{ send_messages: true }",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/search/recipients",
            "description": "Find valid recipients (users, courses and groups) that the current user\ncan send messages to. The /api/v1/search/recipients path is the preferred\nendpoint, /api/v1/conversations/find_recipients is deprecated.\n\nPagination is supported.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Find recipients",
                    "notes": "Find valid recipients (users, courses and groups) that the current user\ncan send messages to. The /api/v1/search/recipients path is the preferred\nendpoint, /api/v1/conversations/find_recipients is deprecated.\n\nPagination is supported.",
                    "nickname": "find_recipients_search",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "search",
                            "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "context",
                            "description": "Limit the search to a particular course/group (e.g. \"course_3\" or \"group_4\").",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "exclude",
                            "description": "Array of ids to exclude from the search. These may be user ids or\ncourse/group ids prefixed with \"course_\" or \"group_\" respectively,\ne.g. exclude[]=1&exclude[]=2&exclude[]=course_3",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "type",
                            "description": "Limit the search just to users or contexts (groups/courses).",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "user",
                                "context"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "user_id",
                            "description": "Search for a specific user id. This ignores the other above parameters,\nand will never return more than one result.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "from_conversation_id",
                            "description": "When searching by user_id, only users that could be normally messaged by\nthis user will be returned. This parameter allows you to specify a\nconversation that will be referenced for a shared context -- if both the\ncurrent user and the searched user are in the conversation, the user will\nbe returned. This is used to start new side conversations.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "permissions",
                            "description": "Array of permission strings to be checked for each matched context (e.g.\n\"send_messages\"). This argument determines which permissions may be\nreturned in the response; it won't prevent contexts from being returned if\nthey don't grant the permission(s).",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [
                        {
                            "name": "id",
                            "description": "The unique identifier for the user/context. For\ngroups/courses, the id is prefixed by \"group_\"/\"course_\" respectively.",
                            "deprecated": false
                        },
                        {
                            "name": "name",
                            "description": "The name of the context or short name of the user",
                            "deprecated": false
                        },
                        {
                            "name": "full_name",
                            "description": "Only set for users. The full name of the user",
                            "deprecated": false
                        },
                        {
                            "name": "avatar_url",
                            "description": "Avatar image url for the user/context",
                            "deprecated": false
                        },
                        {
                            "name": "type",
                            "description": "[\"context\"|\"course\"|\"section\"|\"group\"|\"user\"|null]\nType of recipients to return, defaults to null (all). \"context\"\nencompasses \"course\", \"section\" and \"group\"",
                            "deprecated": false
                        },
                        {
                            "name": "types[]",
                            "description": "Array of recipient types to return (see type\nabove), e.g. types[]=user&types[]=course",
                            "deprecated": false
                        },
                        {
                            "name": "user_count",
                            "description": "Only set for contexts, indicates number of\nmessageable users",
                            "deprecated": false
                        },
                        {
                            "name": "common_courses",
                            "description": "Only set for users. Hash of course ids and\nenrollment types for each course to show what they share with this user",
                            "deprecated": false
                        },
                        {
                            "name": "common_groups",
                            "description": "Only set for users. Hash of group ids and\nenrollment types for each group to show what they share with this user",
                            "deprecated": false
                        },
                        {
                            "name": "permissions[]",
                            "description": "Only set for contexts. Mapping of requested\npermissions that the context grants the current user, e.g.\n{ send_messages: true }",
                            "deprecated": false
                        }
                    ],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/search/all_courses",
            "description": "A paginated list of all courses visible in the public index",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List all courses",
                    "notes": "A paginated list of all courses visible in the public index",
                    "nickname": "list_all_courses",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "search",
                            "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "public_only",
                            "description": "Only return courses with public content. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "open_enrollment_only",
                            "description": "Only return courses that allow self enrollment. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items/{line_item_id}/scores",
            "description": "Create a new Result from the score params. If this is for the first created line_item for a\nresourceLinkId, or it is a line item that is not attached to a resourceLinkId, then a submission\nrecord will be created for the associated assignment when gradingProgress is set to\nFullyGraded or PendingManual.\n\nThe submission score will also be updated when a score object is sent with either of those\ntwo values for gradingProgress. If a score object is sent with either of FullyGraded or\nPendingManual as the value for gradingProgress and scoreGiven is missing, the assignment\nwill not be graded. This also supposes the line_item meets the condition to create a submission.\n\nA submission comment with an unknown author will be created when the comment value is included.\nThis also supposes the line_item meets the condition to create a submission.\n\nIt is also possible to submit a file along with this score, which will attach the file to the\nsubmission that is created. Files should be formatted as Content Items, with the correct syntax\nbelow.\n\nReturns a url pointing to the Result. If any files were submitted, also returns the Content Items\nwhich were sent in the request, each with a url pointing to the Progress of the file upload.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a Score",
                    "notes": "Create a new Result from the score params. If this is for the first created line_item for a\nresourceLinkId, or it is a line item that is not attached to a resourceLinkId, then a submission\nrecord will be created for the associated assignment when gradingProgress is set to\nFullyGraded or PendingManual.\n\nThe submission score will also be updated when a score object is sent with either of those\ntwo values for gradingProgress. If a score object is sent with either of FullyGraded or\nPendingManual as the value for gradingProgress and scoreGiven is missing, the assignment\nwill not be graded. This also supposes the line_item meets the condition to create a submission.\n\nA submission comment with an unknown author will be created when the comment value is included.\nThis also supposes the line_item meets the condition to create a submission.\n\nIt is also possible to submit a file along with this score, which will attach the file to the\nsubmission that is created. Files should be formatted as Content Items, with the correct syntax\nbelow.\n\nReturns a url pointing to the Result. If any files were submitted, also returns the Content Items\nwhich were sent in the request, each with a url pointing to the Progress of the file upload.",
                    "nickname": "create_score",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "line_item_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "userId",
                            "description": "The lti_user_id or the Canvas user_id.\nReturns a 422 if user not found in Canvas or is not a student.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "activityProgress",
                            "description": "Indicate to Canvas the status of the user towards the activity's completion.\nMust be one of Initialized, Started, InProgress, Submitted, Completed.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "gradingProgress",
                            "description": "Indicate to Canvas the status of the grading process.\nA value of PendingManual will require intervention by a grader.\nValues of NotReady, Failed, and Pending will cause the scoreGiven to be ignored.\nFullyGraded values will require no action.\nPossible values are NotReady, Failed, Pending, PendingManual, FullyGraded.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "timestamp",
                            "description": "Date and time when the score was modified in the tool. Should use ISO8601-formatted date with subsecond precision.\nReturns a 400 if the timestamp is earlier than the updated_at time of the Result.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "scoreGiven",
                            "description": "The Current score received in the tool for this line item and user,\nscaled to the scoreMaximum",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "scoreMaximum",
                            "description": "Maximum possible score for this result; it must be present if scoreGiven is present.\nReturns 412 if not present when scoreGiven is present.",
                            "type": "number",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "comment",
                            "description": "Comment visible to the student about this score.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission",
                            "description": "(EXTENSION) Optional submission type and data. Fields listed below.",
                            "type": "Object",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission[new_submission]",
                            "description": "(EXTENSION field) flag to indicate that this is a new submission. Defaults to true unless submission_type is none.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission[prioritize_non_tool_grade]",
                            "description": "(EXTENSION field) flag to prevent a request from overwriting an existing grade for a submission. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission[submission_type]",
                            "description": "(EXTENSION field) permissible values are: none, basic_lti_launch, online_text_entry, external_tool, online_upload, or online_url. Defaults to external_tool. Ignored if content_items are provided.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission[submission_data]",
                            "description": "(EXTENSION field) submission data (URL or body text). Only used for submission_types basic_lti_launch, online_text_entry, online_url. Ignored if content_items are provided.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission[submitted_at]",
                            "description": "(EXTENSION field) Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision. This should match the data and time that the original submission happened in Canvas.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "https://canvas.instructure.com/lti/submission[content_items]",
                            "description": "(EXTENSION field) Files that should be included with the submission. Each item should contain `type: file`, and a url pointing to the file. It can also contain a title, and an explicit MIME type if needed (otherwise, MIME type will be inferred from the title or url). If any items are present, submission_type will be online_upload.",
                            "type": "Array",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "resultUrl String The url to the result that was created."
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubrics",
            "description": "Returns the rubric with the given id.\n\nUnfortuantely this endpoint does not return a standard Rubric object,\ninstead it returns a hash that looks like\n  { 'rubric': Rubric, 'rubric_association': RubricAssociation }\n\nThis may eventually be deprecated in favor of a more standardized return\nvalue, but that is not currently planned.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a single rubric",
                    "notes": "Returns the rubric with the given id.\n\nUnfortuantely this endpoint does not return a standard Rubric object,\ninstead it returns a hash that looks like\n  { 'rubric': Rubric, 'rubric_association': RubricAssociation }\n\nThis may eventually be deprecated in favor of a more standardized return\nvalue, but that is not currently planned.",
                    "nickname": "create_single_rubric",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "id",
                            "description": "The id of the rubric",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association_id",
                            "description": "The id of the object with which this rubric is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric[title]",
                            "description": "The title of the rubric",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric[free_form_criterion_comments]",
                            "description": "Whether or not you can write custom comments in the ratings field for a rubric",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_id]",
                            "description": "The id of the object with which this rubric is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_type]",
                            "description": "The type of object this rubric is associated with",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Assignment",
                                "Course",
                                "Account"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[use_for_grading]",
                            "description": "Whether or not the associated rubric is used for grade calculation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[hide_score_total]",
                            "description": "Whether or not the score total is displayed within the rubric.\nThis option is only available if the rubric is not used for grading.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[purpose]",
                            "description": "Whether or not the association is for grading (and thus linked to an assignment)\nor if it's to indicate the rubric should appear in its context",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric[criteria]",
                            "description": "An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubrics/{id}",
            "description": "Returns the rubric with the given id.\n\nUnfortuantely this endpoint does not return a standard Rubric object,\ninstead it returns a hash that looks like\n  { 'rubric': Rubric, 'rubric_association': RubricAssociation }\n\nThis may eventually be deprecated in favor of a more standardized return\nvalue, but that is not currently planned.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a single rubric",
                    "notes": "Returns the rubric with the given id.\n\nUnfortuantely this endpoint does not return a standard Rubric object,\ninstead it returns a hash that looks like\n  { 'rubric': Rubric, 'rubric_association': RubricAssociation }\n\nThis may eventually be deprecated in favor of a more standardized return\nvalue, but that is not currently planned.",
                    "nickname": "update_single_rubric",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The id of the rubric",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association_id",
                            "description": "The id of the object with which this rubric is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric[title]",
                            "description": "The title of the rubric",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric[free_form_criterion_comments]",
                            "description": "Whether or not you can write custom comments in the ratings field for a rubric",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric[skip_updating_points_possible]",
                            "description": "Whether or not to update the points possible",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_id]",
                            "description": "The id of the object with which this rubric is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_type]",
                            "description": "The type of object this rubric is associated with",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Assignment",
                                "Course",
                                "Account"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[use_for_grading]",
                            "description": "Whether or not the associated rubric is used for grade calculation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[hide_score_total]",
                            "description": "Whether or not the score total is displayed within the rubric.\nThis option is only available if the rubric is not used for grading.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[purpose]",
                            "description": "Whether or not the association is for grading (and thus linked to an assignment)\nor if it's to indicate the rubric should appear in its context",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "grading",
                                "bookmark"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "rubric[criteria]",
                            "description": "An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubrics/{id}",
            "description": "Deletes a Rubric and removes all RubricAssociations.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a single rubric",
                    "notes": "Deletes a Rubric and removes all RubricAssociations.",
                    "nickname": "delete_single_rubric",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Rubric"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/rubrics",
            "description": "Returns the paginated list of active rubrics for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List rubrics",
                    "notes": "Returns the paginated list of active rubrics for the current context.",
                    "nickname": "list_rubrics_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubrics",
            "description": "Returns the paginated list of active rubrics for the current context.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List rubrics",
                    "notes": "Returns the paginated list of active rubrics for the current context.",
                    "nickname": "list_rubrics_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/rubrics/{id}",
            "description": "Returns the rubric with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single rubric",
                    "notes": "Returns the rubric with the given id.",
                    "nickname": "get_single_rubric_accounts",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Related records to include in the response.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assessments",
                                "graded_assessments",
                                "peer_assessments",
                                "associations",
                                "assignment_associations",
                                "course_associations",
                                "account_associations"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "style",
                            "description": "Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "full",
                                "comments_only"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Rubric"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubrics/{id}",
            "description": "Returns the rubric with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single rubric",
                    "notes": "Returns the rubric with the given id.",
                    "nickname": "get_single_rubric_courses",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Related records to include in the response.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "assessments",
                                "graded_assessments",
                                "peer_assessments",
                                "associations",
                                "assignment_associations",
                                "course_associations",
                                "account_associations"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "style",
                            "description": "Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "full",
                                "comments_only"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Rubric"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments",
            "description": "Returns the rubric assessment with the given id.\nThe returned object also provides the information of\n  :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a single rubric assessment",
                    "notes": "Returns the rubric assessment with the given id.\nThe returned object also provides the information of\n  :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact",
                    "nickname": "create_single_rubric_assessment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The id of the course",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "rubric_association_id",
                            "description": "The id of the object with which this rubric assessment is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "provisional",
                            "description": "(optional) Indicates whether this assessment is provisional, defaults to false.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "final",
                            "description": "(optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "graded_anonymously",
                            "description": "(optional) Defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_assessment",
                            "description": "A Hash of data to complement the rubric assessment:\nThe user id that refers to the person being assessed\n  rubric_assessment[user_id]\nAssessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'\n  rubric_assessment[assessment_type]\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123\nIf the criterion_id is not specified it defaults to false, and nothing is updated.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}",
            "description": "Returns the rubric assessment with the given id.\nThe returned object also provides the information of\n  :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a single rubric assessment",
                    "notes": "Returns the rubric assessment with the given id.\nThe returned object also provides the information of\n  :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact",
                    "nickname": "update_single_rubric_assessment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The id of the rubric assessment",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "The id of the course",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "rubric_association_id",
                            "description": "The id of the object with which this rubric assessment is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "provisional",
                            "description": "(optional) Indicates whether this assessment is provisional, defaults to false.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "final",
                            "description": "(optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "graded_anonymously",
                            "description": "(optional) Defaults to false",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_assessment",
                            "description": "A Hash of data to complement the rubric assessment:\nThe user id that refers to the person being assessed\n  rubric_assessment[user_id]\nAssessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'\n  rubric_assessment[assessment_type]\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123\nIf the criterion_id is not specified it defaults to false, and nothing is updated.",
                            "type": "Hash",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}",
            "description": "Deletes a rubric assessment",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a single rubric assessment",
                    "notes": "Deletes a rubric assessment",
                    "nickname": "delete_single_rubric_assessment",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "rubric_association_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "RubricAssessment"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubric_associations",
            "description": "Returns the rubric with the given id.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a RubricAssociation",
                    "notes": "Returns the rubric with the given id.",
                    "nickname": "create_rubricassociation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[rubric_id]",
                            "description": "The id of the Rubric",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_id]",
                            "description": "The id of the object with which this rubric is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_type]",
                            "description": "The type of object this rubric is associated with",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Assignment",
                                "Course",
                                "Account"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[title]",
                            "description": "The name of the object this rubric is associated with",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[use_for_grading]",
                            "description": "Whether or not the associated rubric is used for grade calculation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[hide_score_total]",
                            "description": "Whether or not the score total is displayed within the rubric.\nThis option is only available if the rubric is not used for grading.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[purpose]",
                            "description": "Whether or not the association is for grading (and thus linked to an assignment)\nor if it's to indicate the rubric should appear in its context",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "grading",
                                "bookmark"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[bookmarked]",
                            "description": "Whether or not the associated rubric appears in its context",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "RubricAssociation"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubric_associations/{id}",
            "description": "Returns the rubric with the given id.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a RubricAssociation",
                    "notes": "Returns the rubric with the given id.",
                    "nickname": "update_rubricassociation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The id of the RubricAssociation to update",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[rubric_id]",
                            "description": "The id of the Rubric",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_id]",
                            "description": "The id of the object with which this rubric is associated",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[association_type]",
                            "description": "The type of object this rubric is associated with",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "Assignment",
                                "Course",
                                "Account"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[title]",
                            "description": "The name of the object this rubric is associated with",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[use_for_grading]",
                            "description": "Whether or not the associated rubric is used for grade calculation",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[hide_score_total]",
                            "description": "Whether or not the score total is displayed within the rubric.\nThis option is only available if the rubric is not used for grading.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[purpose]",
                            "description": "Whether or not the association is for grading (and thus linked to an assignment)\nor if it's to indicate the rubric should appear in its context",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "grading",
                                "bookmark"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "rubric_association[bookmarked]",
                            "description": "Whether or not the associated rubric appears in its context",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "RubricAssociation"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/rubric_associations/{id}",
            "description": "Delete the RubricAssociation with the given ID",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a RubricAssociation",
                    "notes": "Delete the RubricAssociation with the given ID",
                    "nickname": "delete_rubricassociation",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "RubricAssociation"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/roles",
            "description": "A paginated list of the roles available to an account.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List roles",
                    "notes": "A paginated list of the roles available to an account.",
                    "nickname": "list_roles",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "The id of the account to retrieve roles for.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "state",
                            "description": "Filter by role state. If this argument is omitted, only 'active' roles are\nreturned.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "active",
                                "inactive"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "query",
                            "name": "show_inherited",
                            "description": "If this argument is true, all roles inherited from parent accounts will\nbe included.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Role"
                    }
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/roles/{id}",
            "description": "Retrieve information about a single role",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single role",
                    "notes": "Retrieve information about a single role",
                    "nickname": "get_single_role",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "The id of the account containing the role",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role_id",
                            "description": "The unique identifier for the role",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "The name for the role",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Role"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/roles",
            "description": "Create a new course-level or account-level role.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a new role",
                    "notes": "Create a new course-level or account-level role.",
                    "nickname": "create_new_role",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "label",
                            "description": "Label for the role.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "role",
                            "description": "Deprecated alias for label.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "base_role_type",
                            "description": "Specifies the role type that will be used as a base\nfor the permissions granted to this role.\n\nDefaults to 'AccountMembership' if absent",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "AccountMembership",
                                "StudentEnrollment",
                                "TeacherEnrollment",
                                "TaEnrollment",
                                "ObserverEnrollment",
                                "DesignerEnrollment"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][explicit]",
                            "description": "no description",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][enabled]",
                            "description": "If explicit is 1 and enabled is 1, permission <X> will be explicitly\ngranted to this role. If explicit is 1 and enabled has any other value\n(typically 0), permission <X> will be explicitly denied to this role. If\nexplicit is any other value (typically 0) or absent, or if enabled is\nabsent, the value for permission <X> will be inherited from upstream.\nIgnored if permission <X> is locked upstream (in an ancestor account).\n\nMay occur multiple times with unique values for <X>. Recognized\npermission names for <X> are:\n\n  [For Account-Level Roles Only]\n  become_user                      -- Users - act as\n  import_sis                       -- SIS Data - import\n  manage_account_memberships       -- Admins - add / remove\n  manage_account_settings          -- Account-level settings - manage\n  manage_alerts                    -- Global announcements - add / edit / delete\n  manage_catalog                   -- Catalog - manage\n  Manage Course Templates granular permissions\n      add_course_template          -- Course Templates - add\n      delete_course_template       -- Course Templates - delete\n      edit_course_template         -- Course Templates - edit\n  manage_courses_add               -- Courses - add\n  manage_courses_admin             -- Courses - manage / update\n  manage_developer_keys            -- Developer keys - manage\n  manage_feature_flags             -- Feature Options - enable / disable\n  manage_master_courses            -- Blueprint Courses - add / edit / associate / delete\n  manage_role_overrides            -- Permissions - manage\n  manage_storage_quotas            -- Storage Quotas - manage\n  manage_sis                       -- SIS data - manage\n  manage_user_logins               -- Users - manage login details\n  manage_user_observers            -- Users - manage observers\n  moderate_user_content            -- Users - moderate content\n  read_course_content              -- Course Content - view\n  read_course_list                 -- Courses - view list\n  view_course_changes              -- Courses - view change logs\n  view_feature_flags               -- Feature Options - view\n  view_grade_changes               -- Grades - view change logs\n  view_notifications               -- Notifications - view\n  view_quiz_answer_audits          -- Quizzes - view submission log\n  view_statistics                  -- Statistics - view\n  undelete_courses                 -- Courses - undelete\n\n  [For both Account-Level and Course-Level roles]\n   Note: Applicable enrollment types for course-level roles are given in brackets:\n         S = student, T = teacher (instructor), A = TA, D = designer, O = observer.\n         Lower-case letters indicate permissions that are off by default.\n         A missing letter indicates the permission cannot be enabled for the role\n         or any derived custom roles.\n  allow_course_admin_actions       -- [ Tad ] Users - allow administrative actions in courses\n  create_collaborations            -- [STADo] Student Collaborations - create\n  create_conferences               -- [STADo] Web conferences - create\n  create_forum                     -- [STADo] Discussions - create\n  generate_observer_pairing_code   -- [ tado] Users - Generate observer pairing codes for students\n  import_outcomes                  -- [ TaDo] Learning Outcomes - import\n  lti_add_edit                     -- [ TAD ] LTI - add / edit / delete\n  manage_account_banks             -- [ td  ] Item Banks - manage account\n  manage_assignments               -- [ TADo] Assignments and Quizzes - add / edit / delete (deprecated)\n  Manage Assignments and Quizzes granular permissions\n      manage_assignments_add       -- [ TADo] Assignments and Quizzes - add\n      manage_assignments_edit      -- [ TADo] Assignments and Quizzes - edit / manage\n      manage_assignments_delete    -- [ TADo] Assignments and Quizzes - delete\n  manage_calendar                  -- [sTADo] Course Calendar - add / edit / delete\n  manage_content                   -- [ TADo] Course Content - add / edit / delete\n  manage_course_visibility         -- [ TAD ] Course - change visibility\n  Manage Courses granular permissions\n      manage_courses_conclude      -- [ TaD ] Courses - conclude\n      manage_courses_delete        -- [ TaD ] Courses - delete\n      manage_courses_publish       -- [ TaD ] Courses - publish\n      manage_courses_reset         -- [ TaD ] Courses - reset\n  Manage Files granular permissions\n      manage_files_add             -- [ TADo] Course Files - add\n      manage_files_edit            -- [ TADo] Course Files - edit\n      manage_files_delete          -- [ TADo] Course Files - delete\n  manage_grades                    -- [ TA  ] Grades - edit\n  Manage Groups granular permissions\n      manage_groups_add            -- [ TAD ] Groups - add\n      manage_groups_delete         -- [ TAD ] Groups - delete\n      manage_groups_manage         -- [ TAD ] Groups - manage\n  manage_interaction_alerts        -- [ Ta  ] Alerts - add / edit / delete\n  manage_outcomes                  -- [sTaDo] Learning Outcomes - add / edit / delete\n  manage_proficiency_calculations  -- [ t d ] Outcome Proficiency Calculations - add / edit / delete\n  manage_proficiency_scales        -- [ t d ] Outcome Proficiency/Mastery Scales - add / edit / delete\n  Manage Sections granular permissions\n      manage_sections_add          -- [ TaD ] Course Sections - add\n      manage_sections_edit         -- [ TaD ] Course Sections - edit\n      manage_sections_delete       -- [ TaD ] Course Sections - delete\n  manage_students                  -- [ TAD ] Users - manage students in courses\n  manage_user_notes                -- [ TA  ] Faculty Journal - manage entries\n  manage_rubrics                   -- [ TAD ] Rubrics - add / edit / delete\n  Manage Pages granular permissions\n      manage_wiki_create           -- [ TADo] Pages - create\n      manage_wiki_delete           -- [ TADo] Pages - delete\n      manage_wiki_update           -- [ TADo] Pages - update\n  moderate_forum                   -- [sTADo] Discussions - moderate\n  post_to_forum                    -- [STADo] Discussions - post\n  read_announcements               -- [STADO] Announcements - view\n  read_email_addresses             -- [sTAdo] Users - view primary email address\n  read_forum                       -- [STADO] Discussions - view\n  read_question_banks              -- [ TADo] Question banks - view and link\n  read_reports                     -- [ TAD ] Courses - view usage reports\n  read_roster                      -- [STADo] Users - view list\n  read_sis                         -- [sTa  ] SIS Data - read\n  select_final_grade               -- [ TA  ] Grades - select final grade for moderation\n  send_messages                    -- [STADo] Conversations - send messages to individual course members\n  send_messages_all                -- [sTADo] Conversations - send messages to entire class\n  Users - Teacher granular permissions\n      add_teacher_to_course        -- [ Tad ] Add a teacher enrollment to a course\n      remove_teacher_from_course   -- [ Tad ] Remove a Teacher enrollment from a course\n  Users - TA granular permissions\n      add_ta_to_course             -- [ Tad ] Add a TA enrollment to a course\n      remove_ta_from_course        -- [ Tad ] Remove a TA enrollment from a course\n  Users - Designer granular permissions\n      add_designer_to_course       -- [ Tad ] Add a designer enrollment to a course\n      remove_designer_from_course  -- [ Tad ] Remove a designer enrollment from a course\n  Users - Observer granular permissions\n      add_observer_to_course       -- [ Tad ] Add an observer enrollment to a course\n      remove_observer_from_course  -- [ Tad ] Remove an observer enrollment from a course\n  Users - Student granular permissions\n      add_student_to_course        -- [ Tad ] Add a student enrollment to a course\n      remove_student_from_course   -- [ Tad ] Remove a student enrollment from a course\n  view_all_grades                  -- [ TAd ] Grades - view all grades\n  view_analytics                   -- [sTA  ] Analytics - view pages\n  view_audit_trail                 -- [ t   ] Grades - view audit trail\n  view_group_pages                 -- [sTADo] Groups - view all student groups\n  view_user_logins                 -- [ TA  ] Users - view login IDs\n\nSome of these permissions are applicable only for roles on the site admin\naccount, on a root account, or for course-level roles with a particular base role type;\nif a specified permission is inapplicable, it will be ignored.\n\nAdditional permissions may exist based on installed plugins.\n\nA comprehensive list of all permissions are available:\n\nCourse Permissions PDF: http://bit.ly/cnvs-course-permissions\n\nAccount Permissions PDF: http://bit.ly/cnvs-acct-permissions",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][locked]",
                            "description": "If the value is 1, permission <X> will be locked downstream (new roles in\nsubaccounts cannot override the setting). For any other value, permission\n<X> is left unlocked. Ignored if permission <X> is already locked\nupstream. May occur multiple times with unique values for <X>.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][applies_to_self]",
                            "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][applies_to_descendants]",
                            "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Role"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/roles/{id}",
            "description": "Deactivates a custom role.  This hides it in the user interface and prevents it\nfrom being assigned to new users.  Existing users assigned to the role will\ncontinue to function with the same permissions they had previously.\nBuilt-in roles cannot be deactivated.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Deactivate a role",
                    "notes": "Deactivates a custom role.  This hides it in the user interface and prevents it\nfrom being assigned to new users.  Existing users assigned to the role will\ncontinue to function with the same permissions they had previously.\nBuilt-in roles cannot be deactivated.",
                    "nickname": "deactivate_role",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role_id",
                            "description": "The unique identifier for the role",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "role",
                            "description": "The name for the role",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Role"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/roles/{id}/activate",
            "description": "Re-activates an inactive role (allowing it to be assigned to new users)",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Activate a role",
                    "notes": "Re-activates an inactive role (allowing it to be assigned to new users)",
                    "nickname": "activate_role",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "role_id",
                            "description": "The unique identifier for the role",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "role",
                            "description": "The name for the role",
                            "type": "Deprecated",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Role"
                }
            ]
        },
        {
            "path": "/v1/accounts/{account_id}/roles/{id}",
            "description": "Update permissions for an existing role.\n\nRecognized roles are:\n* TeacherEnrollment\n* StudentEnrollment\n* TaEnrollment\n* ObserverEnrollment\n* DesignerEnrollment\n* AccountAdmin\n* Any previously created custom role",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a role",
                    "notes": "Update permissions for an existing role.\n\nRecognized roles are:\n* TeacherEnrollment\n* StudentEnrollment\n* TaEnrollment\n* ObserverEnrollment\n* DesignerEnrollment\n* AccountAdmin\n* Any previously created custom role",
                    "nickname": "update_role",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "account_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "label",
                            "description": "The label for the role. Can only change the label of a custom role that belongs directly to the account.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][explicit]",
                            "description": "no description",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][enabled]",
                            "description": "These arguments are described in the documentation for the\n{api:RoleOverridesController#add_role add_role method}.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][applies_to_self]",
                            "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "permissions[<X>][applies_to_descendants]",
                            "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Role"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items/{line_item_id}/results",
            "description": "Show existing Results of a line item. Can be used to retrieve a specific student's\nresult by adding the user_id (defined as the lti_user_id or the Canvas user_id) as\na query parameter (i.e. user_id=1000). If user_id is included, it will return only\none Result in the collection if the result exists, otherwise it will be empty. May\nalso limit number of results by adding the limit query param (i.e. limit=100)",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a collection of Results",
                    "notes": "Show existing Results of a line item. Can be used to retrieve a specific student's\nresult by adding the user_id (defined as the lti_user_id or the Canvas user_id) as\na query parameter (i.e. user_id=1000). If user_id is included, it will return only\none Result in the collection if the result exists, otherwise it will be empty. May\nalso limit number of results by adding the limit query param (i.e. limit=100)",
                    "nickname": "show_collection_of_results",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "line_item_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Result"
                }
            ]
        },
        {
            "path": "/lti/courses/{course_id}/line_items/{line_item_id}/results/{id}",
            "description": "Show existing Result of a line item.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Show a Result",
                    "notes": "Show existing Result of a line item.",
                    "nickname": "show_result",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "line_item_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Result"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes",
            "description": "Returns the paginated list of Quizzes in this course.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List quizzes in a course",
                    "notes": "Returns the paginated list of Quizzes in this course.",
                    "nickname": "list_quizzes_in_course",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "search_term",
                            "description": "The partial title of the quizzes to match and return.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "Quiz"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{id}",
            "description": "Returns the quiz with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single quiz",
                    "notes": "Returns the quiz with the given id.",
                    "nickname": "get_single_quiz",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Quiz"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes",
            "description": "Create a new quiz for this course.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a quiz",
                    "notes": "Create a new quiz for this course.",
                    "nickname": "create_quiz",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[title]",
                            "description": "The quiz title.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[description]",
                            "description": "A description of the quiz.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[quiz_type]",
                            "description": "The type of quiz.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "practice_quiz",
                                "assignment",
                                "graded_survey",
                                "survey"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[assignment_group_id]",
                            "description": "The assignment group id to put the assignment in. Defaults to the top\nassignment group in the course. Only valid if the quiz is graded, i.e. if\nquiz_type is \"assignment\" or \"graded_survey\".",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[time_limit]",
                            "description": "Time limit to take this quiz, in minutes. Set to null for no time limit.\nDefaults to null.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[shuffle_answers]",
                            "description": "If true, quiz answers for multiple choice questions will be randomized for\neach student. Defaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[hide_results]",
                            "description": "Dictates whether or not quiz results are hidden from students.\nIf null, students can see their results after any attempt.\nIf \"always\", students can never see their results.\nIf \"until_after_last_attempt\", students can only see results after their\nlast attempt. (Only valid if allowed_attempts > 1). Defaults to null.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "always",
                                "until_after_last_attempt"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[show_correct_answers]",
                            "description": "Only valid if hide_results=null\nIf false, hides correct answers from students when quiz results are viewed.\nDefaults to true.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[show_correct_answers_last_attempt]",
                            "description": "Only valid if show_correct_answers=true and allowed_attempts > 1\nIf true, hides correct answers from students when quiz results are viewed\nuntil they submit the last attempt for the quiz.\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[show_correct_answers_at]",
                            "description": "Only valid if show_correct_answers=true\nIf set, the correct answers will be visible by students only after this\ndate, otherwise the correct answers are visible once the student hands in\ntheir quiz submission.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[hide_correct_answers_at]",
                            "description": "Only valid if show_correct_answers=true\nIf set, the correct answers will stop being visible once this date has\npassed. Otherwise, the correct answers will be visible indefinitely.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[allowed_attempts]",
                            "description": "Number of times a student is allowed to take a quiz.\nSet to -1 for unlimited attempts.\nDefaults to 1.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[scoring_policy]",
                            "description": "Required and only valid if allowed_attempts > 1.\nScoring policy for a quiz that students can take multiple times.\nDefaults to \"keep_highest\".",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "keep_highest",
                                "keep_latest"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[one_question_at_a_time]",
                            "description": "If true, shows quiz to student one question at a time.\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[cant_go_back]",
                            "description": "Only valid if one_question_at_a_time=true\nIf true, questions are locked after answering.\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[access_code]",
                            "description": "Restricts access to the quiz with a password.\nFor no access code restriction, set to null.\nDefaults to null.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[ip_filter]",
                            "description": "Restricts access to the quiz to computers in a specified IP range.\nFilters can be a comma-separated list of addresses, or an address followed by a mask\n\nExamples:\n  \"192.168.217.1\"\n  \"192.168.217.1/24\"\n  \"192.168.217.1/255.255.255.0\"\n\nFor no IP filter restriction, set to null.\nDefaults to null.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[due_at]",
                            "description": "The day/time the quiz is due.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[lock_at]",
                            "description": "The day/time the quiz is locked for students.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[unlock_at]",
                            "description": "The day/time the quiz is unlocked for students.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                            "type": "DateTime",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[published]",
                            "description": "Whether the quiz should have a draft state of published or unpublished.\nNOTE: If students have started taking the quiz, or there are any\nsubmissions for the quiz, you may not unpublish a quiz and will recieve\nan error.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[one_time_results]",
                            "description": "Whether students should be prevented from viewing their quiz results past\nthe first time (right after they turn the quiz in.)\nOnly valid if \"hide_results\" is not set to \"always\".\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[only_visible_to_overrides]",
                            "description": "Whether this quiz is only visible to overrides (Only useful if\n'differentiated assignments' account setting is on)\nDefaults to false.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Quiz"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{id}",
            "description": "Modify an existing quiz. See the documentation for quiz creation.\n\nAdditional arguments:",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Edit a quiz",
                    "notes": "Modify an existing quiz. See the documentation for quiz creation.\n\nAdditional arguments:",
                    "nickname": "edit_quiz",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz[notify_of_update]",
                            "description": "If true, notifies users that the quiz has changed.\nDefaults to true",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Quiz"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{id}",
            "description": "",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a quiz",
                    "notes": "",
                    "nickname": "delete_quiz",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "Quiz"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{id}/reorder",
            "description": "Change order of the quiz questions or groups within the quiz\n\n<b>204 No Content</b> response code is returned if the reorder was successful.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reorder quiz items",
                    "notes": "Change order of the quiz questions or groups within the quiz\n\n<b>204 No Content</b> response code is returned if the reorder was successful.",
                    "nickname": "reorder_quiz_items",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "order[id]",
                            "description": "The associated item's unique identifier",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "order[type]",
                            "description": "The type of item is either 'question' or 'group'",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "question",
                                "group"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{id}/validate_access_code",
            "description": "Accepts an access code and returns a boolean indicating whether that access code is correct",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Validate quiz access code",
                    "notes": "Accepts an access code and returns a boolean indicating whether that access code is correct",
                    "nickname": "validate_quiz_access_code",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "access_code",
                            "description": "The access code being validated",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "boolean"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions",
            "description": "Get a list of all submissions for this quiz. Users who can view or manage\ngrades for a course will have submissions from multiple users returned. A\nuser who can only submit will have only their own submissions returned. When\na user has an in-progress submission, only that submission is returned. When\nthere isn't an in-progress quiz_submission, all completed submissions,\nincluding previous attempts, are returned.\n\n<b>200 OK</b> response code is returned if the request was successful.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all quiz submissions.",
                    "notes": "Get a list of all submissions for this quiz. Users who can view or manage\ngrades for a course will have submissions from multiple users returned. A\nuser who can only submit will have only their own submissions returned. When\na user has an in-progress submission, only that submission is returned. When\nthere isn't an in-progress quiz_submission, all completed submissions,\nincluding previous attempts, are returned.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                    "nickname": "get_all_quiz_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the quiz submission.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "quiz",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submission",
            "description": "Get the submission for this quiz for the current user.\n\n<b>200 OK</b> response code is returned if the request was successful.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get the quiz submission.",
                    "notes": "Get the submission for this quiz for the current user.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                    "nickname": "get_quiz_submission",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the quiz submission.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "quiz",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}",
            "description": "Get a single quiz submission.\n\n<b>200 OK</b> response code is returned if the request was successful.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single quiz submission.",
                    "notes": "Get a single quiz submission.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                    "nickname": "get_single_quiz_submission",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the quiz submission.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "submission",
                                "quiz",
                                "user"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions",
            "description": "Start taking a Quiz by creating a QuizSubmission which you can use to answer\nquestions and submit your answers.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>400 Bad Request</b> if the quiz is locked\n* <b>403 Forbidden</b> if an invalid access code is specified\n* <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass\n* <b>409 Conflict</b> if a QuizSubmission already exists for this user and quiz",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create the quiz submission (start a quiz-taking session)",
                    "notes": "Start taking a Quiz by creating a QuizSubmission which you can use to answer\nquestions and submit your answers.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>400 Bad Request</b> if the quiz is locked\n* <b>403 Forbidden</b> if an invalid access code is specified\n* <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass\n* <b>409 Conflict</b> if a QuizSubmission already exists for this user and quiz",
                    "nickname": "create_quiz_submission_start_quiz_taking_session",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "access_code",
                            "description": "Access code for the Quiz, if any.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "preview",
                            "description": "Whether this should be a preview QuizSubmission and not count towards\nthe user's course record. Teachers only.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}",
            "description": "Update the amount of points a student has scored for questions they've\nanswered, provide comments for the student about their answer(s), or simply\nfudge the total score by a specific amount of points.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not a teacher in this course\n* <b>400 Bad Request</b> if the attempt parameter is missing or invalid\n* <b>400 Bad Request</b> if the specified QS attempt is not yet complete",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update student question scores and comments.",
                    "notes": "Update the amount of points a student has scored for questions they've\nanswered, provide comments for the student about their answer(s), or simply\nfudge the total score by a specific amount of points.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not a teacher in this course\n* <b>400 Bad Request</b> if the attempt parameter is missing or invalid\n* <b>400 Bad Request</b> if the specified QS attempt is not yet complete",
                    "nickname": "update_student_question_scores_and_comments",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_submissions[attempt]",
                            "description": "The attempt number of the quiz submission that should be updated. This\nattempt MUST be already completed.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_submissions[fudge_points]",
                            "description": "Amount of positive or negative points to fudge the total score by.",
                            "type": "array",
                            "format": "float",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "number"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_submissions[questions]",
                            "description": "A set of scores and comments for each question answered by the student.\nThe keys are the question IDs, and the values are hashes of `score` and\n`comment` entries. See {Appendix: Manual Scoring} for more on this\nparameter.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "Hash"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete",
            "description": "Complete the quiz submission by marking it as complete and grading it. When\nthe quiz submission has been marked as complete, no further modifications\nwill be allowed.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if an invalid access code is specified\n* <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass\n* <b>403 Forbidden</b> if an invalid token is specified\n* <b>400 Bad Request</b> if the QS is already complete\n* <b>400 Bad Request</b> if the attempt parameter is missing\n* <b>400 Bad Request</b> if the attempt parameter is not the latest attempt",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Complete the quiz submission (turn it in).",
                    "notes": "Complete the quiz submission by marking it as complete and grading it. When\nthe quiz submission has been marked as complete, no further modifications\nwill be allowed.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if an invalid access code is specified\n* <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass\n* <b>403 Forbidden</b> if an invalid token is specified\n* <b>400 Bad Request</b> if the QS is already complete\n* <b>400 Bad Request</b> if the attempt parameter is missing\n* <b>400 Bad Request</b> if the attempt parameter is not the latest attempt",
                    "nickname": "complete_quiz_submission_turn_it_in",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attempt",
                            "description": "The attempt number of the quiz submission that should be completed. Note\nthat this must be the latest attempt index, as earlier attempts can not\nbe modified.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "validation_token",
                            "description": "The unique validation token you received when this Quiz Submission was\ncreated.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "access_code",
                            "description": "Access code for the Quiz, if any.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time",
            "description": "Get the current timing data for the quiz attempt, both the end_at timestamp\nand the time_left parameter.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get current quiz submission times.",
                    "notes": "Get the current timing data for the quiz attempt, both the end_at timestamp\nand the time_left parameter.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful",
                    "nickname": "get_current_quiz_submission_times",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/quiz_submissions/{quiz_submission_id}/questions",
            "description": "Get a list of all the question records for this quiz submission.\n\n<b>200 OK</b> response code is returned if the request was successful.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get all quiz submission questions.",
                    "notes": "Get a list of all the question records for this quiz submission.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                    "nickname": "get_all_quiz_submission_questions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "quiz_submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Associations to include with the quiz submission question.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "quiz_question"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/quiz_submissions/{quiz_submission_id}/questions",
            "description": "Provide or update an answer to one or more QuizQuestions.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Answering questions",
                    "notes": "Provide or update an answer to one or more QuizQuestions.",
                    "nickname": "answering_questions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "quiz_submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attempt",
                            "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "validation_token",
                            "description": "The unique validation token you received when the Quiz Submission was\ncreated.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "access_code",
                            "description": "Access code for the Quiz, if any.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_questions",
                            "description": "Set of question IDs and the answer value.\n\nSee {Appendix: Question Answer Formats} for the accepted answer formats\nfor each question type.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "$ref": "QuizSubmissionQuestion"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "QuizSubmissionQuestion"
                    }
                }
            ]
        },
        {
            "path": "/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/formatted_answer",
            "description": "Matches the intended behavior of the UI when a numerical answer is entered\nand returns the resulting formatted number",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a formatted student numerical answer.",
                    "notes": "Matches the intended behavior of the UI when a numerical answer is entered\nand returns the resulting formatted number",
                    "nickname": "get_formatted_student_numerical_answer",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "quiz_submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "answer",
                            "description": "no description",
                            "type": "Numeric",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag",
            "description": "Set a flag on a quiz question to indicate that you want to return to it\nlater.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Flagging a question.",
                    "notes": "Set a flag on a quiz question to indicate that you want to return to it\nlater.",
                    "nickname": "flagging_question",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "quiz_submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attempt",
                            "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "validation_token",
                            "description": "The unique validation token you received when the Quiz Submission was\ncreated.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "access_code",
                            "description": "Access code for the Quiz, if any.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag",
            "description": "Remove the flag that you previously set on a quiz question after you've\nreturned to it.",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Unflagging a question.",
                    "notes": "Remove the flag that you previously set on a quiz question after you've\nreturned to it.",
                    "nickname": "unflagging_question",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "quiz_submission_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "attempt",
                            "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "validation_token",
                            "description": "The unique validation token you received when the Quiz Submission was\ncreated.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "access_code",
                            "description": "Access code for the Quiz, if any.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files",
            "description": "Associate a new quiz submission file\n\nThis API endpoint is the first step in uploading a quiz submission file.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow as these parameters are interpreted as per the\ndocumentation there.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Upload a file",
                    "notes": "Associate a new quiz submission file\n\nThis API endpoint is the first step in uploading a quiz submission file.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow as these parameters are interpreted as per the\ndocumentation there.",
                    "nickname": "upload_file",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "name",
                            "description": "The name of the quiz submission file",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "on_duplicate",
                            "description": "How to handle duplicate names",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events",
            "description": "Store a set of events which were captured during a quiz taking session.\n\nOn success, the response will be 204 No Content with an empty body.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Submit captured events",
                    "notes": "Store a set of events which were captured during a quiz taking session.\n\nOn success, the response will be 204 No Content with an empty body.",
                    "nickname": "submit_captured_events",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_submission_events",
                            "description": "The submission events to be recorded",
                            "type": "array",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "$ref": "Array"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events",
            "description": "Retrieve the set of events captured during a specific submission attempt.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve captured events",
                    "notes": "Retrieve the set of events captured during a specific submission attempt.",
                    "nickname": "retrieve_captured_events",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "attempt",
                            "description": "The specific submission attempt to look up the events for. If unspecified,\nthe latest attempt will be used.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/statistics",
            "description": "This endpoint provides statistics for all quiz versions, or for a specific\nquiz version, in which case the output is guaranteed to represent the\n_latest_ and most current version of the quiz.\n\n<b>200 OK</b> response code is returned if the request was successful.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Fetching the latest quiz statistics",
                    "notes": "This endpoint provides statistics for all quiz versions, or for a specific\nquiz version, in which case the output is guaranteed to represent the\n_latest_ and most current version of the quiz.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                    "nickname": "fetching_latest_quiz_statistics",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "all_versions",
                            "description": "Whether the statistics report should include all submissions attempts.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/reports",
            "description": "Returns a list of all available reports.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve all quiz reports",
                    "notes": "Returns a list of all available reports.",
                    "nickname": "retrieve_all_quiz_reports",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "includes_all_versions",
                            "description": "Whether to retrieve reports that consider all the submissions or only\nthe most recent. Defaults to false, ignored for item_analysis reports.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "QuizReport"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/reports",
            "description": "Create and return a new report for this quiz. If a previously\ngenerated report matches the arguments and is still current (i.e.\nthere have been no new submissions), it will be returned.\n\n*Responses*\n\n* <code>400 Bad Request</code> if the specified report type is invalid\n* <code>409 Conflict</code> if a quiz report of the specified type is already being\n  generated",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a quiz report",
                    "notes": "Create and return a new report for this quiz. If a previously\ngenerated report matches the arguments and is still current (i.e.\nthere have been no new submissions), it will be returned.\n\n*Responses*\n\n* <code>400 Bad Request</code> if the specified report type is invalid\n* <code>409 Conflict</code> if a quiz report of the specified type is already being\n  generated",
                    "nickname": "create_quiz_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_report[report_type]",
                            "description": "The type of report to be generated.",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false,
                            "enum": [
                                "student_analysis",
                                "item_analysis"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_report[includes_all_versions]",
                            "description": "Whether the report should consider all submissions or only the most\nrecent. Defaults to false, ignored for item_analysis.",
                            "type": "boolean",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "include",
                            "description": "Whether the output should include documents for the file and/or progress\nobjects associated with this report. (Note: JSON-API only)",
                            "type": "String[]",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "file",
                                "progress"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizReport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}",
            "description": "Returns the data for a single quiz report.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a quiz report",
                    "notes": "Returns the data for a single quiz report.",
                    "nickname": "get_quiz_report",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "include",
                            "description": "Whether the output should include documents for the file and/or progress\nobjects associated with this report. (Note: JSON-API only)",
                            "type": "String[]",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "file",
                                "progress"
                            ]
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizReport"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}",
            "description": "This API allows you to cancel a previous request you issued for a report to\nbe generated. Or in the case of an already generated report, you'd like to\nremove it, perhaps to generate it another time with an updated version that\nprovides new features.\n\nYou must check the report's generation status before attempting to use this\ninterface. See the \"workflow_state\" property of the QuizReport's Progress\nobject for more information. Only when the progress reports itself in a\n\"queued\" state can the generation be aborted.\n\n*Responses*\n\n- <code>204 No Content</code> if your request was accepted\n- <code>422 Unprocessable Entity</code> if the report is not being generated\n  or can not be aborted at this stage",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Abort the generation of a report, or remove a previously generated one",
                    "notes": "This API allows you to cancel a previous request you issued for a report to\nbe generated. Or in the case of an already generated report, you'd like to\nremove it, perhaps to generate it another time with an updated version that\nprovides new features.\n\nYou must check the report's generation status before attempting to use this\ninterface. See the \"workflow_state\" property of the QuizReport's Progress\nobject for more information. Only when the progress reports itself in a\n\"queued\" state can the generation be aborted.\n\n*Responses*\n\n- <code>204 No Content</code> if your request was accepted\n- <code>422 Unprocessable Entity</code> if the report is not being generated\n  or can not be aborted at this stage",
                    "nickname": "abort_generation_of_report_or_remove_previously_generated_one",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/questions",
            "description": "Returns the paginated list of QuizQuestions in this quiz.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "List questions in a quiz or a submission",
                    "notes": "Returns the paginated list of QuizQuestions in this quiz.",
                    "nickname": "list_questions_in_quiz_or_submission",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "quiz_submission_id",
                            "description": "If specified, the endpoint will return the questions that were presented\nfor that submission. This is useful if the quiz has been modified after\nthe submission was created and the latest quiz version's set of questions\ndoes not match the submission's.\nNOTE: you must specify quiz_submission_attempt as well if you specify this\nparameter.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "quiz_submission_attempt",
                            "description": "The attempt of the submission you want the questions for.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "array",
                    "items": {
                        "$ref": "QuizQuestion"
                    }
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}",
            "description": "Returns the quiz question with the given id",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single quiz question",
                    "notes": "Returns the quiz question with the given id",
                    "nickname": "get_single_quiz_question",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The quiz question unique identifier.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizQuestion"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/questions",
            "description": "Create a new quiz question for this quiz",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a single quiz question",
                    "notes": "Create a new quiz question for this quiz",
                    "nickname": "create_single_quiz_question",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[question_name]",
                            "description": "The name of the question.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[question_text]",
                            "description": "The text of the question.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[quiz_group_id]",
                            "description": "The id of the quiz group to assign the question to.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[question_type]",
                            "description": "The type of question. Multiple optional fields depend upon the type of question to be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "calculated_question",
                                "essay_question",
                                "file_upload_question",
                                "fill_in_multiple_blanks_question",
                                "matching_question",
                                "multiple_answers_question",
                                "multiple_choice_question",
                                "multiple_dropdowns_question",
                                "numerical_question",
                                "short_answer_question",
                                "text_only_question",
                                "true_false_question"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "question[position]",
                            "description": "The order in which the question will be displayed in the quiz in relation to other questions.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[points_possible]",
                            "description": "The maximum amount of points received for answering this question correctly.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[correct_comments]",
                            "description": "The comment to display if the student answers the question correctly.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[incorrect_comments]",
                            "description": "The comment to display if the student answers incorrectly.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[neutral_comments]",
                            "description": "The comment to display regardless of how the student answered.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[text_after_answers]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[answers]",
                            "description": "no description",
                            "type": "[Answer]",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizQuestion"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}",
            "description": "Updates an existing quiz question for this quiz",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update an existing quiz question",
                    "notes": "Updates an existing quiz question for this quiz",
                    "nickname": "update_existing_quiz_question",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "The associated quiz's unique identifier.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The quiz question's unique identifier.",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[question_name]",
                            "description": "The name of the question.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[question_text]",
                            "description": "The text of the question.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[quiz_group_id]",
                            "description": "The id of the quiz group to assign the question to.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[question_type]",
                            "description": "The type of question. Multiple optional fields depend upon the type of question to be used.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "calculated_question",
                                "essay_question",
                                "file_upload_question",
                                "fill_in_multiple_blanks_question",
                                "matching_question",
                                "multiple_answers_question",
                                "multiple_choice_question",
                                "multiple_dropdowns_question",
                                "numerical_question",
                                "short_answer_question",
                                "text_only_question",
                                "true_false_question"
                            ]
                        },
                        {
                            "paramType": "form",
                            "name": "question[position]",
                            "description": "The order in which the question will be displayed in the quiz in relation to other questions.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[points_possible]",
                            "description": "The maximum amount of points received for answering this question correctly.",
                            "type": "integer",
                            "format": "int64",
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[correct_comments]",
                            "description": "The comment to display if the student answers the question correctly.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[incorrect_comments]",
                            "description": "The comment to display if the student answers incorrectly.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[neutral_comments]",
                            "description": "The comment to display regardless of how the student answered.",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[text_after_answers]",
                            "description": "no description",
                            "type": "string",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "question[answers]",
                            "description": "no description",
                            "type": "[Answer]",
                            "format": null,
                            "required": false,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizQuestion"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}",
            "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a quiz question",
                    "notes": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                    "nickname": "delete_quiz_question",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "The associated quiz's unique identifier",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "The quiz question's unique identifier",
                            "type": "integer",
                            "format": "int64",
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}",
            "description": "Returns details of the quiz group with the given id.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get a single quiz group",
                    "notes": "Returns details of the quiz group with the given id.",
                    "nickname": "get_single_quiz_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizGroup"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/groups",
            "description": "Create a new question group for this quiz\n\n<b>201 Created</b> response code is returned if the creation was successful.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Create a question group",
                    "notes": "Create a new question group for this quiz\n\n<b>201 Created</b> response code is returned if the creation was successful.",
                    "nickname": "create_question_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_groups[name]",
                            "description": "The name of the question group.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_groups[pick_count]",
                            "description": "The number of questions to randomly select for this group.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_groups[question_points]",
                            "description": "The number of points to assign to each question in the group.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_groups[assessment_question_bank_id]",
                            "description": "The id of the assessment question bank to pull questions from.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}",
            "description": "Update a question group",
            "operations": [
                {
                    "method": "PUT",
                    "summary": "Update a question group",
                    "notes": "Update a question group",
                    "nickname": "update_question_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_groups[name]",
                            "description": "The name of the question group.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_groups[pick_count]",
                            "description": "The number of questions to randomly select for this group.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_groups[question_points]",
                            "description": "The number of points to assign to each question in the group.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}",
            "description": "Delete a question group\n\n<b>204 No Content<b> response code is returned if the deletion was successful.",
            "operations": [
                {
                    "method": "DELETE",
                    "summary": "Delete a question group",
                    "notes": "Delete a question group\n\n<b>204 No Content<b> response code is returned if the deletion was successful.",
                    "nickname": "delete_question_group",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder",
            "description": "Change the order of the quiz questions within the group\n\n<b>204 No Content<b> response code is returned if the reorder was successful.",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Reorder question groups",
                    "notes": "Change the order of the quiz questions within the group\n\n<b>204 No Content<b> response code is returned if the reorder was successful.",
                    "nickname": "reorder_question_groups",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "order[id]",
                            "description": "The associated item's unique identifier",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "order[type]",
                            "description": "The type of item is always 'question' for a group",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "enum": [
                                "question"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters",
            "description": "Get a list of available IP filters for this Quiz.\n\n<b>200 OK</b> response code is returned if the request was successful.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Get available quiz IP filters.",
                    "notes": "Get a list of available IP filters for this Quiz.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                    "nickname": "get_available_quiz_ip_filters",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/{quiz_id}/extensions",
            "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
            "operations": [
                {
                    "method": "POST",
                    "summary": "Set extensions for student quiz submissions",
                    "notes": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
                    "nickname": "set_extensions_for_student_quiz_submissions",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "path",
                            "name": "quiz_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_extensions[user_id]",
                            "description": "The ID of the user we want to add quiz extensions for.",
                            "type": "array",
                            "format": "int64",
                            "required": true,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_extensions[extra_attempts]",
                            "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_extensions[extra_time]",
                            "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_extensions[manually_unlocked]",
                            "description": "Allow the student to take the quiz even if it's locked for\neveryone else.",
                            "type": "array",
                            "format": null,
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "boolean"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_extensions[extend_from_now]",
                            "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "paramType": "form",
                            "name": "quiz_extensions[extend_from_end_at]",
                            "description": "The number of minutes to extend the quiz beyond the quiz's current\nending time. This is mutually exclusive to extend_from_now. This is\nlimited to 1440 minutes (24 hours)",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "void"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/quizzes/assignment_overrides",
            "description": "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes\nbased on the assignment overrides active for the current API user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve assignment-overridden dates for Classic Quizzes",
                    "notes": "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes\nbased on the assignment overrides active for the current API user.",
                    "nickname": "retrieve_assignment_overridden_dates_for_classic_quizzes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "quiz_assignment_overrides[0][quiz_ids]",
                            "description": "An array of quiz IDs. If omitted, overrides for all quizzes available to\nthe operating user will be returned.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizAssignmentOverrideSetContainer"
                }
            ]
        },
        {
            "path": "/v1/courses/{course_id}/new_quizzes/assignment_overrides",
            "description": "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes\nbased on the assignment overrides active for the current API user.",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Retrieve assignment-overridden dates for New Quizzes",
                    "notes": "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes\nbased on the assignment overrides active for the current API user.",
                    "nickname": "retrieve_assignment_overridden_dates_for_new_quizzes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "course_id",
                            "description": "ID",
                            "type": "string",
                            "format": null,
                            "required": true,
                            "deprecated": false
                        },
                        {
                            "paramType": "query",
                            "name": "quiz_assignment_overrides[0][quiz_ids]",
                            "description": "An array of quiz IDs. If omitted, overrides for all quizzes available to\nthe operating user will be returned.",
                            "type": "array",
                            "format": "int64",
                            "required": false,
                            "deprecated": false,
                            "items": {
                                "type": "integer"
                            }
                        }
                    ],
                    "response_fields": [],
                    "deprecated": false,
                    "deprecation_description": "",
                    "type": "QuizAssignmentOverrideSetContainer"
                }
            ]
        }
    ],
    "models": {
        "UserDisplay": {
            "id": "UserDisplay",
            "description": "This mini-object is used for secondary user responses, when we just want to provide enough information to display a user.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the user.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "short_name": {
                    "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                    "example": "Shelly",
                    "type": "string"
                },
                "avatar_image_url": {
                    "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.",
                    "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                    "type": "string"
                },
                "html_url": {
                    "description": "URL to access user, either nested to a context or directly.",
                    "example": "https://school.instructure.com/courses/:course_id/users/:user_id",
                    "type": "string"
                }
            }
        },
        "AnonymousUserDisplay": {
            "id": "AnonymousUserDisplay",
            "description": "This mini-object is returned in place of UserDisplay when returning student data for anonymous assignments, and includes an anonymous ID to identify a user within the scope of a single assignment.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "anonymous_id": {
                    "description": "A unique short ID identifying this user within the scope of a particular assignment.",
                    "example": "xn29Q",
                    "type": "string"
                },
                "avatar_image_url": {
                    "description": "A URL to retrieve a generic avatar.",
                    "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                    "type": "string"
                },
                "display_name": {
                    "description": "The anonymized display name for the student.",
                    "example": "Student 2",
                    "type": "string"
                }
            }
        },
        "User": {
            "id": "User",
            "description": "A Canvas user, e.g. a student, teacher, administrator, observer, etc.",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the user.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "description": "The name of the user.",
                    "example": "Sheldon Cooper",
                    "type": "string"
                },
                "sortable_name": {
                    "description": "The name of the user that is should be used for sorting groups of users, such as in the gradebook.",
                    "example": "Cooper, Sheldon",
                    "type": "string"
                },
                "last_name": {
                    "description": "The last name of the user.",
                    "example": "Cooper",
                    "type": "string"
                },
                "first_name": {
                    "description": "The first name of the user.",
                    "example": "Sheldon",
                    "type": "string"
                },
                "short_name": {
                    "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                    "example": "Shelly",
                    "type": "string"
                },
                "sis_user_id": {
                    "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.",
                    "example": "18",
                    "type": "integer",
                    "format": "int64"
                },
                "integration_id": {
                    "description": "The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                    "example": "ABC59802",
                    "type": "string"
                },
                "login_id": {
                    "description": "The unique login id for the user.  This is what the user uses to log in to Canvas.",
                    "example": "sheldon@caltech.example.com",
                    "type": "string"
                },
                "avatar_url": {
                    "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.",
                    "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                    "type": "string"
                },
                "avatar_state": {
                    "description": "Optional: If avatars are enabled and caller is admin, this field can be requested and will contain the current state of the user's avatar.",
                    "example": "approved",
                    "type": "string"
                },
                "enrollments": {
                    "description": "Optional: This field can be requested with certain API calls, and will return a list of the users active enrollments. See the List enrollments API for more details about the format of these records.",
                    "type": "array",
                    "items": {
                        "$ref": "Enrollment"
                    }
                },
                "email": {
                    "description": "Optional: This field can be requested with certain API calls, and will return the users primary email address.",
                    "example": "sheldon@caltech.example.com",
                    "type": "string"
                },
                "locale": {
                    "description": "Optional: This field can be requested with certain API calls, and will return the users locale in RFC 5646 format.",
                    "example": "tlh",
                    "type": "string"
                },
                "last_login": {
                    "description": "Optional: This field is only returned in certain API calls, and will return a timestamp representing the last time the user logged in to canvas.",
                    "example": "2012-05-30T17:45:25Z",
                    "type": "string",
                    "format": "date-time"
                },
                "time_zone": {
                    "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.",
                    "example": "America/Denver",
                    "type": "string"
                },
                "bio": {
                    "description": "Optional: The user's bio.",
                    "example": "I like the Muppets.",
                    "type": "string"
                }
            }
        },
        "Profile": {
            "id": "Profile",
            "description": "Profile details for a Canvas user.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the user.",
                    "example": 1234,
                    "type": "integer"
                },
                "name": {
                    "description": "Sample User",
                    "example": "Sample User",
                    "type": "string"
                },
                "short_name": {
                    "description": "Sample User",
                    "example": "Sample User",
                    "type": "string"
                },
                "sortable_name": {
                    "description": "user, sample",
                    "example": "user, sample",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "primary_email": {
                    "description": "sample_user@example.com",
                    "example": "sample_user@example.com",
                    "type": "string"
                },
                "login_id": {
                    "description": "sample_user@example.com",
                    "example": "sample_user@example.com",
                    "type": "string"
                },
                "sis_user_id": {
                    "description": "sis1",
                    "example": "sis1",
                    "type": "string"
                },
                "lti_user_id": {
                    "type": "string"
                },
                "avatar_url": {
                    "description": "The avatar_url can change over time, so we recommend not caching it for more than a few hours",
                    "example": "..url..",
                    "type": "string"
                },
                "calendar": {
                    "$ref": "CalendarLink"
                },
                "time_zone": {
                    "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.",
                    "example": "America/Denver",
                    "type": "string"
                },
                "locale": {
                    "description": "The users locale.",
                    "type": "string"
                },
                "k5_user": {
                    "description": "Optional: Whether or not the user is a K5 user. This field is nil if the user settings are not for the user making the request.",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "Avatar": {
            "id": "Avatar",
            "description": "Possible avatar for a user.",
            "required": [
                "type",
                "url",
                "token",
                "display_name"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "type": {
                    "description": "['gravatar'|'attachment'|'no_pic'] The type of avatar record, for categorization purposes.",
                    "example": "gravatar",
                    "type": "string"
                },
                "url": {
                    "description": "The url of the avatar",
                    "example": "https://secure.gravatar.com/avatar/2284...",
                    "type": "string"
                },
                "token": {
                    "description": "A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.",
                    "example": "<opaque_token>",
                    "type": "string"
                },
                "display_name": {
                    "description": "A textual description of the avatar record.",
                    "example": "user, sample",
                    "type": "string"
                },
                "id": {
                    "description": "['attachment' type only] the internal id of the attachment",
                    "example": 12,
                    "type": "integer"
                },
                "content-type": {
                    "description": "['attachment' type only] the content-type of the attachment.",
                    "example": "image/jpeg",
                    "type": "string"
                },
                "filename": {
                    "description": "['attachment' type only] the filename of the attachment",
                    "example": "profile.jpg",
                    "type": "string"
                },
                "size": {
                    "description": "['attachment' type only] the size of the attachment",
                    "example": 32649,
                    "type": "integer"
                }
            }
        },
        "PageView": {
            "id": "PageView",
            "description": "The record of a user page view access in Canvas",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "A UUID representing the page view.  This is also the unique request id",
                    "example": "3e246700-e305-0130-51de-02e33aa501ef",
                    "type": "string",
                    "format": "uuid"
                },
                "app_name": {
                    "description": "If the request is from an API request, the app that generated the access token",
                    "example": "Canvas for iOS",
                    "type": "string"
                },
                "url": {
                    "description": "The URL requested",
                    "example": "https://canvas.instructure.com/conversations",
                    "type": "string"
                },
                "context_type": {
                    "description": "The type of context for the request",
                    "example": "Course",
                    "type": "string"
                },
                "asset_type": {
                    "description": "The type of asset in the context for the request, if any",
                    "example": "Discussion",
                    "type": "string"
                },
                "controller": {
                    "description": "The rails controller that handled the request",
                    "example": "discussions",
                    "type": "string"
                },
                "action": {
                    "description": "The rails action that handled the request",
                    "example": "index",
                    "type": "string"
                },
                "contributed": {
                    "description": "This field is deprecated, and will always be false",
                    "example": "false",
                    "type": "boolean"
                },
                "interaction_seconds": {
                    "description": "An approximation of how long the user spent on the page, in seconds",
                    "example": "7.21",
                    "type": "number"
                },
                "created_at": {
                    "description": "When the request was made",
                    "example": "2013-10-01T19:49:47Z",
                    "type": "datetime",
                    "format": "iso8601"
                },
                "user_request": {
                    "description": "A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)",
                    "example": "true",
                    "type": "boolean"
                },
                "render_time": {
                    "description": "How long the response took to render, in seconds",
                    "example": "0.369",
                    "type": "number"
                },
                "user_agent": {
                    "description": "The user-agent of the browser or program that made the request",
                    "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/536.30.1 (KHTML, like Gecko) Version/6.0.5 Safari/536.30.1",
                    "type": "string"
                },
                "participated": {
                    "description": "True if the request counted as participating, such as submitting homework",
                    "example": "false",
                    "type": "boolean"
                },
                "http_method": {
                    "description": "The HTTP method such as GET or POST",
                    "example": "GET",
                    "type": "string"
                },
                "remote_ip": {
                    "description": "The origin IP address of the request",
                    "example": "173.194.46.71",
                    "type": "string"
                },
                "links": {
                    "description": "The page view links to define the relationships",
                    "$ref": "PageViewLinks",
                    "example": {
                        "user": 1234,
                        "account": 1234
                    }
                }
            }
        },
        "PageViewLinks": {
            "id": "PageViewLinks",
            "description": "The links of a page view access in Canvas",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user": {
                    "description": "The ID of the user for this page view",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "context": {
                    "description": "The ID of the context for the request (course id if context_type is Course, etc)",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "asset": {
                    "description": "The ID of the asset for the request, if any",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "real_user": {
                    "description": "The ID of the actual user who made this request, if the request was made by a user who was masquerading",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                },
                "account": {
                    "description": "The ID of the account context for this page view",
                    "example": "1234",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "CourseNickname": {
            "id": "CourseNickname",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "course_id": {
                    "description": "the ID of the course",
                    "example": 88,
                    "type": "integer"
                },
                "name": {
                    "description": "the actual name of the course",
                    "example": "S1048576 DPMS1200 Intro to Newtonian Mechanics",
                    "type": "string"
                },
                "nickname": {
                    "description": "the calling user's nickname for the course",
                    "example": "Physics",
                    "type": "string"
                }
            }
        },
        "PairingCode": {
            "id": "PairingCode",
            "description": "A code used for linking a user to a student to observe them.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user_id": {
                    "description": "The ID of the user.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "code": {
                    "description": "The actual code to be sent to other APIs",
                    "example": "abc123",
                    "type": "string"
                },
                "expires_at": {
                    "description": "When the code expires",
                    "example": "2012-05-30T17:45:25Z",
                    "type": "string",
                    "format": "date-time"
                },
                "workflow_state": {
                    "description": "The current status of the code",
                    "example": "active",
                    "type": "string"
                }
            }
        },
        "Tab": {
            "id": "Tab",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "html_url": {
                    "example": "/courses/1/external_tools/4",
                    "type": "string"
                },
                "id": {
                    "example": "context_external_tool_4",
                    "type": "string"
                },
                "label": {
                    "example": "WordPress",
                    "type": "string"
                },
                "type": {
                    "example": "external",
                    "type": "string"
                },
                "hidden": {
                    "description": "only included if true",
                    "example": true,
                    "type": "boolean"
                },
                "visibility": {
                    "description": "possible values are: public, members, admins, and none",
                    "example": "public",
                    "type": "string"
                },
                "position": {
                    "description": "1 based",
                    "example": 2,
                    "type": "integer"
                }
            }
        },
        "MediaComment": {
            "id": "MediaComment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "content-type": {
                    "example": "audio/mp4",
                    "type": "string"
                },
                "display_name": {
                    "example": "something",
                    "type": "string"
                },
                "media_id": {
                    "example": "3232",
                    "type": "string"
                },
                "media_type": {
                    "example": "audio",
                    "type": "string"
                },
                "url": {
                    "example": "http://example.com/media_url",
                    "type": "string"
                }
            }
        },
        "SubmissionComment": {
            "id": "SubmissionComment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": 37,
                    "type": "integer"
                },
                "author_id": {
                    "example": 134,
                    "type": "integer"
                },
                "author_name": {
                    "example": "Toph Beifong",
                    "type": "string"
                },
                "author": {
                    "description": "Abbreviated user object UserDisplay (see users API).",
                    "example": "{}",
                    "type": "string"
                },
                "comment": {
                    "example": "Well here's the thing...",
                    "type": "string"
                },
                "created_at": {
                    "example": "2012-01-01T01:00:00Z",
                    "type": "datetime"
                },
                "edited_at": {
                    "example": "2012-01-02T01:00:00Z",
                    "type": "datetime"
                },
                "media_comment": {
                    "$ref": "MediaComment"
                }
            }
        },
        "Submission": {
            "id": "Submission",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "assignment_id": {
                    "description": "The submission's assignment id",
                    "example": 23,
                    "type": "integer"
                },
                "assignment": {
                    "description": "The submission's assignment (see the assignments API) (optional)",
                    "$ref": "Assignment"
                },
                "course": {
                    "description": "The submission's course (see the course API) (optional)",
                    "$ref": "Course"
                },
                "attempt": {
                    "description": "This is the submission attempt number.",
                    "example": 1,
                    "type": "integer"
                },
                "body": {
                    "description": "The content of the submission, if it was submitted directly in a text field.",
                    "example": "There are three factors too...",
                    "type": "string"
                },
                "grade": {
                    "description": "The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).",
                    "example": "A-",
                    "type": "string"
                },
                "grade_matches_current_submission": {
                    "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded.",
                    "example": true,
                    "type": "boolean"
                },
                "html_url": {
                    "description": "URL to the submission. This will require the user to log in.",
                    "example": "http://example.com/courses/255/assignments/543/submissions/134",
                    "type": "string"
                },
                "preview_url": {
                    "description": "URL to the submission preview. This will require the user to log in.",
                    "example": "http://example.com/courses/255/assignments/543/submissions/134?preview=1",
                    "type": "string"
                },
                "score": {
                    "description": "The raw score",
                    "example": 13.5,
                    "type": "number"
                },
                "submission_comments": {
                    "description": "Associated comments for a submission (optional)",
                    "type": "array",
                    "items": {
                        "$ref": "SubmissionComment"
                    }
                },
                "submission_type": {
                    "description": "The types of submission ex: ('online_text_entry'|'online_url'|'online_upload'|'media_recording'|'student_annotation')",
                    "example": "online_text_entry",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "online_text_entry",
                            "online_url",
                            "online_upload",
                            "media_recording",
                            "student_annotation"
                        ]
                    }
                },
                "submitted_at": {
                    "description": "The timestamp when the assignment was submitted",
                    "example": "2012-01-01T01:00:00Z",
                    "type": "datetime"
                },
                "url": {
                    "description": "The URL of the submission (for 'online_url' submissions).",
                    "type": "string"
                },
                "user_id": {
                    "description": "The id of the user who created the submission",
                    "example": 134,
                    "type": "integer"
                },
                "grader_id": {
                    "description": "The id of the user who graded the submission. This will be null for submissions that haven't been graded yet. It will be a positive number if a real user has graded the submission and a negative number if the submission was graded by a process (e.g. Quiz autograder and autograding LTI tools).  Specifically autograded quizzes set grader_id to the negative of the quiz id.  Submissions autograded by LTI tools set grader_id to the negative of the tool id.",
                    "example": 86,
                    "type": "integer"
                },
                "graded_at": {
                    "example": "2012-01-02T03:05:34Z",
                    "type": "datetime"
                },
                "user": {
                    "description": "The submissions user (see user API) (optional)",
                    "$ref": "User"
                },
                "late": {
                    "description": "Whether the submission was made after the applicable due date",
                    "example": false,
                    "type": "boolean"
                },
                "assignment_visible": {
                    "description": "Whether the assignment is visible to the user who submitted the assignment. Submissions where `assignment_visible` is false no longer count towards the student's grade and the assignment can no longer be accessed by the student. `assignment_visible` becomes false for submissions that do not have a grade and whose assignment is no longer assigned to the student's section.",
                    "example": true,
                    "type": "boolean"
                },
                "excused": {
                    "description": "Whether the assignment is excused.  Excused assignments have no impact on a user's grade.",
                    "example": true,
                    "type": "boolean"
                },
                "missing": {
                    "description": "Whether the assignment is missing.",
                    "example": true,
                    "type": "boolean"
                },
                "late_policy_status": {
                    "description": "The status of the submission in relation to the late policy. Can be late, missing, extended, none, or null.",
                    "example": "missing",
                    "type": "string"
                },
                "points_deducted": {
                    "description": "The amount of points automatically deducted from the score by the missing/late policy for a late or missing assignment.",
                    "example": 12.3,
                    "type": "number"
                },
                "seconds_late": {
                    "description": "The amount of time, in seconds, that an submission is late by.",
                    "example": 300,
                    "type": "number"
                },
                "workflow_state": {
                    "description": "The current state of the submission",
                    "example": "submitted",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "graded",
                            "submitted",
                            "unsubmitted",
                            "pending_review"
                        ]
                    }
                },
                "extra_attempts": {
                    "description": "Extra submission attempts allowed for the given user and assignment.",
                    "example": 10,
                    "type": "number"
                },
                "anonymous_id": {
                    "description": "A unique short ID identifying this submission without reference to the owning user. Only included if the caller has administrator access for the current account.",
                    "example": "acJ4Q",
                    "type": "string"
                },
                "posted_at": {
                    "description": "The date this submission was posted to the student, or nil if it has not been posted.",
                    "example": "2020-01-02T11:10:30Z",
                    "type": "datetime"
                },
                "read_status": {
                    "description": "The read status of this submission for the given user (optional). Including read_status will mark submission(s) as read.",
                    "example": "read",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "read",
                            "unread"
                        ]
                    }
                },
                "redo_request": {
                    "description": "This indicates whether the submission has been reassigned by the instructor.",
                    "example": "true",
                    "type": "boolean"
                }
            }
        },
        "SisAssignment": {
            "id": "SisAssignment",
            "description": "Assignments that have post_to_sis enabled with other objects for convenience",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the assignment.",
                    "example": 4,
                    "type": "integer"
                },
                "course_id": {
                    "description": "The unique identifier for the course.",
                    "example": 6,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the assignment",
                    "example": "some assignment",
                    "type": "string"
                },
                "created_at": {
                    "description": "The time at which this assignment was originally created",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "due_at": {
                    "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "(Optional) Time at which this was/will be unlocked.",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "(Optional) Time at which this was/will be locked.",
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "points_possible": {
                    "description": "The maximum points possible for the assignment",
                    "example": 12,
                    "type": "integer"
                },
                "submission_types": {
                    "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'",
                    "example": [
                        "online_text_entry"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "allowableValues": {
                        "values": [
                            "discussion_topic",
                            "online_quiz",
                            "on_paper",
                            "not_graded",
                            "none",
                            "external_tool",
                            "online_text_entry",
                            "online_url",
                            "online_upload",
                            "media_recording",
                            "student_annotation"
                        ]
                    }
                },
                "integration_id": {
                    "example": "12341234",
                    "type": "string",
                    "description": "Third Party integration id for assignment"
                },
                "integration_data": {
                    "example": "other_data",
                    "type": "string",
                    "description": "(optional, Third Party integration data for assignment)"
                },
                "include_in_final_grade": {
                    "description": "If false, the assignment will be omitted from the student's final grade",
                    "example": true,
                    "type": "boolean"
                },
                "assignment_group": {
                    "description": "Includes attributes of a assignment_group for convenience. For more details see Assignments API.",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentGroupAttributes"
                    }
                },
                "sections": {
                    "description": "Includes attributes of a section for convenience. For more details see Sections API.",
                    "type": "array",
                    "items": {
                        "$ref": "SectionAttributes"
                    }
                },
                "user_overrides": {
                    "description": "Includes attributes of a user assignment overrides. For more details see Assignments API.",
                    "type": "array",
                    "items": {
                        "$ref": "UserAssignmentOverrideAttributes"
                    }
                }
            }
        },
        "AssignmentGroupAttributes": {
            "id": "AssignmentGroupAttributes",
            "description": "Some of the attributes of an Assignment Group. See Assignments API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the id of the Assignment Group",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "the name of the Assignment Group",
                    "example": "group2",
                    "type": "string"
                },
                "group_weight": {
                    "description": "the weight of the Assignment Group",
                    "example": 20,
                    "type": "integer"
                },
                "sis_source_id": {
                    "description": "the sis source id of the Assignment Group",
                    "example": "1234",
                    "type": "string"
                },
                "integration_data": {
                    "description": "the integration data of the Assignment Group",
                    "example": {
                        "5678": "0954"
                    },
                    "type": "object"
                }
            }
        },
        "SectionAttributes": {
            "id": "SectionAttributes",
            "description": "Some of the attributes of a section. For more details see Sections API.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the section.",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the section.",
                    "example": "Section A",
                    "type": "string"
                },
                "sis_id": {
                    "description": "The sis id of the section.",
                    "example": "s34643",
                    "type": "string"
                },
                "integration_id": {
                    "description": "Optional: The integration ID of the section.",
                    "example": "3452342345",
                    "type": "string"
                },
                "origin_course": {
                    "description": "The course to which the section belongs or the course from which the section was cross-listed",
                    "$ref": "CourseAttributes"
                },
                "xlist_course": {
                    "description": "Optional: Attributes of the xlist course. Only present when the section has been cross-listed. See Courses API for more details",
                    "$ref": "CourseAttributes"
                },
                "override": {
                    "description": "Optional: Attributes of the assignment override that apply to the section. See Assignment API for more details",
                    "$ref": "SectionAssignmentOverrideAttributes"
                }
            }
        },
        "CourseAttributes": {
            "id": "CourseAttributes",
            "description": "Attributes of a course object.  See Courses API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique Canvas identifier for the origin course",
                    "example": 7,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the origin course.",
                    "example": "Section A",
                    "type": "string"
                },
                "sis_id": {
                    "description": "The sis id of the origin_course.",
                    "example": "c34643",
                    "type": "string"
                },
                "integration_id": {
                    "description": "The integration ID of the origin_course.",
                    "example": "I-2",
                    "type": "string"
                }
            }
        },
        "SectionAssignmentOverrideAttributes": {
            "id": "SectionAssignmentOverrideAttributes",
            "description": "Attributes of an assignment override that apply to the section object.  See Assignments API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "override_title": {
                    "description": "The title for the assignment override",
                    "example": "some section override",
                    "type": "string"
                },
                "due_at": {
                    "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
                    "example": "2012-07-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "(Optional) Time at which this was/will be unlocked.",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "(Optional) Time at which this was/will be locked.",
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime"
                }
            }
        },
        "UserAssignmentOverrideAttributes": {
            "id": "UserAssignmentOverrideAttributes",
            "description": "Attributes of assignment overrides that apply to users.  See Assignments API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique Canvas identifier for the assignment override",
                    "example": 218,
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the assignment override.",
                    "example": "Override title",
                    "type": "string"
                },
                "due_at": {
                    "description": "The time at which this assignment is due",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "(Optional) Time at which this was/will be unlocked.",
                    "example": "2013-01-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "(Optional) Time at which this was/will be locked.",
                    "example": "2013-02-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "students": {
                    "description": "Includes attributes of a student for convenience. For more details see Users API.",
                    "type": "array",
                    "items": {
                        "$ref": "StudentAttributes"
                    }
                }
            }
        },
        "StudentAttributes": {
            "id": "StudentAttributes",
            "description": "Attributes of student.  See Users API for more details",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "user_id": {
                    "description": "The unique Canvas identifier for the user",
                    "example": 511,
                    "type": "integer"
                },
                "sis_user_id": {
                    "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                    "example": "SHEL93921",
                    "type": "string"
                }
            }
        },
        "SisImportData": {
            "id": "SisImportData",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "import_type": {
                    "description": "The type of SIS import",
                    "example": "instructure_csv",
                    "type": "string"
                },
                "supplied_batches": {
                    "description": "Which files were included in the SIS import",
                    "example": [
                        "term",
                        "course",
                        "section",
                        "user",
                        "enrollment"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "counts": {
                    "description": "The number of rows processed for each type of import",
                    "$ref": "SisImportCounts"
                }
            }
        },
        "SisImportStatistic": {
            "id": "SisImportStatistic",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "created": {
                    "description": "This is the number of items that were created.",
                    "example": 18,
                    "type": "integer"
                },
                "concluded": {
                    "description": "This is the number of items that marked as completed. This only applies to courses and enrollments.",
                    "example": 3,
                    "type": "integer"
                },
                "deactivated": {
                    "description": "This is the number of Enrollments that were marked as 'inactive'. This only applies to enrollments.",
                    "example": 1,
                    "type": "integer"
                },
                "restored": {
                    "description": "This is the number of items that were set to an active state from a completed, inactive, or deleted state.",
                    "example": 2,
                    "type": "integer"
                },
                "deleted": {
                    "description": "This is the number of items that were deleted.",
                    "example": 40,
                    "type": "integer"
                }
            }
        },
        "SisImportStatistics": {
            "id": "SisImportStatistics",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "total_state_changes": {
                    "description": "This is the total number of items that were changed in the sis import. There are a few caveats that can cause this number to not add up to the individual counts. There are some state changes that happen that have no impact to the object. An example would be changing a course from 'created' to 'claimed'. Both of these would be considered an active course, but would increment this counter. In this example the course would not increment the created or restored counters for course statistic.",
                    "example": 382,
                    "type": "integer"
                },
                "Account": {
                    "description": "This contains that statistics for accounts.",
                    "$ref": "SisImportStatistic"
                },
                "EnrollmentTerm": {
                    "description": "This contains that statistics for terms.",
                    "$ref": "SisImportStatistic"
                },
                "CommunicationChannel": {
                    "description": "This contains that statistics for communication channels. This is an indirect effect from creating or deleting a user.",
                    "$ref": "SisImportStatistic"
                },
                "AbstractCourse": {
                    "description": "This contains that statistics for abstract courses.",
                    "$ref": "SisImportStatistic"
                },
                "Course": {
                    "description": "This contains that statistics for courses.",
                    "$ref": "SisImportStatistic"
                },
                "CourseSection": {
                    "description": "This contains that statistics for course sections.",
                    "$ref": "SisImportStatistic"
                },
                "Enrollment": {
                    "description": "This contains that statistics for enrollments.",
                    "$ref": "SisImportStatistic"
                },
                "GroupCategory": {
                    "description": "This contains that statistics for group categories.",
                    "$ref": "SisImportStatistic"
                },
                "Group": {
                    "description": "This contains that statistics for groups.",
                    "$ref": "SisImportStatistic"
                },
                "GroupMembership": {
                    "description": "This contains that statistics for group memberships. This can be a direct impact from the import or indirect from an enrollment being deleted.",
                    "$ref": "SisImportStatistic"
                },
                "Pseudonym": {
                    "description": "This contains that statistics for pseudonyms. Pseudonyms are logins for users, and are the object that ties an enrollment to a user. This would be impacted from the user importer. ",
                    "$ref": "SisImportStatistic"
                },
                "UserObserver": {
                    "description": "This contains that statistics for user observers.",
                    "$ref": "SisImportStatistic"
                },
                "AccountUser": {
                    "description": "This contains that statistics for account users.",
                    "$ref": "SisImportStatistic"
                }
            }
        },
        "SisImportCounts": {
            "id": "SisImportCounts",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "accounts": {
                    "example": 0,
                    "type": "integer"
                },
                "terms": {
                    "example": 3,
                    "type": "integer"
                },
                "abstract_courses": {
                    "example": 0,
                    "type": "integer"
                },
                "courses": {
                    "example": 121,
                    "type": "integer"
                },
                "sections": {
                    "example": 278,
                    "type": "integer"
                },
                "xlists": {
                    "example": 0,
                    "type": "integer"
                },
                "users": {
                    "example": 346,
                    "type": "integer"
                },
                "enrollments": {
                    "example": 1542,
                    "type": "integer"
                },
                "groups": {
                    "example": 0,
                    "type": "integer"
                },
                "group_memberships": {
                    "example": 0,
                    "type": "integer"
                },
                "grade_publishing_results": {
                    "example": 0,
                    "type": "integer"
                },
                "batch_courses_deleted": {
                    "description": "the number of courses that were removed because they were not included in the batch for batch_mode imports. Only included if courses were deleted",
                    "example": 11,
                    "type": "integer"
                },
                "batch_sections_deleted": {
                    "description": "the number of sections that were removed because they were not included in the batch for batch_mode imports. Only included if sections were deleted",
                    "example": 0,
                    "type": "integer"
                },
                "batch_enrollments_deleted": {
                    "description": "the number of enrollments that were removed because they were not included in the batch for batch_mode imports. Only included if enrollments were deleted",
                    "example": 150,
                    "type": "integer"
                },
                "error_count": {
                    "example": 0,
                    "type": "integer"
                },
                "warning_count": {
                    "example": 0,
                    "type": "integer"
                }
            }
        },
        "SisImport": {
            "id": "SisImport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the SIS import.",
                    "example": 1,
                    "type": "integer"
                },
                "created_at": {
                    "description": "The date the SIS import was created.",
                    "example": "2013-12-01T23:59:00-06:00",
                    "type": "datetime"
                },
                "ended_at": {
                    "description": "The date the SIS import finished. Returns null if not finished.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "The date the SIS import was last updated.",
                    "example": "2013-12-02T00:03:21-06:00",
                    "type": "datetime"
                },
                "workflow_state": {
                    "description": "The current state of the SIS import.\n - 'initializing': The SIS import is being created, if this gets stuck in initializing, it will not import and will continue on to next import.\n - 'created': The SIS import has been created.\n - 'importing': The SIS import is currently processing.\n - 'cleanup_batch': The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.\n - 'imported': The SIS import has completed successfully.\n - 'imported_with_messages': The SIS import completed with errors or warnings.\n - 'aborted': The SIS import was aborted.\n - 'failed_with_messages': The SIS import failed with errors.\n - 'failed': The SIS import failed.\n - 'restoring': The SIS import is restoring states of imported items.\n - 'partially_restored': The SIS import is restored some of the states of imported items. This is generally due to passing a param like undelete only.\n - 'restored': The SIS import is restored all of the states of imported items.",
                    "example": "imported",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "initializing",
                            "created",
                            "importing",
                            "cleanup_batch",
                            "imported",
                            "imported_with_messages",
                            "aborted",
                            "failed",
                            "failed_with_messages",
                            "restoring",
                            "partially_restored",
                            "restored"
                        ]
                    }
                },
                "data": {
                    "description": "data",
                    "$ref": "SisImportData"
                },
                "statistics": {
                    "description": "statistics",
                    "$ref": "SisImportStatistics"
                },
                "progress": {
                    "description": "The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage",
                    "example": "100",
                    "type": "string"
                },
                "errors_attachment": {
                    "description": "The errors_attachment api object of the SIS import. Only available if there are errors or warning and import has completed.",
                    "$ref": "File"
                },
                "user": {
                    "description": "The user that initiated the sis_batch. See the Users API for details.",
                    "$ref": "User"
                },
                "processing_warnings": {
                    "description": "Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.",
                    "example": [
                        [
                            "students.csv",
                            "user John Doe has already claimed john_doe's requested login information, skipping"
                        ]
                    ],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "processing_errors": {
                    "description": "An array of CSV_file/error_message pairs.",
                    "example": [
                        [
                            "students.csv",
                            "Error while importing CSV. Please contact support."
                        ]
                    ],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "batch_mode": {
                    "description": "Whether the import was run in batch mode.",
                    "example": "true",
                    "type": "boolean"
                },
                "batch_mode_term_id": {
                    "description": "The term the batch was limited to.",
                    "example": "1234",
                    "type": "string"
                },
                "multi_term_batch_mode": {
                    "description": "Enables batch mode against all terms in term file. Requires change_threshold to be set.",
                    "example": "false",
                    "type": "boolean"
                },
                "skip_deletes": {
                    "description": "When set the import will skip any deletes.",
                    "example": "false",
                    "type": "boolean"
                },
                "override_sis_stickiness": {
                    "description": "Whether UI changes were overridden.",
                    "example": "false",
                    "type": "boolean"
                },
                "add_sis_stickiness": {
                    "description": "Whether stickiness was added to the batch changes.",
                    "example": "false",
                    "type": "boolean"
                },
                "clear_sis_stickiness": {
                    "description": "Whether stickiness was cleared.",
                    "example": "false",
                    "type": "boolean"
                },
                "diffing_threshold_exceeded": {
                    "description": "Whether a diffing job failed because the threshold limit got exceeded.",
                    "example": "true",
                    "type": "boolean"
                },
                "diffing_data_set_identifier": {
                    "description": "The identifier of the data set that this SIS batch diffs against",
                    "example": "account-5-enrollments",
                    "type": "string"
                },
                "diffing_remaster": {
                    "description": "Whether diffing remaster data was enabled.",
                    "example": "false",
                    "type": "boolean"
                },
                "diffed_against_import_id": {
                    "description": "The ID of the SIS Import that this import was diffed against",
                    "example": 1,
                    "type": "integer"
                },
                "csv_attachments": {
                    "description": "An array of CSV files for processing",
                    "example": [],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "File"
                        }
                    }
                }
            }
        },
        "SisImportError": {
            "id": "SisImportError",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "sis_import_id": {
                    "description": "The unique identifier for the SIS import.",
                    "example": "1",
                    "type": "integer"
                },
                "file": {
                    "description": "The file where the error message occurred.",
                    "example": "courses.csv",
                    "type": "string"
                },
                "message": {
                    "description": "The error message that from the record.",
                    "example": "No short_name given for course C001",
                    "type": "string"
                },
                "row_info": {
                    "description": "The contents of the line that had the error.",
                    "example": "account_1, Sub account 1,, active ",
                    "type": "string"
                },
                "row": {
                    "description": "The line number where the error occurred. Some Importers do not yet support this. This is a 1 based index starting with the header row.",
                    "example": "34",
                    "type": "integer"
                }
            }
        },
        "SharedBrandConfig": {
            "id": "SharedBrandConfig",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The shared_brand_config identifier.",
                    "example": 987,
                    "type": "integer"
                },
                "account_id": {
                    "description": "The id of the account it should be shared within.",
                    "example": "",
                    "type": "string"
                },
                "brand_config_md5": {
                    "description": "The md5 (since BrandConfigs are identified by MD5 and not numeric id) of the BrandConfig to share.",
                    "example": "1d31002c95842f8fe16da7dfcc0d1f39",
                    "type": "string"
                },
                "name": {
                    "description": "The name to share this theme as",
                    "example": "Crimson and Gold Verson 1",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this was created",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "When this was last updated",
                    "example": "2012-07-13T10:55:20-06:00",
                    "type": "datetime"
                }
            }
        },
        "Section": {
            "id": "Section",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the section.",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the section.",
                    "example": "Section A",
                    "type": "string"
                },
                "sis_section_id": {
                    "description": "The sis id of the section. This field is only included if the user has permission to view SIS information.",
                    "example": "s34643",
                    "type": "string"
                },
                "integration_id": {
                    "description": "Optional: The integration ID of the section. This field is only included if the user has permission to view SIS information.",
                    "example": "3452342345",
                    "type": "string"
                },
                "sis_import_id": {
                    "description": "The unique identifier for the SIS import if created through SIS. This field is only included if the user has permission to manage SIS information.",
                    "example": 47,
                    "type": "integer"
                },
                "course_id": {
                    "description": "The unique Canvas identifier for the course in which the section belongs",
                    "example": 7,
                    "type": "integer"
                },
                "sis_course_id": {
                    "description": "The unique SIS identifier for the course in which the section belongs. This field is only included if the user has permission to view SIS information.",
                    "example": 7,
                    "type": "string"
                },
                "start_at": {
                    "description": "the start date for the section, if applicable",
                    "example": "2012-06-01T00:00:00-06:00",
                    "type": "datetime"
                },
                "end_at": {
                    "description": "the end date for the section, if applicable",
                    "type": "datetime"
                },
                "restrict_enrollments_to_section_dates": {
                    "description": "Restrict user enrollments to the start and end dates of the section",
                    "type": "boolean"
                },
                "nonxlist_course_id": {
                    "description": "The unique identifier of the original course of a cross-listed section",
                    "type": "integer"
                },
                "total_students": {
                    "description": "optional: the total number of active and invited students in the section",
                    "example": 13,
                    "type": "integer"
                }
            }
        },
        "Score": {
            "id": "Score",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "userId": {
                    "description": "The lti_user_id or the Canvas user_id",
                    "example": "50 | 'abcasdf'",
                    "type": "string"
                },
                "scoreGiven": {
                    "description": "The Current score received in the tool for this line item and user, scaled to the scoreMaximum",
                    "example": "50",
                    "type": "number"
                },
                "scoreMaximum": {
                    "description": "Maximum possible score for this result; it must be present if scoreGiven is present.",
                    "example": "50",
                    "type": "number"
                },
                "comment": {
                    "description": "Comment visible to the student about this score.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Date and time when the score was modified in the tool. Should use subsecond precision.",
                    "example": "2017-04-16T18:54:36.736+00:00",
                    "type": "string"
                },
                "activityProgress": {
                    "description": "Indicate to Canvas the status of the user towards the activity's completion. Must be one of Initialized, Started, InProgress, Submitted, Completed",
                    "example": "Completed",
                    "type": "string"
                },
                "gradingProgress": {
                    "description": "Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded",
                    "example": "FullyGraded",
                    "type": "string"
                }
            }
        },
        "Rubric": {
            "id": "Rubric",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the rubric",
                    "example": 1,
                    "type": "integer"
                },
                "title": {
                    "description": "title of the rubric",
                    "example": "some title",
                    "type": "string"
                },
                "context_id": {
                    "description": "the context owning the rubric",
                    "example": 1,
                    "type": "integer"
                },
                "context_type": {
                    "example": "Course",
                    "type": "string"
                },
                "points_possible": {
                    "example": "10.0",
                    "type": "integer"
                },
                "reusable": {
                    "example": "false",
                    "type": "boolean"
                },
                "read_only": {
                    "example": "true",
                    "type": "boolean"
                },
                "free_form_criterion_comments": {
                    "description": "whether or not free-form comments are used",
                    "example": "true",
                    "type": "boolean"
                },
                "hide_score_total": {
                    "example": "true",
                    "type": "boolean"
                },
                "data": {
                    "description": "An array with all of this Rubric's grading Criteria",
                    "type": "array",
                    "items": {
                        "$ref": "RubricCriterion"
                    }
                },
                "assessments": {
                    "description": "If an assessment type is included in the 'include' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.",
                    "type": "array",
                    "items": {
                        "$ref": "RubricAssessment"
                    }
                },
                "associations": {
                    "description": "If an association type is included in the 'include' parameter, includes an array of rubric association objects for a given rubric, based on the association type requested. If the user does not request an association type this key will be absent.",
                    "type": "array",
                    "items": {
                        "$ref": "RubricAssociation"
                    }
                }
            }
        },
        "RubricCriterion": {
            "id": "RubricCriterion",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the criterion",
                    "example": "_10",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "long_description": {
                    "type": "string"
                },
                "points": {
                    "example": "5",
                    "type": "integer"
                },
                "criterion_use_range": {
                    "example": "false",
                    "type": "boolean"
                },
                "ratings": {
                    "description": "the possible ratings for this Criterion",
                    "type": "array",
                    "items": {
                        "$ref": "RubricRating"
                    }
                }
            }
        },
        "RubricRating": {
            "id": "RubricRating",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "example": "name_2",
                    "type": "string"
                },
                "criterion_id": {
                    "example": "_10",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "long_description": {
                    "type": "string"
                },
                "points": {
                    "example": "5",
                    "type": "integer"
                }
            }
        },
        "RubricAssessment": {
            "id": "RubricAssessment",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the rubric",
                    "example": 1,
                    "type": "integer"
                },
                "rubric_id": {
                    "description": "the rubric the assessment belongs to",
                    "example": 1,
                    "type": "integer"
                },
                "rubric_association_id": {
                    "example": "2",
                    "type": "integer"
                },
                "score": {
                    "example": "5.0",
                    "type": "integer"
                },
                "artifact_type": {
                    "description": "the object of the assessment",
                    "example": "Submission",
                    "type": "string"
                },
                "artifact_id": {
                    "description": "the id of the object of the assessment",
                    "example": "3",
                    "type": "integer"
                },
                "artifact_attempt": {
                    "description": "the current number of attempts made on the object of the assessment",
                    "example": "2",
                    "type": "integer"
                },
                "assessment_type": {
                    "description": "the type of assessment. values will be either 'grading', 'peer_review', or 'provisional_grade'",
                    "example": "grading",
                    "type": "string"
                },
                "assessor_id": {
                    "description": "user id of the person who made the assessment",
                    "example": "6",
                    "type": "integer"
                },
                "data": {
                    "description": "(Optional) If 'full' is included in the 'style' parameter, returned assessments will have their full details contained in their data hash. If the user does not request a style, this key will be absent.",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "comments": {
                    "description": "(Optional) If 'comments_only' is included in the 'style' parameter, returned assessments will include only the comments portion of their data hash. If the user does not request a style, this key will be absent.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RubricAssociation": {
            "id": "RubricAssociation",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the association",
                    "example": 1,
                    "type": "integer"
                },
                "rubric_id": {
                    "description": "the ID of the rubric",
                    "example": "1",
                    "type": "integer"
                },
                "association_id": {
                    "description": "the ID of the object this association links to",
                    "example": 1,
                    "type": "integer"
                },
                "association_type": {
                    "description": "the type of object this association links to",
                    "example": "Course",
                    "type": "string"
                },
                "use_for_grading": {
                    "description": "Whether or not the associated rubric is used for grade calculation",
                    "example": "true",
                    "type": "boolean"
                },
                "summary_data": {
                    "example": "",
                    "type": "string"
                },
                "purpose": {
                    "description": "Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context. Values will be grading or bookmark.",
                    "example": "grading",
                    "type": "string"
                },
                "hide_score_total": {
                    "description": "Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.",
                    "example": "true",
                    "type": "boolean"
                },
                "hide_points": {
                    "example": "true",
                    "type": "boolean"
                },
                "hide_outcome_results": {
                    "example": "true",
                    "type": "boolean"
                }
            }
        },
        "RolePermissions": {
            "id": "RolePermissions",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "enabled": {
                    "description": "Whether the role has the permission",
                    "example": true,
                    "type": "boolean"
                },
                "locked": {
                    "description": "Whether the permission is locked by this role",
                    "example": false,
                    "type": "boolean",
                    "default": false
                },
                "applies_to_self": {
                    "description": "Whether the permission applies to the account this role is in. Only present if enabled is true",
                    "example": true,
                    "type": "boolean",
                    "default": true
                },
                "applies_to_descendants": {
                    "description": "Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true",
                    "example": false,
                    "type": "boolean",
                    "default": true
                },
                "readonly": {
                    "description": "Whether the permission can be modified in this role (i.e. whether the permission is locked by an upstream role).",
                    "example": false,
                    "type": "boolean",
                    "default": false
                },
                "explicit": {
                    "description": "Whether the value of enabled is specified explicitly by this role, or inherited from an upstream role.",
                    "example": true,
                    "type": "boolean",
                    "default": false
                },
                "prior_default": {
                    "description": "The value that would have been inherited from upstream if the role had not explicitly set a value. Only present if explicit is true.",
                    "example": false,
                    "type": "boolean"
                }
            }
        },
        "Role": {
            "id": "Role",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "label": {
                    "description": "The label of the role.",
                    "example": "New Role",
                    "type": "string"
                },
                "role": {
                    "description": "The label of the role. (Deprecated alias for 'label')",
                    "example": "New Role",
                    "type": "string"
                },
                "base_role_type": {
                    "description": "The role type that is being used as a base for this role. For account-level roles, this is 'AccountMembership'. For course-level roles, it is an enrollment type.",
                    "example": "AccountMembership",
                    "type": "string"
                },
                "account": {
                    "description": "JSON representation of the account the role is in.",
                    "example": {
                        "id": 1019,
                        "name": "CGNU",
                        "parent_account_id": 73,
                        "root_account_id": 1,
                        "sis_account_id": "cgnu"
                    },
                    "type": "object",
                    "$ref": "Account"
                },
                "workflow_state": {
                    "description": "The state of the role: 'active', 'inactive', or 'built_in'",
                    "example": "active",
                    "type": "string"
                },
                "permissions": {
                    "description": "A dictionary of permissions keyed by name (see permissions input parameter in the 'Create a role' API).",
                    "example": {
                        "read_course_content": {
                            "enabled": true,
                            "locked": false,
                            "readonly": false,
                            "explicit": true,
                            "prior_default": false
                        },
                        "read_course_list": {
                            "enabled": true,
                            "locked": true,
                            "readonly": true,
                            "explicit": false
                        },
                        "read_question_banks": {
                            "enabled": false,
                            "locked": true,
                            "readonly": false,
                            "explicit": true,
                            "prior_default": false
                        },
                        "read_reports": {
                            "enabled": true,
                            "locked": false,
                            "readonly": false,
                            "explicit": false
                        }
                    },
                    "type": "object",
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "$ref": "RolePermissions"
                    }
                }
            }
        },
        "Result": {
            "id": "Result",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The fully qualified URL for showing the Result",
                    "example": "http://institution.canvas.com/api/lti/courses/5/line_items/2/results/1",
                    "type": "string"
                },
                "userId": {
                    "description": "The lti_user_id or the Canvas user_id",
                    "example": "50 | 'abcasdf'",
                    "type": "string"
                },
                "resultScore": {
                    "description": "The score of the result as defined by Canvas, scaled to the resultMaximum",
                    "example": "50",
                    "type": "number"
                },
                "resultMaximum": {
                    "description": "Maximum possible score for this result; 1 is the default value and will be assumed if not specified otherwise. Minimum value of 0 required.",
                    "example": "50",
                    "type": "number"
                },
                "comment": {
                    "description": "Comment visible to the student about the result.",
                    "type": "string"
                },
                "scoreOf": {
                    "description": "URL of the line item this belongs to",
                    "example": "http://institution.canvas.com/api/lti/courses/5/line_items/2",
                    "type": "string"
                }
            }
        },
        "Quiz": {
            "id": "Quiz",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the quiz",
                    "example": 5,
                    "type": "integer"
                },
                "title": {
                    "description": "the title of the quiz",
                    "example": "Hamlet Act 3 Quiz",
                    "type": "string"
                },
                "html_url": {
                    "description": "the HTTP/HTTPS URL to the quiz",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2",
                    "type": "string"
                },
                "mobile_url": {
                    "description": "a url suitable for loading the quiz in a mobile webview.  it will persiste the headless session and, for quizzes in public courses, will force the user to login",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2?persist_healdess=1&force_user=1",
                    "type": "string"
                },
                "preview_url": {
                    "description": "A url that can be visited in the browser with a POST request to preview a quiz as the teacher. Only present when the user may grade",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2/take?preview=1",
                    "type": "string"
                },
                "description": {
                    "description": "the description of the quiz",
                    "example": "This is a quiz on Act 3 of Hamlet",
                    "type": "string"
                },
                "quiz_type": {
                    "description": "type of quiz possible values: 'practice_quiz', 'assignment', 'graded_survey', 'survey'",
                    "example": "assignment",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "practice_quiz",
                            "assignment",
                            "graded_survey",
                            "survey"
                        ]
                    }
                },
                "assignment_group_id": {
                    "description": "the ID of the quiz's assignment group:",
                    "example": 3,
                    "type": "integer"
                },
                "time_limit": {
                    "description": "quiz time limit in minutes",
                    "example": 5,
                    "type": "integer"
                },
                "shuffle_answers": {
                    "description": "shuffle answers for students?",
                    "example": false,
                    "type": "boolean"
                },
                "hide_results": {
                    "description": "let students see their quiz responses? possible values: null, 'always', 'until_after_last_attempt'",
                    "example": "always",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "always",
                            "until_after_last_attempt"
                        ]
                    }
                },
                "show_correct_answers": {
                    "description": "show which answers were correct when results are shown? only valid if hide_results=null",
                    "example": true,
                    "type": "boolean"
                },
                "show_correct_answers_last_attempt": {
                    "description": "restrict the show_correct_answers option above to apply only to the last submitted attempt of a quiz that allows multiple attempts. only valid if show_correct_answers=true and allowed_attempts > 1",
                    "example": true,
                    "type": "boolean"
                },
                "show_correct_answers_at": {
                    "description": "when should the correct answers be visible by students? only valid if show_correct_answers=true",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "hide_correct_answers_at": {
                    "description": "prevent the students from seeing correct answers after the specified date has passed. only valid if show_correct_answers=true",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "one_time_results": {
                    "description": "prevent the students from seeing their results more than once (right after they submit the quiz)",
                    "example": true,
                    "type": "boolean"
                },
                "scoring_policy": {
                    "description": "which quiz score to keep (only if allowed_attempts != 1) possible values: 'keep_highest', 'keep_latest'",
                    "example": "keep_highest",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "keep_highest",
                            "keep_latest"
                        ]
                    }
                },
                "allowed_attempts": {
                    "description": "how many times a student can take the quiz -1 = unlimited attempts",
                    "example": 3,
                    "type": "integer"
                },
                "one_question_at_a_time": {
                    "description": "show one question at a time?",
                    "example": false,
                    "type": "boolean"
                },
                "question_count": {
                    "description": "the number of questions in the quiz",
                    "example": 12,
                    "type": "integer"
                },
                "points_possible": {
                    "description": "The total point value given to the quiz",
                    "example": 20,
                    "type": "integer"
                },
                "cant_go_back": {
                    "description": "lock questions after answering? only valid if one_question_at_a_time=true",
                    "example": false,
                    "type": "boolean"
                },
                "access_code": {
                    "description": "access code to restrict quiz access",
                    "example": "2beornot2be",
                    "type": "string"
                },
                "ip_filter": {
                    "description": "IP address or range that quiz access is limited to",
                    "example": "123.123.123.123",
                    "type": "string"
                },
                "due_at": {
                    "description": "when the quiz is due",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "when to lock the quiz",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "when to unlock the quiz",
                    "example": "2013-01-21T23:59:00-07:00",
                    "type": "datetime"
                },
                "published": {
                    "description": "whether the quiz has a published or unpublished draft state.",
                    "example": true,
                    "type": "boolean"
                },
                "unpublishable": {
                    "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the quiz.",
                    "example": true,
                    "type": "boolean"
                },
                "locked_for_user": {
                    "description": "Whether or not this is locked for the user.",
                    "example": false,
                    "type": "boolean"
                },
                "lock_info": {
                    "description": "(Optional) Information for the user about the lock. Present when locked_for_user is true.",
                    "$ref": "LockInfo"
                },
                "lock_explanation": {
                    "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                    "example": "This quiz is locked until September 1 at 12:00am",
                    "type": "string"
                },
                "speedgrader_url": {
                    "description": "Link to Speed Grader for this quiz. Will not be present if quiz is unpublished",
                    "example": "http://canvas.instructure.com/courses/1/speed_grader?assignment_id=1",
                    "type": "string"
                },
                "quiz_extensions_url": {
                    "description": "Link to endpoint to send extensions for this quiz.",
                    "example": "http://canvas.instructure.com/courses/1/quizzes/2/quiz_extensions",
                    "type": "string"
                },
                "permissions": {
                    "$ref": "QuizPermissions",
                    "description": "Permissions the user has for the quiz"
                },
                "all_dates": {
                    "description": "list of due dates for the quiz",
                    "type": "array",
                    "items": {
                        "$ref": "AssignmentDate"
                    }
                },
                "version_number": {
                    "description": "Current version number of the quiz",
                    "example": 3,
                    "type": "integer"
                },
                "question_types": {
                    "description": "List of question types in the quiz",
                    "example": [
                        "multiple_choice",
                        "essay"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "anonymous_submissions": {
                    "description": "Whether survey submissions will be kept anonymous (only applicable to 'graded_survey', 'survey' quiz types)",
                    "example": false,
                    "type": "boolean"
                }
            }
        },
        "QuizPermissions": {
            "id": "QuizPermissions",
            "description": "Permissions the user has for the quiz",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "read": {
                    "description": "whether the user can view the quiz",
                    "example": true,
                    "type": "boolean"
                },
                "submit": {
                    "description": "whether the user may submit a submission for the quiz",
                    "example": true,
                    "type": "boolean"
                },
                "create": {
                    "description": "whether the user may create a new quiz",
                    "example": true,
                    "type": "boolean"
                },
                "manage": {
                    "description": "whether the user may edit, update, or delete the quiz",
                    "example": true,
                    "type": "boolean"
                },
                "read_statistics": {
                    "description": "whether the user may view quiz statistics for this quiz",
                    "example": true,
                    "type": "boolean"
                },
                "review_grades": {
                    "description": "whether the user may review grades for all quiz submissions for this quiz",
                    "example": true,
                    "type": "boolean"
                },
                "update": {
                    "description": "whether the user may update the quiz",
                    "example": true,
                    "type": "boolean"
                }
            }
        },
        "QuizSubmission": {
            "id": "QuizSubmission",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the quiz submission.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the quiz submission belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "description": "The ID of the Student that made the quiz submission.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "submission_id": {
                    "description": "The ID of the Submission the quiz submission represents.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "started_at": {
                    "description": "The time at which the student started the quiz submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "finished_at": {
                    "description": "The time at which the student submitted the quiz submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "end_at": {
                    "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                },
                "attempt": {
                    "description": "For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_attempts": {
                    "description": "Number of times the student was allowed to re-take the quiz over the multiple-attempt limit.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_time": {
                    "description": "Amount of extra time allowed for the quiz submission, in minutes.",
                    "example": 60,
                    "type": "integer",
                    "format": "int64"
                },
                "manually_unlocked": {
                    "description": "The student can take the quiz even if it's locked for everyone else",
                    "example": true,
                    "type": "boolean"
                },
                "time_spent": {
                    "description": "Amount of time spent, in seconds.",
                    "example": 300,
                    "type": "integer",
                    "format": "int64"
                },
                "score": {
                    "description": "The score of the quiz submission, if graded.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "score_before_regrade": {
                    "description": "The original score of the quiz submission prior to any re-grading.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "kept_score": {
                    "description": "For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission.",
                    "example": 5,
                    "type": "integer",
                    "format": "int64"
                },
                "fudge_points": {
                    "description": "Number of points the quiz submission's score was fudged by.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "has_seen_results": {
                    "description": "Whether the student has viewed their results to the quiz.",
                    "example": true,
                    "type": "boolean"
                },
                "workflow_state": {
                    "description": "The current state of the quiz submission. Possible values: ['untaken'|'pending_review'|'complete'|'settings_only'|'preview'].",
                    "example": "untaken",
                    "type": "string"
                },
                "overdue_and_needs_submission": {
                    "description": "Indicates whether the quiz submission is overdue and needs submission",
                    "example": "false",
                    "type": "boolean"
                }
            }
        },
        "QuizSubmissionQuestion": {
            "id": "QuizSubmissionQuestion",
            "description": "",
            "required": [
                "id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the QuizQuestion this answer is for.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "flagged": {
                    "description": "Whether this question is flagged.",
                    "example": true,
                    "type": "boolean"
                },
                "answer": {
                    "description": "The provided answer (if any) for this question. The format of this parameter depends on the type of the question, see the Appendix for more information.",
                    "type": "string"
                },
                "answers": {
                    "description": "The possible answers for this question when those possible answers are necessary.  The presence of this parameter is dependent on permissions.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QuizSubmissionEvent": {
            "id": "QuizSubmissionEvent",
            "description": "An event passed from the Quiz Submission take page",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "created_at": {
                    "description": "a timestamp record of creation time",
                    "example": "2014-10-08T19:29:58Z",
                    "type": "datetime"
                },
                "event_type": {
                    "description": "the type of event being sent",
                    "example": "question_answered",
                    "type": "string"
                },
                "event_data": {
                    "description": "custom contextual data for the specific event type",
                    "example": {
                        "answer": "42"
                    },
                    "type": "object"
                }
            }
        },
        "QuizStatistics": {
            "id": "QuizStatistics",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the quiz statistics report.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the statistics report is for. \nNOTE: AVAILABLE ONLY IN NON-JSON-API REQUESTS.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "multiple_attempts_exist": {
                    "description": "Whether there are any students that have made mutliple submissions for this quiz.",
                    "example": true,
                    "type": "boolean"
                },
                "includes_all_versions": {
                    "description": "In the presence of multiple attempts, this field describes whether the statistics describe all the submission attempts and not only the latest ones.",
                    "example": true,
                    "type": "boolean"
                },
                "generated_at": {
                    "description": "The time at which the statistics were generated, which is usually after the occurrence of a quiz event, like a student submitting it.",
                    "example": "2013-01-23T23:59:00-07:00",
                    "type": "datetime"
                },
                "url": {
                    "description": "The API HTTP/HTTPS URL to this quiz statistics.",
                    "example": "http://canvas.example.edu/api/v1/courses/1/quizzes/2/statistics",
                    "type": "string"
                },
                "html_url": {
                    "description": "The HTTP/HTTPS URL to the page where the statistics can be seen visually.",
                    "example": "http://canvas.example.edu/courses/1/quizzes/2/statistics",
                    "type": "string"
                },
                "question_statistics": {
                    "$ref": "QuizStatisticsQuestionStatistics",
                    "description": "Question-specific statistics for each question and its answers."
                },
                "submission_statistics": {
                    "$ref": "QuizStatisticsSubmissionStatistics",
                    "description": "Question-specific statistics for each question and its answers."
                },
                "links": {
                    "$ref": "QuizStatisticsLinks",
                    "description": "JSON-API construct that contains links to media related to this quiz statistics object. \nNOTE: AVAILABLE ONLY IN JSON-API REQUESTS."
                }
            }
        },
        "QuizStatisticsLinks": {
            "id": "QuizStatisticsLinks",
            "description": "Links to media related to QuizStatistics.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz": {
                    "description": "HTTP/HTTPS API URL to the quiz this statistics describe.",
                    "type": "string",
                    "example": "http://canvas.example.edu/api/v1/courses/1/quizzes/2"
                }
            }
        },
        "QuizStatisticsQuestionStatistics": {
            "id": "QuizStatisticsQuestionStatistics",
            "description": "Statistics for submissions made to a specific quiz question.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "responses": {
                    "description": "Number of students who have provided an answer to this question. Blank or empty responses are not counted.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "answers": {
                    "$ref": "QuizStatisticsAnswerStatistics",
                    "description": "Statistics related to each individual pre-defined answer."
                }
            }
        },
        "QuizStatisticsAnswerStatistics": {
            "id": "QuizStatisticsAnswerStatistics",
            "description": "Statistics for a specific pre-defined answer in a Multiple-Choice or True/False quiz question.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "ID of the answer.",
                    "example": 3866,
                    "type": "integer",
                    "format": "int64"
                },
                "text": {
                    "description": "The text attached to the answer.",
                    "example": "Blue.",
                    "type": "string"
                },
                "weight": {
                    "description": "An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should 100",
                    "example": 100,
                    "type": "integer",
                    "format": "int64"
                },
                "responses": {
                    "description": "Number of students who have chosen this answer.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "QuizStatisticsAnswerPointBiserial": {
            "id": "QuizStatisticsAnswerPointBiserial",
            "description": "A point-biserial construct for a single pre-defined answer in a Multiple-Choice or True/False question.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "answer_id": {
                    "description": "ID of the answer the point biserial is for.",
                    "example": 3866,
                    "type": "integer",
                    "format": "int64"
                },
                "point_biserial": {
                    "description": "The point biserial value for this answer. Value ranges between -1 and 1.",
                    "example": -0.802955068546966,
                    "type": "number"
                },
                "correct": {
                    "description": "Convenience attribute that denotes whether this is the correct answer as opposed to being a distractor. This is mutually exclusive with the `distractor` value",
                    "type": "boolean",
                    "example": true
                },
                "distractor": {
                    "description": "Convenience attribute that denotes whether this is a distractor answer and not the correct one. This is mutually exclusive with the `correct` value",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "QuizStatisticsSubmissionStatistics": {
            "id": "QuizStatisticsSubmissionStatistics",
            "description": "Generic statistics for all submissions for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "unique_count": {
                    "description": "The number of students who have taken the quiz.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "score_average": {
                    "description": "The mean of the student submission scores.",
                    "example": 4.33333333333333,
                    "type": "number"
                },
                "score_high": {
                    "description": "The highest submission score.",
                    "example": 6,
                    "type": "number"
                },
                "score_low": {
                    "description": "The lowest submission score.",
                    "example": 3,
                    "type": "number"
                },
                "score_stdev": {
                    "description": "Standard deviation of the submission scores.",
                    "example": 1.24721912892465,
                    "type": "number"
                },
                "scores": {
                    "description": "A percentile distribution of the student scores, each key is the percentile (ranges between 0 and 100%) while the value is the number of students who received that score.",
                    "example": {
                        "34": 5,
                        "50": 1,
                        "100": 1
                    },
                    "type": "object"
                },
                "correct_count_average": {
                    "description": "The mean of the number of questions answered correctly by each student.",
                    "example": 3.66666666666667,
                    "type": "number"
                },
                "incorrect_count_average": {
                    "description": "The mean of the number of questions answered incorrectly by each student.",
                    "example": 5,
                    "type": "number"
                },
                "duration_average": {
                    "description": "The average time spent by students while taking the quiz.",
                    "example": 42.333333333,
                    "type": "number"
                }
            }
        },
        "QuizReport": {
            "id": "QuizReport",
            "description": "",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "the ID of the quiz report",
                    "example": 5,
                    "type": "integer"
                },
                "quiz_id": {
                    "description": "the ID of the quiz",
                    "example": 4,
                    "type": "integer"
                },
                "report_type": {
                    "description": "which type of report this is possible values: 'student_analysis', 'item_analysis'",
                    "example": "student_analysis",
                    "type": "string",
                    "allowableValues": {
                        "values": [
                            "student_analysis",
                            "item_analysis"
                        ]
                    }
                },
                "readable_type": {
                    "description": "a human-readable (and localized) version of the report_type",
                    "example": "Student Analysis",
                    "type": "string"
                },
                "includes_all_versions": {
                    "description": "boolean indicating whether the report represents all submissions or only the most recent ones for each student",
                    "example": true,
                    "type": "boolean"
                },
                "anonymous": {
                    "description": "boolean indicating whether the report is for an anonymous survey. if true, no student names will be included in the csv",
                    "example": false,
                    "type": "boolean"
                },
                "generatable": {
                    "description": "boolean indicating whether the report can be generated, which is true unless the quiz is a survey one",
                    "example": true,
                    "type": "boolean"
                },
                "created_at": {
                    "description": "when the report was created",
                    "example": "2013-05-01T12:34:56-07:00",
                    "type": "datetime"
                },
                "updated_at": {
                    "description": "when the report was last updated",
                    "example": "2013-05-01T12:34:56-07:00",
                    "type": "datetime"
                },
                "url": {
                    "description": "the API endpoint for this report",
                    "example": "http://canvas.example.com/api/v1/courses/1/quizzes/1/reports/1",
                    "type": "string"
                },
                "file": {
                    "description": "if the report has finished generating, a File object that represents it. refer to the Files API for more information about the format",
                    "$ref": "File"
                },
                "progress_url": {
                    "description": "if the report has not yet finished generating, a URL where information about its progress can be retrieved. refer to the Progress API for more information (Note: not available in JSON-API format)",
                    "type": "string"
                },
                "progress": {
                    "description": "if the report is being generated, a Progress object that represents the operation. Refer to the Progress API for more information about the format. (Note: available only in JSON-API format)",
                    "$ref": "Progress"
                }
            }
        },
        "QuizQuestion": {
            "id": "QuizQuestion",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the quiz question.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the question belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "position": {
                    "description": "The order in which the question will be retrieved and displayed.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "question_name": {
                    "description": "The name of the question.",
                    "example": "Prime Number Identification",
                    "type": "string"
                },
                "question_type": {
                    "description": "The type of the question.",
                    "example": "multiple_choice_question",
                    "type": "string"
                },
                "question_text": {
                    "description": "The text of the question.",
                    "example": "Which of the following is NOT a prime number?",
                    "type": "string"
                },
                "points_possible": {
                    "description": "The maximum amount of points possible received for getting this question correct.",
                    "example": 5,
                    "type": "integer",
                    "format": "int64"
                },
                "correct_comments": {
                    "description": "The comments to display if the student answers the question correctly.",
                    "example": "That's correct!",
                    "type": "string"
                },
                "incorrect_comments": {
                    "description": "The comments to display if the student answers incorrectly.",
                    "example": "Unfortunately, that IS a prime number.",
                    "type": "string"
                },
                "neutral_comments": {
                    "description": "The comments to display regardless of how the student answered.",
                    "example": "Goldbach's conjecture proposes that every even integer greater than 2 can be expressed as the sum of two prime numbers.",
                    "type": "string"
                },
                "answers": {
                    "description": "An array of available answers to display to the student.",
                    "type": "array",
                    "items": {
                        "$ref": "Answer"
                    }
                }
            }
        },
        "Answer": {
            "id": "Answer",
            "description": "",
            "required": [
                "answer_text",
                "answer_weight"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The unique identifier for the answer.  Do not supply if this answer is part of a new question",
                    "example": 6656,
                    "type": "integer",
                    "format": "int64"
                },
                "answer_text": {
                    "description": "The text of the answer.",
                    "example": "Constantinople",
                    "type": "string"
                },
                "answer_weight": {
                    "description": "An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be 100.",
                    "example": 100,
                    "type": "integer",
                    "format": "int64"
                },
                "answer_comments": {
                    "description": "Specific contextual comments for a particular answer.",
                    "example": "Remember to check your spelling prior to submitting this answer.",
                    "type": "string"
                },
                "text_after_answers": {
                    "description": "Used in missing word questions.  The text to follow the missing word",
                    "example": " is the capital of Utah.",
                    "type": "string"
                },
                "answer_match_left": {
                    "description": "Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.",
                    "example": "Salt Lake City",
                    "type": "string"
                },
                "answer_match_right": {
                    "description": "Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..",
                    "example": "Utah",
                    "type": "string"
                },
                "matching_answer_incorrect_matches": {
                    "description": "Used in matching questions. A list of distractors, delimited by new lines (\n) that will be seeded with all the answer_match_right values.",
                    "example": "Nevada\nCalifornia\nWashington",
                    "type": "string"
                },
                "numerical_answer_type": {
                    "description": "Used in numerical questions.  Values can be 'exact_answer', 'range_answer', or 'precision_answer'.",
                    "example": "exact_answer",
                    "type": "string"
                },
                "exact": {
                    "description": "Used in numerical questions of type 'exact_answer'.  The value the answer should equal.",
                    "example": 42,
                    "type": "integer",
                    "format": "int64"
                },
                "margin": {
                    "description": "Used in numerical questions of type 'exact_answer'. The margin of error allowed for the student's answer.",
                    "example": 4,
                    "type": "integer",
                    "format": "int64"
                },
                "approximate": {
                    "description": "Used in numerical questions of type 'precision_answer'.  The value the answer should equal.",
                    "example": 1234600000,
                    "type": "number",
                    "format": "float64"
                },
                "precision": {
                    "description": "Used in numerical questions of type 'precision_answer'. The numerical precision that will be used when comparing the student's answer.",
                    "example": 4,
                    "type": "integer",
                    "format": "int64"
                },
                "start": {
                    "description": "Used in numerical questions of type 'range_answer'. The start of the allowed range (inclusive).",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "end": {
                    "description": "Used in numerical questions of type 'range_answer'. The end of the allowed range (inclusive).",
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                },
                "blank_id": {
                    "description": "Used in fill in multiple blank and multiple dropdowns questions.",
                    "example": 1170,
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "QuizGroup": {
            "id": "QuizGroup",
            "description": "",
            "required": [
                "id",
                "quiz_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "description": "The ID of the question group.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "quiz_id": {
                    "description": "The ID of the Quiz the question group belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "description": "The name of the question group.",
                    "example": "Fraction questions",
                    "type": "string"
                },
                "pick_count": {
                    "description": "The number of questions to pick from the group to display to the student.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "question_points": {
                    "description": "The amount of points allotted to each question in the group.",
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                },
                "assessment_question_bank_id": {
                    "description": "The ID of the Assessment question bank to pull questions from.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "position": {
                    "description": "The order in which the question group will be retrieved and displayed.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "QuizIPFilter": {
            "id": "QuizIPFilter",
            "description": "",
            "required": [
                "name",
                "account",
                "filter"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "name": {
                    "description": "A unique name for the filter.",
                    "example": "Current Filter",
                    "type": "string"
                },
                "account": {
                    "description": "Name of the Account (or Quiz) the IP filter is defined in.",
                    "example": "Some Quiz",
                    "type": "string"
                },
                "filter": {
                    "description": "An IP address (or range mask) this filter embodies.",
                    "example": "192.168.1.1/24",
                    "type": "string"
                }
            }
        },
        "QuizExtension": {
            "id": "QuizExtension",
            "description": "",
            "required": [
                "quiz_id",
                "user_id"
            ],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz_id": {
                    "description": "The ID of the Quiz the quiz extension belongs to.",
                    "example": 2,
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "description": "The ID of the Student that needs the quiz extension.",
                    "example": 3,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_attempts": {
                    "description": "Number of times the student is allowed to re-take the quiz over the multiple-attempt limit.",
                    "example": 1,
                    "type": "integer",
                    "format": "int64"
                },
                "extra_time": {
                    "description": "Amount of extra time allowed for the quiz submission, in minutes.",
                    "example": 60,
                    "type": "integer",
                    "format": "int64"
                },
                "manually_unlocked": {
                    "description": "The student can take the quiz even if it's locked for everyone else",
                    "example": true,
                    "type": "boolean"
                },
                "end_at": {
                    "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission.",
                    "example": "2013-11-07T13:16:18Z",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "QuizAssignmentOverrideSet": {
            "id": "QuizAssignmentOverrideSet",
            "description": "Set of assignment-overridden dates for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz_id": {
                    "description": "ID of the quiz those dates are for.",
                    "example": "1",
                    "type": "string"
                },
                "due_dates": {
                    "description": "An array of quiz assignment overrides. For students, this array will always contain a single item which is the set of dates that apply to that student. For teachers and staff, it may contain more.",
                    "$ref": "QuizAssignmentOverride"
                },
                "all_dates": {
                    "description": "An array of all assignment overrides active for the quiz. This is visible only to teachers and staff.",
                    "$ref": "QuizAssignmentOverride"
                }
            }
        },
        "QuizAssignmentOverrideSetContainer": {
            "id": "QuizAssignmentOverrideSetContainer",
            "description": "Container for set of assignment-overridden dates for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "quiz_assignment_overrides": {
                    "description": "The QuizAssignmentOverrideSet",
                    "type": "array",
                    "items": {
                        "$ref": "QuizAssignmentOverrideSet"
                    }
                }
            }
        },
        "QuizAssignmentOverride": {
            "id": "QuizAssignmentOverride",
            "description": "Set of assignment-overridden dates for a quiz.",
            "required": [],
            "deprecated": false,
            "deprecation_description": null,
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1,
                    "description": "ID of the assignment override, unless this is the base construct, in which case the 'id' field is omitted."
                },
                "due_at": {
                    "description": "The date after which any quiz submission is considered late.",
                    "example": "2014-02-21T06:59:59Z",
                    "type": "datetime"
                },
                "unlock_at": {
                    "description": "Date when the quiz becomes available for taking.",
                    "example": null,
                    "type": "datetime"
                },
                "lock_at": {
                    "description": "When the quiz will stop being available for taking. A value of null means it can always be taken.",
                    "example": "2014-02-21T06:59:59Z",
                    "type": "datetime"
                },
                "title": {
                    "description": "Title of the section this assignment override is for, if any.",
                    "example": "Project X",
                    "type": "string"
                },
                "base": {
                    "description": "If this property is present, it means that dates in this structure are not based on an assignment override, but are instead for all students.",
                    "example": true,
                    "type": "boolean"
                }
            }
        }
    }
}